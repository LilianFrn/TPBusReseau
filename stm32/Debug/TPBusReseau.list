
TPBusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800b698  0800b698  0001b698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcf8  0800bcf8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcf8  0800bcf8  0001bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd00  0800bd00  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd00  0800bd00  0001bd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd04  0800bd04  0001bd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e0  0800bee8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800bee8  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f54e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d1  00000000  00000000  0002f75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00031b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000327a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f3b  00000000  00000000  00033350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001047b  00000000  00000000  0005628b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf73c  00000000  00000000  00066706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135e42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d04  00000000  00000000  00135e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b67c 	.word	0x0800b67c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b67c 	.word	0x0800b67c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <bmp280_compensate_T_int32>:
static signed short dig_P9;

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	10da      	asrs	r2, r3, #3
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <bmp280_compensate_T_int32+0x74>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <bmp280_compensate_T_int32+0x78>)
 800106e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	12db      	asrs	r3, r3, #11
 8001078:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) -((int32_t)dig_T1)) * ((adc_T>>4) - \
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	111b      	asrs	r3, r3, #4
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <bmp280_compensate_T_int32+0x74>)
 8001080:	8812      	ldrh	r2, [r2, #0]
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	1112      	asrs	r2, r2, #4
			((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8001088:	4910      	ldr	r1, [pc, #64]	; (80010cc <bmp280_compensate_T_int32+0x74>)
 800108a:	8809      	ldrh	r1, [r1, #0]
	var2 = (((((adc_T>>4) -((int32_t)dig_T1)) * ((adc_T>>4) - \
 800108c:	1a52      	subs	r2, r2, r1
 800108e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8001092:	131b      	asrs	r3, r3, #12
 8001094:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <bmp280_compensate_T_int32+0x7c>)
 8001096:	f9b2 2000 	ldrsh.w	r2, [r2]
 800109a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T>>4) -((int32_t)dig_T1)) * ((adc_T>>4) - \
 800109e:	139b      	asrs	r3, r3, #14
 80010a0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <bmp280_compensate_T_int32+0x80>)
 80010aa:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <bmp280_compensate_T_int32+0x80>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3380      	adds	r3, #128	; 0x80
 80010b8:	121b      	asrs	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
	return T;
 80010bc:	68fb      	ldr	r3, [r7, #12]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000204 	.word	0x20000204
 80010d0:	20000206 	.word	0x20000206
 80010d4:	20000208 	.word	0x20000208
 80010d8:	200001fc 	.word	0x200001fc

080010dc <capt_ping>:
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
	return ((uint32_t)p/256);
}

// Check if peripheral is online and working
void capt_ping(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
	uint8_t id_get_snd = BMP280_ID_REG;
 80010e2:	23d0      	movs	r3, #208	; 0xd0
 80010e4:	71fb      	strb	r3, [r7, #7]
	uint8_t id_get_rcv = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_SLV_ADD, &id_get_snd, BMP280_ID_SND_SIZE, HAL_MAX_DELAY);
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	21ee      	movs	r1, #238	; 0xee
 80010f6:	480f      	ldr	r0, [pc, #60]	; (8001134 <capt_ping+0x58>)
 80010f8:	f001 fe9a 	bl	8002e30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_SLV_ADD, &id_get_rcv, BMP280_ID_RCV_SIZE, HAL_MAX_DELAY);
 80010fc:	1dba      	adds	r2, r7, #6
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	21ee      	movs	r1, #238	; 0xee
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <capt_ping+0x58>)
 800110a:	f001 ff8f 	bl	800302c <HAL_I2C_Master_Receive>
	if (id_get_rcv == BMP280_ID_EXP){
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	2b58      	cmp	r3, #88	; 0x58
 8001112:	d105      	bne.n	8001120 <capt_ping+0x44>
	  printf("Slave ID is 0x%x : Correct\r\n", id_get_rcv);
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	4619      	mov	r1, r3
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <capt_ping+0x5c>)
 800111a:	f005 fd0f 	bl	8006b3c <iprintf>
	}
	else {
	  printf("ERROR : Slave ID is 0x%x : Incorrect\r\n", id_get_rcv);
	}
}
 800111e:	e004      	b.n	800112a <capt_ping+0x4e>
	  printf("ERROR : Slave ID is 0x%x : Incorrect\r\n", id_get_rcv);
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <capt_ping+0x60>)
 8001126:	f005 fd09 	bl	8006b3c <iprintf>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000244 	.word	0x20000244
 8001138:	0800b698 	.word	0x0800b698
 800113c:	0800b6b8 	.word	0x0800b6b8

08001140 <capt_param>:

// Sets configuration for the peripheral and gets its calibration data
// Sets the calibration data to the needed factors for Temp and Pres conversion
// This function HAS to be called at launch
void capt_param(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af04      	add	r7, sp, #16
	uint8_t conf_set_snd[2] = {BMP280_CONF_REG, BMP280_CONF_SET};
 8001146:	f245 73f4 	movw	r3, #22516	; 0x57f4
 800114a:	83bb      	strh	r3, [r7, #28]
	uint8_t conf_set_rcv = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	76fb      	strb	r3, [r7, #27]
	uint8_t etal_rcv[26];

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_SLV_ADD, conf_set_snd, BMP280_CONF_SND_SIZE, HAL_MAX_DELAY);
 8001150:	f107 021c 	add.w	r2, r7, #28
 8001154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2302      	movs	r3, #2
 800115c:	21ee      	movs	r1, #238	; 0xee
 800115e:	4855      	ldr	r0, [pc, #340]	; (80012b4 <capt_param+0x174>)
 8001160:	f001 fe66 	bl	8002e30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_SLV_ADD, &conf_set_rcv, BMP280_CONF_RCV_SIZE, HAL_MAX_DELAY);
 8001164:	f107 021b 	add.w	r2, r7, #27
 8001168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	21ee      	movs	r1, #238	; 0xee
 8001172:	4850      	ldr	r0, [pc, #320]	; (80012b4 <capt_param+0x174>)
 8001174:	f001 ff5a 	bl	800302c <HAL_I2C_Master_Receive>
	if (conf_set_rcv == BMP280_CONF_SET){
 8001178:	7efb      	ldrb	r3, [r7, #27]
 800117a:	2b57      	cmp	r3, #87	; 0x57
 800117c:	d103      	bne.n	8001186 <capt_param+0x46>
	  printf("Slave configuration set to desired parameters\r\n");
 800117e:	484e      	ldr	r0, [pc, #312]	; (80012b8 <capt_param+0x178>)
 8001180:	f005 fd62 	bl	8006c48 <puts>
 8001184:	e002      	b.n	800118c <capt_param+0x4c>
	}
	else {
	  printf("ERROR : Slave configuration failed\r\n");
 8001186:	484d      	ldr	r0, [pc, #308]	; (80012bc <capt_param+0x17c>)
 8001188:	f005 fd5e 	bl	8006c48 <puts>
	}
	HAL_I2C_Mem_Read(&hi2c1, BMP280_SLV_ADD, BMP280_ETAL_REG, 1,
 800118c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	231a      	movs	r3, #26
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	463b      	mov	r3, r7
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	2288      	movs	r2, #136	; 0x88
 800119e:	21ee      	movs	r1, #238	; 0xee
 80011a0:	4844      	ldr	r0, [pc, #272]	; (80012b4 <capt_param+0x174>)
 80011a2:	f002 f969 	bl	8003478 <HAL_I2C_Mem_Read>
			etal_rcv, BMP280_ETAL_RCV_SIZE, HAL_MAX_DELAY);

	dig_T1 = (etal_rcv[1]<<8) + etal_rcv[0];
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	783b      	ldrb	r3, [r7, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <capt_param+0x180>)
 80011b8:	801a      	strh	r2, [r3, #0]
	dig_T2 = (etal_rcv[3]<<8) + etal_rcv[2];
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	78bb      	ldrb	r3, [r7, #2]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <capt_param+0x184>)
 80011ce:	801a      	strh	r2, [r3, #0]
	dig_T3 = (etal_rcv[5]<<8) + etal_rcv[4];
 80011d0:	797b      	ldrb	r3, [r7, #5]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	793b      	ldrb	r3, [r7, #4]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <capt_param+0x188>)
 80011e4:	801a      	strh	r2, [r3, #0]
	dig_P1 = (etal_rcv[7]<<8) + etal_rcv[6];
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <capt_param+0x18c>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_P2 = (etal_rcv[9]<<8) + etal_rcv[8];
 80011fa:	7a7b      	ldrb	r3, [r7, #9]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b29a      	uxth	r2, r3
 8001202:	7a3b      	ldrb	r3, [r7, #8]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <capt_param+0x190>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (etal_rcv[11]<<8) + etal_rcv[10];
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b29a      	uxth	r2, r3
 8001218:	7abb      	ldrb	r3, [r7, #10]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <capt_param+0x194>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_P4 = (etal_rcv[13]<<8) + etal_rcv[12];
 8001226:	7b7b      	ldrb	r3, [r7, #13]
 8001228:	b29b      	uxth	r3, r3
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b29a      	uxth	r2, r3
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4413      	add	r3, r2
 8001234:	b29b      	uxth	r3, r3
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <capt_param+0x198>)
 800123a:	801a      	strh	r2, [r3, #0]
	dig_P5 = (etal_rcv[15]<<8) + etal_rcv[14];
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	b29b      	uxth	r3, r3
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b29a      	uxth	r2, r3
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <capt_param+0x19c>)
 8001250:	801a      	strh	r2, [r3, #0]
	dig_P6 = (etal_rcv[16]<<8) + etal_rcv[16];
 8001252:	7c3b      	ldrb	r3, [r7, #16]
 8001254:	b29b      	uxth	r3, r3
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b29a      	uxth	r2, r3
 800125a:	7c3b      	ldrb	r3, [r7, #16]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <capt_param+0x1a0>)
 8001266:	801a      	strh	r2, [r3, #0]
	dig_P7 = (etal_rcv[19]<<8) + etal_rcv[18];
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	b29b      	uxth	r3, r3
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b29a      	uxth	r2, r3
 8001270:	7cbb      	ldrb	r3, [r7, #18]
 8001272:	b29b      	uxth	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	b21a      	sxth	r2, r3
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <capt_param+0x1a4>)
 800127c:	801a      	strh	r2, [r3, #0]
	dig_P8 = (etal_rcv[21]<<8) + etal_rcv[20];
 800127e:	7d7b      	ldrb	r3, [r7, #21]
 8001280:	b29b      	uxth	r3, r3
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b29a      	uxth	r2, r3
 8001286:	7d3b      	ldrb	r3, [r7, #20]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <capt_param+0x1a8>)
 8001292:	801a      	strh	r2, [r3, #0]
	dig_P9 = (etal_rcv[23]<<8) + etal_rcv[22];
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	b29b      	uxth	r3, r3
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b29a      	uxth	r2, r3
 800129c:	7dbb      	ldrb	r3, [r7, #22]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <capt_param+0x1ac>)
 80012a8:	801a      	strh	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000244 	.word	0x20000244
 80012b8:	0800b6e0 	.word	0x0800b6e0
 80012bc:	0800b710 	.word	0x0800b710
 80012c0:	20000204 	.word	0x20000204
 80012c4:	20000206 	.word	0x20000206
 80012c8:	20000208 	.word	0x20000208
 80012cc:	2000020a 	.word	0x2000020a
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	2000020e 	.word	0x2000020e
 80012d8:	20000210 	.word	0x20000210
 80012dc:	20000212 	.word	0x20000212
 80012e0:	20000214 	.word	0x20000214
 80012e4:	20000216 	.word	0x20000216
 80012e8:	20000218 	.word	0x20000218
 80012ec:	2000021a 	.word	0x2000021a

080012f0 <capt_temp>:

// API to get temperature, always has to be called at least once before any pres call
float capt_temp(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af04      	add	r7, sp, #16
	float temp_comp;
	uint8_t temp_hex[3];
	int32_t temp;

	HAL_I2C_Mem_Read(&hi2c1, BMP280_SLV_ADD, BMP280_TEMP_REG, 1,
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2303      	movs	r3, #3
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	22fa      	movs	r2, #250	; 0xfa
 8001308:	21ee      	movs	r1, #238	; 0xee
 800130a:	4816      	ldr	r0, [pc, #88]	; (8001364 <capt_temp+0x74>)
 800130c:	f002 f8b4 	bl	8003478 <HAL_I2C_Mem_Read>
		  temp_hex, BMP280_TEMP_RCV_SIZE, HAL_MAX_DELAY),
	temp = (temp_hex[0]<<12) + (temp_hex[1]<<4) + (temp_hex[0]>>4);
 8001310:	793b      	ldrb	r3, [r7, #4]
 8001312:	031a      	lsls	r2, r3, #12
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	793a      	ldrb	r2, [r7, #4]
 800131c:	0912      	lsrs	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	4413      	add	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
	temp_comp = (float)bmp280_compensate_T_int32(temp)/100;
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff fe97 	bl	8001058 <bmp280_compensate_T_int32>
 800132a:	ee07 0a90 	vmov	s15, r0
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001368 <capt_temp+0x78>
 8001336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133a:	edc7 7a02 	vstr	s15, [r7, #8]
	printf("%f°C\r\n", temp_comp);
 800133e:	68b8      	ldr	r0, [r7, #8]
 8001340:	f7ff f932 	bl	80005a8 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4808      	ldr	r0, [pc, #32]	; (800136c <capt_temp+0x7c>)
 800134a:	f005 fbf7 	bl	8006b3c <iprintf>
	temp_flag = 1;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <capt_temp+0x80>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]
	return(temp_comp);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	ee07 3a90 	vmov	s15, r3
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000244 	.word	0x20000244
 8001368:	42c80000 	.word	0x42c80000
 800136c:	0800b734 	.word	0x0800b734
 8001370:	20000200 	.word	0x20000200
 8001374:	00000000 	.word	0x00000000

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b092      	sub	sp, #72	; 0x48
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int ret = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
	int size = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
	char sprintf_buff[32];

	float K = 0;
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	647b      	str	r3, [r7, #68]	; 0x44

	float temp = 0;
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	643b      	str	r3, [r7, #64]	; 0x40
	float pres = 0;
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t angle = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f000 fe25 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 f991 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f000 fab7 	bl	8001918 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013aa:	f000 fa8b 	bl	80018c4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80013ae:	f000 f9f9 	bl	80017a4 <MX_CAN1_Init>
  MX_I2C1_Init();
 80013b2:	f000 fa2f 	bl	8001814 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013b6:	f000 fa5b 	bl	8001870 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80013ba:	48ad      	ldr	r0, [pc, #692]	; (8001670 <main+0x2f8>)
 80013bc:	f000 ff83 	bl	80022c6 <HAL_CAN_Start>

  capt_ping();
 80013c0:	f7ff fe8c 	bl	80010dc <capt_ping>
  capt_param();
 80013c4:	f7ff febc 	bl	8001140 <capt_param>

  mot_reset(&hcan1);
 80013c8:	48a9      	ldr	r0, [pc, #676]	; (8001670 <main+0x2f8>)
 80013ca:	f000 fb3b 	bl	8001a44 <mot_reset>

  HAL_UART_Receive_IT(&huart1, &uart1_buff, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	49a8      	ldr	r1, [pc, #672]	; (8001674 <main+0x2fc>)
 80013d2:	48a9      	ldr	r0, [pc, #676]	; (8001678 <main+0x300>)
 80013d4:	f003 fd53 	bl	8004e7e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uart1_flag == 1)
 80013d8:	4ba8      	ldr	r3, [pc, #672]	; (800167c <main+0x304>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f040 8102 	bne.w	80015e6 <main+0x26e>
	  {
		  if (uart1_buff == 0x0D)
 80013e2:	4ba4      	ldr	r3, [pc, #656]	; (8001674 <main+0x2fc>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b0d      	cmp	r3, #13
 80013e8:	f040 80fa 	bne.w	80015e0 <main+0x268>
		  {
			  uart1_word[uart1_index-1] = 0;
 80013ec:	4ba4      	ldr	r3, [pc, #656]	; (8001680 <main+0x308>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4aa4      	ldr	r2, [pc, #656]	; (8001684 <main+0x30c>)
 80013f4:	2100      	movs	r1, #0
 80013f6:	54d1      	strb	r1, [r2, r3]
			  printf("%s\r\n", uart1_word);
 80013f8:	49a2      	ldr	r1, [pc, #648]	; (8001684 <main+0x30c>)
 80013fa:	48a3      	ldr	r0, [pc, #652]	; (8001688 <main+0x310>)
 80013fc:	f005 fb9e 	bl	8006b3c <iprintf>

			  // Get temp
			  if (strcmp(uart1_word, "GET_T") == 0) {
 8001400:	49a2      	ldr	r1, [pc, #648]	; (800168c <main+0x314>)
 8001402:	48a0      	ldr	r0, [pc, #640]	; (8001684 <main+0x30c>)
 8001404:	f7fe ff04 	bl	8000210 <strcmp>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <main+0xc8>
				  temp = capt_temp();
 800140e:	f7ff ff6f 	bl	80012f0 <capt_temp>
 8001412:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
				  size = sprintf(sprintf_buff, "%f", temp);
 8001416:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001418:	f7ff f8c6 	bl	80005a8 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	f107 000c 	add.w	r0, r7, #12
 8001424:	499a      	ldr	r1, [pc, #616]	; (8001690 <main+0x318>)
 8001426:	f005 fc1d 	bl	8006c64 <siprintf>
 800142a:	6378      	str	r0, [r7, #52]	; 0x34
				  HAL_UART_Transmit(&huart1, sprintf_buff, size, HAL_MAX_DELAY);
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	b29a      	uxth	r2, r3
 8001430:	f107 010c 	add.w	r1, r7, #12
 8001434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001438:	488f      	ldr	r0, [pc, #572]	; (8001678 <main+0x300>)
 800143a:	f003 fc8e 	bl	8004d5a <HAL_UART_Transmit>
 800143e:	e0c9      	b.n	80015d4 <main+0x25c>
			  }

			  // Get pres
			  else if (strcmp(uart1_word, "GET_P") == 0) {
 8001440:	4994      	ldr	r1, [pc, #592]	; (8001694 <main+0x31c>)
 8001442:	4890      	ldr	r0, [pc, #576]	; (8001684 <main+0x30c>)
 8001444:	f7fe fee4 	bl	8000210 <strcmp>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <main+0x108>
				  pres = capt_temp();
 800144e:	f7ff ff4f 	bl	80012f0 <capt_temp>
 8001452:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
				  size = sprintf(sprintf_buff, "%f", pres);
 8001456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001458:	f7ff f8a6 	bl	80005a8 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	f107 000c 	add.w	r0, r7, #12
 8001464:	498a      	ldr	r1, [pc, #552]	; (8001690 <main+0x318>)
 8001466:	f005 fbfd 	bl	8006c64 <siprintf>
 800146a:	6378      	str	r0, [r7, #52]	; 0x34
				  HAL_UART_Transmit(&huart1, sprintf_buff, size, HAL_MAX_DELAY);
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	b29a      	uxth	r2, r3
 8001470:	f107 010c 	add.w	r1, r7, #12
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001478:	487f      	ldr	r0, [pc, #508]	; (8001678 <main+0x300>)
 800147a:	f003 fc6e 	bl	8004d5a <HAL_UART_Transmit>
 800147e:	e0a9      	b.n	80015d4 <main+0x25c>
			  }

			  // Set K
			  else if (memcmp(uart1_word, "SET_K=", 6) == 0) {
 8001480:	2206      	movs	r2, #6
 8001482:	4985      	ldr	r1, [pc, #532]	; (8001698 <main+0x320>)
 8001484:	487f      	ldr	r0, [pc, #508]	; (8001684 <main+0x30c>)
 8001486:	f004 fcc7 	bl	8005e18 <memcmp>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d153      	bne.n	8001538 <main+0x1c0>
				  if (uart1_word[13] != 0) {
 8001490:	4b7c      	ldr	r3, [pc, #496]	; (8001684 <main+0x30c>)
 8001492:	7b5b      	ldrb	r3, [r3, #13]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <main+0x130>
					  HAL_UART_Transmit(&huart2, "\nInvalid number\r\n", 17, HAL_MAX_DELAY);
 8001498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149c:	2211      	movs	r2, #17
 800149e:	497f      	ldr	r1, [pc, #508]	; (800169c <main+0x324>)
 80014a0:	487f      	ldr	r0, [pc, #508]	; (80016a0 <main+0x328>)
 80014a2:	f003 fc5a 	bl	8004d5a <HAL_UART_Transmit>
 80014a6:	e095      	b.n	80015d4 <main+0x25c>
				  }
				  else {
					  for (int i = 0; i < 7; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ac:	e039      	b.n	8001522 <main+0x1aa>
						  K += (float)uart1_word[i+6] * pow(10, 1-i);
 80014ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014b0:	3306      	adds	r3, #6
 80014b2:	4a74      	ldr	r2, [pc, #464]	; (8001684 <main+0x30c>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014be:	ee17 0a90 	vmov	r0, s15
 80014c2:	f7ff f871 	bl	80005a8 <__aeabi_f2d>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014cc:	f1c3 0301 	rsb	r3, r3, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f857 	bl	8000584 <__aeabi_i2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	ec43 2b11 	vmov	d1, r2, r3
 80014de:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8001668 <main+0x2f0>
 80014e2:	f009 f9af 	bl	800a844 <pow>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7ff f8b3 	bl	8000658 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4614      	mov	r4, r2
 80014f8:	461d      	mov	r5, r3
 80014fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014fc:	f7ff f854 	bl	80005a8 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7fe fef0 	bl	80002ec <__adddf3>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb98 	bl	8000c48 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
					  for (int i = 0; i < 7; i++) {
 800151c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800151e:	3301      	adds	r3, #1
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001524:	2b06      	cmp	r3, #6
 8001526:	ddc2      	ble.n	80014ae <main+0x136>
					  }
					  HAL_UART_Transmit(&huart2, "\nK set\r\n", 8, HAL_MAX_DELAY);
 8001528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152c:	2208      	movs	r2, #8
 800152e:	495d      	ldr	r1, [pc, #372]	; (80016a4 <main+0x32c>)
 8001530:	485b      	ldr	r0, [pc, #364]	; (80016a0 <main+0x328>)
 8001532:	f003 fc12 	bl	8004d5a <HAL_UART_Transmit>
 8001536:	e04d      	b.n	80015d4 <main+0x25c>
				  }
			  }

			  // Get K
			  else if (strcmp(uart1_word, "GET_K") == 0) {
 8001538:	495b      	ldr	r1, [pc, #364]	; (80016a8 <main+0x330>)
 800153a:	4852      	ldr	r0, [pc, #328]	; (8001684 <main+0x30c>)
 800153c:	f7fe fe68 	bl	8000210 <strcmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d114      	bne.n	8001570 <main+0x1f8>
				  size = sprintf(sprintf_buff, "%f", K);
 8001546:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001548:	f7ff f82e 	bl	80005a8 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	f107 000c 	add.w	r0, r7, #12
 8001554:	494e      	ldr	r1, [pc, #312]	; (8001690 <main+0x318>)
 8001556:	f005 fb85 	bl	8006c64 <siprintf>
 800155a:	6378      	str	r0, [r7, #52]	; 0x34
				  HAL_UART_Transmit(&huart1, sprintf_buff, size, HAL_MAX_DELAY);
 800155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155e:	b29a      	uxth	r2, r3
 8001560:	f107 010c 	add.w	r1, r7, #12
 8001564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001568:	4843      	ldr	r0, [pc, #268]	; (8001678 <main+0x300>)
 800156a:	f003 fbf6 	bl	8004d5a <HAL_UART_Transmit>
 800156e:	e031      	b.n	80015d4 <main+0x25c>
			  }

			  // Get angle
			  else if (strcmp(uart1_word, "GET_A") == 0) {
 8001570:	494e      	ldr	r1, [pc, #312]	; (80016ac <main+0x334>)
 8001572:	4844      	ldr	r0, [pc, #272]	; (8001684 <main+0x30c>)
 8001574:	f7fe fe4c 	bl	8000210 <strcmp>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d123      	bne.n	80015c6 <main+0x24e>
				  angle = (int)(K * temp/100);
 800157e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001582:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800158a:	eddf 6a49 	vldr	s13, [pc, #292]	; 80016b0 <main+0x338>
 800158e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001596:	edc7 7a01 	vstr	s15, [r7, #4]
 800159a:	793b      	ldrb	r3, [r7, #4]
 800159c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				  size = sprintf(sprintf_buff, "%f", angle);
 80015a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4939      	ldr	r1, [pc, #228]	; (8001690 <main+0x318>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 fb5a 	bl	8006c64 <siprintf>
 80015b0:	6378      	str	r0, [r7, #52]	; 0x34
				  HAL_UART_Transmit(&huart1, sprintf_buff, size, HAL_MAX_DELAY);
 80015b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015be:	482e      	ldr	r0, [pc, #184]	; (8001678 <main+0x300>)
 80015c0:	f003 fbcb 	bl	8004d5a <HAL_UART_Transmit>
 80015c4:	e006      	b.n	80015d4 <main+0x25c>
			  }

			  // Command undefined
			  else {
				  HAL_UART_Transmit(&huart2, "\nUnknown\r\n", 10, HAL_MAX_DELAY);
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ca:	220a      	movs	r2, #10
 80015cc:	4939      	ldr	r1, [pc, #228]	; (80016b4 <main+0x33c>)
 80015ce:	4834      	ldr	r0, [pc, #208]	; (80016a0 <main+0x328>)
 80015d0:	f003 fbc3 	bl	8004d5a <HAL_UART_Transmit>
			  }

		  uart1_word[0] = 0;
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <main+0x30c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
		  uart1_index = 0;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <main+0x308>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
		  }
	  uart1_flag = 0;
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <main+0x304>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
	  }

	  if (temp_flag == 1)
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <main+0x340>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	f47f aef4 	bne.w	80013d8 <main+0x60>
	  {
		  if (K == 0) {
 80015f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d103      	bne.n	8001606 <main+0x28e>
			  printf("Coeff is equal to 0, set it to get an angle\r\n");
 80015fe:	482f      	ldr	r0, [pc, #188]	; (80016bc <main+0x344>)
 8001600:	f005 fb22 	bl	8006c48 <puts>
 8001604:	e02b      	b.n	800165e <main+0x2e6>
		  }
		  else {
			  angle = (int)(K * (temp/100));
 8001606:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800160a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80016b0 <main+0x338>
 800160e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001612:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  if (angle >= 0) {
				  if (mot_angle(&hcan1, (angle%380), MOT_ROT_CLK) != 0){
 8001628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800162c:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <main+0x348>)
 800162e:	fb82 1203 	smull	r1, r2, r2, r3
 8001632:	441a      	add	r2, r3
 8001634:	1211      	asrs	r1, r2, #8
 8001636:	17da      	asrs	r2, r3, #31
 8001638:	1a8a      	subs	r2, r1, r2
 800163a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800163e:	fb01 f202 	mul.w	r2, r1, r2
 8001642:	1a9a      	subs	r2, r3, r2
 8001644:	b2d3      	uxtb	r3, r2
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	4809      	ldr	r0, [pc, #36]	; (8001670 <main+0x2f8>)
 800164c:	f000 f9d8 	bl	8001a00 <mot_angle>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <main+0x2e6>
					  printf("mot_angle command failed, error code %d\r\n", ret);
 8001656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001658:	481a      	ldr	r0, [pc, #104]	; (80016c4 <main+0x34c>)
 800165a:	f005 fa6f 	bl	8006b3c <iprintf>
				  if (mot_angle(&hcan1, (360-(angle%360)), MOT_ROT_ACLK) != 0){
					  printf("mot_angle command failed, error code %d\r\n", ret);
				  }
			  }
		  }
		  temp_flag = 0;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <main+0x340>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
	  if (uart1_flag == 1)
 8001664:	e6b8      	b.n	80013d8 <main+0x60>
 8001666:	bf00      	nop
 8001668:	00000000 	.word	0x00000000
 800166c:	40240000 	.word	0x40240000
 8001670:	2000021c 	.word	0x2000021c
 8001674:	20000324 	.word	0x20000324
 8001678:	20000298 	.word	0x20000298
 800167c:	20000320 	.word	0x20000320
 8001680:	20000328 	.word	0x20000328
 8001684:	2000032c 	.word	0x2000032c
 8001688:	0800b744 	.word	0x0800b744
 800168c:	0800b74c 	.word	0x0800b74c
 8001690:	0800b754 	.word	0x0800b754
 8001694:	0800b758 	.word	0x0800b758
 8001698:	0800b760 	.word	0x0800b760
 800169c:	0800b768 	.word	0x0800b768
 80016a0:	200002dc 	.word	0x200002dc
 80016a4:	0800b77c 	.word	0x0800b77c
 80016a8:	0800b788 	.word	0x0800b788
 80016ac:	0800b790 	.word	0x0800b790
 80016b0:	42c80000 	.word	0x42c80000
 80016b4:	0800b798 	.word	0x0800b798
 80016b8:	20000200 	.word	0x20000200
 80016bc:	0800b7a4 	.word	0x0800b7a4
 80016c0:	ac769185 	.word	0xac769185
 80016c4:	0800b7d4 	.word	0x0800b7d4

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	; 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2234      	movs	r2, #52	; 0x34
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fbae 	bl	8005e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <SystemClock_Config+0xd4>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <SystemClock_Config+0xd4>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <SystemClock_Config+0xd4>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001708:	2300      	movs	r3, #0
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <SystemClock_Config+0xd8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <SystemClock_Config+0xd8>)
 8001716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <SystemClock_Config+0xd8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001728:	2302      	movs	r3, #2
 800172a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001730:	2310      	movs	r3, #16
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001734:	2302      	movs	r3, #2
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001738:	2300      	movs	r3, #0
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800173c:	2310      	movs	r3, #16
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001746:	2304      	movs	r3, #4
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800174e:	2302      	movs	r3, #2
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4618      	mov	r0, r3
 8001758:	f003 f814 	bl	8004784 <HAL_RCC_OscConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001762:	f000 f947 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001766:	230f      	movs	r3, #15
 8001768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	2302      	movs	r3, #2
 800176c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fcb4 	bl	80040f0 <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800178e:	f000 f931 	bl	80019f4 <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	; 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_CAN1_Init+0x68>)
 80017aa:	4a19      	ldr	r2, [pc, #100]	; (8001810 <MX_CAN1_Init+0x6c>)
 80017ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_CAN1_Init+0x68>)
 80017b0:	220e      	movs	r2, #14
 80017b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_CAN1_Init+0x68>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_CAN1_Init+0x68>)
 80017bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017c0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_CAN1_Init+0x68>)
 80017c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_CAN1_Init+0x68>)
 80017cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_CAN1_Init+0x68>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_CAN1_Init+0x68>)
 80017da:	2200      	movs	r2, #0
 80017dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_CAN1_Init+0x68>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_CAN1_Init+0x68>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_CAN1_Init+0x68>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_CAN1_Init+0x68>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_CAN1_Init+0x68>)
 80017f8:	f000 fc6a 	bl	80020d0 <HAL_CAN_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001802:	f000 f8f7 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000021c 	.word	0x2000021c
 8001810:	40006400 	.word	0x40006400

08001814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_I2C1_Init+0x50>)
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <MX_I2C1_Init+0x54>)
 800181c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_I2C1_Init+0x50>)
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <MX_I2C1_Init+0x58>)
 8001822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_I2C1_Init+0x50>)
 8001832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <MX_I2C1_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_I2C1_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MX_I2C1_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_I2C1_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_I2C1_Init+0x50>)
 8001852:	f001 f9a9 	bl	8002ba8 <HAL_I2C_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800185c:	f000 f8ca 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000244 	.word	0x20000244
 8001868:	40005400 	.word	0x40005400
 800186c:	000186a0 	.word	0x000186a0

08001870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_USART1_UART_Init+0x50>)
 8001878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 80018a8:	f003 fa0a 	bl	8004cc0 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018b2:	f000 f89f 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000298 	.word	0x20000298
 80018c0:	40011000 	.word	0x40011000

080018c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART2_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018fc:	f003 f9e0 	bl	8004cc0 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f000 f875 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200002dc 	.word	0x200002dc
 8001914:	40004400 	.word	0x40004400

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a2c      	ldr	r2, [pc, #176]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <MX_GPIO_Init+0xd0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_GPIO_Init+0xd0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <MX_GPIO_Init+0xd0>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_GPIO_Init+0xd0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2120      	movs	r1, #32
 80019a2:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_GPIO_Init+0xd4>)
 80019a4:	f001 f8e6 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <MX_GPIO_Init+0xd8>)
 80019c0:	f000 ff44 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019c4:	2320      	movs	r3, #32
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_GPIO_Init+0xd4>)
 80019dc:	f000 ff36 	bl	800284c <HAL_GPIO_Init>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020800 	.word	0x40020800

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <mot_angle>:
	header.DLC = MOT_MAN_SIZE;

	return HAL_CAN_AddTxMessage(hcan, &header, data, &pTxMailbox);
}

int mot_angle(CAN_HandleTypeDef *hcan, uint8_t angle, uint8_t rot){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	70bb      	strb	r3, [r7, #2]
	uint8_t data[MOT_ANG_SIZE] = {angle, rot};
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	733b      	strb	r3, [r7, #12]
 8001a14:	78bb      	ldrb	r3, [r7, #2]
 8001a16:	737b      	strb	r3, [r7, #13]
	header.StdId = MOT_ANG_ID;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <mot_angle+0x3c>)
 8001a1a:	2261      	movs	r2, #97	; 0x61
 8001a1c:	601a      	str	r2, [r3, #0]
	header.DLC = MOT_ANG_SIZE;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <mot_angle+0x3c>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	611a      	str	r2, [r3, #16]

	return HAL_CAN_AddTxMessage(hcan, &header, data, &pTxMailbox);
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <mot_angle+0x40>)
 8001a2a:	4904      	ldr	r1, [pc, #16]	; (8001a3c <mot_angle+0x3c>)
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fc8e 	bl	800234e <HAL_CAN_AddTxMessage>
 8001a32:	4603      	mov	r3, r0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000034c 	.word	0x2000034c
 8001a40:	20000364 	.word	0x20000364

08001a44 <mot_reset>:

int mot_reset(CAN_HandleTypeDef *hcan){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	header.StdId = MOT_RES_ID;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <mot_reset+0x2c>)
 8001a4e:	2262      	movs	r2, #98	; 0x62
 8001a50:	601a      	str	r2, [r3, #0]
	header.DLC = MOT_RES_SIZE;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <mot_reset+0x2c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]

	return HAL_CAN_AddTxMessage(hcan, &header, 0, &pTxMailbox);
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <mot_reset+0x30>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4904      	ldr	r1, [pc, #16]	; (8001a70 <mot_reset+0x2c>)
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fc75 	bl	800234e <HAL_CAN_AddTxMessage>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000034c 	.word	0x2000034c
 8001a74:	20000364 	.word	0x20000364

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ab6:	2007      	movs	r0, #7
 8001ab8:	f000 fdf4 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_CAN_MspInit+0x84>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12c      	bne.n	8001b44 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_CAN_MspInit+0x88>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_CAN_MspInit+0x88>)
 8001af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_CAN_MspInit+0x88>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_CAN_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_CAN_MspInit+0x88>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_CAN_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b34:	2309      	movs	r3, #9
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_CAN_MspInit+0x8c>)
 8001b40:	f000 fe84 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40006400 	.word	0x40006400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400

08001b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_I2C_MspInit+0x84>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12b      	bne.n	8001bd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b96:	23c0      	movs	r3, #192	; 0xc0
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9a:	2312      	movs	r3, #18
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <HAL_I2C_MspInit+0x8c>)
 8001bb2:	f000 fe4b 	bl	800284c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_UART_MspInit+0x108>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d135      	bne.n	8001c76 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a38      	ldr	r2, [pc, #224]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a31      	ldr	r2, [pc, #196]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c54:	2307      	movs	r3, #7
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4826      	ldr	r0, [pc, #152]	; (8001cf8 <HAL_UART_MspInit+0x110>)
 8001c60:	f000 fdf4 	bl	800284c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2025      	movs	r0, #37	; 0x25
 8001c6a:	f000 fd26 	bl	80026ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c6e:	2025      	movs	r0, #37	; 0x25
 8001c70:	f000 fd3f 	bl	80026f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c74:	e038      	b.n	8001ce8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <HAL_UART_MspInit+0x114>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d133      	bne.n	8001ce8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4a13      	ldr	r2, [pc, #76]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_UART_MspInit+0x10c>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cb8:	230c      	movs	r3, #12
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <HAL_UART_MspInit+0x110>)
 8001cd4:	f000 fdba 	bl	800284c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2026      	movs	r0, #38	; 0x26
 8001cde:	f000 fcec 	bl	80026ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ce2:	2026      	movs	r0, #38	; 0x26
 8001ce4:	f000 fd05 	bl	80026f2 <HAL_NVIC_EnableIRQ>
}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40011000 	.word	0x40011000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40004400 	.word	0x40004400

08001d00 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001d08:	1d39      	adds	r1, r7, #4
 8001d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <__io_putchar+0x20>)
 8001d12:	f003 f822 	bl	8004d5a <HAL_UART_Transmit>

  return ch;
 8001d16:	687b      	ldr	r3, [r7, #4]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200002dc 	.word	0x200002dc

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <NMI_Handler+0x4>

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <MemManage_Handler+0x4>

08001d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 f98e 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart1_flag = 1;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <USART1_IRQHandler+0x44>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d82:	480f      	ldr	r0, [pc, #60]	; (8001dc0 <USART1_IRQHandler+0x48>)
 8001d84:	f003 f8ac 	bl	8004ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Transmit(&huart2, &uart1_buff, 1, HAL_MAX_DELAY);
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	490d      	ldr	r1, [pc, #52]	; (8001dc4 <USART1_IRQHandler+0x4c>)
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <USART1_IRQHandler+0x50>)
 8001d92:	f002 ffe2 	bl	8004d5a <HAL_UART_Transmit>
  uart1_word[uart1_index] = uart1_buff;
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <USART1_IRQHandler+0x54>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <USART1_IRQHandler+0x4c>)
 8001d9c:	7811      	ldrb	r1, [r2, #0]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <USART1_IRQHandler+0x58>)
 8001da0:	54d1      	strb	r1, [r2, r3]
  uart1_index++;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <USART1_IRQHandler+0x54>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <USART1_IRQHandler+0x54>)
 8001daa:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&huart1, &uart1_buff, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	4905      	ldr	r1, [pc, #20]	; (8001dc4 <USART1_IRQHandler+0x4c>)
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <USART1_IRQHandler+0x48>)
 8001db2:	f003 f864 	bl	8004e7e <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000320 	.word	0x20000320
 8001dc0:	20000298 	.word	0x20000298
 8001dc4:	20000324 	.word	0x20000324
 8001dc8:	200002dc 	.word	0x200002dc
 8001dcc:	20000328 	.word	0x20000328
 8001dd0:	2000032c 	.word	0x2000032c

08001dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART2_IRQHandler+0x10>)
 8001dda:	f003 f881 	bl	8004ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002dc 	.word	0x200002dc

08001de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
	return 1;
 8001dec:	2301      	movs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_kill>:

int _kill(int pid, int sig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e02:	f003 ffdf 	bl	8005dc4 <__errno>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2216      	movs	r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_exit>:

void _exit (int status)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffe7 	bl	8001df8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e2a:	e7fe      	b.n	8001e2a <_exit+0x12>

08001e2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e00a      	b.n	8001e54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e3e:	f3af 8000 	nop.w
 8001e42:	4601      	mov	r1, r0
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	60ba      	str	r2, [r7, #8]
 8001e4a:	b2ca      	uxtb	r2, r1
 8001e4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbf0      	blt.n	8001e3e <_read+0x12>
	}

return len;
 8001e5c:	687b      	ldr	r3, [r7, #4]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e009      	b.n	8001e8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	60ba      	str	r2, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff3d 	bl	8001d00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbf1      	blt.n	8001e78 <_write+0x12>
	}
	return len;
 8001e94:	687b      	ldr	r3, [r7, #4]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_close>:

int _close(int file)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_isatty>:

int _isatty(int file)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f003 ff44 	bl	8005dc4 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20020000 	.word	0x20020000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000368 	.word	0x20000368
 8001f70:	20000380 	.word	0x20000380

08001f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <SystemInit+0x20>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <SystemInit+0x20>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f9e:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb4:	4c0b      	ldr	r4, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fc2:	f7ff ffd7 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f003 ff03 	bl	8005dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7ff f9d5 	bl	8001378 <main>
  bx  lr    
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fdc:	0800bd08 	.word	0x0800bd08
  ldr r2, =_sbss
 8001fe0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fe4:	20000380 	.word	0x20000380

08001fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_Init+0x40>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_Init+0x40>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x40>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 fb45 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	2000      	movs	r0, #0
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fd2a 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fb5d 	bl	800270e <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206c:	f000 fb25 	bl	80026ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000000 	.word	0x20000000
 8002088:	20000008 	.word	0x20000008
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008
 80020b4:	2000036c 	.word	0x2000036c

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000036c 	.word	0x2000036c

080020d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0ed      	b.n	80022be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d102      	bne.n	80020f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fcea 	bl	8001ac8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002104:	f7ff ffd8 	bl	80020b8 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800210a:	e012      	b.n	8002132 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800210c:	f7ff ffd4 	bl	80020b8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d90b      	bls.n	8002132 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2205      	movs	r2, #5
 800212a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0c5      	b.n	80022be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0e5      	beq.n	800210c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0202 	bic.w	r2, r2, #2
 800214e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002150:	f7ff ffb2 	bl	80020b8 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002156:	e012      	b.n	800217e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002158:	f7ff ffae 	bl	80020b8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b0a      	cmp	r3, #10
 8002164:	d90b      	bls.n	800217e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2205      	movs	r2, #5
 8002176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e09f      	b.n	80022be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e1b      	ldrb	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e007      	b.n	80021b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7e5b      	ldrb	r3, [r3, #25]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e007      	b.n	80021e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7e9b      	ldrb	r3, [r3, #26]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d108      	bne.n	80021fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0220 	orr.w	r2, r2, #32
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e007      	b.n	800220a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0220 	bic.w	r2, r2, #32
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7edb      	ldrb	r3, [r3, #27]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0210 	bic.w	r2, r2, #16
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e007      	b.n	8002234 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0210 	orr.w	r2, r2, #16
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7f1b      	ldrb	r3, [r3, #28]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d108      	bne.n	800224e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e007      	b.n	800225e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0208 	bic.w	r2, r2, #8
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7f5b      	ldrb	r3, [r3, #29]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0204 	orr.w	r2, r2, #4
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e007      	b.n	8002288 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0204 	bic.w	r2, r2, #4
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	ea42 0103 	orr.w	r1, r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	1e5a      	subs	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d12e      	bne.n	8002338 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022f2:	f7ff fee1 	bl	80020b8 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022f8:	e012      	b.n	8002320 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022fa:	f7ff fedd 	bl	80020b8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b0a      	cmp	r3, #10
 8002306:	d90b      	bls.n	8002320 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2205      	movs	r2, #5
 8002318:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e012      	b.n	8002346 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1e5      	bne.n	80022fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e006      	b.n	8002346 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800234e:	b480      	push	{r7}
 8002350:	b089      	sub	sp, #36	; 0x24
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002362:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800236c:	7ffb      	ldrb	r3, [r7, #31]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d003      	beq.n	800237a <HAL_CAN_AddTxMessage+0x2c>
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	2b02      	cmp	r3, #2
 8002376:	f040 80b8 	bne.w	80024ea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a0 	beq.w	80024da <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	0e1b      	lsrs	r3, r3, #24
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d907      	bls.n	80023ba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e09e      	b.n	80024f8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80023ba:	2201      	movs	r2, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	6809      	ldr	r1, [r1, #0]
 80023da:	431a      	orrs	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3318      	adds	r3, #24
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	440b      	add	r3, r1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e00f      	b.n	8002408 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3318      	adds	r3, #24
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	440b      	add	r3, r1
 8002406:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3318      	adds	r3, #24
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	440b      	add	r3, r1
 8002418:	3304      	adds	r3, #4
 800241a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	7d1b      	ldrb	r3, [r3, #20]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d111      	bne.n	8002448 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3318      	adds	r3, #24
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	6811      	ldr	r1, [r2, #0]
 8002438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3318      	adds	r3, #24
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	440b      	add	r3, r1
 8002444:	3304      	adds	r3, #4
 8002446:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3307      	adds	r3, #7
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	061a      	lsls	r2, r3, #24
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3306      	adds	r3, #6
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3305      	adds	r3, #5
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	4313      	orrs	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	3204      	adds	r2, #4
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	4610      	mov	r0, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	ea43 0200 	orr.w	r2, r3, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	440b      	add	r3, r1
 800247a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800247e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3303      	adds	r3, #3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	061a      	lsls	r2, r3, #24
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3302      	adds	r3, #2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	4313      	orrs	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	7812      	ldrb	r2, [r2, #0]
 80024a0:	4610      	mov	r0, r2
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	6811      	ldr	r1, [r2, #0]
 80024a6:	ea43 0200 	orr.w	r2, r3, r0
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80024b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3318      	adds	r3, #24
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4413      	add	r3, r2
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6811      	ldr	r1, [r2, #0]
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3318      	adds	r3, #24
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	440b      	add	r3, r1
 80024d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e00e      	b.n	80024f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e006      	b.n	80024f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3724      	adds	r7, #36	; 0x24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002684:	f7ff ff8e 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff29 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff3e 	bl	800254c <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff8e 	bl	80025f8 <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff31 	bl	8002568 <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa2 	bl	8002660 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff fcc0 	bl	80020b8 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d008      	beq.n	8002758 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e052      	b.n	80027fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0216 	bic.w	r2, r2, #22
 8002766:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002776:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <HAL_DMA_Abort+0x62>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0208 	bic.w	r2, r2, #8
 8002796:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a8:	e013      	b.n	80027d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027aa:	f7ff fc85 	bl	80020b8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d90c      	bls.n	80027d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e015      	b.n	80027fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e4      	bne.n	80027aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	223f      	movs	r2, #63	; 0x3f
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d004      	beq.n	8002824 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e00c      	b.n	800283e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2205      	movs	r2, #5
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e165      	b.n	8002b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002868:	2201      	movs	r2, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8154 	bne.w	8002b2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d005      	beq.n	800289e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	2b02      	cmp	r3, #2
 800289c:	d130      	bne.n	8002900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d4:	2201      	movs	r2, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 0201 	and.w	r2, r3, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d017      	beq.n	800293c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d123      	bne.n	8002990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0203 	and.w	r2, r3, #3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80ae 	beq.w	8002b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <HAL_GPIO_Init+0x300>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	4a5c      	ldr	r2, [pc, #368]	; (8002b4c <HAL_GPIO_Init+0x300>)
 80029dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e0:	6453      	str	r3, [r2, #68]	; 0x44
 80029e2:	4b5a      	ldr	r3, [pc, #360]	; (8002b4c <HAL_GPIO_Init+0x300>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ee:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_GPIO_Init+0x304>)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4f      	ldr	r2, [pc, #316]	; (8002b54 <HAL_GPIO_Init+0x308>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x21a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <HAL_GPIO_Init+0x30c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x216>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4d      	ldr	r2, [pc, #308]	; (8002b5c <HAL_GPIO_Init+0x310>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x212>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_GPIO_Init+0x314>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x20e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_GPIO_Init+0x318>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x20a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	; (8002b68 <HAL_GPIO_Init+0x31c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x206>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <HAL_GPIO_Init+0x320>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x202>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e00c      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00a      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a52:	2305      	movs	r3, #5
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a56:	2304      	movs	r3, #4
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x21c>
 8002a66:	2300      	movs	r3, #0
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a78:	4935      	ldr	r1, [pc, #212]	; (8002b50 <HAL_GPIO_Init+0x304>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aaa:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ada:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <HAL_GPIO_Init+0x324>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	f67f ae96 	bls.w	8002868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40021400 	.word	0x40021400
 8002b6c:	40021800 	.word	0x40021800
 8002b70:	40013c00 	.word	0x40013c00

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e12b      	b.n	8002e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe ffc2 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f001 fb62 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a81      	ldr	r2, [pc, #516]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d807      	bhi.n	8002c2c <HAL_I2C_Init+0x84>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <HAL_I2C_Init+0x278>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e006      	b.n	8002c3a <HAL_I2C_Init+0x92>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a7d      	ldr	r2, [pc, #500]	; (8002e24 <HAL_I2C_Init+0x27c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0e7      	b.n	8002e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a78      	ldr	r2, [pc, #480]	; (8002e28 <HAL_I2C_Init+0x280>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0c9b      	lsrs	r3, r3, #18
 8002c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a6a      	ldr	r2, [pc, #424]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <HAL_I2C_Init+0xd4>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	e009      	b.n	8002c90 <HAL_I2C_Init+0xe8>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	4a69      	ldr	r2, [pc, #420]	; (8002e2c <HAL_I2C_Init+0x284>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	3301      	adds	r3, #1
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	495c      	ldr	r1, [pc, #368]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d819      	bhi.n	8002ce4 <HAL_I2C_Init+0x13c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e59      	subs	r1, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_I2C_Init+0x138>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e59      	subs	r1, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	e051      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e04f      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d111      	bne.n	8002d10 <HAL_I2C_Init+0x168>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e58      	subs	r0, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e012      	b.n	8002d36 <HAL_I2C_Init+0x18e>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e58      	subs	r0, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	0099      	lsls	r1, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Init+0x196>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e022      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10e      	bne.n	8002d64 <HAL_I2C_Init+0x1bc>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1e58      	subs	r0, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	440b      	add	r3, r1
 8002d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	6809      	ldr	r1, [r1, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6911      	ldr	r1, [r2, #16]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	000186a0 	.word	0x000186a0
 8002e20:	001e847f 	.word	0x001e847f
 8002e24:	003d08ff 	.word	0x003d08ff
 8002e28:	431bde83 	.word	0x431bde83
 8002e2c:	10624dd3 	.word	0x10624dd3

08002e30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	817b      	strh	r3, [r7, #10]
 8002e40:	4613      	mov	r3, r2
 8002e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff f938 	bl	80020b8 <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	f040 80e0 	bne.w	8003018 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4970      	ldr	r1, [pc, #448]	; (8003024 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 ff66 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0d3      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_I2C_Master_Transmit+0x50>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0cc      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d007      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2221      	movs	r2, #33	; 0x21
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a50      	ldr	r2, [pc, #320]	; (8003028 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	6a3a      	ldr	r2, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fce8 	bl	80038c4 <I2C_MasterRequestWrite>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e08d      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f14:	e066      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	6a39      	ldr	r1, [r7, #32]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 ffe0 	bl	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d107      	bne.n	8002f3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06b      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_I2C_Master_Transmit+0x188>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d017      	beq.n	8002fb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	6a39      	ldr	r1, [r7, #32]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 ffd0 	bl	8003f62 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e01a      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d194      	bne.n	8002f16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	00100002 	.word	0x00100002
 8003028:	ffff0000 	.word	0xffff0000

0800302c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	; 0x30
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff f83a 	bl	80020b8 <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 820b 	bne.w	800346a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2319      	movs	r3, #25
 800305a:	2201      	movs	r2, #1
 800305c:	497c      	ldr	r1, [pc, #496]	; (8003250 <HAL_I2C_Master_Receive+0x224>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fe68 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	e1fe      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_I2C_Master_Receive+0x50>
 8003078:	2302      	movs	r3, #2
 800307a:	e1f7      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d007      	beq.n	80030a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2222      	movs	r2, #34	; 0x22
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2210      	movs	r2, #16
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	893a      	ldrh	r2, [r7, #8]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a5c      	ldr	r2, [pc, #368]	; (8003254 <HAL_I2C_Master_Receive+0x228>)
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030e4:	8979      	ldrh	r1, [r7, #10]
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fc6c 	bl	80039c8 <I2C_MasterRequestRead>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1b8      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d113      	bne.n	800312a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e18c      	b.n	8003444 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	2b01      	cmp	r3, #1
 8003130:	d11b      	bne.n	800316a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e16c      	b.n	8003444 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	2b02      	cmp	r3, #2
 8003170:	d11b      	bne.n	80031aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003180:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	e14c      	b.n	8003444 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031d0:	e138      	b.n	8003444 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	f200 80f1 	bhi.w	80033be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d123      	bne.n	800322c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fefb 	bl	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e139      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
 800322a:	e10b      	b.n	8003444 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	2b02      	cmp	r3, #2
 8003232:	d14e      	bne.n	80032d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2200      	movs	r2, #0
 800323c:	4906      	ldr	r1, [pc, #24]	; (8003258 <HAL_I2C_Master_Receive+0x22c>)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fd78 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e10e      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
 800324e:	bf00      	nop
 8003250:	00100002 	.word	0x00100002
 8003254:	ffff0000 	.word	0xffff0000
 8003258:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d0:	e0b8      	b.n	8003444 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	2200      	movs	r2, #0
 80032da:	4966      	ldr	r1, [pc, #408]	; (8003474 <HAL_I2C_Master_Receive+0x448>)
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fd29 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0bf      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	2200      	movs	r2, #0
 8003336:	494f      	ldr	r1, [pc, #316]	; (8003474 <HAL_I2C_Master_Receive+0x448>)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fcfb 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e091      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033bc:	e042      	b.n	8003444 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fe0e 	bl	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e04c      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d118      	bne.n	8003444 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	f47f aec2 	bne.w	80031d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	00010004 	.word	0x00010004

08003478 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	817b      	strh	r3, [r7, #10]
 800348a:	460b      	mov	r3, r1
 800348c:	813b      	strh	r3, [r7, #8]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003492:	f7fe fe11 	bl	80020b8 <HAL_GetTick>
 8003496:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	f040 8208 	bne.w	80038b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2319      	movs	r3, #25
 80034ac:	2201      	movs	r2, #1
 80034ae:	497b      	ldr	r1, [pc, #492]	; (800369c <HAL_I2C_Mem_Read+0x224>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fc3f 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
 80034be:	e1fb      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Mem_Read+0x56>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e1f4      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d007      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2222      	movs	r2, #34	; 0x22
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <HAL_I2C_Mem_Read+0x228>)
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003536:	88f8      	ldrh	r0, [r7, #6]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4603      	mov	r3, r0
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fb0c 	bl	8003b64 <I2C_RequestMemoryRead>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1b0      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e184      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b01      	cmp	r3, #1
 800358c:	d11b      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e164      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d11b      	bne.n	8003606 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	e144      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800361c:	e138      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	2b03      	cmp	r3, #3
 8003624:	f200 80f1 	bhi.w	800380a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b01      	cmp	r3, #1
 800362e:	d123      	bne.n	8003678 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fcd5 	bl	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e139      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003676:	e10b      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	2b02      	cmp	r3, #2
 800367e:	d14e      	bne.n	800371e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	2200      	movs	r2, #0
 8003688:	4906      	ldr	r1, [pc, #24]	; (80036a4 <HAL_I2C_Mem_Read+0x22c>)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fb52 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e10e      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
 800369a:	bf00      	nop
 800369c:	00100002 	.word	0x00100002
 80036a0:	ffff0000 	.word	0xffff0000
 80036a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371c:	e0b8      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2200      	movs	r2, #0
 8003726:	4966      	ldr	r1, [pc, #408]	; (80038c0 <HAL_I2C_Mem_Read+0x448>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fb03 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0bf      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	2200      	movs	r2, #0
 8003782:	494f      	ldr	r1, [pc, #316]	; (80038c0 <HAL_I2C_Mem_Read+0x448>)
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fad5 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e091      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003808:	e042      	b.n	8003890 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fbe8 	bl	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e04c      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d118      	bne.n	8003890 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	f47f aec2 	bne.w	800361e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00010004 	.word	0x00010004

080038c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	460b      	mov	r3, r1
 80038d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d006      	beq.n	80038ee <I2C_MasterRequestWrite+0x2a>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d003      	beq.n	80038ee <I2C_MasterRequestWrite+0x2a>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038ec:	d108      	bne.n	8003900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e00b      	b.n	8003918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	2b12      	cmp	r3, #18
 8003906:	d107      	bne.n	8003918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fa05 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d103      	bne.n	8003948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e035      	b.n	80039b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003954:	d108      	bne.n	8003968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003956:	897b      	ldrh	r3, [r7, #10]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003964:	611a      	str	r2, [r3, #16]
 8003966:	e01b      	b.n	80039a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003968:	897b      	ldrh	r3, [r7, #10]
 800396a:	11db      	asrs	r3, r3, #7
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 0306 	and.w	r3, r3, #6
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f063 030f 	orn	r3, r3, #15
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	490e      	ldr	r1, [pc, #56]	; (80039c0 <I2C_MasterRequestWrite+0xfc>)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fa2b 	bl	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e010      	b.n	80039b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4907      	ldr	r1, [pc, #28]	; (80039c4 <I2C_MasterRequestWrite+0x100>)
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa1b 	bl	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	00010008 	.word	0x00010008
 80039c4:	00010002 	.word	0x00010002

080039c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d006      	beq.n	8003a02 <I2C_MasterRequestRead+0x3a>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d003      	beq.n	8003a02 <I2C_MasterRequestRead+0x3a>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a00:	d108      	bne.n	8003a14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e00b      	b.n	8003a2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	2b11      	cmp	r3, #17
 8003a1a:	d107      	bne.n	8003a2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f97b 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d103      	bne.n	8003a5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e079      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a68:	d108      	bne.n	8003a7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a6a:	897b      	ldrh	r3, [r7, #10]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	e05f      	b.n	8003b3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	11db      	asrs	r3, r3, #7
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0306 	and.w	r3, r3, #6
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f063 030f 	orn	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4930      	ldr	r1, [pc, #192]	; (8003b5c <I2C_MasterRequestRead+0x194>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f9a1 	bl	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e054      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4929      	ldr	r1, [pc, #164]	; (8003b60 <I2C_MasterRequestRead+0x198>)
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f991 	bl	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e044      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f919 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b16:	d103      	bne.n	8003b20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e017      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b24:	897b      	ldrh	r3, [r7, #10]
 8003b26:	11db      	asrs	r3, r3, #7
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0306 	and.w	r3, r3, #6
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f063 030e 	orn	r3, r3, #14
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4907      	ldr	r1, [pc, #28]	; (8003b60 <I2C_MasterRequestRead+0x198>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f94d 	bl	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	00010008 	.word	0x00010008
 8003b60:	00010002 	.word	0x00010002

08003b64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	460b      	mov	r3, r1
 8003b78:	813b      	strh	r3, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f8c2 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc4:	d103      	bne.n	8003bce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0aa      	b.n	8003d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bd2:	897b      	ldrh	r3, [r7, #10]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	4952      	ldr	r1, [pc, #328]	; (8003d30 <I2C_RequestMemoryRead+0x1cc>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f8fa 	bl	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e097      	b.n	8003d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	6a39      	ldr	r1, [r7, #32]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f964 	bl	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d107      	bne.n	8003c36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e076      	b.n	8003d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c40:	893b      	ldrh	r3, [r7, #8]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]
 8003c4a:	e021      	b.n	8003c90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c4c:	893b      	ldrh	r3, [r7, #8]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f93e 	bl	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d107      	bne.n	8003c82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e050      	b.n	8003d28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c86:	893b      	ldrh	r3, [r7, #8]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c92:	6a39      	ldr	r1, [r7, #32]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f923 	bl	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d107      	bne.n	8003cb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e035      	b.n	8003d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f82b 	bl	8003d34 <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf2:	d103      	bne.n	8003cfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e013      	b.n	8003d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d00:	897b      	ldrh	r3, [r7, #10]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	4906      	ldr	r1, [pc, #24]	; (8003d30 <I2C_RequestMemoryRead+0x1cc>)
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f863 	bl	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	00010002 	.word	0x00010002

08003d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d44:	e025      	b.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4c:	d021      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe f9b3 	bl	80020b8 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d116      	bne.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e023      	b.n	8003dda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10d      	bne.n	8003db8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf0c      	ite	eq
 8003dae:	2301      	moveq	r3, #1
 8003db0:	2300      	movne	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	e00c      	b.n	8003dd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bf0c      	ite	eq
 8003dca:	2301      	moveq	r3, #1
 8003dcc:	2300      	movne	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d0b6      	beq.n	8003d46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003df0:	e051      	b.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	d123      	bne.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f043 0204 	orr.w	r2, r3, #4
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e046      	b.n	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e50:	d021      	beq.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fe f931 	bl	80020b8 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d116      	bne.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e020      	b.n	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10c      	bne.n	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e00b      	b.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d18d      	bne.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eec:	e02d      	b.n	8003f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f8ce 	bl	8004090 <I2C_IsAcknowledgeFailed>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e02d      	b.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f04:	d021      	beq.n	8003f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fe f8d7 	bl	80020b8 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d116      	bne.n	8003f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e007      	b.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d1ca      	bne.n	8003eee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f6e:	e02d      	b.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f88d 	bl	8004090 <I2C_IsAcknowledgeFailed>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e02d      	b.n	8003fdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f86:	d021      	beq.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f88:	f7fe f896 	bl	80020b8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d116      	bne.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f043 0220 	orr.w	r2, r3, #32
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e007      	b.n	8003fdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d1ca      	bne.n	8003f70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ff0:	e042      	b.n	8004078 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d119      	bne.n	8004034 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0210 	mvn.w	r2, #16
 8004008:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e029      	b.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004034:	f7fe f840 	bl	80020b8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	429a      	cmp	r2, r3
 8004042:	d302      	bcc.n	800404a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d116      	bne.n	8004078 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e007      	b.n	8004088 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d1b5      	bne.n	8003ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a6:	d11b      	bne.n	80040e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0cc      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004104:	4b68      	ldr	r3, [pc, #416]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d90c      	bls.n	800412c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b63      	ldr	r3, [pc, #396]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0b8      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004144:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a58      	ldr	r2, [pc, #352]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800414e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800415c:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a52      	ldr	r2, [pc, #328]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	494d      	ldr	r1, [pc, #308]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d044      	beq.n	8004210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d119      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07f      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ae:	4b3f      	ldr	r3, [pc, #252]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e06f      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e067      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4934      	ldr	r1, [pc, #208]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e0:	f7fd ff6a 	bl	80020b8 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e8:	f7fd ff66 	bl	80020b8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e04f      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 020c 	and.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1eb      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004210:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d20c      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e032      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4916      	ldr	r1, [pc, #88]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	490e      	ldr	r1, [pc, #56]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004276:	f000 f855 	bl	8004324 <HAL_RCC_GetSysClockFreq>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	490a      	ldr	r1, [pc, #40]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	fa22 f303 	lsr.w	r3, r2, r3
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd feca 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00
 80042ac:	40023800 	.word	0x40023800
 80042b0:	0800b800 	.word	0x0800b800
 80042b4:	20000000 	.word	0x20000000
 80042b8:	20000004 	.word	0x20000004

080042bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d8:	f7ff fff0 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0a9b      	lsrs	r3, r3, #10
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0800b810 	.word	0x0800b810

080042fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004300:	f7ff ffdc 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0b5b      	lsrs	r3, r3, #13
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4903      	ldr	r1, [pc, #12]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	0800b810 	.word	0x0800b810

08004324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004328:	b0ae      	sub	sp, #184	; 0xb8
 800432a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800434a:	4bcb      	ldr	r3, [pc, #812]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b0c      	cmp	r3, #12
 8004354:	f200 8206 	bhi.w	8004764 <HAL_RCC_GetSysClockFreq+0x440>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_RCC_GetSysClockFreq+0x3c>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	08004765 	.word	0x08004765
 8004368:	08004765 	.word	0x08004765
 800436c:	08004765 	.word	0x08004765
 8004370:	0800439d 	.word	0x0800439d
 8004374:	08004765 	.word	0x08004765
 8004378:	08004765 	.word	0x08004765
 800437c:	08004765 	.word	0x08004765
 8004380:	080043a5 	.word	0x080043a5
 8004384:	08004765 	.word	0x08004765
 8004388:	08004765 	.word	0x08004765
 800438c:	08004765 	.word	0x08004765
 8004390:	08004595 	.word	0x08004595
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4bb9      	ldr	r3, [pc, #740]	; (800467c <HAL_RCC_GetSysClockFreq+0x358>)
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800439a:	e1e7      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439c:	4bb8      	ldr	r3, [pc, #736]	; (8004680 <HAL_RCC_GetSysClockFreq+0x35c>)
 800439e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043a2:	e1e3      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a4:	4bb4      	ldr	r3, [pc, #720]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043b0:	4bb1      	ldr	r3, [pc, #708]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d071      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043bc:	4bae      	ldr	r3, [pc, #696]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	099b      	lsrs	r3, r3, #6
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80043cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	f04f 0000 	mov.w	r0, #0
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	0159      	lsls	r1, r3, #5
 80043f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f4:	0150      	lsls	r0, r2, #5
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4621      	mov	r1, r4
 80043fc:	1a51      	subs	r1, r2, r1
 80043fe:	6439      	str	r1, [r7, #64]	; 0x40
 8004400:	4629      	mov	r1, r5
 8004402:	eb63 0301 	sbc.w	r3, r3, r1
 8004406:	647b      	str	r3, [r7, #68]	; 0x44
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004414:	4649      	mov	r1, r9
 8004416:	018b      	lsls	r3, r1, #6
 8004418:	4641      	mov	r1, r8
 800441a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800441e:	4641      	mov	r1, r8
 8004420:	018a      	lsls	r2, r1, #6
 8004422:	4641      	mov	r1, r8
 8004424:	1a51      	subs	r1, r2, r1
 8004426:	63b9      	str	r1, [r7, #56]	; 0x38
 8004428:	4649      	mov	r1, r9
 800442a:	eb63 0301 	sbc.w	r3, r3, r1
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800443c:	4649      	mov	r1, r9
 800443e:	00cb      	lsls	r3, r1, #3
 8004440:	4641      	mov	r1, r8
 8004442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004446:	4641      	mov	r1, r8
 8004448:	00ca      	lsls	r2, r1, #3
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	4603      	mov	r3, r0
 8004450:	4622      	mov	r2, r4
 8004452:	189b      	adds	r3, r3, r2
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
 8004456:	462b      	mov	r3, r5
 8004458:	460a      	mov	r2, r1
 800445a:	eb42 0303 	adc.w	r3, r2, r3
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800446c:	4629      	mov	r1, r5
 800446e:	024b      	lsls	r3, r1, #9
 8004470:	4621      	mov	r1, r4
 8004472:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004476:	4621      	mov	r1, r4
 8004478:	024a      	lsls	r2, r1, #9
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800448c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004490:	f7fc fc2a 	bl	8000ce8 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800449e:	e067      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a0:	4b75      	ldr	r3, [pc, #468]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	099b      	lsrs	r3, r3, #6
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80044b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ba:	2300      	movs	r3, #0
 80044bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80044c2:	4622      	mov	r2, r4
 80044c4:	462b      	mov	r3, r5
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	0159      	lsls	r1, r3, #5
 80044d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d4:	0150      	lsls	r0, r2, #5
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4621      	mov	r1, r4
 80044dc:	1a51      	subs	r1, r2, r1
 80044de:	62b9      	str	r1, [r7, #40]	; 0x28
 80044e0:	4629      	mov	r1, r5
 80044e2:	eb63 0301 	sbc.w	r3, r3, r1
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80044f4:	4649      	mov	r1, r9
 80044f6:	018b      	lsls	r3, r1, #6
 80044f8:	4641      	mov	r1, r8
 80044fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044fe:	4641      	mov	r1, r8
 8004500:	018a      	lsls	r2, r1, #6
 8004502:	4641      	mov	r1, r8
 8004504:	ebb2 0a01 	subs.w	sl, r2, r1
 8004508:	4649      	mov	r1, r9
 800450a:	eb63 0b01 	sbc.w	fp, r3, r1
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800451a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800451e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004522:	4692      	mov	sl, r2
 8004524:	469b      	mov	fp, r3
 8004526:	4623      	mov	r3, r4
 8004528:	eb1a 0303 	adds.w	r3, sl, r3
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	462b      	mov	r3, r5
 8004530:	eb4b 0303 	adc.w	r3, fp, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004542:	4629      	mov	r1, r5
 8004544:	028b      	lsls	r3, r1, #10
 8004546:	4621      	mov	r1, r4
 8004548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800454c:	4621      	mov	r1, r4
 800454e:	028a      	lsls	r2, r1, #10
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004558:	2200      	movs	r2, #0
 800455a:	673b      	str	r3, [r7, #112]	; 0x70
 800455c:	677a      	str	r2, [r7, #116]	; 0x74
 800455e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004562:	f7fc fbc1 	bl	8000ce8 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4613      	mov	r3, r2
 800456c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004570:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	3301      	adds	r3, #1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004592:	e0eb      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004594:	4b38      	ldr	r3, [pc, #224]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045a0:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d06b      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ac:	4b32      	ldr	r3, [pc, #200]	; (8004678 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	099b      	lsrs	r3, r3, #6
 80045b2:	2200      	movs	r2, #0
 80045b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	663b      	str	r3, [r7, #96]	; 0x60
 80045c0:	2300      	movs	r3, #0
 80045c2:	667b      	str	r3, [r7, #100]	; 0x64
 80045c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80045c8:	4622      	mov	r2, r4
 80045ca:	462b      	mov	r3, r5
 80045cc:	f04f 0000 	mov.w	r0, #0
 80045d0:	f04f 0100 	mov.w	r1, #0
 80045d4:	0159      	lsls	r1, r3, #5
 80045d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045da:	0150      	lsls	r0, r2, #5
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4621      	mov	r1, r4
 80045e2:	1a51      	subs	r1, r2, r1
 80045e4:	61b9      	str	r1, [r7, #24]
 80045e6:	4629      	mov	r1, r5
 80045e8:	eb63 0301 	sbc.w	r3, r3, r1
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045fa:	4659      	mov	r1, fp
 80045fc:	018b      	lsls	r3, r1, #6
 80045fe:	4651      	mov	r1, sl
 8004600:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004604:	4651      	mov	r1, sl
 8004606:	018a      	lsls	r2, r1, #6
 8004608:	4651      	mov	r1, sl
 800460a:	ebb2 0801 	subs.w	r8, r2, r1
 800460e:	4659      	mov	r1, fp
 8004610:	eb63 0901 	sbc.w	r9, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004620:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004624:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004628:	4690      	mov	r8, r2
 800462a:	4699      	mov	r9, r3
 800462c:	4623      	mov	r3, r4
 800462e:	eb18 0303 	adds.w	r3, r8, r3
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	462b      	mov	r3, r5
 8004636:	eb49 0303 	adc.w	r3, r9, r3
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004648:	4629      	mov	r1, r5
 800464a:	024b      	lsls	r3, r1, #9
 800464c:	4621      	mov	r1, r4
 800464e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004652:	4621      	mov	r1, r4
 8004654:	024a      	lsls	r2, r1, #9
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800465e:	2200      	movs	r2, #0
 8004660:	65bb      	str	r3, [r7, #88]	; 0x58
 8004662:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004664:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004668:	f7fc fb3e 	bl	8000ce8 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4613      	mov	r3, r2
 8004672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004676:	e065      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x420>
 8004678:	40023800 	.word	0x40023800
 800467c:	00f42400 	.word	0x00f42400
 8004680:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004684:	4b3d      	ldr	r3, [pc, #244]	; (800477c <HAL_RCC_GetSysClockFreq+0x458>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	2200      	movs	r2, #0
 800468c:	4618      	mov	r0, r3
 800468e:	4611      	mov	r1, r2
 8004690:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004694:	653b      	str	r3, [r7, #80]	; 0x50
 8004696:	2300      	movs	r3, #0
 8004698:	657b      	str	r3, [r7, #84]	; 0x54
 800469a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800469e:	4642      	mov	r2, r8
 80046a0:	464b      	mov	r3, r9
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	0159      	lsls	r1, r3, #5
 80046ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b0:	0150      	lsls	r0, r2, #5
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4641      	mov	r1, r8
 80046b8:	1a51      	subs	r1, r2, r1
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	4649      	mov	r1, r9
 80046be:	eb63 0301 	sbc.w	r3, r3, r1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046d0:	4659      	mov	r1, fp
 80046d2:	018b      	lsls	r3, r1, #6
 80046d4:	4651      	mov	r1, sl
 80046d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046da:	4651      	mov	r1, sl
 80046dc:	018a      	lsls	r2, r1, #6
 80046de:	4651      	mov	r1, sl
 80046e0:	1a54      	subs	r4, r2, r1
 80046e2:	4659      	mov	r1, fp
 80046e4:	eb63 0501 	sbc.w	r5, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	00eb      	lsls	r3, r5, #3
 80046f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f6:	00e2      	lsls	r2, r4, #3
 80046f8:	4614      	mov	r4, r2
 80046fa:	461d      	mov	r5, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	18e3      	adds	r3, r4, r3
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	464b      	mov	r3, r9
 8004704:	eb45 0303 	adc.w	r3, r5, r3
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004716:	4629      	mov	r1, r5
 8004718:	028b      	lsls	r3, r1, #10
 800471a:	4621      	mov	r1, r4
 800471c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004720:	4621      	mov	r1, r4
 8004722:	028a      	lsls	r2, r1, #10
 8004724:	4610      	mov	r0, r2
 8004726:	4619      	mov	r1, r3
 8004728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800472c:	2200      	movs	r2, #0
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004730:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004732:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004736:	f7fc fad7 	bl	8000ce8 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4613      	mov	r3, r2
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_RCC_GetSysClockFreq+0x458>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0f1b      	lsrs	r3, r3, #28
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004762:	e003      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800476a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004770:	4618      	mov	r0, r3
 8004772:	37b8      	adds	r7, #184	; 0xb8
 8004774:	46bd      	mov	sp, r7
 8004776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	00f42400 	.word	0x00f42400

08004784 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e28d      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8083 	beq.w	80048aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047a4:	4b94      	ldr	r3, [pc, #592]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d019      	beq.n	80047e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047b0:	4b91      	ldr	r3, [pc, #580]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047bc:	4b8e      	ldr	r3, [pc, #568]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c8:	d00c      	beq.n	80047e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ca:	4b8b      	ldr	r3, [pc, #556]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d112      	bne.n	80047fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d6:	4b88      	ldr	r3, [pc, #544]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e2:	d10b      	bne.n	80047fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	4b84      	ldr	r3, [pc, #528]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d05b      	beq.n	80048a8 <HAL_RCC_OscConfig+0x124>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d157      	bne.n	80048a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e25a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004804:	d106      	bne.n	8004814 <HAL_RCC_OscConfig+0x90>
 8004806:	4b7c      	ldr	r3, [pc, #496]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7b      	ldr	r2, [pc, #492]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e01d      	b.n	8004850 <HAL_RCC_OscConfig+0xcc>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0xb4>
 800481e:	4b76      	ldr	r3, [pc, #472]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a72      	ldr	r2, [pc, #456]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0xcc>
 8004838:	4b6f      	ldr	r3, [pc, #444]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a6e      	ldr	r2, [pc, #440]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800483e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b6c      	ldr	r3, [pc, #432]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6b      	ldr	r2, [pc, #428]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800484a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fd fc2e 	bl	80020b8 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004860:	f7fd fc2a 	bl	80020b8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e21f      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	4b61      	ldr	r3, [pc, #388]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0xdc>
 800487e:	e014      	b.n	80048aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd fc1a 	bl	80020b8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd fc16 	bl	80020b8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e20b      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489a:	4b57      	ldr	r3, [pc, #348]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x104>
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d06f      	beq.n	8004996 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048b6:	4b50      	ldr	r3, [pc, #320]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d017      	beq.n	80048f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048c2:	4b4d      	ldr	r3, [pc, #308]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d105      	bne.n	80048da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048ce:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048da:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d11c      	bne.n	8004920 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e6:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d116      	bne.n	8004920 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f2:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_RCC_OscConfig+0x186>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d001      	beq.n	800490a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e1d3      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4937      	ldr	r1, [pc, #220]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491e:	e03a      	b.n	8004996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004928:	4b34      	ldr	r3, [pc, #208]	; (80049fc <HAL_RCC_OscConfig+0x278>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fd fbc3 	bl	80020b8 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004936:	f7fd fbbf 	bl	80020b8 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e1b4      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4925      	ldr	r1, [pc, #148]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 8004964:	4313      	orrs	r3, r2
 8004966:	600b      	str	r3, [r1, #0]
 8004968:	e015      	b.n	8004996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496a:	4b24      	ldr	r3, [pc, #144]	; (80049fc <HAL_RCC_OscConfig+0x278>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd fba2 	bl	80020b8 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004978:	f7fd fb9e 	bl	80020b8 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e193      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498a:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d036      	beq.n	8004a10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd fb82 	bl	80020b8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd fb7e 	bl	80020b8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e173      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCC_OscConfig+0x274>)
 80049cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x234>
 80049d6:	e01b      	b.n	8004a10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_OscConfig+0x27c>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049de:	f7fd fb6b 	bl	80020b8 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e4:	e00e      	b.n	8004a04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e6:	f7fd fb67 	bl	80020b8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d907      	bls.n	8004a04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e15c      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
 80049f8:	40023800 	.word	0x40023800
 80049fc:	42470000 	.word	0x42470000
 8004a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ea      	bne.n	80049e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8097 	beq.w	8004b4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a22:	4b83      	ldr	r3, [pc, #524]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	4b7f      	ldr	r3, [pc, #508]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a7e      	ldr	r2, [pc, #504]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4e:	4b79      	ldr	r3, [pc, #484]	; (8004c34 <HAL_RCC_OscConfig+0x4b0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d118      	bne.n	8004a8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a5a:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <HAL_RCC_OscConfig+0x4b0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a75      	ldr	r2, [pc, #468]	; (8004c34 <HAL_RCC_OscConfig+0x4b0>)
 8004a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a66:	f7fd fb27 	bl	80020b8 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6e:	f7fd fb23 	bl	80020b8 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e118      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	4b6c      	ldr	r3, [pc, #432]	; (8004c34 <HAL_RCC_OscConfig+0x4b0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x31e>
 8004a94:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a65      	ldr	r2, [pc, #404]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	e01c      	b.n	8004adc <HAL_RCC_OscConfig+0x358>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x340>
 8004aaa:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4a60      	ldr	r2, [pc, #384]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab6:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	4a5d      	ldr	r2, [pc, #372]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac2:	e00b      	b.n	8004adc <HAL_RCC_OscConfig+0x358>
 8004ac4:	4b5a      	ldr	r3, [pc, #360]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	4a59      	ldr	r2, [pc, #356]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad0:	4b57      	ldr	r3, [pc, #348]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	4a56      	ldr	r2, [pc, #344]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004ad6:	f023 0304 	bic.w	r3, r3, #4
 8004ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d015      	beq.n	8004b10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae4:	f7fd fae8 	bl	80020b8 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aec:	f7fd fae4 	bl	80020b8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e0d7      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b02:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ee      	beq.n	8004aec <HAL_RCC_OscConfig+0x368>
 8004b0e:	e014      	b.n	8004b3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fd fad2 	bl	80020b8 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd face 	bl	80020b8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0c1      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2e:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ee      	bne.n	8004b18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b40:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	4a3a      	ldr	r2, [pc, #232]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80ad 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b56:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d060      	beq.n	8004c24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d145      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	4b33      	ldr	r3, [pc, #204]	; (8004c38 <HAL_RCC_OscConfig+0x4b4>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd faa2 	bl	80020b8 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fd fa9e 	bl	80020b8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e093      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8a:	4b29      	ldr	r3, [pc, #164]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	019b      	lsls	r3, r3, #6
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	071b      	lsls	r3, r3, #28
 8004bc2:	491b      	ldr	r1, [pc, #108]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCC_OscConfig+0x4b4>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bce:	f7fd fa73 	bl	80020b8 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd6:	f7fd fa6f 	bl	80020b8 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e064      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x452>
 8004bf4:	e05c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <HAL_RCC_OscConfig+0x4b4>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fa5c 	bl	80020b8 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd fa58 	bl	80020b8 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04d      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x480>
 8004c22:	e045      	b.n	8004cb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e040      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40007000 	.word	0x40007000
 8004c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <HAL_RCC_OscConfig+0x538>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d030      	beq.n	8004cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d129      	bne.n	8004cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d122      	bne.n	8004cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d119      	bne.n	8004cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	3b01      	subs	r3, #1
 8004c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d10f      	bne.n	8004cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d107      	bne.n	8004cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800

08004cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e03f      	b.n	8004d52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc ff7e 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2224      	movs	r2, #36	; 0x24
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fde9 	bl	80058dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b08a      	sub	sp, #40	; 0x28
 8004d5e:	af02      	add	r7, sp, #8
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d17c      	bne.n	8004e74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_Transmit+0x2c>
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e075      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_UART_Transmit+0x3e>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e06e      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2221      	movs	r2, #33	; 0x21
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dae:	f7fd f983 	bl	80020b8 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc8:	d108      	bne.n	8004ddc <HAL_UART_Transmit+0x82>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e003      	b.n	8004de4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004dec:	e02a      	b.n	8004e44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fb29 	bl	8005450 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e036      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	3302      	adds	r3, #2
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	e007      	b.n	8004e36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1cf      	bne.n	8004dee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	2140      	movs	r1, #64	; 0x40
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 faf9 	bl	8005450 <UART_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e006      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d11d      	bne.n	8004ed4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_UART_Receive_IT+0x26>
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e016      	b.n	8004ed6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Receive_IT+0x38>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e00f      	b.n	8004ed6 <HAL_UART_Receive_IT+0x58>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fb2e 	bl	800552c <UART_Start_Receive_IT>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	e000      	b.n	8004ed6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b0ba      	sub	sp, #232	; 0xe8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10f      	bne.n	8004f46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_UART_IRQHandler+0x66>
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fc11 	bl	8005766 <UART_Receive_IT>
      return;
 8004f44:	e256      	b.n	80053f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80de 	beq.w	800510c <HAL_UART_IRQHandler+0x22c>
 8004f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80d1 	beq.w	800510c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_UART_IRQHandler+0xae>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xd2>
 8004f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f043 0202 	orr.w	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xf6>
 8004fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0204 	orr.w	r2, r3, #4
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d011      	beq.n	8005006 <HAL_UART_IRQHandler+0x126>
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d105      	bne.n	8004ffa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0208 	orr.w	r2, r3, #8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 81ed 	beq.w	80053ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_UART_IRQHandler+0x14e>
 800501c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fb9c 	bl	8005766 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_UART_IRQHandler+0x17a>
 8005052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d04f      	beq.n	80050fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 faa4 	bl	80055a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d141      	bne.n	80050f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800509a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800509e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1d9      	bne.n	800506e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d013      	beq.n	80050ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	4a7d      	ldr	r2, [pc, #500]	; (80052bc <HAL_UART_IRQHandler+0x3dc>)
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fd fb99 	bl	8002806 <HAL_DMA_Abort_IT>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e4:	4610      	mov	r0, r2
 80050e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e00e      	b.n	8005108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f99a 	bl	8005424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e00a      	b.n	8005108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f996 	bl	8005424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e006      	b.n	8005108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f992 	bl	8005424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005106:	e170      	b.n	80053ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	bf00      	nop
    return;
 800510a:	e16e      	b.n	80053ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 814a 	bne.w	80053aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8143 	beq.w	80053aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 813c 	beq.w	80053aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	f040 80b4 	bne.w	80052c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8140 	beq.w	80053ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005176:	429a      	cmp	r2, r3
 8005178:	f080 8139 	bcs.w	80053ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005182:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518e:	f000 8088 	beq.w	80052a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	330c      	adds	r3, #12
 8005198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1d9      	bne.n	8005192 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3314      	adds	r3, #20
 80051fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800520a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e1      	bne.n	80051de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3314      	adds	r3, #20
 8005220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800522a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3314      	adds	r3, #20
 800523a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800523e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800524c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e3      	bne.n	800521a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005272:	f023 0310 	bic.w	r3, r3, #16
 8005276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005284:	65ba      	str	r2, [r7, #88]	; 0x58
 8005286:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800528a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e3      	bne.n	8005260 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	4618      	mov	r0, r3
 800529e:	f7fd fa42 	bl	8002726 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f8c0 	bl	8005438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052b8:	e099      	b.n	80053ee <HAL_UART_IRQHandler+0x50e>
 80052ba:	bf00      	nop
 80052bc:	0800566f 	.word	0x0800566f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 808b 	beq.w	80053f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8086 	beq.w	80053f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800530a:	647a      	str	r2, [r7, #68]	; 0x44
 800530c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e3      	bne.n	80052e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	623b      	str	r3, [r7, #32]
   return(result);
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3314      	adds	r3, #20
 800533e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005342:	633a      	str	r2, [r7, #48]	; 0x30
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e3      	bne.n	800531e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	60fb      	str	r3, [r7, #12]
   return(result);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0310 	bic.w	r3, r3, #16
 800537a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	617b      	str	r3, [r7, #20]
   return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e3      	bne.n	8005364 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800539c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f848 	bl	8005438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053a8:	e023      	b.n	80053f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <HAL_UART_IRQHandler+0x4ea>
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f967 	bl	8005696 <UART_Transmit_IT>
    return;
 80053c8:	e014      	b.n	80053f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00e      	beq.n	80053f4 <HAL_UART_IRQHandler+0x514>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9a7 	bl	8005736 <UART_EndTransmit_IT>
    return;
 80053e8:	e004      	b.n	80053f4 <HAL_UART_IRQHandler+0x514>
    return;
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <HAL_UART_IRQHandler+0x514>
      return;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_UART_IRQHandler+0x514>
      return;
 80053f2:	bf00      	nop
  }
}
 80053f4:	37e8      	adds	r7, #232	; 0xe8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop

080053fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b090      	sub	sp, #64	; 0x40
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005460:	e050      	b.n	8005504 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005468:	d04c      	beq.n	8005504 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800546a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x30>
 8005470:	f7fc fe22 	bl	80020b8 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547c:	429a      	cmp	r2, r3
 800547e:	d241      	bcs.n	8005504 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054a0:	637a      	str	r2, [r7, #52]	; 0x34
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	613b      	str	r3, [r7, #16]
   return(result);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d4:	623a      	str	r2, [r7, #32]
 80054d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	69f9      	ldr	r1, [r7, #28]
 80054da:	6a3a      	ldr	r2, [r7, #32]
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e5      	bne.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e00f      	b.n	8005524 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	429a      	cmp	r2, r3
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	429a      	cmp	r2, r3
 8005520:	d09f      	beq.n	8005462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3740      	adds	r7, #64	; 0x40
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	88fa      	ldrh	r2, [r7, #6]
 800554a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2222      	movs	r2, #34	; 0x22
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005578:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0220 	orr.w	r2, r2, #32
 8005598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b095      	sub	sp, #84	; 0x54
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d0:	643a      	str	r2, [r7, #64]	; 0x40
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	d119      	bne.n	8005654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	647b      	str	r3, [r7, #68]	; 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005640:	61ba      	str	r2, [r7, #24]
 8005642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	613b      	str	r3, [r7, #16]
   return(result);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005662:	bf00      	nop
 8005664:	3754      	adds	r7, #84	; 0x54
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fecb 	bl	8005424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b21      	cmp	r3, #33	; 0x21
 80056a8:	d13e      	bne.n	8005728 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b2:	d114      	bne.n	80056de <UART_Transmit_IT+0x48>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d110      	bne.n	80056de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	621a      	str	r2, [r3, #32]
 80056dc:	e008      	b.n	80056f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6211      	str	r1, [r2, #32]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4619      	mov	r1, r3
 80056fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10f      	bne.n	8005724 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005712:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005722:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e000      	b.n	800572a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800574c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fe50 	bl	80053fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08c      	sub	sp, #48	; 0x30
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b22      	cmp	r3, #34	; 0x22
 8005778:	f040 80ab 	bne.w	80058d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d117      	bne.n	80057b6 <UART_Receive_IT+0x50>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d113      	bne.n	80057b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
 80057b4:	e026      	b.n	8005804 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c8:	d007      	beq.n	80057da <UART_Receive_IT+0x74>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <UART_Receive_IT+0x82>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e008      	b.n	80057fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29b      	uxth	r3, r3
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	4619      	mov	r1, r3
 8005812:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005814:	2b00      	cmp	r3, #0
 8005816:	d15a      	bne.n	80058ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0220 	bic.w	r2, r2, #32
 8005826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	2b01      	cmp	r3, #1
 8005856:	d135      	bne.n	80058c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	613b      	str	r3, [r7, #16]
   return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f023 0310 	bic.w	r3, r3, #16
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	623a      	str	r2, [r7, #32]
 8005880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	69f9      	ldr	r1, [r7, #28]
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	61bb      	str	r3, [r7, #24]
   return(result);
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e5      	bne.n	800585e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b10      	cmp	r3, #16
 800589e:	d10a      	bne.n	80058b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fdbb 	bl	8005438 <HAL_UARTEx_RxEventCallback>
 80058c2:	e002      	b.n	80058ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fda3 	bl	8005410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e002      	b.n	80058d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e000      	b.n	80058d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
  }
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3730      	adds	r7, #48	; 0x30
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e0:	b0c0      	sub	sp, #256	; 0x100
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	ea40 0301 	orr.w	r3, r0, r1
 8005904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	431a      	orrs	r2, r3
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	431a      	orrs	r2, r3
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005934:	f021 010c 	bic.w	r1, r1, #12
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005942:	430b      	orrs	r3, r1
 8005944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	6999      	ldr	r1, [r3, #24]
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	ea40 0301 	orr.w	r3, r0, r1
 8005962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b8f      	ldr	r3, [pc, #572]	; (8005ba8 <UART_SetConfig+0x2cc>)
 800596c:	429a      	cmp	r2, r3
 800596e:	d005      	beq.n	800597c <UART_SetConfig+0xa0>
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b8d      	ldr	r3, [pc, #564]	; (8005bac <UART_SetConfig+0x2d0>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d104      	bne.n	8005986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7fe fcbe 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 8005980:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005984:	e003      	b.n	800598e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005986:	f7fe fca5 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 800598a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005998:	f040 810c 	bne.w	8005bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800599c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059ae:	4622      	mov	r2, r4
 80059b0:	462b      	mov	r3, r5
 80059b2:	1891      	adds	r1, r2, r2
 80059b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80059b6:	415b      	adcs	r3, r3
 80059b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059be:	4621      	mov	r1, r4
 80059c0:	eb12 0801 	adds.w	r8, r2, r1
 80059c4:	4629      	mov	r1, r5
 80059c6:	eb43 0901 	adc.w	r9, r3, r1
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059de:	4690      	mov	r8, r2
 80059e0:	4699      	mov	r9, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	eb18 0303 	adds.w	r3, r8, r3
 80059e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059ec:	462b      	mov	r3, r5
 80059ee:	eb49 0303 	adc.w	r3, r9, r3
 80059f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	18db      	adds	r3, r3, r3
 8005a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a10:	4613      	mov	r3, r2
 8005a12:	eb42 0303 	adc.w	r3, r2, r3
 8005a16:	657b      	str	r3, [r7, #84]	; 0x54
 8005a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a20:	f7fb f962 	bl	8000ce8 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4b61      	ldr	r3, [pc, #388]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	011c      	lsls	r4, r3, #4
 8005a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	1891      	adds	r1, r2, r2
 8005a4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a4c:	415b      	adcs	r3, r3
 8005a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a54:	4641      	mov	r1, r8
 8005a56:	eb12 0a01 	adds.w	sl, r2, r1
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a74:	4692      	mov	sl, r2
 8005a76:	469b      	mov	fp, r3
 8005a78:	4643      	mov	r3, r8
 8005a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a82:	464b      	mov	r3, r9
 8005a84:	eb4b 0303 	adc.w	r3, fp, r3
 8005a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	18db      	adds	r3, r3, r3
 8005aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
 8005aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ab6:	f7fb f917 	bl	8000ce8 <__aeabi_uldivmod>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2264      	movs	r2, #100	; 0x64
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	1acb      	subs	r3, r1, r3
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ad6:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ae4:	441c      	add	r4, r3
 8005ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005af0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	1891      	adds	r1, r2, r2
 8005afe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b00:	415b      	adcs	r3, r3
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b08:	4641      	mov	r1, r8
 8005b0a:	1851      	adds	r1, r2, r1
 8005b0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b0e:	4649      	mov	r1, r9
 8005b10:	414b      	adcs	r3, r1
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b20:	4659      	mov	r1, fp
 8005b22:	00cb      	lsls	r3, r1, #3
 8005b24:	4651      	mov	r1, sl
 8005b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	00ca      	lsls	r2, r1, #3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	4642      	mov	r2, r8
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	460a      	mov	r2, r1
 8005b40:	eb42 0303 	adc.w	r3, r2, r3
 8005b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	18db      	adds	r3, r3, r3
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b62:	4613      	mov	r3, r2
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b72:	f7fb f8b9 	bl	8000ce8 <__aeabi_uldivmod>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	2164      	movs	r1, #100	; 0x64
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	3332      	adds	r3, #50	; 0x32
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <UART_SetConfig+0x2d4>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	f003 0207 	and.w	r2, r3, #7
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4422      	add	r2, r4
 8005ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ba4:	e105      	b.n	8005db2 <UART_SetConfig+0x4d6>
 8005ba6:	bf00      	nop
 8005ba8:	40011000 	.word	0x40011000
 8005bac:	40011400 	.word	0x40011400
 8005bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	6239      	str	r1, [r7, #32]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	1854      	adds	r4, r2, r1
 8005bda:	4649      	mov	r1, r9
 8005bdc:	eb43 0501 	adc.w	r5, r3, r1
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	00eb      	lsls	r3, r5, #3
 8005bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bee:	00e2      	lsls	r2, r4, #3
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	461d      	mov	r5, r3
 8005bf4:	4643      	mov	r3, r8
 8005bf6:	18e3      	adds	r3, r4, r3
 8005bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	eb45 0303 	adc.w	r3, r5, r3
 8005c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c22:	4629      	mov	r1, r5
 8005c24:	008b      	lsls	r3, r1, #2
 8005c26:	4621      	mov	r1, r4
 8005c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	008a      	lsls	r2, r1, #2
 8005c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c34:	f7fb f858 	bl	8000ce8 <__aeabi_uldivmod>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4b60      	ldr	r3, [pc, #384]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	011c      	lsls	r4, r3, #4
 8005c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	61b9      	str	r1, [r7, #24]
 8005c60:	415b      	adcs	r3, r3
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c68:	4641      	mov	r1, r8
 8005c6a:	1851      	adds	r1, r2, r1
 8005c6c:	6139      	str	r1, [r7, #16]
 8005c6e:	4649      	mov	r1, r9
 8005c70:	414b      	adcs	r3, r1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c80:	4659      	mov	r1, fp
 8005c82:	00cb      	lsls	r3, r1, #3
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	00ca      	lsls	r2, r1, #3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	4642      	mov	r2, r8
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	008b      	lsls	r3, r1, #2
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cca:	4641      	mov	r1, r8
 8005ccc:	008a      	lsls	r2, r1, #2
 8005cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cd2:	f7fb f809 	bl	8000ce8 <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b39      	ldr	r3, [pc, #228]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a34      	ldr	r2, [pc, #208]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cfa:	441c      	add	r4, r3
 8005cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d00:	2200      	movs	r2, #0
 8005d02:	673b      	str	r3, [r7, #112]	; 0x70
 8005d04:	677a      	str	r2, [r7, #116]	; 0x74
 8005d06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	1891      	adds	r1, r2, r2
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	415b      	adcs	r3, r3
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	1851      	adds	r1, r2, r1
 8005d1e:	6039      	str	r1, [r7, #0]
 8005d20:	4649      	mov	r1, r9
 8005d22:	414b      	adcs	r3, r1
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d32:	4659      	mov	r1, fp
 8005d34:	00cb      	lsls	r3, r1, #3
 8005d36:	4651      	mov	r1, sl
 8005d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	00ca      	lsls	r2, r1, #3
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	4603      	mov	r3, r0
 8005d46:	4642      	mov	r2, r8
 8005d48:	189b      	adds	r3, r3, r2
 8005d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	460a      	mov	r2, r1
 8005d50:	eb42 0303 	adc.w	r3, r2, r3
 8005d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d60:	667a      	str	r2, [r7, #100]	; 0x64
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d6e:	4649      	mov	r1, r9
 8005d70:	008b      	lsls	r3, r1, #2
 8005d72:	4641      	mov	r1, r8
 8005d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d78:	4641      	mov	r1, r8
 8005d7a:	008a      	lsls	r2, r1, #2
 8005d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d80:	f7fa ffb2 	bl	8000ce8 <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	2164      	movs	r1, #100	; 0x64
 8005d92:	fb01 f303 	mul.w	r3, r1, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	3332      	adds	r3, #50	; 0x32
 8005d9c:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <UART_SetConfig+0x4e4>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4422      	add	r2, r4
 8005db0:	609a      	str	r2, [r3, #8]
}
 8005db2:	bf00      	nop
 8005db4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005db8:	46bd      	mov	sp, r7
 8005dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dbe:	bf00      	nop
 8005dc0:	51eb851f 	.word	0x51eb851f

08005dc4 <__errno>:
 8005dc4:	4b01      	ldr	r3, [pc, #4]	; (8005dcc <__errno+0x8>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	2000000c 	.word	0x2000000c

08005dd0 <__libc_init_array>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	4d0d      	ldr	r5, [pc, #52]	; (8005e08 <__libc_init_array+0x38>)
 8005dd4:	4c0d      	ldr	r4, [pc, #52]	; (8005e0c <__libc_init_array+0x3c>)
 8005dd6:	1b64      	subs	r4, r4, r5
 8005dd8:	10a4      	asrs	r4, r4, #2
 8005dda:	2600      	movs	r6, #0
 8005ddc:	42a6      	cmp	r6, r4
 8005dde:	d109      	bne.n	8005df4 <__libc_init_array+0x24>
 8005de0:	4d0b      	ldr	r5, [pc, #44]	; (8005e10 <__libc_init_array+0x40>)
 8005de2:	4c0c      	ldr	r4, [pc, #48]	; (8005e14 <__libc_init_array+0x44>)
 8005de4:	f005 fc4a 	bl	800b67c <_init>
 8005de8:	1b64      	subs	r4, r4, r5
 8005dea:	10a4      	asrs	r4, r4, #2
 8005dec:	2600      	movs	r6, #0
 8005dee:	42a6      	cmp	r6, r4
 8005df0:	d105      	bne.n	8005dfe <__libc_init_array+0x2e>
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
 8005df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df8:	4798      	blx	r3
 8005dfa:	3601      	adds	r6, #1
 8005dfc:	e7ee      	b.n	8005ddc <__libc_init_array+0xc>
 8005dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e02:	4798      	blx	r3
 8005e04:	3601      	adds	r6, #1
 8005e06:	e7f2      	b.n	8005dee <__libc_init_array+0x1e>
 8005e08:	0800bd00 	.word	0x0800bd00
 8005e0c:	0800bd00 	.word	0x0800bd00
 8005e10:	0800bd00 	.word	0x0800bd00
 8005e14:	0800bd04 	.word	0x0800bd04

08005e18 <memcmp>:
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	3901      	subs	r1, #1
 8005e1c:	4402      	add	r2, r0
 8005e1e:	4290      	cmp	r0, r2
 8005e20:	d101      	bne.n	8005e26 <memcmp+0xe>
 8005e22:	2000      	movs	r0, #0
 8005e24:	e005      	b.n	8005e32 <memcmp+0x1a>
 8005e26:	7803      	ldrb	r3, [r0, #0]
 8005e28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	d001      	beq.n	8005e34 <memcmp+0x1c>
 8005e30:	1b18      	subs	r0, r3, r4
 8005e32:	bd10      	pop	{r4, pc}
 8005e34:	3001      	adds	r0, #1
 8005e36:	e7f2      	b.n	8005e1e <memcmp+0x6>

08005e38 <memset>:
 8005e38:	4402      	add	r2, r0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d100      	bne.n	8005e42 <memset+0xa>
 8005e40:	4770      	bx	lr
 8005e42:	f803 1b01 	strb.w	r1, [r3], #1
 8005e46:	e7f9      	b.n	8005e3c <memset+0x4>

08005e48 <__cvt>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	ec55 4b10 	vmov	r4, r5, d0
 8005e50:	2d00      	cmp	r5, #0
 8005e52:	460e      	mov	r6, r1
 8005e54:	4619      	mov	r1, r3
 8005e56:	462b      	mov	r3, r5
 8005e58:	bfbb      	ittet	lt
 8005e5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e5e:	461d      	movlt	r5, r3
 8005e60:	2300      	movge	r3, #0
 8005e62:	232d      	movlt	r3, #45	; 0x2d
 8005e64:	700b      	strb	r3, [r1, #0]
 8005e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e6c:	4691      	mov	r9, r2
 8005e6e:	f023 0820 	bic.w	r8, r3, #32
 8005e72:	bfbc      	itt	lt
 8005e74:	4622      	movlt	r2, r4
 8005e76:	4614      	movlt	r4, r2
 8005e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e7c:	d005      	beq.n	8005e8a <__cvt+0x42>
 8005e7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e82:	d100      	bne.n	8005e86 <__cvt+0x3e>
 8005e84:	3601      	adds	r6, #1
 8005e86:	2102      	movs	r1, #2
 8005e88:	e000      	b.n	8005e8c <__cvt+0x44>
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	ab03      	add	r3, sp, #12
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	ab02      	add	r3, sp, #8
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	ec45 4b10 	vmov	d0, r4, r5
 8005e98:	4653      	mov	r3, sl
 8005e9a:	4632      	mov	r2, r6
 8005e9c:	f001 fefc 	bl	8007c98 <_dtoa_r>
 8005ea0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	d102      	bne.n	8005eae <__cvt+0x66>
 8005ea8:	f019 0f01 	tst.w	r9, #1
 8005eac:	d022      	beq.n	8005ef4 <__cvt+0xac>
 8005eae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eb2:	eb07 0906 	add.w	r9, r7, r6
 8005eb6:	d110      	bne.n	8005eda <__cvt+0x92>
 8005eb8:	783b      	ldrb	r3, [r7, #0]
 8005eba:	2b30      	cmp	r3, #48	; 0x30
 8005ebc:	d10a      	bne.n	8005ed4 <__cvt+0x8c>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	f7fa fe2f 	bl	8000b28 <__aeabi_dcmpeq>
 8005eca:	b918      	cbnz	r0, 8005ed4 <__cvt+0x8c>
 8005ecc:	f1c6 0601 	rsb	r6, r6, #1
 8005ed0:	f8ca 6000 	str.w	r6, [sl]
 8005ed4:	f8da 3000 	ldr.w	r3, [sl]
 8005ed8:	4499      	add	r9, r3
 8005eda:	2200      	movs	r2, #0
 8005edc:	2300      	movs	r3, #0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa fe21 	bl	8000b28 <__aeabi_dcmpeq>
 8005ee6:	b108      	cbz	r0, 8005eec <__cvt+0xa4>
 8005ee8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005eec:	2230      	movs	r2, #48	; 0x30
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	454b      	cmp	r3, r9
 8005ef2:	d307      	bcc.n	8005f04 <__cvt+0xbc>
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ef8:	1bdb      	subs	r3, r3, r7
 8005efa:	4638      	mov	r0, r7
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	b004      	add	sp, #16
 8005f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	9103      	str	r1, [sp, #12]
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e7f0      	b.n	8005eee <__cvt+0xa6>

08005f0c <__exponent>:
 8005f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2900      	cmp	r1, #0
 8005f12:	bfb8      	it	lt
 8005f14:	4249      	neglt	r1, r1
 8005f16:	f803 2b02 	strb.w	r2, [r3], #2
 8005f1a:	bfb4      	ite	lt
 8005f1c:	222d      	movlt	r2, #45	; 0x2d
 8005f1e:	222b      	movge	r2, #43	; 0x2b
 8005f20:	2909      	cmp	r1, #9
 8005f22:	7042      	strb	r2, [r0, #1]
 8005f24:	dd2a      	ble.n	8005f7c <__exponent+0x70>
 8005f26:	f10d 0407 	add.w	r4, sp, #7
 8005f2a:	46a4      	mov	ip, r4
 8005f2c:	270a      	movs	r7, #10
 8005f2e:	46a6      	mov	lr, r4
 8005f30:	460a      	mov	r2, r1
 8005f32:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f36:	fb07 1516 	mls	r5, r7, r6, r1
 8005f3a:	3530      	adds	r5, #48	; 0x30
 8005f3c:	2a63      	cmp	r2, #99	; 0x63
 8005f3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005f42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f46:	4631      	mov	r1, r6
 8005f48:	dcf1      	bgt.n	8005f2e <__exponent+0x22>
 8005f4a:	3130      	adds	r1, #48	; 0x30
 8005f4c:	f1ae 0502 	sub.w	r5, lr, #2
 8005f50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f54:	1c44      	adds	r4, r0, #1
 8005f56:	4629      	mov	r1, r5
 8005f58:	4561      	cmp	r1, ip
 8005f5a:	d30a      	bcc.n	8005f72 <__exponent+0x66>
 8005f5c:	f10d 0209 	add.w	r2, sp, #9
 8005f60:	eba2 020e 	sub.w	r2, r2, lr
 8005f64:	4565      	cmp	r5, ip
 8005f66:	bf88      	it	hi
 8005f68:	2200      	movhi	r2, #0
 8005f6a:	4413      	add	r3, r2
 8005f6c:	1a18      	subs	r0, r3, r0
 8005f6e:	b003      	add	sp, #12
 8005f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f7a:	e7ed      	b.n	8005f58 <__exponent+0x4c>
 8005f7c:	2330      	movs	r3, #48	; 0x30
 8005f7e:	3130      	adds	r1, #48	; 0x30
 8005f80:	7083      	strb	r3, [r0, #2]
 8005f82:	70c1      	strb	r1, [r0, #3]
 8005f84:	1d03      	adds	r3, r0, #4
 8005f86:	e7f1      	b.n	8005f6c <__exponent+0x60>

08005f88 <_printf_float>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	ed2d 8b02 	vpush	{d8}
 8005f90:	b08d      	sub	sp, #52	; 0x34
 8005f92:	460c      	mov	r4, r1
 8005f94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f98:	4616      	mov	r6, r2
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	f003 f98f 	bl	80092c0 <_localeconv_r>
 8005fa2:	f8d0 a000 	ldr.w	sl, [r0]
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	f7fa f93c 	bl	8000224 <strlen>
 8005fac:	2300      	movs	r3, #0
 8005fae:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	9305      	str	r3, [sp, #20]
 8005fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fbc:	3307      	adds	r3, #7
 8005fbe:	f023 0307 	bic.w	r3, r3, #7
 8005fc2:	f103 0208 	add.w	r2, r3, #8
 8005fc6:	f8c8 2000 	str.w	r2, [r8]
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fda:	9307      	str	r3, [sp, #28]
 8005fdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fe0:	ee08 0a10 	vmov	s16, r0
 8005fe4:	4b9f      	ldr	r3, [pc, #636]	; (8006264 <_printf_float+0x2dc>)
 8005fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fee:	f7fa fdcd 	bl	8000b8c <__aeabi_dcmpun>
 8005ff2:	bb88      	cbnz	r0, 8006058 <_printf_float+0xd0>
 8005ff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ff8:	4b9a      	ldr	r3, [pc, #616]	; (8006264 <_printf_float+0x2dc>)
 8005ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ffe:	f7fa fda7 	bl	8000b50 <__aeabi_dcmple>
 8006002:	bb48      	cbnz	r0, 8006058 <_printf_float+0xd0>
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	4640      	mov	r0, r8
 800600a:	4649      	mov	r1, r9
 800600c:	f7fa fd96 	bl	8000b3c <__aeabi_dcmplt>
 8006010:	b110      	cbz	r0, 8006018 <_printf_float+0x90>
 8006012:	232d      	movs	r3, #45	; 0x2d
 8006014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006018:	4b93      	ldr	r3, [pc, #588]	; (8006268 <_printf_float+0x2e0>)
 800601a:	4894      	ldr	r0, [pc, #592]	; (800626c <_printf_float+0x2e4>)
 800601c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006020:	bf94      	ite	ls
 8006022:	4698      	movls	r8, r3
 8006024:	4680      	movhi	r8, r0
 8006026:	2303      	movs	r3, #3
 8006028:	6123      	str	r3, [r4, #16]
 800602a:	9b05      	ldr	r3, [sp, #20]
 800602c:	f023 0204 	bic.w	r2, r3, #4
 8006030:	6022      	str	r2, [r4, #0]
 8006032:	f04f 0900 	mov.w	r9, #0
 8006036:	9700      	str	r7, [sp, #0]
 8006038:	4633      	mov	r3, r6
 800603a:	aa0b      	add	r2, sp, #44	; 0x2c
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	f000 f9d8 	bl	80063f4 <_printf_common>
 8006044:	3001      	adds	r0, #1
 8006046:	f040 8090 	bne.w	800616a <_printf_float+0x1e2>
 800604a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800604e:	b00d      	add	sp, #52	; 0x34
 8006050:	ecbd 8b02 	vpop	{d8}
 8006054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa fd94 	bl	8000b8c <__aeabi_dcmpun>
 8006064:	b140      	cbz	r0, 8006078 <_printf_float+0xf0>
 8006066:	464b      	mov	r3, r9
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfbc      	itt	lt
 800606c:	232d      	movlt	r3, #45	; 0x2d
 800606e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006072:	487f      	ldr	r0, [pc, #508]	; (8006270 <_printf_float+0x2e8>)
 8006074:	4b7f      	ldr	r3, [pc, #508]	; (8006274 <_printf_float+0x2ec>)
 8006076:	e7d1      	b.n	800601c <_printf_float+0x94>
 8006078:	6863      	ldr	r3, [r4, #4]
 800607a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800607e:	9206      	str	r2, [sp, #24]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	d13f      	bne.n	8006104 <_printf_float+0x17c>
 8006084:	2306      	movs	r3, #6
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	6861      	ldr	r1, [r4, #4]
 800608c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006090:	2300      	movs	r3, #0
 8006092:	9303      	str	r3, [sp, #12]
 8006094:	ab0a      	add	r3, sp, #40	; 0x28
 8006096:	e9cd b301 	strd	fp, r3, [sp, #4]
 800609a:	ab09      	add	r3, sp, #36	; 0x24
 800609c:	ec49 8b10 	vmov	d0, r8, r9
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	6022      	str	r2, [r4, #0]
 80060a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060a8:	4628      	mov	r0, r5
 80060aa:	f7ff fecd 	bl	8005e48 <__cvt>
 80060ae:	9b06      	ldr	r3, [sp, #24]
 80060b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b2:	2b47      	cmp	r3, #71	; 0x47
 80060b4:	4680      	mov	r8, r0
 80060b6:	d108      	bne.n	80060ca <_printf_float+0x142>
 80060b8:	1cc8      	adds	r0, r1, #3
 80060ba:	db02      	blt.n	80060c2 <_printf_float+0x13a>
 80060bc:	6863      	ldr	r3, [r4, #4]
 80060be:	4299      	cmp	r1, r3
 80060c0:	dd41      	ble.n	8006146 <_printf_float+0x1be>
 80060c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80060c6:	fa5f fb8b 	uxtb.w	fp, fp
 80060ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060ce:	d820      	bhi.n	8006112 <_printf_float+0x18a>
 80060d0:	3901      	subs	r1, #1
 80060d2:	465a      	mov	r2, fp
 80060d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060d8:	9109      	str	r1, [sp, #36]	; 0x24
 80060da:	f7ff ff17 	bl	8005f0c <__exponent>
 80060de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060e0:	1813      	adds	r3, r2, r0
 80060e2:	2a01      	cmp	r2, #1
 80060e4:	4681      	mov	r9, r0
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	dc02      	bgt.n	80060f0 <_printf_float+0x168>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	07d2      	lsls	r2, r2, #31
 80060ee:	d501      	bpl.n	80060f4 <_printf_float+0x16c>
 80060f0:	3301      	adds	r3, #1
 80060f2:	6123      	str	r3, [r4, #16]
 80060f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d09c      	beq.n	8006036 <_printf_float+0xae>
 80060fc:	232d      	movs	r3, #45	; 0x2d
 80060fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006102:	e798      	b.n	8006036 <_printf_float+0xae>
 8006104:	9a06      	ldr	r2, [sp, #24]
 8006106:	2a47      	cmp	r2, #71	; 0x47
 8006108:	d1be      	bne.n	8006088 <_printf_float+0x100>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1bc      	bne.n	8006088 <_printf_float+0x100>
 800610e:	2301      	movs	r3, #1
 8006110:	e7b9      	b.n	8006086 <_printf_float+0xfe>
 8006112:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006116:	d118      	bne.n	800614a <_printf_float+0x1c2>
 8006118:	2900      	cmp	r1, #0
 800611a:	6863      	ldr	r3, [r4, #4]
 800611c:	dd0b      	ble.n	8006136 <_printf_float+0x1ae>
 800611e:	6121      	str	r1, [r4, #16]
 8006120:	b913      	cbnz	r3, 8006128 <_printf_float+0x1a0>
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	07d0      	lsls	r0, r2, #31
 8006126:	d502      	bpl.n	800612e <_printf_float+0x1a6>
 8006128:	3301      	adds	r3, #1
 800612a:	440b      	add	r3, r1
 800612c:	6123      	str	r3, [r4, #16]
 800612e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006130:	f04f 0900 	mov.w	r9, #0
 8006134:	e7de      	b.n	80060f4 <_printf_float+0x16c>
 8006136:	b913      	cbnz	r3, 800613e <_printf_float+0x1b6>
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	07d2      	lsls	r2, r2, #31
 800613c:	d501      	bpl.n	8006142 <_printf_float+0x1ba>
 800613e:	3302      	adds	r3, #2
 8006140:	e7f4      	b.n	800612c <_printf_float+0x1a4>
 8006142:	2301      	movs	r3, #1
 8006144:	e7f2      	b.n	800612c <_printf_float+0x1a4>
 8006146:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800614a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614c:	4299      	cmp	r1, r3
 800614e:	db05      	blt.n	800615c <_printf_float+0x1d4>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	6121      	str	r1, [r4, #16]
 8006154:	07d8      	lsls	r0, r3, #31
 8006156:	d5ea      	bpl.n	800612e <_printf_float+0x1a6>
 8006158:	1c4b      	adds	r3, r1, #1
 800615a:	e7e7      	b.n	800612c <_printf_float+0x1a4>
 800615c:	2900      	cmp	r1, #0
 800615e:	bfd4      	ite	le
 8006160:	f1c1 0202 	rsble	r2, r1, #2
 8006164:	2201      	movgt	r2, #1
 8006166:	4413      	add	r3, r2
 8006168:	e7e0      	b.n	800612c <_printf_float+0x1a4>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	055a      	lsls	r2, r3, #21
 800616e:	d407      	bmi.n	8006180 <_printf_float+0x1f8>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	4642      	mov	r2, r8
 8006174:	4631      	mov	r1, r6
 8006176:	4628      	mov	r0, r5
 8006178:	47b8      	blx	r7
 800617a:	3001      	adds	r0, #1
 800617c:	d12c      	bne.n	80061d8 <_printf_float+0x250>
 800617e:	e764      	b.n	800604a <_printf_float+0xc2>
 8006180:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006184:	f240 80e0 	bls.w	8006348 <_printf_float+0x3c0>
 8006188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800618c:	2200      	movs	r2, #0
 800618e:	2300      	movs	r3, #0
 8006190:	f7fa fcca 	bl	8000b28 <__aeabi_dcmpeq>
 8006194:	2800      	cmp	r0, #0
 8006196:	d034      	beq.n	8006202 <_printf_float+0x27a>
 8006198:	4a37      	ldr	r2, [pc, #220]	; (8006278 <_printf_float+0x2f0>)
 800619a:	2301      	movs	r3, #1
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	f43f af51 	beq.w	800604a <_printf_float+0xc2>
 80061a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ac:	429a      	cmp	r2, r3
 80061ae:	db02      	blt.n	80061b6 <_printf_float+0x22e>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	07d8      	lsls	r0, r3, #31
 80061b4:	d510      	bpl.n	80061d8 <_printf_float+0x250>
 80061b6:	ee18 3a10 	vmov	r3, s16
 80061ba:	4652      	mov	r2, sl
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f af41 	beq.w	800604a <_printf_float+0xc2>
 80061c8:	f04f 0800 	mov.w	r8, #0
 80061cc:	f104 091a 	add.w	r9, r4, #26
 80061d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d2:	3b01      	subs	r3, #1
 80061d4:	4543      	cmp	r3, r8
 80061d6:	dc09      	bgt.n	80061ec <_printf_float+0x264>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	079b      	lsls	r3, r3, #30
 80061dc:	f100 8105 	bmi.w	80063ea <_printf_float+0x462>
 80061e0:	68e0      	ldr	r0, [r4, #12]
 80061e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e4:	4298      	cmp	r0, r3
 80061e6:	bfb8      	it	lt
 80061e8:	4618      	movlt	r0, r3
 80061ea:	e730      	b.n	800604e <_printf_float+0xc6>
 80061ec:	2301      	movs	r3, #1
 80061ee:	464a      	mov	r2, r9
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f af27 	beq.w	800604a <_printf_float+0xc2>
 80061fc:	f108 0801 	add.w	r8, r8, #1
 8006200:	e7e6      	b.n	80061d0 <_printf_float+0x248>
 8006202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	dc39      	bgt.n	800627c <_printf_float+0x2f4>
 8006208:	4a1b      	ldr	r2, [pc, #108]	; (8006278 <_printf_float+0x2f0>)
 800620a:	2301      	movs	r3, #1
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f af19 	beq.w	800604a <_printf_float+0xc2>
 8006218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800621c:	4313      	orrs	r3, r2
 800621e:	d102      	bne.n	8006226 <_printf_float+0x29e>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	07d9      	lsls	r1, r3, #31
 8006224:	d5d8      	bpl.n	80061d8 <_printf_float+0x250>
 8006226:	ee18 3a10 	vmov	r3, s16
 800622a:	4652      	mov	r2, sl
 800622c:	4631      	mov	r1, r6
 800622e:	4628      	mov	r0, r5
 8006230:	47b8      	blx	r7
 8006232:	3001      	adds	r0, #1
 8006234:	f43f af09 	beq.w	800604a <_printf_float+0xc2>
 8006238:	f04f 0900 	mov.w	r9, #0
 800623c:	f104 0a1a 	add.w	sl, r4, #26
 8006240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006242:	425b      	negs	r3, r3
 8006244:	454b      	cmp	r3, r9
 8006246:	dc01      	bgt.n	800624c <_printf_float+0x2c4>
 8006248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624a:	e792      	b.n	8006172 <_printf_float+0x1ea>
 800624c:	2301      	movs	r3, #1
 800624e:	4652      	mov	r2, sl
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	47b8      	blx	r7
 8006256:	3001      	adds	r0, #1
 8006258:	f43f aef7 	beq.w	800604a <_printf_float+0xc2>
 800625c:	f109 0901 	add.w	r9, r9, #1
 8006260:	e7ee      	b.n	8006240 <_printf_float+0x2b8>
 8006262:	bf00      	nop
 8006264:	7fefffff 	.word	0x7fefffff
 8006268:	0800b81c 	.word	0x0800b81c
 800626c:	0800b820 	.word	0x0800b820
 8006270:	0800b828 	.word	0x0800b828
 8006274:	0800b824 	.word	0x0800b824
 8006278:	0800b82c 	.word	0x0800b82c
 800627c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006280:	429a      	cmp	r2, r3
 8006282:	bfa8      	it	ge
 8006284:	461a      	movge	r2, r3
 8006286:	2a00      	cmp	r2, #0
 8006288:	4691      	mov	r9, r2
 800628a:	dc37      	bgt.n	80062fc <_printf_float+0x374>
 800628c:	f04f 0b00 	mov.w	fp, #0
 8006290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006294:	f104 021a 	add.w	r2, r4, #26
 8006298:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800629a:	9305      	str	r3, [sp, #20]
 800629c:	eba3 0309 	sub.w	r3, r3, r9
 80062a0:	455b      	cmp	r3, fp
 80062a2:	dc33      	bgt.n	800630c <_printf_float+0x384>
 80062a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a8:	429a      	cmp	r2, r3
 80062aa:	db3b      	blt.n	8006324 <_printf_float+0x39c>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	07da      	lsls	r2, r3, #31
 80062b0:	d438      	bmi.n	8006324 <_printf_float+0x39c>
 80062b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b4:	9a05      	ldr	r2, [sp, #20]
 80062b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062b8:	1a9a      	subs	r2, r3, r2
 80062ba:	eba3 0901 	sub.w	r9, r3, r1
 80062be:	4591      	cmp	r9, r2
 80062c0:	bfa8      	it	ge
 80062c2:	4691      	movge	r9, r2
 80062c4:	f1b9 0f00 	cmp.w	r9, #0
 80062c8:	dc35      	bgt.n	8006336 <_printf_float+0x3ae>
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062d2:	f104 0a1a 	add.w	sl, r4, #26
 80062d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	eba3 0309 	sub.w	r3, r3, r9
 80062e0:	4543      	cmp	r3, r8
 80062e2:	f77f af79 	ble.w	80061d8 <_printf_float+0x250>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4652      	mov	r2, sl
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	f43f aeaa 	beq.w	800604a <_printf_float+0xc2>
 80062f6:	f108 0801 	add.w	r8, r8, #1
 80062fa:	e7ec      	b.n	80062d6 <_printf_float+0x34e>
 80062fc:	4613      	mov	r3, r2
 80062fe:	4631      	mov	r1, r6
 8006300:	4642      	mov	r2, r8
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	d1c0      	bne.n	800628c <_printf_float+0x304>
 800630a:	e69e      	b.n	800604a <_printf_float+0xc2>
 800630c:	2301      	movs	r3, #1
 800630e:	4631      	mov	r1, r6
 8006310:	4628      	mov	r0, r5
 8006312:	9205      	str	r2, [sp, #20]
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f ae97 	beq.w	800604a <_printf_float+0xc2>
 800631c:	9a05      	ldr	r2, [sp, #20]
 800631e:	f10b 0b01 	add.w	fp, fp, #1
 8006322:	e7b9      	b.n	8006298 <_printf_float+0x310>
 8006324:	ee18 3a10 	vmov	r3, s16
 8006328:	4652      	mov	r2, sl
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	47b8      	blx	r7
 8006330:	3001      	adds	r0, #1
 8006332:	d1be      	bne.n	80062b2 <_printf_float+0x32a>
 8006334:	e689      	b.n	800604a <_printf_float+0xc2>
 8006336:	9a05      	ldr	r2, [sp, #20]
 8006338:	464b      	mov	r3, r9
 800633a:	4442      	add	r2, r8
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	d1c1      	bne.n	80062ca <_printf_float+0x342>
 8006346:	e680      	b.n	800604a <_printf_float+0xc2>
 8006348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800634a:	2a01      	cmp	r2, #1
 800634c:	dc01      	bgt.n	8006352 <_printf_float+0x3ca>
 800634e:	07db      	lsls	r3, r3, #31
 8006350:	d538      	bpl.n	80063c4 <_printf_float+0x43c>
 8006352:	2301      	movs	r3, #1
 8006354:	4642      	mov	r2, r8
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f ae74 	beq.w	800604a <_printf_float+0xc2>
 8006362:	ee18 3a10 	vmov	r3, s16
 8006366:	4652      	mov	r2, sl
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f ae6b 	beq.w	800604a <_printf_float+0xc2>
 8006374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	f7fa fbd4 	bl	8000b28 <__aeabi_dcmpeq>
 8006380:	b9d8      	cbnz	r0, 80063ba <_printf_float+0x432>
 8006382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006384:	f108 0201 	add.w	r2, r8, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	d10e      	bne.n	80063b2 <_printf_float+0x42a>
 8006394:	e659      	b.n	800604a <_printf_float+0xc2>
 8006396:	2301      	movs	r3, #1
 8006398:	4652      	mov	r2, sl
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	f43f ae52 	beq.w	800604a <_printf_float+0xc2>
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ac:	3b01      	subs	r3, #1
 80063ae:	4543      	cmp	r3, r8
 80063b0:	dcf1      	bgt.n	8006396 <_printf_float+0x40e>
 80063b2:	464b      	mov	r3, r9
 80063b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063b8:	e6dc      	b.n	8006174 <_printf_float+0x1ec>
 80063ba:	f04f 0800 	mov.w	r8, #0
 80063be:	f104 0a1a 	add.w	sl, r4, #26
 80063c2:	e7f2      	b.n	80063aa <_printf_float+0x422>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4642      	mov	r2, r8
 80063c8:	e7df      	b.n	800638a <_printf_float+0x402>
 80063ca:	2301      	movs	r3, #1
 80063cc:	464a      	mov	r2, r9
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f ae38 	beq.w	800604a <_printf_float+0xc2>
 80063da:	f108 0801 	add.w	r8, r8, #1
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063e2:	1a5b      	subs	r3, r3, r1
 80063e4:	4543      	cmp	r3, r8
 80063e6:	dcf0      	bgt.n	80063ca <_printf_float+0x442>
 80063e8:	e6fa      	b.n	80061e0 <_printf_float+0x258>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	f104 0919 	add.w	r9, r4, #25
 80063f2:	e7f4      	b.n	80063de <_printf_float+0x456>

080063f4 <_printf_common>:
 80063f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	4616      	mov	r6, r2
 80063fa:	4699      	mov	r9, r3
 80063fc:	688a      	ldr	r2, [r1, #8]
 80063fe:	690b      	ldr	r3, [r1, #16]
 8006400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006404:	4293      	cmp	r3, r2
 8006406:	bfb8      	it	lt
 8006408:	4613      	movlt	r3, r2
 800640a:	6033      	str	r3, [r6, #0]
 800640c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006410:	4607      	mov	r7, r0
 8006412:	460c      	mov	r4, r1
 8006414:	b10a      	cbz	r2, 800641a <_printf_common+0x26>
 8006416:	3301      	adds	r3, #1
 8006418:	6033      	str	r3, [r6, #0]
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	0699      	lsls	r1, r3, #26
 800641e:	bf42      	ittt	mi
 8006420:	6833      	ldrmi	r3, [r6, #0]
 8006422:	3302      	addmi	r3, #2
 8006424:	6033      	strmi	r3, [r6, #0]
 8006426:	6825      	ldr	r5, [r4, #0]
 8006428:	f015 0506 	ands.w	r5, r5, #6
 800642c:	d106      	bne.n	800643c <_printf_common+0x48>
 800642e:	f104 0a19 	add.w	sl, r4, #25
 8006432:	68e3      	ldr	r3, [r4, #12]
 8006434:	6832      	ldr	r2, [r6, #0]
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	42ab      	cmp	r3, r5
 800643a:	dc26      	bgt.n	800648a <_printf_common+0x96>
 800643c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006440:	1e13      	subs	r3, r2, #0
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	bf18      	it	ne
 8006446:	2301      	movne	r3, #1
 8006448:	0692      	lsls	r2, r2, #26
 800644a:	d42b      	bmi.n	80064a4 <_printf_common+0xb0>
 800644c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006450:	4649      	mov	r1, r9
 8006452:	4638      	mov	r0, r7
 8006454:	47c0      	blx	r8
 8006456:	3001      	adds	r0, #1
 8006458:	d01e      	beq.n	8006498 <_printf_common+0xa4>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	68e5      	ldr	r5, [r4, #12]
 800645e:	6832      	ldr	r2, [r6, #0]
 8006460:	f003 0306 	and.w	r3, r3, #6
 8006464:	2b04      	cmp	r3, #4
 8006466:	bf08      	it	eq
 8006468:	1aad      	subeq	r5, r5, r2
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	6922      	ldr	r2, [r4, #16]
 800646e:	bf0c      	ite	eq
 8006470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006474:	2500      	movne	r5, #0
 8006476:	4293      	cmp	r3, r2
 8006478:	bfc4      	itt	gt
 800647a:	1a9b      	subgt	r3, r3, r2
 800647c:	18ed      	addgt	r5, r5, r3
 800647e:	2600      	movs	r6, #0
 8006480:	341a      	adds	r4, #26
 8006482:	42b5      	cmp	r5, r6
 8006484:	d11a      	bne.n	80064bc <_printf_common+0xc8>
 8006486:	2000      	movs	r0, #0
 8006488:	e008      	b.n	800649c <_printf_common+0xa8>
 800648a:	2301      	movs	r3, #1
 800648c:	4652      	mov	r2, sl
 800648e:	4649      	mov	r1, r9
 8006490:	4638      	mov	r0, r7
 8006492:	47c0      	blx	r8
 8006494:	3001      	adds	r0, #1
 8006496:	d103      	bne.n	80064a0 <_printf_common+0xac>
 8006498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800649c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a0:	3501      	adds	r5, #1
 80064a2:	e7c6      	b.n	8006432 <_printf_common+0x3e>
 80064a4:	18e1      	adds	r1, r4, r3
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	2030      	movs	r0, #48	; 0x30
 80064aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ae:	4422      	add	r2, r4
 80064b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b8:	3302      	adds	r3, #2
 80064ba:	e7c7      	b.n	800644c <_printf_common+0x58>
 80064bc:	2301      	movs	r3, #1
 80064be:	4622      	mov	r2, r4
 80064c0:	4649      	mov	r1, r9
 80064c2:	4638      	mov	r0, r7
 80064c4:	47c0      	blx	r8
 80064c6:	3001      	adds	r0, #1
 80064c8:	d0e6      	beq.n	8006498 <_printf_common+0xa4>
 80064ca:	3601      	adds	r6, #1
 80064cc:	e7d9      	b.n	8006482 <_printf_common+0x8e>
	...

080064d0 <_printf_i>:
 80064d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	7e0f      	ldrb	r7, [r1, #24]
 80064d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d8:	2f78      	cmp	r7, #120	; 0x78
 80064da:	4691      	mov	r9, r2
 80064dc:	4680      	mov	r8, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	469a      	mov	sl, r3
 80064e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e6:	d807      	bhi.n	80064f8 <_printf_i+0x28>
 80064e8:	2f62      	cmp	r7, #98	; 0x62
 80064ea:	d80a      	bhi.n	8006502 <_printf_i+0x32>
 80064ec:	2f00      	cmp	r7, #0
 80064ee:	f000 80d8 	beq.w	80066a2 <_printf_i+0x1d2>
 80064f2:	2f58      	cmp	r7, #88	; 0x58
 80064f4:	f000 80a3 	beq.w	800663e <_printf_i+0x16e>
 80064f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006500:	e03a      	b.n	8006578 <_printf_i+0xa8>
 8006502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006506:	2b15      	cmp	r3, #21
 8006508:	d8f6      	bhi.n	80064f8 <_printf_i+0x28>
 800650a:	a101      	add	r1, pc, #4	; (adr r1, 8006510 <_printf_i+0x40>)
 800650c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006510:	08006569 	.word	0x08006569
 8006514:	0800657d 	.word	0x0800657d
 8006518:	080064f9 	.word	0x080064f9
 800651c:	080064f9 	.word	0x080064f9
 8006520:	080064f9 	.word	0x080064f9
 8006524:	080064f9 	.word	0x080064f9
 8006528:	0800657d 	.word	0x0800657d
 800652c:	080064f9 	.word	0x080064f9
 8006530:	080064f9 	.word	0x080064f9
 8006534:	080064f9 	.word	0x080064f9
 8006538:	080064f9 	.word	0x080064f9
 800653c:	08006689 	.word	0x08006689
 8006540:	080065ad 	.word	0x080065ad
 8006544:	0800666b 	.word	0x0800666b
 8006548:	080064f9 	.word	0x080064f9
 800654c:	080064f9 	.word	0x080064f9
 8006550:	080066ab 	.word	0x080066ab
 8006554:	080064f9 	.word	0x080064f9
 8006558:	080065ad 	.word	0x080065ad
 800655c:	080064f9 	.word	0x080064f9
 8006560:	080064f9 	.word	0x080064f9
 8006564:	08006673 	.word	0x08006673
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	1d1a      	adds	r2, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	602a      	str	r2, [r5, #0]
 8006570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006578:	2301      	movs	r3, #1
 800657a:	e0a3      	b.n	80066c4 <_printf_i+0x1f4>
 800657c:	6820      	ldr	r0, [r4, #0]
 800657e:	6829      	ldr	r1, [r5, #0]
 8006580:	0606      	lsls	r6, r0, #24
 8006582:	f101 0304 	add.w	r3, r1, #4
 8006586:	d50a      	bpl.n	800659e <_printf_i+0xce>
 8006588:	680e      	ldr	r6, [r1, #0]
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	2e00      	cmp	r6, #0
 800658e:	da03      	bge.n	8006598 <_printf_i+0xc8>
 8006590:	232d      	movs	r3, #45	; 0x2d
 8006592:	4276      	negs	r6, r6
 8006594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006598:	485e      	ldr	r0, [pc, #376]	; (8006714 <_printf_i+0x244>)
 800659a:	230a      	movs	r3, #10
 800659c:	e019      	b.n	80065d2 <_printf_i+0x102>
 800659e:	680e      	ldr	r6, [r1, #0]
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065a6:	bf18      	it	ne
 80065a8:	b236      	sxthne	r6, r6
 80065aa:	e7ef      	b.n	800658c <_printf_i+0xbc>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	6820      	ldr	r0, [r4, #0]
 80065b0:	1d19      	adds	r1, r3, #4
 80065b2:	6029      	str	r1, [r5, #0]
 80065b4:	0601      	lsls	r1, r0, #24
 80065b6:	d501      	bpl.n	80065bc <_printf_i+0xec>
 80065b8:	681e      	ldr	r6, [r3, #0]
 80065ba:	e002      	b.n	80065c2 <_printf_i+0xf2>
 80065bc:	0646      	lsls	r6, r0, #25
 80065be:	d5fb      	bpl.n	80065b8 <_printf_i+0xe8>
 80065c0:	881e      	ldrh	r6, [r3, #0]
 80065c2:	4854      	ldr	r0, [pc, #336]	; (8006714 <_printf_i+0x244>)
 80065c4:	2f6f      	cmp	r7, #111	; 0x6f
 80065c6:	bf0c      	ite	eq
 80065c8:	2308      	moveq	r3, #8
 80065ca:	230a      	movne	r3, #10
 80065cc:	2100      	movs	r1, #0
 80065ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065d2:	6865      	ldr	r5, [r4, #4]
 80065d4:	60a5      	str	r5, [r4, #8]
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	bfa2      	ittt	ge
 80065da:	6821      	ldrge	r1, [r4, #0]
 80065dc:	f021 0104 	bicge.w	r1, r1, #4
 80065e0:	6021      	strge	r1, [r4, #0]
 80065e2:	b90e      	cbnz	r6, 80065e8 <_printf_i+0x118>
 80065e4:	2d00      	cmp	r5, #0
 80065e6:	d04d      	beq.n	8006684 <_printf_i+0x1b4>
 80065e8:	4615      	mov	r5, r2
 80065ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ee:	fb03 6711 	mls	r7, r3, r1, r6
 80065f2:	5dc7      	ldrb	r7, [r0, r7]
 80065f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f8:	4637      	mov	r7, r6
 80065fa:	42bb      	cmp	r3, r7
 80065fc:	460e      	mov	r6, r1
 80065fe:	d9f4      	bls.n	80065ea <_printf_i+0x11a>
 8006600:	2b08      	cmp	r3, #8
 8006602:	d10b      	bne.n	800661c <_printf_i+0x14c>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	07de      	lsls	r6, r3, #31
 8006608:	d508      	bpl.n	800661c <_printf_i+0x14c>
 800660a:	6923      	ldr	r3, [r4, #16]
 800660c:	6861      	ldr	r1, [r4, #4]
 800660e:	4299      	cmp	r1, r3
 8006610:	bfde      	ittt	le
 8006612:	2330      	movle	r3, #48	; 0x30
 8006614:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006618:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800661c:	1b52      	subs	r2, r2, r5
 800661e:	6122      	str	r2, [r4, #16]
 8006620:	f8cd a000 	str.w	sl, [sp]
 8006624:	464b      	mov	r3, r9
 8006626:	aa03      	add	r2, sp, #12
 8006628:	4621      	mov	r1, r4
 800662a:	4640      	mov	r0, r8
 800662c:	f7ff fee2 	bl	80063f4 <_printf_common>
 8006630:	3001      	adds	r0, #1
 8006632:	d14c      	bne.n	80066ce <_printf_i+0x1fe>
 8006634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006638:	b004      	add	sp, #16
 800663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663e:	4835      	ldr	r0, [pc, #212]	; (8006714 <_printf_i+0x244>)
 8006640:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006644:	6829      	ldr	r1, [r5, #0]
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	f851 6b04 	ldr.w	r6, [r1], #4
 800664c:	6029      	str	r1, [r5, #0]
 800664e:	061d      	lsls	r5, r3, #24
 8006650:	d514      	bpl.n	800667c <_printf_i+0x1ac>
 8006652:	07df      	lsls	r7, r3, #31
 8006654:	bf44      	itt	mi
 8006656:	f043 0320 	orrmi.w	r3, r3, #32
 800665a:	6023      	strmi	r3, [r4, #0]
 800665c:	b91e      	cbnz	r6, 8006666 <_printf_i+0x196>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	f023 0320 	bic.w	r3, r3, #32
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	2310      	movs	r3, #16
 8006668:	e7b0      	b.n	80065cc <_printf_i+0xfc>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	f043 0320 	orr.w	r3, r3, #32
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	2378      	movs	r3, #120	; 0x78
 8006674:	4828      	ldr	r0, [pc, #160]	; (8006718 <_printf_i+0x248>)
 8006676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800667a:	e7e3      	b.n	8006644 <_printf_i+0x174>
 800667c:	0659      	lsls	r1, r3, #25
 800667e:	bf48      	it	mi
 8006680:	b2b6      	uxthmi	r6, r6
 8006682:	e7e6      	b.n	8006652 <_printf_i+0x182>
 8006684:	4615      	mov	r5, r2
 8006686:	e7bb      	b.n	8006600 <_printf_i+0x130>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	6826      	ldr	r6, [r4, #0]
 800668c:	6961      	ldr	r1, [r4, #20]
 800668e:	1d18      	adds	r0, r3, #4
 8006690:	6028      	str	r0, [r5, #0]
 8006692:	0635      	lsls	r5, r6, #24
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	d501      	bpl.n	800669c <_printf_i+0x1cc>
 8006698:	6019      	str	r1, [r3, #0]
 800669a:	e002      	b.n	80066a2 <_printf_i+0x1d2>
 800669c:	0670      	lsls	r0, r6, #25
 800669e:	d5fb      	bpl.n	8006698 <_printf_i+0x1c8>
 80066a0:	8019      	strh	r1, [r3, #0]
 80066a2:	2300      	movs	r3, #0
 80066a4:	6123      	str	r3, [r4, #16]
 80066a6:	4615      	mov	r5, r2
 80066a8:	e7ba      	b.n	8006620 <_printf_i+0x150>
 80066aa:	682b      	ldr	r3, [r5, #0]
 80066ac:	1d1a      	adds	r2, r3, #4
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	681d      	ldr	r5, [r3, #0]
 80066b2:	6862      	ldr	r2, [r4, #4]
 80066b4:	2100      	movs	r1, #0
 80066b6:	4628      	mov	r0, r5
 80066b8:	f7f9 fdc2 	bl	8000240 <memchr>
 80066bc:	b108      	cbz	r0, 80066c2 <_printf_i+0x1f2>
 80066be:	1b40      	subs	r0, r0, r5
 80066c0:	6060      	str	r0, [r4, #4]
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	6123      	str	r3, [r4, #16]
 80066c6:	2300      	movs	r3, #0
 80066c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066cc:	e7a8      	b.n	8006620 <_printf_i+0x150>
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	462a      	mov	r2, r5
 80066d2:	4649      	mov	r1, r9
 80066d4:	4640      	mov	r0, r8
 80066d6:	47d0      	blx	sl
 80066d8:	3001      	adds	r0, #1
 80066da:	d0ab      	beq.n	8006634 <_printf_i+0x164>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	079b      	lsls	r3, r3, #30
 80066e0:	d413      	bmi.n	800670a <_printf_i+0x23a>
 80066e2:	68e0      	ldr	r0, [r4, #12]
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	4298      	cmp	r0, r3
 80066e8:	bfb8      	it	lt
 80066ea:	4618      	movlt	r0, r3
 80066ec:	e7a4      	b.n	8006638 <_printf_i+0x168>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4632      	mov	r2, r6
 80066f2:	4649      	mov	r1, r9
 80066f4:	4640      	mov	r0, r8
 80066f6:	47d0      	blx	sl
 80066f8:	3001      	adds	r0, #1
 80066fa:	d09b      	beq.n	8006634 <_printf_i+0x164>
 80066fc:	3501      	adds	r5, #1
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	9903      	ldr	r1, [sp, #12]
 8006702:	1a5b      	subs	r3, r3, r1
 8006704:	42ab      	cmp	r3, r5
 8006706:	dcf2      	bgt.n	80066ee <_printf_i+0x21e>
 8006708:	e7eb      	b.n	80066e2 <_printf_i+0x212>
 800670a:	2500      	movs	r5, #0
 800670c:	f104 0619 	add.w	r6, r4, #25
 8006710:	e7f5      	b.n	80066fe <_printf_i+0x22e>
 8006712:	bf00      	nop
 8006714:	0800b82e 	.word	0x0800b82e
 8006718:	0800b83f 	.word	0x0800b83f

0800671c <_scanf_float>:
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	b087      	sub	sp, #28
 8006722:	4617      	mov	r7, r2
 8006724:	9303      	str	r3, [sp, #12]
 8006726:	688b      	ldr	r3, [r1, #8]
 8006728:	1e5a      	subs	r2, r3, #1
 800672a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800672e:	bf83      	ittte	hi
 8006730:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006734:	195b      	addhi	r3, r3, r5
 8006736:	9302      	strhi	r3, [sp, #8]
 8006738:	2300      	movls	r3, #0
 800673a:	bf86      	itte	hi
 800673c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006740:	608b      	strhi	r3, [r1, #8]
 8006742:	9302      	strls	r3, [sp, #8]
 8006744:	680b      	ldr	r3, [r1, #0]
 8006746:	468b      	mov	fp, r1
 8006748:	2500      	movs	r5, #0
 800674a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800674e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006752:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006756:	4680      	mov	r8, r0
 8006758:	460c      	mov	r4, r1
 800675a:	465e      	mov	r6, fp
 800675c:	46aa      	mov	sl, r5
 800675e:	46a9      	mov	r9, r5
 8006760:	9501      	str	r5, [sp, #4]
 8006762:	68a2      	ldr	r2, [r4, #8]
 8006764:	b152      	cbz	r2, 800677c <_scanf_float+0x60>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b4e      	cmp	r3, #78	; 0x4e
 800676c:	d864      	bhi.n	8006838 <_scanf_float+0x11c>
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d83c      	bhi.n	80067ec <_scanf_float+0xd0>
 8006772:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006776:	b2c8      	uxtb	r0, r1
 8006778:	280e      	cmp	r0, #14
 800677a:	d93a      	bls.n	80067f2 <_scanf_float+0xd6>
 800677c:	f1b9 0f00 	cmp.w	r9, #0
 8006780:	d003      	beq.n	800678a <_scanf_float+0x6e>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800678e:	f1ba 0f01 	cmp.w	sl, #1
 8006792:	f200 8113 	bhi.w	80069bc <_scanf_float+0x2a0>
 8006796:	455e      	cmp	r6, fp
 8006798:	f200 8105 	bhi.w	80069a6 <_scanf_float+0x28a>
 800679c:	2501      	movs	r5, #1
 800679e:	4628      	mov	r0, r5
 80067a0:	b007      	add	sp, #28
 80067a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80067aa:	2a0d      	cmp	r2, #13
 80067ac:	d8e6      	bhi.n	800677c <_scanf_float+0x60>
 80067ae:	a101      	add	r1, pc, #4	; (adr r1, 80067b4 <_scanf_float+0x98>)
 80067b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067b4:	080068f3 	.word	0x080068f3
 80067b8:	0800677d 	.word	0x0800677d
 80067bc:	0800677d 	.word	0x0800677d
 80067c0:	0800677d 	.word	0x0800677d
 80067c4:	08006953 	.word	0x08006953
 80067c8:	0800692b 	.word	0x0800692b
 80067cc:	0800677d 	.word	0x0800677d
 80067d0:	0800677d 	.word	0x0800677d
 80067d4:	08006901 	.word	0x08006901
 80067d8:	0800677d 	.word	0x0800677d
 80067dc:	0800677d 	.word	0x0800677d
 80067e0:	0800677d 	.word	0x0800677d
 80067e4:	0800677d 	.word	0x0800677d
 80067e8:	080068b9 	.word	0x080068b9
 80067ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80067f0:	e7db      	b.n	80067aa <_scanf_float+0x8e>
 80067f2:	290e      	cmp	r1, #14
 80067f4:	d8c2      	bhi.n	800677c <_scanf_float+0x60>
 80067f6:	a001      	add	r0, pc, #4	; (adr r0, 80067fc <_scanf_float+0xe0>)
 80067f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067fc:	080068ab 	.word	0x080068ab
 8006800:	0800677d 	.word	0x0800677d
 8006804:	080068ab 	.word	0x080068ab
 8006808:	0800693f 	.word	0x0800693f
 800680c:	0800677d 	.word	0x0800677d
 8006810:	08006859 	.word	0x08006859
 8006814:	08006895 	.word	0x08006895
 8006818:	08006895 	.word	0x08006895
 800681c:	08006895 	.word	0x08006895
 8006820:	08006895 	.word	0x08006895
 8006824:	08006895 	.word	0x08006895
 8006828:	08006895 	.word	0x08006895
 800682c:	08006895 	.word	0x08006895
 8006830:	08006895 	.word	0x08006895
 8006834:	08006895 	.word	0x08006895
 8006838:	2b6e      	cmp	r3, #110	; 0x6e
 800683a:	d809      	bhi.n	8006850 <_scanf_float+0x134>
 800683c:	2b60      	cmp	r3, #96	; 0x60
 800683e:	d8b2      	bhi.n	80067a6 <_scanf_float+0x8a>
 8006840:	2b54      	cmp	r3, #84	; 0x54
 8006842:	d077      	beq.n	8006934 <_scanf_float+0x218>
 8006844:	2b59      	cmp	r3, #89	; 0x59
 8006846:	d199      	bne.n	800677c <_scanf_float+0x60>
 8006848:	2d07      	cmp	r5, #7
 800684a:	d197      	bne.n	800677c <_scanf_float+0x60>
 800684c:	2508      	movs	r5, #8
 800684e:	e029      	b.n	80068a4 <_scanf_float+0x188>
 8006850:	2b74      	cmp	r3, #116	; 0x74
 8006852:	d06f      	beq.n	8006934 <_scanf_float+0x218>
 8006854:	2b79      	cmp	r3, #121	; 0x79
 8006856:	e7f6      	b.n	8006846 <_scanf_float+0x12a>
 8006858:	6821      	ldr	r1, [r4, #0]
 800685a:	05c8      	lsls	r0, r1, #23
 800685c:	d51a      	bpl.n	8006894 <_scanf_float+0x178>
 800685e:	9b02      	ldr	r3, [sp, #8]
 8006860:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006864:	6021      	str	r1, [r4, #0]
 8006866:	f109 0901 	add.w	r9, r9, #1
 800686a:	b11b      	cbz	r3, 8006874 <_scanf_float+0x158>
 800686c:	3b01      	subs	r3, #1
 800686e:	3201      	adds	r2, #1
 8006870:	9302      	str	r3, [sp, #8]
 8006872:	60a2      	str	r2, [r4, #8]
 8006874:	68a3      	ldr	r3, [r4, #8]
 8006876:	3b01      	subs	r3, #1
 8006878:	60a3      	str	r3, [r4, #8]
 800687a:	6923      	ldr	r3, [r4, #16]
 800687c:	3301      	adds	r3, #1
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3b01      	subs	r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	f340 8084 	ble.w	8006994 <_scanf_float+0x278>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	3301      	adds	r3, #1
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	e766      	b.n	8006762 <_scanf_float+0x46>
 8006894:	eb1a 0f05 	cmn.w	sl, r5
 8006898:	f47f af70 	bne.w	800677c <_scanf_float+0x60>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80068a2:	6022      	str	r2, [r4, #0]
 80068a4:	f806 3b01 	strb.w	r3, [r6], #1
 80068a8:	e7e4      	b.n	8006874 <_scanf_float+0x158>
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	0610      	lsls	r0, r2, #24
 80068ae:	f57f af65 	bpl.w	800677c <_scanf_float+0x60>
 80068b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068b6:	e7f4      	b.n	80068a2 <_scanf_float+0x186>
 80068b8:	f1ba 0f00 	cmp.w	sl, #0
 80068bc:	d10e      	bne.n	80068dc <_scanf_float+0x1c0>
 80068be:	f1b9 0f00 	cmp.w	r9, #0
 80068c2:	d10e      	bne.n	80068e2 <_scanf_float+0x1c6>
 80068c4:	6822      	ldr	r2, [r4, #0]
 80068c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068ce:	d108      	bne.n	80068e2 <_scanf_float+0x1c6>
 80068d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068d4:	6022      	str	r2, [r4, #0]
 80068d6:	f04f 0a01 	mov.w	sl, #1
 80068da:	e7e3      	b.n	80068a4 <_scanf_float+0x188>
 80068dc:	f1ba 0f02 	cmp.w	sl, #2
 80068e0:	d055      	beq.n	800698e <_scanf_float+0x272>
 80068e2:	2d01      	cmp	r5, #1
 80068e4:	d002      	beq.n	80068ec <_scanf_float+0x1d0>
 80068e6:	2d04      	cmp	r5, #4
 80068e8:	f47f af48 	bne.w	800677c <_scanf_float+0x60>
 80068ec:	3501      	adds	r5, #1
 80068ee:	b2ed      	uxtb	r5, r5
 80068f0:	e7d8      	b.n	80068a4 <_scanf_float+0x188>
 80068f2:	f1ba 0f01 	cmp.w	sl, #1
 80068f6:	f47f af41 	bne.w	800677c <_scanf_float+0x60>
 80068fa:	f04f 0a02 	mov.w	sl, #2
 80068fe:	e7d1      	b.n	80068a4 <_scanf_float+0x188>
 8006900:	b97d      	cbnz	r5, 8006922 <_scanf_float+0x206>
 8006902:	f1b9 0f00 	cmp.w	r9, #0
 8006906:	f47f af3c 	bne.w	8006782 <_scanf_float+0x66>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006910:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006914:	f47f af39 	bne.w	800678a <_scanf_float+0x6e>
 8006918:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	2501      	movs	r5, #1
 8006920:	e7c0      	b.n	80068a4 <_scanf_float+0x188>
 8006922:	2d03      	cmp	r5, #3
 8006924:	d0e2      	beq.n	80068ec <_scanf_float+0x1d0>
 8006926:	2d05      	cmp	r5, #5
 8006928:	e7de      	b.n	80068e8 <_scanf_float+0x1cc>
 800692a:	2d02      	cmp	r5, #2
 800692c:	f47f af26 	bne.w	800677c <_scanf_float+0x60>
 8006930:	2503      	movs	r5, #3
 8006932:	e7b7      	b.n	80068a4 <_scanf_float+0x188>
 8006934:	2d06      	cmp	r5, #6
 8006936:	f47f af21 	bne.w	800677c <_scanf_float+0x60>
 800693a:	2507      	movs	r5, #7
 800693c:	e7b2      	b.n	80068a4 <_scanf_float+0x188>
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	0591      	lsls	r1, r2, #22
 8006942:	f57f af1b 	bpl.w	800677c <_scanf_float+0x60>
 8006946:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006950:	e7a8      	b.n	80068a4 <_scanf_float+0x188>
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006958:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800695c:	d006      	beq.n	800696c <_scanf_float+0x250>
 800695e:	0550      	lsls	r0, r2, #21
 8006960:	f57f af0c 	bpl.w	800677c <_scanf_float+0x60>
 8006964:	f1b9 0f00 	cmp.w	r9, #0
 8006968:	f43f af0f 	beq.w	800678a <_scanf_float+0x6e>
 800696c:	0591      	lsls	r1, r2, #22
 800696e:	bf58      	it	pl
 8006970:	9901      	ldrpl	r1, [sp, #4]
 8006972:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006976:	bf58      	it	pl
 8006978:	eba9 0101 	subpl.w	r1, r9, r1
 800697c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006980:	bf58      	it	pl
 8006982:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006986:	6022      	str	r2, [r4, #0]
 8006988:	f04f 0900 	mov.w	r9, #0
 800698c:	e78a      	b.n	80068a4 <_scanf_float+0x188>
 800698e:	f04f 0a03 	mov.w	sl, #3
 8006992:	e787      	b.n	80068a4 <_scanf_float+0x188>
 8006994:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006998:	4639      	mov	r1, r7
 800699a:	4640      	mov	r0, r8
 800699c:	4798      	blx	r3
 800699e:	2800      	cmp	r0, #0
 80069a0:	f43f aedf 	beq.w	8006762 <_scanf_float+0x46>
 80069a4:	e6ea      	b.n	800677c <_scanf_float+0x60>
 80069a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069ae:	463a      	mov	r2, r7
 80069b0:	4640      	mov	r0, r8
 80069b2:	4798      	blx	r3
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	e6ec      	b.n	8006796 <_scanf_float+0x7a>
 80069bc:	1e6b      	subs	r3, r5, #1
 80069be:	2b06      	cmp	r3, #6
 80069c0:	d825      	bhi.n	8006a0e <_scanf_float+0x2f2>
 80069c2:	2d02      	cmp	r5, #2
 80069c4:	d836      	bhi.n	8006a34 <_scanf_float+0x318>
 80069c6:	455e      	cmp	r6, fp
 80069c8:	f67f aee8 	bls.w	800679c <_scanf_float+0x80>
 80069cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069d4:	463a      	mov	r2, r7
 80069d6:	4640      	mov	r0, r8
 80069d8:	4798      	blx	r3
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	3b01      	subs	r3, #1
 80069de:	6123      	str	r3, [r4, #16]
 80069e0:	e7f1      	b.n	80069c6 <_scanf_float+0x2aa>
 80069e2:	9802      	ldr	r0, [sp, #8]
 80069e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80069ec:	9002      	str	r0, [sp, #8]
 80069ee:	463a      	mov	r2, r7
 80069f0:	4640      	mov	r0, r8
 80069f2:	4798      	blx	r3
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069fe:	fa5f fa8a 	uxtb.w	sl, sl
 8006a02:	f1ba 0f02 	cmp.w	sl, #2
 8006a06:	d1ec      	bne.n	80069e2 <_scanf_float+0x2c6>
 8006a08:	3d03      	subs	r5, #3
 8006a0a:	b2ed      	uxtb	r5, r5
 8006a0c:	1b76      	subs	r6, r6, r5
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	05da      	lsls	r2, r3, #23
 8006a12:	d52f      	bpl.n	8006a74 <_scanf_float+0x358>
 8006a14:	055b      	lsls	r3, r3, #21
 8006a16:	d510      	bpl.n	8006a3a <_scanf_float+0x31e>
 8006a18:	455e      	cmp	r6, fp
 8006a1a:	f67f aebf 	bls.w	800679c <_scanf_float+0x80>
 8006a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a26:	463a      	mov	r2, r7
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4798      	blx	r3
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	e7f1      	b.n	8006a18 <_scanf_float+0x2fc>
 8006a34:	46aa      	mov	sl, r5
 8006a36:	9602      	str	r6, [sp, #8]
 8006a38:	e7df      	b.n	80069fa <_scanf_float+0x2de>
 8006a3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	2965      	cmp	r1, #101	; 0x65
 8006a42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006a46:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	d00c      	beq.n	8006a68 <_scanf_float+0x34c>
 8006a4e:	2945      	cmp	r1, #69	; 0x45
 8006a50:	d00a      	beq.n	8006a68 <_scanf_float+0x34c>
 8006a52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a56:	463a      	mov	r2, r7
 8006a58:	4640      	mov	r0, r8
 8006a5a:	4798      	blx	r3
 8006a5c:	6923      	ldr	r3, [r4, #16]
 8006a5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	1eb5      	subs	r5, r6, #2
 8006a66:	6123      	str	r3, [r4, #16]
 8006a68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a6c:	463a      	mov	r2, r7
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4798      	blx	r3
 8006a72:	462e      	mov	r6, r5
 8006a74:	6825      	ldr	r5, [r4, #0]
 8006a76:	f015 0510 	ands.w	r5, r5, #16
 8006a7a:	d159      	bne.n	8006b30 <_scanf_float+0x414>
 8006a7c:	7035      	strb	r5, [r6, #0]
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a88:	d11b      	bne.n	8006ac2 <_scanf_float+0x3a6>
 8006a8a:	9b01      	ldr	r3, [sp, #4]
 8006a8c:	454b      	cmp	r3, r9
 8006a8e:	eba3 0209 	sub.w	r2, r3, r9
 8006a92:	d123      	bne.n	8006adc <_scanf_float+0x3c0>
 8006a94:	2200      	movs	r2, #0
 8006a96:	4659      	mov	r1, fp
 8006a98:	4640      	mov	r0, r8
 8006a9a:	f000 ff27 	bl	80078ec <_strtod_r>
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	f012 0f02 	tst.w	r2, #2
 8006aa6:	ec57 6b10 	vmov	r6, r7, d0
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	d021      	beq.n	8006af2 <_scanf_float+0x3d6>
 8006aae:	9903      	ldr	r1, [sp, #12]
 8006ab0:	1d1a      	adds	r2, r3, #4
 8006ab2:	600a      	str	r2, [r1, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	e9c3 6700 	strd	r6, r7, [r3]
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60e3      	str	r3, [r4, #12]
 8006ac0:	e66d      	b.n	800679e <_scanf_float+0x82>
 8006ac2:	9b04      	ldr	r3, [sp, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0e5      	beq.n	8006a94 <_scanf_float+0x378>
 8006ac8:	9905      	ldr	r1, [sp, #20]
 8006aca:	230a      	movs	r3, #10
 8006acc:	462a      	mov	r2, r5
 8006ace:	3101      	adds	r1, #1
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	f000 ff93 	bl	80079fc <_strtol_r>
 8006ad6:	9b04      	ldr	r3, [sp, #16]
 8006ad8:	9e05      	ldr	r6, [sp, #20]
 8006ada:	1ac2      	subs	r2, r0, r3
 8006adc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ae0:	429e      	cmp	r6, r3
 8006ae2:	bf28      	it	cs
 8006ae4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ae8:	4912      	ldr	r1, [pc, #72]	; (8006b34 <_scanf_float+0x418>)
 8006aea:	4630      	mov	r0, r6
 8006aec:	f000 f8ba 	bl	8006c64 <siprintf>
 8006af0:	e7d0      	b.n	8006a94 <_scanf_float+0x378>
 8006af2:	9903      	ldr	r1, [sp, #12]
 8006af4:	f012 0f04 	tst.w	r2, #4
 8006af8:	f103 0204 	add.w	r2, r3, #4
 8006afc:	600a      	str	r2, [r1, #0]
 8006afe:	d1d9      	bne.n	8006ab4 <_scanf_float+0x398>
 8006b00:	f8d3 8000 	ldr.w	r8, [r3]
 8006b04:	ee10 2a10 	vmov	r2, s0
 8006b08:	ee10 0a10 	vmov	r0, s0
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7fa f83c 	bl	8000b8c <__aeabi_dcmpun>
 8006b14:	b128      	cbz	r0, 8006b22 <_scanf_float+0x406>
 8006b16:	4808      	ldr	r0, [pc, #32]	; (8006b38 <_scanf_float+0x41c>)
 8006b18:	f000 f89e 	bl	8006c58 <nanf>
 8006b1c:	ed88 0a00 	vstr	s0, [r8]
 8006b20:	e7cb      	b.n	8006aba <_scanf_float+0x39e>
 8006b22:	4630      	mov	r0, r6
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7fa f88f 	bl	8000c48 <__aeabi_d2f>
 8006b2a:	f8c8 0000 	str.w	r0, [r8]
 8006b2e:	e7c4      	b.n	8006aba <_scanf_float+0x39e>
 8006b30:	2500      	movs	r5, #0
 8006b32:	e634      	b.n	800679e <_scanf_float+0x82>
 8006b34:	0800b850 	.word	0x0800b850
 8006b38:	0800bcc0 	.word	0x0800bcc0

08006b3c <iprintf>:
 8006b3c:	b40f      	push	{r0, r1, r2, r3}
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <iprintf+0x2c>)
 8006b40:	b513      	push	{r0, r1, r4, lr}
 8006b42:	681c      	ldr	r4, [r3, #0]
 8006b44:	b124      	cbz	r4, 8006b50 <iprintf+0x14>
 8006b46:	69a3      	ldr	r3, [r4, #24]
 8006b48:	b913      	cbnz	r3, 8006b50 <iprintf+0x14>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f001 ffac 	bl	8008aa8 <__sinit>
 8006b50:	ab05      	add	r3, sp, #20
 8006b52:	9a04      	ldr	r2, [sp, #16]
 8006b54:	68a1      	ldr	r1, [r4, #8]
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f003 fb83 	bl	800a264 <_vfiprintf_r>
 8006b5e:	b002      	add	sp, #8
 8006b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b64:	b004      	add	sp, #16
 8006b66:	4770      	bx	lr
 8006b68:	2000000c 	.word	0x2000000c

08006b6c <_puts_r>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	460e      	mov	r6, r1
 8006b70:	4605      	mov	r5, r0
 8006b72:	b118      	cbz	r0, 8006b7c <_puts_r+0x10>
 8006b74:	6983      	ldr	r3, [r0, #24]
 8006b76:	b90b      	cbnz	r3, 8006b7c <_puts_r+0x10>
 8006b78:	f001 ff96 	bl	8008aa8 <__sinit>
 8006b7c:	69ab      	ldr	r3, [r5, #24]
 8006b7e:	68ac      	ldr	r4, [r5, #8]
 8006b80:	b913      	cbnz	r3, 8006b88 <_puts_r+0x1c>
 8006b82:	4628      	mov	r0, r5
 8006b84:	f001 ff90 	bl	8008aa8 <__sinit>
 8006b88:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <_puts_r+0xd0>)
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	d120      	bne.n	8006bd0 <_puts_r+0x64>
 8006b8e:	686c      	ldr	r4, [r5, #4]
 8006b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d405      	bmi.n	8006ba2 <_puts_r+0x36>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	0598      	lsls	r0, r3, #22
 8006b9a:	d402      	bmi.n	8006ba2 <_puts_r+0x36>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9e:	f002 fb94 	bl	80092ca <__retarget_lock_acquire_recursive>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	0719      	lsls	r1, r3, #28
 8006ba6:	d51d      	bpl.n	8006be4 <_puts_r+0x78>
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	b1db      	cbz	r3, 8006be4 <_puts_r+0x78>
 8006bac:	3e01      	subs	r6, #1
 8006bae:	68a3      	ldr	r3, [r4, #8]
 8006bb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	60a3      	str	r3, [r4, #8]
 8006bb8:	bb39      	cbnz	r1, 8006c0a <_puts_r+0x9e>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da38      	bge.n	8006c30 <_puts_r+0xc4>
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	210a      	movs	r1, #10
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f000 ff1c 	bl	8007a00 <__swbuf_r>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d011      	beq.n	8006bf0 <_puts_r+0x84>
 8006bcc:	250a      	movs	r5, #10
 8006bce:	e011      	b.n	8006bf4 <_puts_r+0x88>
 8006bd0:	4b1b      	ldr	r3, [pc, #108]	; (8006c40 <_puts_r+0xd4>)
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d101      	bne.n	8006bda <_puts_r+0x6e>
 8006bd6:	68ac      	ldr	r4, [r5, #8]
 8006bd8:	e7da      	b.n	8006b90 <_puts_r+0x24>
 8006bda:	4b1a      	ldr	r3, [pc, #104]	; (8006c44 <_puts_r+0xd8>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	bf08      	it	eq
 8006be0:	68ec      	ldreq	r4, [r5, #12]
 8006be2:	e7d5      	b.n	8006b90 <_puts_r+0x24>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 ff5c 	bl	8007aa4 <__swsetup_r>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d0dd      	beq.n	8006bac <_puts_r+0x40>
 8006bf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf6:	07da      	lsls	r2, r3, #31
 8006bf8:	d405      	bmi.n	8006c06 <_puts_r+0x9a>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	059b      	lsls	r3, r3, #22
 8006bfe:	d402      	bmi.n	8006c06 <_puts_r+0x9a>
 8006c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c02:	f002 fb63 	bl	80092cc <__retarget_lock_release_recursive>
 8006c06:	4628      	mov	r0, r5
 8006c08:	bd70      	pop	{r4, r5, r6, pc}
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da04      	bge.n	8006c18 <_puts_r+0xac>
 8006c0e:	69a2      	ldr	r2, [r4, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	dc06      	bgt.n	8006c22 <_puts_r+0xb6>
 8006c14:	290a      	cmp	r1, #10
 8006c16:	d004      	beq.n	8006c22 <_puts_r+0xb6>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	6022      	str	r2, [r4, #0]
 8006c1e:	7019      	strb	r1, [r3, #0]
 8006c20:	e7c5      	b.n	8006bae <_puts_r+0x42>
 8006c22:	4622      	mov	r2, r4
 8006c24:	4628      	mov	r0, r5
 8006c26:	f000 feeb 	bl	8007a00 <__swbuf_r>
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d1bf      	bne.n	8006bae <_puts_r+0x42>
 8006c2e:	e7df      	b.n	8006bf0 <_puts_r+0x84>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	250a      	movs	r5, #10
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	6022      	str	r2, [r4, #0]
 8006c38:	701d      	strb	r5, [r3, #0]
 8006c3a:	e7db      	b.n	8006bf4 <_puts_r+0x88>
 8006c3c:	0800ba5c 	.word	0x0800ba5c
 8006c40:	0800ba7c 	.word	0x0800ba7c
 8006c44:	0800ba3c 	.word	0x0800ba3c

08006c48 <puts>:
 8006c48:	4b02      	ldr	r3, [pc, #8]	; (8006c54 <puts+0xc>)
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f7ff bf8d 	b.w	8006b6c <_puts_r>
 8006c52:	bf00      	nop
 8006c54:	2000000c 	.word	0x2000000c

08006c58 <nanf>:
 8006c58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c60 <nanf+0x8>
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	7fc00000 	.word	0x7fc00000

08006c64 <siprintf>:
 8006c64:	b40e      	push	{r1, r2, r3}
 8006c66:	b500      	push	{lr}
 8006c68:	b09c      	sub	sp, #112	; 0x70
 8006c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c6c:	9002      	str	r0, [sp, #8]
 8006c6e:	9006      	str	r0, [sp, #24]
 8006c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c74:	4809      	ldr	r0, [pc, #36]	; (8006c9c <siprintf+0x38>)
 8006c76:	9107      	str	r1, [sp, #28]
 8006c78:	9104      	str	r1, [sp, #16]
 8006c7a:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <siprintf+0x3c>)
 8006c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c80:	9105      	str	r1, [sp, #20]
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	a902      	add	r1, sp, #8
 8006c88:	f003 f9c2 	bl	800a010 <_svfiprintf_r>
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	b01c      	add	sp, #112	; 0x70
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr
 8006c9c:	2000000c 	.word	0x2000000c
 8006ca0:	ffff0208 	.word	0xffff0208

08006ca4 <sulp>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	460d      	mov	r5, r1
 8006caa:	ec45 4b10 	vmov	d0, r4, r5
 8006cae:	4616      	mov	r6, r2
 8006cb0:	f002 ff0c 	bl	8009acc <__ulp>
 8006cb4:	ec51 0b10 	vmov	r0, r1, d0
 8006cb8:	b17e      	cbz	r6, 8006cda <sulp+0x36>
 8006cba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dd09      	ble.n	8006cda <sulp+0x36>
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ccc:	2400      	movs	r4, #0
 8006cce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	f7f9 fcbf 	bl	8000658 <__aeabi_dmul>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	0000      	movs	r0, r0
	...

08006ce0 <_strtod_l>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	ed2d 8b02 	vpush	{d8}
 8006ce8:	b09d      	sub	sp, #116	; 0x74
 8006cea:	461f      	mov	r7, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	9318      	str	r3, [sp, #96]	; 0x60
 8006cf0:	4ba2      	ldr	r3, [pc, #648]	; (8006f7c <_strtod_l+0x29c>)
 8006cf2:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	4688      	mov	r8, r1
 8006cfe:	f7f9 fa91 	bl	8000224 <strlen>
 8006d02:	f04f 0a00 	mov.w	sl, #0
 8006d06:	4605      	mov	r5, r0
 8006d08:	f04f 0b00 	mov.w	fp, #0
 8006d0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	2a2b      	cmp	r2, #43	; 0x2b
 8006d16:	d04e      	beq.n	8006db6 <_strtod_l+0xd6>
 8006d18:	d83b      	bhi.n	8006d92 <_strtod_l+0xb2>
 8006d1a:	2a0d      	cmp	r2, #13
 8006d1c:	d834      	bhi.n	8006d88 <_strtod_l+0xa8>
 8006d1e:	2a08      	cmp	r2, #8
 8006d20:	d834      	bhi.n	8006d8c <_strtod_l+0xac>
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d03e      	beq.n	8006da4 <_strtod_l+0xc4>
 8006d26:	2300      	movs	r3, #0
 8006d28:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d2c:	7833      	ldrb	r3, [r6, #0]
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	f040 80b0 	bne.w	8006e94 <_strtod_l+0x1b4>
 8006d34:	7873      	ldrb	r3, [r6, #1]
 8006d36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d3a:	2b58      	cmp	r3, #88	; 0x58
 8006d3c:	d168      	bne.n	8006e10 <_strtod_l+0x130>
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	ab18      	add	r3, sp, #96	; 0x60
 8006d44:	9702      	str	r7, [sp, #8]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4a8d      	ldr	r2, [pc, #564]	; (8006f80 <_strtod_l+0x2a0>)
 8006d4a:	ab19      	add	r3, sp, #100	; 0x64
 8006d4c:	a917      	add	r1, sp, #92	; 0x5c
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f001 ffae 	bl	8008cb0 <__gethex>
 8006d54:	f010 0707 	ands.w	r7, r0, #7
 8006d58:	4605      	mov	r5, r0
 8006d5a:	d005      	beq.n	8006d68 <_strtod_l+0x88>
 8006d5c:	2f06      	cmp	r7, #6
 8006d5e:	d12c      	bne.n	8006dba <_strtod_l+0xda>
 8006d60:	3601      	adds	r6, #1
 8006d62:	2300      	movs	r3, #0
 8006d64:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d66:	930a      	str	r3, [sp, #40]	; 0x28
 8006d68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 8590 	bne.w	8007890 <_strtod_l+0xbb0>
 8006d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d72:	b1eb      	cbz	r3, 8006db0 <_strtod_l+0xd0>
 8006d74:	4652      	mov	r2, sl
 8006d76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d7a:	ec43 2b10 	vmov	d0, r2, r3
 8006d7e:	b01d      	add	sp, #116	; 0x74
 8006d80:	ecbd 8b02 	vpop	{d8}
 8006d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d88:	2a20      	cmp	r2, #32
 8006d8a:	d1cc      	bne.n	8006d26 <_strtod_l+0x46>
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d90:	e7be      	b.n	8006d10 <_strtod_l+0x30>
 8006d92:	2a2d      	cmp	r2, #45	; 0x2d
 8006d94:	d1c7      	bne.n	8006d26 <_strtod_l+0x46>
 8006d96:	2201      	movs	r2, #1
 8006d98:	920a      	str	r2, [sp, #40]	; 0x28
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1c2      	bne.n	8006d2a <_strtod_l+0x4a>
 8006da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006da6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 856e 	bne.w	800788c <_strtod_l+0xbac>
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	e7e1      	b.n	8006d7a <_strtod_l+0x9a>
 8006db6:	2200      	movs	r2, #0
 8006db8:	e7ee      	b.n	8006d98 <_strtod_l+0xb8>
 8006dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006dbc:	b13a      	cbz	r2, 8006dce <_strtod_l+0xee>
 8006dbe:	2135      	movs	r1, #53	; 0x35
 8006dc0:	a81a      	add	r0, sp, #104	; 0x68
 8006dc2:	f002 ff8e 	bl	8009ce2 <__copybits>
 8006dc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f002 fb4d 	bl	8009468 <_Bfree>
 8006dce:	3f01      	subs	r7, #1
 8006dd0:	2f04      	cmp	r7, #4
 8006dd2:	d806      	bhi.n	8006de2 <_strtod_l+0x102>
 8006dd4:	e8df f007 	tbb	[pc, r7]
 8006dd8:	1714030a 	.word	0x1714030a
 8006ddc:	0a          	.byte	0x0a
 8006ddd:	00          	.byte	0x00
 8006dde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006de2:	0728      	lsls	r0, r5, #28
 8006de4:	d5c0      	bpl.n	8006d68 <_strtod_l+0x88>
 8006de6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006dea:	e7bd      	b.n	8006d68 <_strtod_l+0x88>
 8006dec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006df6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006dfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006dfe:	e7f0      	b.n	8006de2 <_strtod_l+0x102>
 8006e00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006f84 <_strtod_l+0x2a4>
 8006e04:	e7ed      	b.n	8006de2 <_strtod_l+0x102>
 8006e06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e0a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006e0e:	e7e8      	b.n	8006de2 <_strtod_l+0x102>
 8006e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	d0f9      	beq.n	8006e10 <_strtod_l+0x130>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0a3      	beq.n	8006d68 <_strtod_l+0x88>
 8006e20:	2301      	movs	r3, #1
 8006e22:	f04f 0900 	mov.w	r9, #0
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e2a:	9308      	str	r3, [sp, #32]
 8006e2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e30:	464f      	mov	r7, r9
 8006e32:	220a      	movs	r2, #10
 8006e34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e36:	7806      	ldrb	r6, [r0, #0]
 8006e38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e3c:	b2d9      	uxtb	r1, r3
 8006e3e:	2909      	cmp	r1, #9
 8006e40:	d92a      	bls.n	8006e98 <_strtod_l+0x1b8>
 8006e42:	9905      	ldr	r1, [sp, #20]
 8006e44:	462a      	mov	r2, r5
 8006e46:	f003 fb9a 	bl	800a57e <strncmp>
 8006e4a:	b398      	cbz	r0, 8006eb4 <_strtod_l+0x1d4>
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	4632      	mov	r2, r6
 8006e50:	463d      	mov	r5, r7
 8006e52:	9005      	str	r0, [sp, #20]
 8006e54:	4603      	mov	r3, r0
 8006e56:	2a65      	cmp	r2, #101	; 0x65
 8006e58:	d001      	beq.n	8006e5e <_strtod_l+0x17e>
 8006e5a:	2a45      	cmp	r2, #69	; 0x45
 8006e5c:	d118      	bne.n	8006e90 <_strtod_l+0x1b0>
 8006e5e:	b91d      	cbnz	r5, 8006e68 <_strtod_l+0x188>
 8006e60:	9a04      	ldr	r2, [sp, #16]
 8006e62:	4302      	orrs	r2, r0
 8006e64:	d09e      	beq.n	8006da4 <_strtod_l+0xc4>
 8006e66:	2500      	movs	r5, #0
 8006e68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e6c:	f108 0201 	add.w	r2, r8, #1
 8006e70:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e76:	2a2b      	cmp	r2, #43	; 0x2b
 8006e78:	d075      	beq.n	8006f66 <_strtod_l+0x286>
 8006e7a:	2a2d      	cmp	r2, #45	; 0x2d
 8006e7c:	d07b      	beq.n	8006f76 <_strtod_l+0x296>
 8006e7e:	f04f 0c00 	mov.w	ip, #0
 8006e82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e86:	2909      	cmp	r1, #9
 8006e88:	f240 8082 	bls.w	8006f90 <_strtod_l+0x2b0>
 8006e8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e90:	2600      	movs	r6, #0
 8006e92:	e09d      	b.n	8006fd0 <_strtod_l+0x2f0>
 8006e94:	2300      	movs	r3, #0
 8006e96:	e7c4      	b.n	8006e22 <_strtod_l+0x142>
 8006e98:	2f08      	cmp	r7, #8
 8006e9a:	bfd8      	it	le
 8006e9c:	9907      	ldrle	r1, [sp, #28]
 8006e9e:	f100 0001 	add.w	r0, r0, #1
 8006ea2:	bfda      	itte	le
 8006ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ea8:	9307      	strle	r3, [sp, #28]
 8006eaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006eae:	3701      	adds	r7, #1
 8006eb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006eb2:	e7bf      	b.n	8006e34 <_strtod_l+0x154>
 8006eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eb6:	195a      	adds	r2, r3, r5
 8006eb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eba:	5d5a      	ldrb	r2, [r3, r5]
 8006ebc:	2f00      	cmp	r7, #0
 8006ebe:	d037      	beq.n	8006f30 <_strtod_l+0x250>
 8006ec0:	9005      	str	r0, [sp, #20]
 8006ec2:	463d      	mov	r5, r7
 8006ec4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ec8:	2b09      	cmp	r3, #9
 8006eca:	d912      	bls.n	8006ef2 <_strtod_l+0x212>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e7c2      	b.n	8006e56 <_strtod_l+0x176>
 8006ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ed6:	785a      	ldrb	r2, [r3, #1]
 8006ed8:	3001      	adds	r0, #1
 8006eda:	2a30      	cmp	r2, #48	; 0x30
 8006edc:	d0f8      	beq.n	8006ed0 <_strtod_l+0x1f0>
 8006ede:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	f200 84d9 	bhi.w	800789a <_strtod_l+0xbba>
 8006ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eea:	9005      	str	r0, [sp, #20]
 8006eec:	2000      	movs	r0, #0
 8006eee:	9308      	str	r3, [sp, #32]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	3a30      	subs	r2, #48	; 0x30
 8006ef4:	f100 0301 	add.w	r3, r0, #1
 8006ef8:	d014      	beq.n	8006f24 <_strtod_l+0x244>
 8006efa:	9905      	ldr	r1, [sp, #20]
 8006efc:	4419      	add	r1, r3
 8006efe:	9105      	str	r1, [sp, #20]
 8006f00:	462b      	mov	r3, r5
 8006f02:	eb00 0e05 	add.w	lr, r0, r5
 8006f06:	210a      	movs	r1, #10
 8006f08:	4573      	cmp	r3, lr
 8006f0a:	d113      	bne.n	8006f34 <_strtod_l+0x254>
 8006f0c:	182b      	adds	r3, r5, r0
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	f105 0501 	add.w	r5, r5, #1
 8006f14:	4405      	add	r5, r0
 8006f16:	dc1c      	bgt.n	8006f52 <_strtod_l+0x272>
 8006f18:	9907      	ldr	r1, [sp, #28]
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	2300      	movs	r3, #0
 8006f24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f26:	1c51      	adds	r1, r2, #1
 8006f28:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f2a:	7852      	ldrb	r2, [r2, #1]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	e7c9      	b.n	8006ec4 <_strtod_l+0x1e4>
 8006f30:	4638      	mov	r0, r7
 8006f32:	e7d2      	b.n	8006eda <_strtod_l+0x1fa>
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	dc04      	bgt.n	8006f42 <_strtod_l+0x262>
 8006f38:	9e07      	ldr	r6, [sp, #28]
 8006f3a:	434e      	muls	r6, r1
 8006f3c:	9607      	str	r6, [sp, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	e7e2      	b.n	8006f08 <_strtod_l+0x228>
 8006f42:	f103 0c01 	add.w	ip, r3, #1
 8006f46:	f1bc 0f10 	cmp.w	ip, #16
 8006f4a:	bfd8      	it	le
 8006f4c:	fb01 f909 	mulle.w	r9, r1, r9
 8006f50:	e7f5      	b.n	8006f3e <_strtod_l+0x25e>
 8006f52:	2d10      	cmp	r5, #16
 8006f54:	bfdc      	itt	le
 8006f56:	230a      	movle	r3, #10
 8006f58:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f5c:	e7e1      	b.n	8006f22 <_strtod_l+0x242>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9305      	str	r3, [sp, #20]
 8006f62:	2301      	movs	r3, #1
 8006f64:	e77c      	b.n	8006e60 <_strtod_l+0x180>
 8006f66:	f04f 0c00 	mov.w	ip, #0
 8006f6a:	f108 0202 	add.w	r2, r8, #2
 8006f6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f74:	e785      	b.n	8006e82 <_strtod_l+0x1a2>
 8006f76:	f04f 0c01 	mov.w	ip, #1
 8006f7a:	e7f6      	b.n	8006f6a <_strtod_l+0x28a>
 8006f7c:	0800bb04 	.word	0x0800bb04
 8006f80:	0800b858 	.word	0x0800b858
 8006f84:	7ff00000 	.word	0x7ff00000
 8006f88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f8a:	1c51      	adds	r1, r2, #1
 8006f8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f8e:	7852      	ldrb	r2, [r2, #1]
 8006f90:	2a30      	cmp	r2, #48	; 0x30
 8006f92:	d0f9      	beq.n	8006f88 <_strtod_l+0x2a8>
 8006f94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f98:	2908      	cmp	r1, #8
 8006f9a:	f63f af79 	bhi.w	8006e90 <_strtod_l+0x1b0>
 8006f9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006fa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fa4:	9206      	str	r2, [sp, #24]
 8006fa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fa8:	1c51      	adds	r1, r2, #1
 8006faa:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fac:	7852      	ldrb	r2, [r2, #1]
 8006fae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006fb2:	2e09      	cmp	r6, #9
 8006fb4:	d937      	bls.n	8007026 <_strtod_l+0x346>
 8006fb6:	9e06      	ldr	r6, [sp, #24]
 8006fb8:	1b89      	subs	r1, r1, r6
 8006fba:	2908      	cmp	r1, #8
 8006fbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fc0:	dc02      	bgt.n	8006fc8 <_strtod_l+0x2e8>
 8006fc2:	4576      	cmp	r6, lr
 8006fc4:	bfa8      	it	ge
 8006fc6:	4676      	movge	r6, lr
 8006fc8:	f1bc 0f00 	cmp.w	ip, #0
 8006fcc:	d000      	beq.n	8006fd0 <_strtod_l+0x2f0>
 8006fce:	4276      	negs	r6, r6
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	d14d      	bne.n	8007070 <_strtod_l+0x390>
 8006fd4:	9904      	ldr	r1, [sp, #16]
 8006fd6:	4301      	orrs	r1, r0
 8006fd8:	f47f aec6 	bne.w	8006d68 <_strtod_l+0x88>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f aee1 	bne.w	8006da4 <_strtod_l+0xc4>
 8006fe2:	2a69      	cmp	r2, #105	; 0x69
 8006fe4:	d027      	beq.n	8007036 <_strtod_l+0x356>
 8006fe6:	dc24      	bgt.n	8007032 <_strtod_l+0x352>
 8006fe8:	2a49      	cmp	r2, #73	; 0x49
 8006fea:	d024      	beq.n	8007036 <_strtod_l+0x356>
 8006fec:	2a4e      	cmp	r2, #78	; 0x4e
 8006fee:	f47f aed9 	bne.w	8006da4 <_strtod_l+0xc4>
 8006ff2:	499f      	ldr	r1, [pc, #636]	; (8007270 <_strtod_l+0x590>)
 8006ff4:	a817      	add	r0, sp, #92	; 0x5c
 8006ff6:	f002 f8b3 	bl	8009160 <__match>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f43f aed2 	beq.w	8006da4 <_strtod_l+0xc4>
 8007000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b28      	cmp	r3, #40	; 0x28
 8007006:	d12d      	bne.n	8007064 <_strtod_l+0x384>
 8007008:	499a      	ldr	r1, [pc, #616]	; (8007274 <_strtod_l+0x594>)
 800700a:	aa1a      	add	r2, sp, #104	; 0x68
 800700c:	a817      	add	r0, sp, #92	; 0x5c
 800700e:	f002 f8bb 	bl	8009188 <__hexnan>
 8007012:	2805      	cmp	r0, #5
 8007014:	d126      	bne.n	8007064 <_strtod_l+0x384>
 8007016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007018:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800701c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007020:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007024:	e6a0      	b.n	8006d68 <_strtod_l+0x88>
 8007026:	210a      	movs	r1, #10
 8007028:	fb01 2e0e 	mla	lr, r1, lr, r2
 800702c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007030:	e7b9      	b.n	8006fa6 <_strtod_l+0x2c6>
 8007032:	2a6e      	cmp	r2, #110	; 0x6e
 8007034:	e7db      	b.n	8006fee <_strtod_l+0x30e>
 8007036:	4990      	ldr	r1, [pc, #576]	; (8007278 <_strtod_l+0x598>)
 8007038:	a817      	add	r0, sp, #92	; 0x5c
 800703a:	f002 f891 	bl	8009160 <__match>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f aeb0 	beq.w	8006da4 <_strtod_l+0xc4>
 8007044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007046:	498d      	ldr	r1, [pc, #564]	; (800727c <_strtod_l+0x59c>)
 8007048:	3b01      	subs	r3, #1
 800704a:	a817      	add	r0, sp, #92	; 0x5c
 800704c:	9317      	str	r3, [sp, #92]	; 0x5c
 800704e:	f002 f887 	bl	8009160 <__match>
 8007052:	b910      	cbnz	r0, 800705a <_strtod_l+0x37a>
 8007054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007056:	3301      	adds	r3, #1
 8007058:	9317      	str	r3, [sp, #92]	; 0x5c
 800705a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800728c <_strtod_l+0x5ac>
 800705e:	f04f 0a00 	mov.w	sl, #0
 8007062:	e681      	b.n	8006d68 <_strtod_l+0x88>
 8007064:	4886      	ldr	r0, [pc, #536]	; (8007280 <_strtod_l+0x5a0>)
 8007066:	f003 fa2f 	bl	800a4c8 <nan>
 800706a:	ec5b ab10 	vmov	sl, fp, d0
 800706e:	e67b      	b.n	8006d68 <_strtod_l+0x88>
 8007070:	9b05      	ldr	r3, [sp, #20]
 8007072:	9807      	ldr	r0, [sp, #28]
 8007074:	1af3      	subs	r3, r6, r3
 8007076:	2f00      	cmp	r7, #0
 8007078:	bf08      	it	eq
 800707a:	462f      	moveq	r7, r5
 800707c:	2d10      	cmp	r5, #16
 800707e:	9306      	str	r3, [sp, #24]
 8007080:	46a8      	mov	r8, r5
 8007082:	bfa8      	it	ge
 8007084:	f04f 0810 	movge.w	r8, #16
 8007088:	f7f9 fa6c 	bl	8000564 <__aeabi_ui2d>
 800708c:	2d09      	cmp	r5, #9
 800708e:	4682      	mov	sl, r0
 8007090:	468b      	mov	fp, r1
 8007092:	dd13      	ble.n	80070bc <_strtod_l+0x3dc>
 8007094:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <_strtod_l+0x5a4>)
 8007096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800709a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800709e:	f7f9 fadb 	bl	8000658 <__aeabi_dmul>
 80070a2:	4682      	mov	sl, r0
 80070a4:	4648      	mov	r0, r9
 80070a6:	468b      	mov	fp, r1
 80070a8:	f7f9 fa5c 	bl	8000564 <__aeabi_ui2d>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4650      	mov	r0, sl
 80070b2:	4659      	mov	r1, fp
 80070b4:	f7f9 f91a 	bl	80002ec <__adddf3>
 80070b8:	4682      	mov	sl, r0
 80070ba:	468b      	mov	fp, r1
 80070bc:	2d0f      	cmp	r5, #15
 80070be:	dc38      	bgt.n	8007132 <_strtod_l+0x452>
 80070c0:	9b06      	ldr	r3, [sp, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f43f ae50 	beq.w	8006d68 <_strtod_l+0x88>
 80070c8:	dd24      	ble.n	8007114 <_strtod_l+0x434>
 80070ca:	2b16      	cmp	r3, #22
 80070cc:	dc0b      	bgt.n	80070e6 <_strtod_l+0x406>
 80070ce:	496d      	ldr	r1, [pc, #436]	; (8007284 <_strtod_l+0x5a4>)
 80070d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d8:	4652      	mov	r2, sl
 80070da:	465b      	mov	r3, fp
 80070dc:	f7f9 fabc 	bl	8000658 <__aeabi_dmul>
 80070e0:	4682      	mov	sl, r0
 80070e2:	468b      	mov	fp, r1
 80070e4:	e640      	b.n	8006d68 <_strtod_l+0x88>
 80070e6:	9a06      	ldr	r2, [sp, #24]
 80070e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80070ec:	4293      	cmp	r3, r2
 80070ee:	db20      	blt.n	8007132 <_strtod_l+0x452>
 80070f0:	4c64      	ldr	r4, [pc, #400]	; (8007284 <_strtod_l+0x5a4>)
 80070f2:	f1c5 050f 	rsb	r5, r5, #15
 80070f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80070fa:	4652      	mov	r2, sl
 80070fc:	465b      	mov	r3, fp
 80070fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007102:	f7f9 faa9 	bl	8000658 <__aeabi_dmul>
 8007106:	9b06      	ldr	r3, [sp, #24]
 8007108:	1b5d      	subs	r5, r3, r5
 800710a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800710e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007112:	e7e3      	b.n	80070dc <_strtod_l+0x3fc>
 8007114:	9b06      	ldr	r3, [sp, #24]
 8007116:	3316      	adds	r3, #22
 8007118:	db0b      	blt.n	8007132 <_strtod_l+0x452>
 800711a:	9b05      	ldr	r3, [sp, #20]
 800711c:	1b9e      	subs	r6, r3, r6
 800711e:	4b59      	ldr	r3, [pc, #356]	; (8007284 <_strtod_l+0x5a4>)
 8007120:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007124:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007128:	4650      	mov	r0, sl
 800712a:	4659      	mov	r1, fp
 800712c:	f7f9 fbbe 	bl	80008ac <__aeabi_ddiv>
 8007130:	e7d6      	b.n	80070e0 <_strtod_l+0x400>
 8007132:	9b06      	ldr	r3, [sp, #24]
 8007134:	eba5 0808 	sub.w	r8, r5, r8
 8007138:	4498      	add	r8, r3
 800713a:	f1b8 0f00 	cmp.w	r8, #0
 800713e:	dd74      	ble.n	800722a <_strtod_l+0x54a>
 8007140:	f018 030f 	ands.w	r3, r8, #15
 8007144:	d00a      	beq.n	800715c <_strtod_l+0x47c>
 8007146:	494f      	ldr	r1, [pc, #316]	; (8007284 <_strtod_l+0x5a4>)
 8007148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800714c:	4652      	mov	r2, sl
 800714e:	465b      	mov	r3, fp
 8007150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007154:	f7f9 fa80 	bl	8000658 <__aeabi_dmul>
 8007158:	4682      	mov	sl, r0
 800715a:	468b      	mov	fp, r1
 800715c:	f038 080f 	bics.w	r8, r8, #15
 8007160:	d04f      	beq.n	8007202 <_strtod_l+0x522>
 8007162:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007166:	dd22      	ble.n	80071ae <_strtod_l+0x4ce>
 8007168:	2500      	movs	r5, #0
 800716a:	462e      	mov	r6, r5
 800716c:	9507      	str	r5, [sp, #28]
 800716e:	9505      	str	r5, [sp, #20]
 8007170:	2322      	movs	r3, #34	; 0x22
 8007172:	f8df b118 	ldr.w	fp, [pc, #280]	; 800728c <_strtod_l+0x5ac>
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	f04f 0a00 	mov.w	sl, #0
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f43f adf2 	beq.w	8006d68 <_strtod_l+0x88>
 8007184:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007186:	4620      	mov	r0, r4
 8007188:	f002 f96e 	bl	8009468 <_Bfree>
 800718c:	9905      	ldr	r1, [sp, #20]
 800718e:	4620      	mov	r0, r4
 8007190:	f002 f96a 	bl	8009468 <_Bfree>
 8007194:	4631      	mov	r1, r6
 8007196:	4620      	mov	r0, r4
 8007198:	f002 f966 	bl	8009468 <_Bfree>
 800719c:	9907      	ldr	r1, [sp, #28]
 800719e:	4620      	mov	r0, r4
 80071a0:	f002 f962 	bl	8009468 <_Bfree>
 80071a4:	4629      	mov	r1, r5
 80071a6:	4620      	mov	r0, r4
 80071a8:	f002 f95e 	bl	8009468 <_Bfree>
 80071ac:	e5dc      	b.n	8006d68 <_strtod_l+0x88>
 80071ae:	4b36      	ldr	r3, [pc, #216]	; (8007288 <_strtod_l+0x5a8>)
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	2300      	movs	r3, #0
 80071b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071b8:	4650      	mov	r0, sl
 80071ba:	4659      	mov	r1, fp
 80071bc:	4699      	mov	r9, r3
 80071be:	f1b8 0f01 	cmp.w	r8, #1
 80071c2:	dc21      	bgt.n	8007208 <_strtod_l+0x528>
 80071c4:	b10b      	cbz	r3, 80071ca <_strtod_l+0x4ea>
 80071c6:	4682      	mov	sl, r0
 80071c8:	468b      	mov	fp, r1
 80071ca:	4b2f      	ldr	r3, [pc, #188]	; (8007288 <_strtod_l+0x5a8>)
 80071cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071d4:	4652      	mov	r2, sl
 80071d6:	465b      	mov	r3, fp
 80071d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071dc:	f7f9 fa3c 	bl	8000658 <__aeabi_dmul>
 80071e0:	4b2a      	ldr	r3, [pc, #168]	; (800728c <_strtod_l+0x5ac>)
 80071e2:	460a      	mov	r2, r1
 80071e4:	400b      	ands	r3, r1
 80071e6:	492a      	ldr	r1, [pc, #168]	; (8007290 <_strtod_l+0x5b0>)
 80071e8:	428b      	cmp	r3, r1
 80071ea:	4682      	mov	sl, r0
 80071ec:	d8bc      	bhi.n	8007168 <_strtod_l+0x488>
 80071ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071f2:	428b      	cmp	r3, r1
 80071f4:	bf86      	itte	hi
 80071f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007294 <_strtod_l+0x5b4>
 80071fa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80071fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007202:	2300      	movs	r3, #0
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	e084      	b.n	8007312 <_strtod_l+0x632>
 8007208:	f018 0f01 	tst.w	r8, #1
 800720c:	d005      	beq.n	800721a <_strtod_l+0x53a>
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f9 fa20 	bl	8000658 <__aeabi_dmul>
 8007218:	2301      	movs	r3, #1
 800721a:	9a04      	ldr	r2, [sp, #16]
 800721c:	3208      	adds	r2, #8
 800721e:	f109 0901 	add.w	r9, r9, #1
 8007222:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007226:	9204      	str	r2, [sp, #16]
 8007228:	e7c9      	b.n	80071be <_strtod_l+0x4de>
 800722a:	d0ea      	beq.n	8007202 <_strtod_l+0x522>
 800722c:	f1c8 0800 	rsb	r8, r8, #0
 8007230:	f018 020f 	ands.w	r2, r8, #15
 8007234:	d00a      	beq.n	800724c <_strtod_l+0x56c>
 8007236:	4b13      	ldr	r3, [pc, #76]	; (8007284 <_strtod_l+0x5a4>)
 8007238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800723c:	4650      	mov	r0, sl
 800723e:	4659      	mov	r1, fp
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f9 fb32 	bl	80008ac <__aeabi_ddiv>
 8007248:	4682      	mov	sl, r0
 800724a:	468b      	mov	fp, r1
 800724c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007250:	d0d7      	beq.n	8007202 <_strtod_l+0x522>
 8007252:	f1b8 0f1f 	cmp.w	r8, #31
 8007256:	dd1f      	ble.n	8007298 <_strtod_l+0x5b8>
 8007258:	2500      	movs	r5, #0
 800725a:	462e      	mov	r6, r5
 800725c:	9507      	str	r5, [sp, #28]
 800725e:	9505      	str	r5, [sp, #20]
 8007260:	2322      	movs	r3, #34	; 0x22
 8007262:	f04f 0a00 	mov.w	sl, #0
 8007266:	f04f 0b00 	mov.w	fp, #0
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	e786      	b.n	800717c <_strtod_l+0x49c>
 800726e:	bf00      	nop
 8007270:	0800b829 	.word	0x0800b829
 8007274:	0800b86c 	.word	0x0800b86c
 8007278:	0800b821 	.word	0x0800b821
 800727c:	0800b9ac 	.word	0x0800b9ac
 8007280:	0800bcc0 	.word	0x0800bcc0
 8007284:	0800bba0 	.word	0x0800bba0
 8007288:	0800bb78 	.word	0x0800bb78
 800728c:	7ff00000 	.word	0x7ff00000
 8007290:	7ca00000 	.word	0x7ca00000
 8007294:	7fefffff 	.word	0x7fefffff
 8007298:	f018 0310 	ands.w	r3, r8, #16
 800729c:	bf18      	it	ne
 800729e:	236a      	movne	r3, #106	; 0x6a
 80072a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007650 <_strtod_l+0x970>
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	4650      	mov	r0, sl
 80072a8:	4659      	mov	r1, fp
 80072aa:	2300      	movs	r3, #0
 80072ac:	f018 0f01 	tst.w	r8, #1
 80072b0:	d004      	beq.n	80072bc <_strtod_l+0x5dc>
 80072b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072b6:	f7f9 f9cf 	bl	8000658 <__aeabi_dmul>
 80072ba:	2301      	movs	r3, #1
 80072bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072c0:	f109 0908 	add.w	r9, r9, #8
 80072c4:	d1f2      	bne.n	80072ac <_strtod_l+0x5cc>
 80072c6:	b10b      	cbz	r3, 80072cc <_strtod_l+0x5ec>
 80072c8:	4682      	mov	sl, r0
 80072ca:	468b      	mov	fp, r1
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	b1c3      	cbz	r3, 8007302 <_strtod_l+0x622>
 80072d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072d8:	2b00      	cmp	r3, #0
 80072da:	4659      	mov	r1, fp
 80072dc:	dd11      	ble.n	8007302 <_strtod_l+0x622>
 80072de:	2b1f      	cmp	r3, #31
 80072e0:	f340 8124 	ble.w	800752c <_strtod_l+0x84c>
 80072e4:	2b34      	cmp	r3, #52	; 0x34
 80072e6:	bfde      	ittt	le
 80072e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80072f0:	fa03 f202 	lslle.w	r2, r3, r2
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	bfcc      	ite	gt
 80072fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80072fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	4650      	mov	r0, sl
 8007308:	4659      	mov	r1, fp
 800730a:	f7f9 fc0d 	bl	8000b28 <__aeabi_dcmpeq>
 800730e:	2800      	cmp	r0, #0
 8007310:	d1a2      	bne.n	8007258 <_strtod_l+0x578>
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	9908      	ldr	r1, [sp, #32]
 8007318:	462b      	mov	r3, r5
 800731a:	463a      	mov	r2, r7
 800731c:	4620      	mov	r0, r4
 800731e:	f002 f90b 	bl	8009538 <__s2b>
 8007322:	9007      	str	r0, [sp, #28]
 8007324:	2800      	cmp	r0, #0
 8007326:	f43f af1f 	beq.w	8007168 <_strtod_l+0x488>
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	1b9e      	subs	r6, r3, r6
 800732e:	9b06      	ldr	r3, [sp, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	bfb4      	ite	lt
 8007334:	4633      	movlt	r3, r6
 8007336:	2300      	movge	r3, #0
 8007338:	930c      	str	r3, [sp, #48]	; 0x30
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	2500      	movs	r5, #0
 800733e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007342:	9312      	str	r3, [sp, #72]	; 0x48
 8007344:	462e      	mov	r6, r5
 8007346:	9b07      	ldr	r3, [sp, #28]
 8007348:	4620      	mov	r0, r4
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	f002 f84c 	bl	80093e8 <_Balloc>
 8007350:	9005      	str	r0, [sp, #20]
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f af0c 	beq.w	8007170 <_strtod_l+0x490>
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	3202      	adds	r2, #2
 800735e:	f103 010c 	add.w	r1, r3, #12
 8007362:	0092      	lsls	r2, r2, #2
 8007364:	300c      	adds	r0, #12
 8007366:	f002 f831 	bl	80093cc <memcpy>
 800736a:	ec4b ab10 	vmov	d0, sl, fp
 800736e:	aa1a      	add	r2, sp, #104	; 0x68
 8007370:	a919      	add	r1, sp, #100	; 0x64
 8007372:	4620      	mov	r0, r4
 8007374:	f002 fc26 	bl	8009bc4 <__d2b>
 8007378:	ec4b ab18 	vmov	d8, sl, fp
 800737c:	9018      	str	r0, [sp, #96]	; 0x60
 800737e:	2800      	cmp	r0, #0
 8007380:	f43f aef6 	beq.w	8007170 <_strtod_l+0x490>
 8007384:	2101      	movs	r1, #1
 8007386:	4620      	mov	r0, r4
 8007388:	f002 f970 	bl	800966c <__i2b>
 800738c:	4606      	mov	r6, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f aeee 	beq.w	8007170 <_strtod_l+0x490>
 8007394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007396:	9904      	ldr	r1, [sp, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	bfab      	itete	ge
 800739c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800739e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073a6:	bfac      	ite	ge
 80073a8:	eb03 0902 	addge.w	r9, r3, r2
 80073ac:	1ad7      	sublt	r7, r2, r3
 80073ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073b0:	eba3 0801 	sub.w	r8, r3, r1
 80073b4:	4490      	add	r8, r2
 80073b6:	4ba1      	ldr	r3, [pc, #644]	; (800763c <_strtod_l+0x95c>)
 80073b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80073bc:	4598      	cmp	r8, r3
 80073be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073c2:	f280 80c7 	bge.w	8007554 <_strtod_l+0x874>
 80073c6:	eba3 0308 	sub.w	r3, r3, r8
 80073ca:	2b1f      	cmp	r3, #31
 80073cc:	eba2 0203 	sub.w	r2, r2, r3
 80073d0:	f04f 0101 	mov.w	r1, #1
 80073d4:	f300 80b1 	bgt.w	800753a <_strtod_l+0x85a>
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	930d      	str	r3, [sp, #52]	; 0x34
 80073de:	2300      	movs	r3, #0
 80073e0:	9308      	str	r3, [sp, #32]
 80073e2:	eb09 0802 	add.w	r8, r9, r2
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	45c1      	cmp	r9, r8
 80073ea:	4417      	add	r7, r2
 80073ec:	441f      	add	r7, r3
 80073ee:	464b      	mov	r3, r9
 80073f0:	bfa8      	it	ge
 80073f2:	4643      	movge	r3, r8
 80073f4:	42bb      	cmp	r3, r7
 80073f6:	bfa8      	it	ge
 80073f8:	463b      	movge	r3, r7
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfc2      	ittt	gt
 80073fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007402:	1aff      	subgt	r7, r7, r3
 8007404:	eba9 0903 	subgt.w	r9, r9, r3
 8007408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd17      	ble.n	800743e <_strtod_l+0x75e>
 800740e:	4631      	mov	r1, r6
 8007410:	461a      	mov	r2, r3
 8007412:	4620      	mov	r0, r4
 8007414:	f002 f9ea 	bl	80097ec <__pow5mult>
 8007418:	4606      	mov	r6, r0
 800741a:	2800      	cmp	r0, #0
 800741c:	f43f aea8 	beq.w	8007170 <_strtod_l+0x490>
 8007420:	4601      	mov	r1, r0
 8007422:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007424:	4620      	mov	r0, r4
 8007426:	f002 f937 	bl	8009698 <__multiply>
 800742a:	900b      	str	r0, [sp, #44]	; 0x2c
 800742c:	2800      	cmp	r0, #0
 800742e:	f43f ae9f 	beq.w	8007170 <_strtod_l+0x490>
 8007432:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007434:	4620      	mov	r0, r4
 8007436:	f002 f817 	bl	8009468 <_Bfree>
 800743a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800743c:	9318      	str	r3, [sp, #96]	; 0x60
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	f300 808c 	bgt.w	800755e <_strtod_l+0x87e>
 8007446:	9b06      	ldr	r3, [sp, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dd08      	ble.n	800745e <_strtod_l+0x77e>
 800744c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800744e:	9905      	ldr	r1, [sp, #20]
 8007450:	4620      	mov	r0, r4
 8007452:	f002 f9cb 	bl	80097ec <__pow5mult>
 8007456:	9005      	str	r0, [sp, #20]
 8007458:	2800      	cmp	r0, #0
 800745a:	f43f ae89 	beq.w	8007170 <_strtod_l+0x490>
 800745e:	2f00      	cmp	r7, #0
 8007460:	dd08      	ble.n	8007474 <_strtod_l+0x794>
 8007462:	9905      	ldr	r1, [sp, #20]
 8007464:	463a      	mov	r2, r7
 8007466:	4620      	mov	r0, r4
 8007468:	f002 fa1a 	bl	80098a0 <__lshift>
 800746c:	9005      	str	r0, [sp, #20]
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f ae7e 	beq.w	8007170 <_strtod_l+0x490>
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	dd08      	ble.n	800748c <_strtod_l+0x7ac>
 800747a:	4631      	mov	r1, r6
 800747c:	464a      	mov	r2, r9
 800747e:	4620      	mov	r0, r4
 8007480:	f002 fa0e 	bl	80098a0 <__lshift>
 8007484:	4606      	mov	r6, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f ae72 	beq.w	8007170 <_strtod_l+0x490>
 800748c:	9a05      	ldr	r2, [sp, #20]
 800748e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007490:	4620      	mov	r0, r4
 8007492:	f002 fa91 	bl	80099b8 <__mdiff>
 8007496:	4605      	mov	r5, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	f43f ae69 	beq.w	8007170 <_strtod_l+0x490>
 800749e:	68c3      	ldr	r3, [r0, #12]
 80074a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a2:	2300      	movs	r3, #0
 80074a4:	60c3      	str	r3, [r0, #12]
 80074a6:	4631      	mov	r1, r6
 80074a8:	f002 fa6a 	bl	8009980 <__mcmp>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	da60      	bge.n	8007572 <_strtod_l+0x892>
 80074b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b2:	ea53 030a 	orrs.w	r3, r3, sl
 80074b6:	f040 8082 	bne.w	80075be <_strtod_l+0x8de>
 80074ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d17d      	bne.n	80075be <_strtod_l+0x8de>
 80074c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074c6:	0d1b      	lsrs	r3, r3, #20
 80074c8:	051b      	lsls	r3, r3, #20
 80074ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074ce:	d976      	bls.n	80075be <_strtod_l+0x8de>
 80074d0:	696b      	ldr	r3, [r5, #20]
 80074d2:	b913      	cbnz	r3, 80074da <_strtod_l+0x7fa>
 80074d4:	692b      	ldr	r3, [r5, #16]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	dd71      	ble.n	80075be <_strtod_l+0x8de>
 80074da:	4629      	mov	r1, r5
 80074dc:	2201      	movs	r2, #1
 80074de:	4620      	mov	r0, r4
 80074e0:	f002 f9de 	bl	80098a0 <__lshift>
 80074e4:	4631      	mov	r1, r6
 80074e6:	4605      	mov	r5, r0
 80074e8:	f002 fa4a 	bl	8009980 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dd66      	ble.n	80075be <_strtod_l+0x8de>
 80074f0:	9904      	ldr	r1, [sp, #16]
 80074f2:	4a53      	ldr	r2, [pc, #332]	; (8007640 <_strtod_l+0x960>)
 80074f4:	465b      	mov	r3, fp
 80074f6:	2900      	cmp	r1, #0
 80074f8:	f000 8081 	beq.w	80075fe <_strtod_l+0x91e>
 80074fc:	ea02 010b 	and.w	r1, r2, fp
 8007500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007504:	dc7b      	bgt.n	80075fe <_strtod_l+0x91e>
 8007506:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800750a:	f77f aea9 	ble.w	8007260 <_strtod_l+0x580>
 800750e:	4b4d      	ldr	r3, [pc, #308]	; (8007644 <_strtod_l+0x964>)
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	2200      	movs	r2, #0
 8007516:	f7f9 f89f 	bl	8000658 <__aeabi_dmul>
 800751a:	460b      	mov	r3, r1
 800751c:	4303      	orrs	r3, r0
 800751e:	bf08      	it	eq
 8007520:	2322      	moveq	r3, #34	; 0x22
 8007522:	4682      	mov	sl, r0
 8007524:	468b      	mov	fp, r1
 8007526:	bf08      	it	eq
 8007528:	6023      	streq	r3, [r4, #0]
 800752a:	e62b      	b.n	8007184 <_strtod_l+0x4a4>
 800752c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	ea03 0a0a 	and.w	sl, r3, sl
 8007538:	e6e3      	b.n	8007302 <_strtod_l+0x622>
 800753a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800753e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007542:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007546:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800754a:	fa01 f308 	lsl.w	r3, r1, r8
 800754e:	9308      	str	r3, [sp, #32]
 8007550:	910d      	str	r1, [sp, #52]	; 0x34
 8007552:	e746      	b.n	80073e2 <_strtod_l+0x702>
 8007554:	2300      	movs	r3, #0
 8007556:	9308      	str	r3, [sp, #32]
 8007558:	2301      	movs	r3, #1
 800755a:	930d      	str	r3, [sp, #52]	; 0x34
 800755c:	e741      	b.n	80073e2 <_strtod_l+0x702>
 800755e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007560:	4642      	mov	r2, r8
 8007562:	4620      	mov	r0, r4
 8007564:	f002 f99c 	bl	80098a0 <__lshift>
 8007568:	9018      	str	r0, [sp, #96]	; 0x60
 800756a:	2800      	cmp	r0, #0
 800756c:	f47f af6b 	bne.w	8007446 <_strtod_l+0x766>
 8007570:	e5fe      	b.n	8007170 <_strtod_l+0x490>
 8007572:	465f      	mov	r7, fp
 8007574:	d16e      	bne.n	8007654 <_strtod_l+0x974>
 8007576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800757c:	b342      	cbz	r2, 80075d0 <_strtod_l+0x8f0>
 800757e:	4a32      	ldr	r2, [pc, #200]	; (8007648 <_strtod_l+0x968>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d128      	bne.n	80075d6 <_strtod_l+0x8f6>
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	4651      	mov	r1, sl
 8007588:	b1eb      	cbz	r3, 80075c6 <_strtod_l+0x8e6>
 800758a:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <_strtod_l+0x960>)
 800758c:	403b      	ands	r3, r7
 800758e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007596:	d819      	bhi.n	80075cc <_strtod_l+0x8ec>
 8007598:	0d1b      	lsrs	r3, r3, #20
 800759a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	4299      	cmp	r1, r3
 80075a4:	d117      	bne.n	80075d6 <_strtod_l+0x8f6>
 80075a6:	4b29      	ldr	r3, [pc, #164]	; (800764c <_strtod_l+0x96c>)
 80075a8:	429f      	cmp	r7, r3
 80075aa:	d102      	bne.n	80075b2 <_strtod_l+0x8d2>
 80075ac:	3101      	adds	r1, #1
 80075ae:	f43f addf 	beq.w	8007170 <_strtod_l+0x490>
 80075b2:	4b23      	ldr	r3, [pc, #140]	; (8007640 <_strtod_l+0x960>)
 80075b4:	403b      	ands	r3, r7
 80075b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075ba:	f04f 0a00 	mov.w	sl, #0
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1a4      	bne.n	800750e <_strtod_l+0x82e>
 80075c4:	e5de      	b.n	8007184 <_strtod_l+0x4a4>
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075ca:	e7ea      	b.n	80075a2 <_strtod_l+0x8c2>
 80075cc:	4613      	mov	r3, r2
 80075ce:	e7e8      	b.n	80075a2 <_strtod_l+0x8c2>
 80075d0:	ea53 030a 	orrs.w	r3, r3, sl
 80075d4:	d08c      	beq.n	80074f0 <_strtod_l+0x810>
 80075d6:	9b08      	ldr	r3, [sp, #32]
 80075d8:	b1db      	cbz	r3, 8007612 <_strtod_l+0x932>
 80075da:	423b      	tst	r3, r7
 80075dc:	d0ef      	beq.n	80075be <_strtod_l+0x8de>
 80075de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e0:	9a04      	ldr	r2, [sp, #16]
 80075e2:	4650      	mov	r0, sl
 80075e4:	4659      	mov	r1, fp
 80075e6:	b1c3      	cbz	r3, 800761a <_strtod_l+0x93a>
 80075e8:	f7ff fb5c 	bl	8006ca4 <sulp>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	ec51 0b18 	vmov	r0, r1, d8
 80075f4:	f7f8 fe7a 	bl	80002ec <__adddf3>
 80075f8:	4682      	mov	sl, r0
 80075fa:	468b      	mov	fp, r1
 80075fc:	e7df      	b.n	80075be <_strtod_l+0x8de>
 80075fe:	4013      	ands	r3, r2
 8007600:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007604:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800760c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007610:	e7d5      	b.n	80075be <_strtod_l+0x8de>
 8007612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007614:	ea13 0f0a 	tst.w	r3, sl
 8007618:	e7e0      	b.n	80075dc <_strtod_l+0x8fc>
 800761a:	f7ff fb43 	bl	8006ca4 <sulp>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	ec51 0b18 	vmov	r0, r1, d8
 8007626:	f7f8 fe5f 	bl	80002e8 <__aeabi_dsub>
 800762a:	2200      	movs	r2, #0
 800762c:	2300      	movs	r3, #0
 800762e:	4682      	mov	sl, r0
 8007630:	468b      	mov	fp, r1
 8007632:	f7f9 fa79 	bl	8000b28 <__aeabi_dcmpeq>
 8007636:	2800      	cmp	r0, #0
 8007638:	d0c1      	beq.n	80075be <_strtod_l+0x8de>
 800763a:	e611      	b.n	8007260 <_strtod_l+0x580>
 800763c:	fffffc02 	.word	0xfffffc02
 8007640:	7ff00000 	.word	0x7ff00000
 8007644:	39500000 	.word	0x39500000
 8007648:	000fffff 	.word	0x000fffff
 800764c:	7fefffff 	.word	0x7fefffff
 8007650:	0800b880 	.word	0x0800b880
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	f002 fb10 	bl	8009c7c <__ratio>
 800765c:	ec59 8b10 	vmov	r8, r9, d0
 8007660:	ee10 0a10 	vmov	r0, s0
 8007664:	2200      	movs	r2, #0
 8007666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800766a:	4649      	mov	r1, r9
 800766c:	f7f9 fa70 	bl	8000b50 <__aeabi_dcmple>
 8007670:	2800      	cmp	r0, #0
 8007672:	d07a      	beq.n	800776a <_strtod_l+0xa8a>
 8007674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04a      	beq.n	8007710 <_strtod_l+0xa30>
 800767a:	4b95      	ldr	r3, [pc, #596]	; (80078d0 <_strtod_l+0xbf0>)
 800767c:	2200      	movs	r2, #0
 800767e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007682:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078d0 <_strtod_l+0xbf0>
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	4b92      	ldr	r3, [pc, #584]	; (80078d4 <_strtod_l+0xbf4>)
 800768c:	403b      	ands	r3, r7
 800768e:	930d      	str	r3, [sp, #52]	; 0x34
 8007690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007692:	4b91      	ldr	r3, [pc, #580]	; (80078d8 <_strtod_l+0xbf8>)
 8007694:	429a      	cmp	r2, r3
 8007696:	f040 80b0 	bne.w	80077fa <_strtod_l+0xb1a>
 800769a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800769e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076a2:	ec4b ab10 	vmov	d0, sl, fp
 80076a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076aa:	f002 fa0f 	bl	8009acc <__ulp>
 80076ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076b2:	ec53 2b10 	vmov	r2, r3, d0
 80076b6:	f7f8 ffcf 	bl	8000658 <__aeabi_dmul>
 80076ba:	4652      	mov	r2, sl
 80076bc:	465b      	mov	r3, fp
 80076be:	f7f8 fe15 	bl	80002ec <__adddf3>
 80076c2:	460b      	mov	r3, r1
 80076c4:	4983      	ldr	r1, [pc, #524]	; (80078d4 <_strtod_l+0xbf4>)
 80076c6:	4a85      	ldr	r2, [pc, #532]	; (80078dc <_strtod_l+0xbfc>)
 80076c8:	4019      	ands	r1, r3
 80076ca:	4291      	cmp	r1, r2
 80076cc:	4682      	mov	sl, r0
 80076ce:	d960      	bls.n	8007792 <_strtod_l+0xab2>
 80076d0:	ee18 3a90 	vmov	r3, s17
 80076d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076d8:	4293      	cmp	r3, r2
 80076da:	d104      	bne.n	80076e6 <_strtod_l+0xa06>
 80076dc:	ee18 3a10 	vmov	r3, s16
 80076e0:	3301      	adds	r3, #1
 80076e2:	f43f ad45 	beq.w	8007170 <_strtod_l+0x490>
 80076e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80078e8 <_strtod_l+0xc08>
 80076ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80076ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 feb9 	bl	8009468 <_Bfree>
 80076f6:	9905      	ldr	r1, [sp, #20]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f001 feb5 	bl	8009468 <_Bfree>
 80076fe:	4631      	mov	r1, r6
 8007700:	4620      	mov	r0, r4
 8007702:	f001 feb1 	bl	8009468 <_Bfree>
 8007706:	4629      	mov	r1, r5
 8007708:	4620      	mov	r0, r4
 800770a:	f001 fead 	bl	8009468 <_Bfree>
 800770e:	e61a      	b.n	8007346 <_strtod_l+0x666>
 8007710:	f1ba 0f00 	cmp.w	sl, #0
 8007714:	d11b      	bne.n	800774e <_strtod_l+0xa6e>
 8007716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800771a:	b9f3      	cbnz	r3, 800775a <_strtod_l+0xa7a>
 800771c:	4b6c      	ldr	r3, [pc, #432]	; (80078d0 <_strtod_l+0xbf0>)
 800771e:	2200      	movs	r2, #0
 8007720:	4640      	mov	r0, r8
 8007722:	4649      	mov	r1, r9
 8007724:	f7f9 fa0a 	bl	8000b3c <__aeabi_dcmplt>
 8007728:	b9d0      	cbnz	r0, 8007760 <_strtod_l+0xa80>
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	4b6c      	ldr	r3, [pc, #432]	; (80078e0 <_strtod_l+0xc00>)
 8007730:	2200      	movs	r2, #0
 8007732:	f7f8 ff91 	bl	8000658 <__aeabi_dmul>
 8007736:	4680      	mov	r8, r0
 8007738:	4689      	mov	r9, r1
 800773a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800773e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007742:	9315      	str	r3, [sp, #84]	; 0x54
 8007744:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800774c:	e79d      	b.n	800768a <_strtod_l+0x9aa>
 800774e:	f1ba 0f01 	cmp.w	sl, #1
 8007752:	d102      	bne.n	800775a <_strtod_l+0xa7a>
 8007754:	2f00      	cmp	r7, #0
 8007756:	f43f ad83 	beq.w	8007260 <_strtod_l+0x580>
 800775a:	4b62      	ldr	r3, [pc, #392]	; (80078e4 <_strtod_l+0xc04>)
 800775c:	2200      	movs	r2, #0
 800775e:	e78e      	b.n	800767e <_strtod_l+0x99e>
 8007760:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80078e0 <_strtod_l+0xc00>
 8007764:	f04f 0800 	mov.w	r8, #0
 8007768:	e7e7      	b.n	800773a <_strtod_l+0xa5a>
 800776a:	4b5d      	ldr	r3, [pc, #372]	; (80078e0 <_strtod_l+0xc00>)
 800776c:	4640      	mov	r0, r8
 800776e:	4649      	mov	r1, r9
 8007770:	2200      	movs	r2, #0
 8007772:	f7f8 ff71 	bl	8000658 <__aeabi_dmul>
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	4680      	mov	r8, r0
 800777a:	4689      	mov	r9, r1
 800777c:	b933      	cbnz	r3, 800778c <_strtod_l+0xaac>
 800777e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007782:	900e      	str	r0, [sp, #56]	; 0x38
 8007784:	930f      	str	r3, [sp, #60]	; 0x3c
 8007786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800778a:	e7dd      	b.n	8007748 <_strtod_l+0xa68>
 800778c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007790:	e7f9      	b.n	8007786 <_strtod_l+0xaa6>
 8007792:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1a8      	bne.n	80076ee <_strtod_l+0xa0e>
 800779c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077a2:	0d1b      	lsrs	r3, r3, #20
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d1a1      	bne.n	80076ee <_strtod_l+0xa0e>
 80077aa:	4640      	mov	r0, r8
 80077ac:	4649      	mov	r1, r9
 80077ae:	f7f9 fab3 	bl	8000d18 <__aeabi_d2lz>
 80077b2:	f7f8 ff23 	bl	80005fc <__aeabi_l2d>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f8 fd93 	bl	80002e8 <__aeabi_dsub>
 80077c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077c8:	ea43 030a 	orr.w	r3, r3, sl
 80077cc:	4313      	orrs	r3, r2
 80077ce:	4680      	mov	r8, r0
 80077d0:	4689      	mov	r9, r1
 80077d2:	d055      	beq.n	8007880 <_strtod_l+0xba0>
 80077d4:	a336      	add	r3, pc, #216	; (adr r3, 80078b0 <_strtod_l+0xbd0>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f7f9 f9af 	bl	8000b3c <__aeabi_dcmplt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	f47f acd0 	bne.w	8007184 <_strtod_l+0x4a4>
 80077e4:	a334      	add	r3, pc, #208	; (adr r3, 80078b8 <_strtod_l+0xbd8>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f9 f9c3 	bl	8000b78 <__aeabi_dcmpgt>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f43f af7b 	beq.w	80076ee <_strtod_l+0xa0e>
 80077f8:	e4c4      	b.n	8007184 <_strtod_l+0x4a4>
 80077fa:	9b04      	ldr	r3, [sp, #16]
 80077fc:	b333      	cbz	r3, 800784c <_strtod_l+0xb6c>
 80077fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007800:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007804:	d822      	bhi.n	800784c <_strtod_l+0xb6c>
 8007806:	a32e      	add	r3, pc, #184	; (adr r3, 80078c0 <_strtod_l+0xbe0>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	f7f9 f99e 	bl	8000b50 <__aeabi_dcmple>
 8007814:	b1a0      	cbz	r0, 8007840 <_strtod_l+0xb60>
 8007816:	4649      	mov	r1, r9
 8007818:	4640      	mov	r0, r8
 800781a:	f7f9 f9f5 	bl	8000c08 <__aeabi_d2uiz>
 800781e:	2801      	cmp	r0, #1
 8007820:	bf38      	it	cc
 8007822:	2001      	movcc	r0, #1
 8007824:	f7f8 fe9e 	bl	8000564 <__aeabi_ui2d>
 8007828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782a:	4680      	mov	r8, r0
 800782c:	4689      	mov	r9, r1
 800782e:	bb23      	cbnz	r3, 800787a <_strtod_l+0xb9a>
 8007830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007834:	9010      	str	r0, [sp, #64]	; 0x40
 8007836:	9311      	str	r3, [sp, #68]	; 0x44
 8007838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800783c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007844:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	9309      	str	r3, [sp, #36]	; 0x24
 800784c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007850:	eeb0 0a48 	vmov.f32	s0, s16
 8007854:	eef0 0a68 	vmov.f32	s1, s17
 8007858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800785c:	f002 f936 	bl	8009acc <__ulp>
 8007860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007864:	ec53 2b10 	vmov	r2, r3, d0
 8007868:	f7f8 fef6 	bl	8000658 <__aeabi_dmul>
 800786c:	ec53 2b18 	vmov	r2, r3, d8
 8007870:	f7f8 fd3c 	bl	80002ec <__adddf3>
 8007874:	4682      	mov	sl, r0
 8007876:	468b      	mov	fp, r1
 8007878:	e78d      	b.n	8007796 <_strtod_l+0xab6>
 800787a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800787e:	e7db      	b.n	8007838 <_strtod_l+0xb58>
 8007880:	a311      	add	r3, pc, #68	; (adr r3, 80078c8 <_strtod_l+0xbe8>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f9 f959 	bl	8000b3c <__aeabi_dcmplt>
 800788a:	e7b2      	b.n	80077f2 <_strtod_l+0xb12>
 800788c:	2300      	movs	r3, #0
 800788e:	930a      	str	r3, [sp, #40]	; 0x28
 8007890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	f7ff ba6b 	b.w	8006d70 <_strtod_l+0x90>
 800789a:	2a65      	cmp	r2, #101	; 0x65
 800789c:	f43f ab5f 	beq.w	8006f5e <_strtod_l+0x27e>
 80078a0:	2a45      	cmp	r2, #69	; 0x45
 80078a2:	f43f ab5c 	beq.w	8006f5e <_strtod_l+0x27e>
 80078a6:	2301      	movs	r3, #1
 80078a8:	f7ff bb94 	b.w	8006fd4 <_strtod_l+0x2f4>
 80078ac:	f3af 8000 	nop.w
 80078b0:	94a03595 	.word	0x94a03595
 80078b4:	3fdfffff 	.word	0x3fdfffff
 80078b8:	35afe535 	.word	0x35afe535
 80078bc:	3fe00000 	.word	0x3fe00000
 80078c0:	ffc00000 	.word	0xffc00000
 80078c4:	41dfffff 	.word	0x41dfffff
 80078c8:	94a03595 	.word	0x94a03595
 80078cc:	3fcfffff 	.word	0x3fcfffff
 80078d0:	3ff00000 	.word	0x3ff00000
 80078d4:	7ff00000 	.word	0x7ff00000
 80078d8:	7fe00000 	.word	0x7fe00000
 80078dc:	7c9fffff 	.word	0x7c9fffff
 80078e0:	3fe00000 	.word	0x3fe00000
 80078e4:	bff00000 	.word	0xbff00000
 80078e8:	7fefffff 	.word	0x7fefffff

080078ec <_strtod_r>:
 80078ec:	4b01      	ldr	r3, [pc, #4]	; (80078f4 <_strtod_r+0x8>)
 80078ee:	f7ff b9f7 	b.w	8006ce0 <_strtod_l>
 80078f2:	bf00      	nop
 80078f4:	20000074 	.word	0x20000074

080078f8 <_strtol_l.constprop.0>:
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078fe:	d001      	beq.n	8007904 <_strtol_l.constprop.0+0xc>
 8007900:	2b24      	cmp	r3, #36	; 0x24
 8007902:	d906      	bls.n	8007912 <_strtol_l.constprop.0+0x1a>
 8007904:	f7fe fa5e 	bl	8005dc4 <__errno>
 8007908:	2316      	movs	r3, #22
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	2000      	movs	r0, #0
 800790e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80079f8 <_strtol_l.constprop.0+0x100>
 8007916:	460d      	mov	r5, r1
 8007918:	462e      	mov	r6, r5
 800791a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800791e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007922:	f017 0708 	ands.w	r7, r7, #8
 8007926:	d1f7      	bne.n	8007918 <_strtol_l.constprop.0+0x20>
 8007928:	2c2d      	cmp	r4, #45	; 0x2d
 800792a:	d132      	bne.n	8007992 <_strtol_l.constprop.0+0x9a>
 800792c:	782c      	ldrb	r4, [r5, #0]
 800792e:	2701      	movs	r7, #1
 8007930:	1cb5      	adds	r5, r6, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d05b      	beq.n	80079ee <_strtol_l.constprop.0+0xf6>
 8007936:	2b10      	cmp	r3, #16
 8007938:	d109      	bne.n	800794e <_strtol_l.constprop.0+0x56>
 800793a:	2c30      	cmp	r4, #48	; 0x30
 800793c:	d107      	bne.n	800794e <_strtol_l.constprop.0+0x56>
 800793e:	782c      	ldrb	r4, [r5, #0]
 8007940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007944:	2c58      	cmp	r4, #88	; 0x58
 8007946:	d14d      	bne.n	80079e4 <_strtol_l.constprop.0+0xec>
 8007948:	786c      	ldrb	r4, [r5, #1]
 800794a:	2310      	movs	r3, #16
 800794c:	3502      	adds	r5, #2
 800794e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007952:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007956:	f04f 0c00 	mov.w	ip, #0
 800795a:	fbb8 f9f3 	udiv	r9, r8, r3
 800795e:	4666      	mov	r6, ip
 8007960:	fb03 8a19 	mls	sl, r3, r9, r8
 8007964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007968:	f1be 0f09 	cmp.w	lr, #9
 800796c:	d816      	bhi.n	800799c <_strtol_l.constprop.0+0xa4>
 800796e:	4674      	mov	r4, lr
 8007970:	42a3      	cmp	r3, r4
 8007972:	dd24      	ble.n	80079be <_strtol_l.constprop.0+0xc6>
 8007974:	f1bc 0f00 	cmp.w	ip, #0
 8007978:	db1e      	blt.n	80079b8 <_strtol_l.constprop.0+0xc0>
 800797a:	45b1      	cmp	r9, r6
 800797c:	d31c      	bcc.n	80079b8 <_strtol_l.constprop.0+0xc0>
 800797e:	d101      	bne.n	8007984 <_strtol_l.constprop.0+0x8c>
 8007980:	45a2      	cmp	sl, r4
 8007982:	db19      	blt.n	80079b8 <_strtol_l.constprop.0+0xc0>
 8007984:	fb06 4603 	mla	r6, r6, r3, r4
 8007988:	f04f 0c01 	mov.w	ip, #1
 800798c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007990:	e7e8      	b.n	8007964 <_strtol_l.constprop.0+0x6c>
 8007992:	2c2b      	cmp	r4, #43	; 0x2b
 8007994:	bf04      	itt	eq
 8007996:	782c      	ldrbeq	r4, [r5, #0]
 8007998:	1cb5      	addeq	r5, r6, #2
 800799a:	e7ca      	b.n	8007932 <_strtol_l.constprop.0+0x3a>
 800799c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079a0:	f1be 0f19 	cmp.w	lr, #25
 80079a4:	d801      	bhi.n	80079aa <_strtol_l.constprop.0+0xb2>
 80079a6:	3c37      	subs	r4, #55	; 0x37
 80079a8:	e7e2      	b.n	8007970 <_strtol_l.constprop.0+0x78>
 80079aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079ae:	f1be 0f19 	cmp.w	lr, #25
 80079b2:	d804      	bhi.n	80079be <_strtol_l.constprop.0+0xc6>
 80079b4:	3c57      	subs	r4, #87	; 0x57
 80079b6:	e7db      	b.n	8007970 <_strtol_l.constprop.0+0x78>
 80079b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80079bc:	e7e6      	b.n	800798c <_strtol_l.constprop.0+0x94>
 80079be:	f1bc 0f00 	cmp.w	ip, #0
 80079c2:	da05      	bge.n	80079d0 <_strtol_l.constprop.0+0xd8>
 80079c4:	2322      	movs	r3, #34	; 0x22
 80079c6:	6003      	str	r3, [r0, #0]
 80079c8:	4646      	mov	r6, r8
 80079ca:	b942      	cbnz	r2, 80079de <_strtol_l.constprop.0+0xe6>
 80079cc:	4630      	mov	r0, r6
 80079ce:	e79e      	b.n	800790e <_strtol_l.constprop.0+0x16>
 80079d0:	b107      	cbz	r7, 80079d4 <_strtol_l.constprop.0+0xdc>
 80079d2:	4276      	negs	r6, r6
 80079d4:	2a00      	cmp	r2, #0
 80079d6:	d0f9      	beq.n	80079cc <_strtol_l.constprop.0+0xd4>
 80079d8:	f1bc 0f00 	cmp.w	ip, #0
 80079dc:	d000      	beq.n	80079e0 <_strtol_l.constprop.0+0xe8>
 80079de:	1e69      	subs	r1, r5, #1
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	e7f3      	b.n	80079cc <_strtol_l.constprop.0+0xd4>
 80079e4:	2430      	movs	r4, #48	; 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1b1      	bne.n	800794e <_strtol_l.constprop.0+0x56>
 80079ea:	2308      	movs	r3, #8
 80079ec:	e7af      	b.n	800794e <_strtol_l.constprop.0+0x56>
 80079ee:	2c30      	cmp	r4, #48	; 0x30
 80079f0:	d0a5      	beq.n	800793e <_strtol_l.constprop.0+0x46>
 80079f2:	230a      	movs	r3, #10
 80079f4:	e7ab      	b.n	800794e <_strtol_l.constprop.0+0x56>
 80079f6:	bf00      	nop
 80079f8:	0800b8a9 	.word	0x0800b8a9

080079fc <_strtol_r>:
 80079fc:	f7ff bf7c 	b.w	80078f8 <_strtol_l.constprop.0>

08007a00 <__swbuf_r>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	460e      	mov	r6, r1
 8007a04:	4614      	mov	r4, r2
 8007a06:	4605      	mov	r5, r0
 8007a08:	b118      	cbz	r0, 8007a12 <__swbuf_r+0x12>
 8007a0a:	6983      	ldr	r3, [r0, #24]
 8007a0c:	b90b      	cbnz	r3, 8007a12 <__swbuf_r+0x12>
 8007a0e:	f001 f84b 	bl	8008aa8 <__sinit>
 8007a12:	4b21      	ldr	r3, [pc, #132]	; (8007a98 <__swbuf_r+0x98>)
 8007a14:	429c      	cmp	r4, r3
 8007a16:	d12b      	bne.n	8007a70 <__swbuf_r+0x70>
 8007a18:	686c      	ldr	r4, [r5, #4]
 8007a1a:	69a3      	ldr	r3, [r4, #24]
 8007a1c:	60a3      	str	r3, [r4, #8]
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	071a      	lsls	r2, r3, #28
 8007a22:	d52f      	bpl.n	8007a84 <__swbuf_r+0x84>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	b36b      	cbz	r3, 8007a84 <__swbuf_r+0x84>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	6820      	ldr	r0, [r4, #0]
 8007a2c:	1ac0      	subs	r0, r0, r3
 8007a2e:	6963      	ldr	r3, [r4, #20]
 8007a30:	b2f6      	uxtb	r6, r6
 8007a32:	4283      	cmp	r3, r0
 8007a34:	4637      	mov	r7, r6
 8007a36:	dc04      	bgt.n	8007a42 <__swbuf_r+0x42>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 ffa0 	bl	8008980 <_fflush_r>
 8007a40:	bb30      	cbnz	r0, 8007a90 <__swbuf_r+0x90>
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	60a3      	str	r3, [r4, #8]
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	6022      	str	r2, [r4, #0]
 8007a4e:	701e      	strb	r6, [r3, #0]
 8007a50:	6963      	ldr	r3, [r4, #20]
 8007a52:	3001      	adds	r0, #1
 8007a54:	4283      	cmp	r3, r0
 8007a56:	d004      	beq.n	8007a62 <__swbuf_r+0x62>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	07db      	lsls	r3, r3, #31
 8007a5c:	d506      	bpl.n	8007a6c <__swbuf_r+0x6c>
 8007a5e:	2e0a      	cmp	r6, #10
 8007a60:	d104      	bne.n	8007a6c <__swbuf_r+0x6c>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 ff8b 	bl	8008980 <_fflush_r>
 8007a6a:	b988      	cbnz	r0, 8007a90 <__swbuf_r+0x90>
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <__swbuf_r+0x9c>)
 8007a72:	429c      	cmp	r4, r3
 8007a74:	d101      	bne.n	8007a7a <__swbuf_r+0x7a>
 8007a76:	68ac      	ldr	r4, [r5, #8]
 8007a78:	e7cf      	b.n	8007a1a <__swbuf_r+0x1a>
 8007a7a:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <__swbuf_r+0xa0>)
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	bf08      	it	eq
 8007a80:	68ec      	ldreq	r4, [r5, #12]
 8007a82:	e7ca      	b.n	8007a1a <__swbuf_r+0x1a>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 f80c 	bl	8007aa4 <__swsetup_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d0cb      	beq.n	8007a28 <__swbuf_r+0x28>
 8007a90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a94:	e7ea      	b.n	8007a6c <__swbuf_r+0x6c>
 8007a96:	bf00      	nop
 8007a98:	0800ba5c 	.word	0x0800ba5c
 8007a9c:	0800ba7c 	.word	0x0800ba7c
 8007aa0:	0800ba3c 	.word	0x0800ba3c

08007aa4 <__swsetup_r>:
 8007aa4:	4b32      	ldr	r3, [pc, #200]	; (8007b70 <__swsetup_r+0xcc>)
 8007aa6:	b570      	push	{r4, r5, r6, lr}
 8007aa8:	681d      	ldr	r5, [r3, #0]
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	b125      	cbz	r5, 8007aba <__swsetup_r+0x16>
 8007ab0:	69ab      	ldr	r3, [r5, #24]
 8007ab2:	b913      	cbnz	r3, 8007aba <__swsetup_r+0x16>
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f000 fff7 	bl	8008aa8 <__sinit>
 8007aba:	4b2e      	ldr	r3, [pc, #184]	; (8007b74 <__swsetup_r+0xd0>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d10f      	bne.n	8007ae0 <__swsetup_r+0x3c>
 8007ac0:	686c      	ldr	r4, [r5, #4]
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac8:	0719      	lsls	r1, r3, #28
 8007aca:	d42c      	bmi.n	8007b26 <__swsetup_r+0x82>
 8007acc:	06dd      	lsls	r5, r3, #27
 8007ace:	d411      	bmi.n	8007af4 <__swsetup_r+0x50>
 8007ad0:	2309      	movs	r3, #9
 8007ad2:	6033      	str	r3, [r6, #0]
 8007ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ade:	e03e      	b.n	8007b5e <__swsetup_r+0xba>
 8007ae0:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <__swsetup_r+0xd4>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d101      	bne.n	8007aea <__swsetup_r+0x46>
 8007ae6:	68ac      	ldr	r4, [r5, #8]
 8007ae8:	e7eb      	b.n	8007ac2 <__swsetup_r+0x1e>
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <__swsetup_r+0xd8>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	bf08      	it	eq
 8007af0:	68ec      	ldreq	r4, [r5, #12]
 8007af2:	e7e6      	b.n	8007ac2 <__swsetup_r+0x1e>
 8007af4:	0758      	lsls	r0, r3, #29
 8007af6:	d512      	bpl.n	8007b1e <__swsetup_r+0x7a>
 8007af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007afa:	b141      	cbz	r1, 8007b0e <__swsetup_r+0x6a>
 8007afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b00:	4299      	cmp	r1, r3
 8007b02:	d002      	beq.n	8007b0a <__swsetup_r+0x66>
 8007b04:	4630      	mov	r0, r6
 8007b06:	f002 f947 	bl	8009d98 <_free_r>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	2300      	movs	r3, #0
 8007b18:	6063      	str	r3, [r4, #4]
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f043 0308 	orr.w	r3, r3, #8
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	b94b      	cbnz	r3, 8007b3e <__swsetup_r+0x9a>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b34:	d003      	beq.n	8007b3e <__swsetup_r+0x9a>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f001 fbed 	bl	8009318 <__smakebuf_r>
 8007b3e:	89a0      	ldrh	r0, [r4, #12]
 8007b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b44:	f010 0301 	ands.w	r3, r0, #1
 8007b48:	d00a      	beq.n	8007b60 <__swsetup_r+0xbc>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	425b      	negs	r3, r3
 8007b52:	61a3      	str	r3, [r4, #24]
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b943      	cbnz	r3, 8007b6a <__swsetup_r+0xc6>
 8007b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b5c:	d1ba      	bne.n	8007ad4 <__swsetup_r+0x30>
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	0781      	lsls	r1, r0, #30
 8007b62:	bf58      	it	pl
 8007b64:	6963      	ldrpl	r3, [r4, #20]
 8007b66:	60a3      	str	r3, [r4, #8]
 8007b68:	e7f4      	b.n	8007b54 <__swsetup_r+0xb0>
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e7f7      	b.n	8007b5e <__swsetup_r+0xba>
 8007b6e:	bf00      	nop
 8007b70:	2000000c 	.word	0x2000000c
 8007b74:	0800ba5c 	.word	0x0800ba5c
 8007b78:	0800ba7c 	.word	0x0800ba7c
 8007b7c:	0800ba3c 	.word	0x0800ba3c

08007b80 <quorem>:
 8007b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	6903      	ldr	r3, [r0, #16]
 8007b86:	690c      	ldr	r4, [r1, #16]
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	4607      	mov	r7, r0
 8007b8c:	f2c0 8081 	blt.w	8007c92 <quorem+0x112>
 8007b90:	3c01      	subs	r4, #1
 8007b92:	f101 0814 	add.w	r8, r1, #20
 8007b96:	f100 0514 	add.w	r5, r0, #20
 8007b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	429a      	cmp	r2, r3
 8007bac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bb8:	d331      	bcc.n	8007c1e <quorem+0x9e>
 8007bba:	f04f 0e00 	mov.w	lr, #0
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	46ac      	mov	ip, r5
 8007bc2:	46f2      	mov	sl, lr
 8007bc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bc8:	b293      	uxth	r3, r2
 8007bca:	fb06 e303 	mla	r3, r6, r3, lr
 8007bce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8007bd8:	f8dc a000 	ldr.w	sl, [ip]
 8007bdc:	0c12      	lsrs	r2, r2, #16
 8007bde:	fa13 f38a 	uxtah	r3, r3, sl
 8007be2:	fb06 e202 	mla	r2, r6, r2, lr
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007bfc:	4581      	cmp	r9, r0
 8007bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c02:	f84c 3b04 	str.w	r3, [ip], #4
 8007c06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c0a:	d2db      	bcs.n	8007bc4 <quorem+0x44>
 8007c0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c10:	b92b      	cbnz	r3, 8007c1e <quorem+0x9e>
 8007c12:	9b01      	ldr	r3, [sp, #4]
 8007c14:	3b04      	subs	r3, #4
 8007c16:	429d      	cmp	r5, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	d32e      	bcc.n	8007c7a <quorem+0xfa>
 8007c1c:	613c      	str	r4, [r7, #16]
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f001 feae 	bl	8009980 <__mcmp>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	db24      	blt.n	8007c72 <quorem+0xf2>
 8007c28:	3601      	adds	r6, #1
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f04f 0c00 	mov.w	ip, #0
 8007c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c34:	f8d0 e000 	ldr.w	lr, [r0]
 8007c38:	b293      	uxth	r3, r2
 8007c3a:	ebac 0303 	sub.w	r3, ip, r3
 8007c3e:	0c12      	lsrs	r2, r2, #16
 8007c40:	fa13 f38e 	uxtah	r3, r3, lr
 8007c44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c52:	45c1      	cmp	r9, r8
 8007c54:	f840 3b04 	str.w	r3, [r0], #4
 8007c58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c5c:	d2e8      	bcs.n	8007c30 <quorem+0xb0>
 8007c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c66:	b922      	cbnz	r2, 8007c72 <quorem+0xf2>
 8007c68:	3b04      	subs	r3, #4
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	d30a      	bcc.n	8007c86 <quorem+0x106>
 8007c70:	613c      	str	r4, [r7, #16]
 8007c72:	4630      	mov	r0, r6
 8007c74:	b003      	add	sp, #12
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	d1cc      	bne.n	8007c1c <quorem+0x9c>
 8007c82:	3c01      	subs	r4, #1
 8007c84:	e7c7      	b.n	8007c16 <quorem+0x96>
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1f0      	bne.n	8007c70 <quorem+0xf0>
 8007c8e:	3c01      	subs	r4, #1
 8007c90:	e7eb      	b.n	8007c6a <quorem+0xea>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e7ee      	b.n	8007c74 <quorem+0xf4>
	...

08007c98 <_dtoa_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	ed2d 8b04 	vpush	{d8-d9}
 8007ca0:	ec57 6b10 	vmov	r6, r7, d0
 8007ca4:	b093      	sub	sp, #76	; 0x4c
 8007ca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ca8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cac:	9106      	str	r1, [sp, #24]
 8007cae:	ee10 aa10 	vmov	sl, s0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cb8:	46bb      	mov	fp, r7
 8007cba:	b975      	cbnz	r5, 8007cda <_dtoa_r+0x42>
 8007cbc:	2010      	movs	r0, #16
 8007cbe:	f001 fb6b 	bl	8009398 <malloc>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	6260      	str	r0, [r4, #36]	; 0x24
 8007cc6:	b920      	cbnz	r0, 8007cd2 <_dtoa_r+0x3a>
 8007cc8:	4ba7      	ldr	r3, [pc, #668]	; (8007f68 <_dtoa_r+0x2d0>)
 8007cca:	21ea      	movs	r1, #234	; 0xea
 8007ccc:	48a7      	ldr	r0, [pc, #668]	; (8007f6c <_dtoa_r+0x2d4>)
 8007cce:	f002 fc89 	bl	800a5e4 <__assert_func>
 8007cd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cd6:	6005      	str	r5, [r0, #0]
 8007cd8:	60c5      	str	r5, [r0, #12]
 8007cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cdc:	6819      	ldr	r1, [r3, #0]
 8007cde:	b151      	cbz	r1, 8007cf6 <_dtoa_r+0x5e>
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	604a      	str	r2, [r1, #4]
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	4093      	lsls	r3, r2
 8007ce8:	608b      	str	r3, [r1, #8]
 8007cea:	4620      	mov	r0, r4
 8007cec:	f001 fbbc 	bl	8009468 <_Bfree>
 8007cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	1e3b      	subs	r3, r7, #0
 8007cf8:	bfaa      	itet	ge
 8007cfa:	2300      	movge	r3, #0
 8007cfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d00:	f8c8 3000 	strge.w	r3, [r8]
 8007d04:	4b9a      	ldr	r3, [pc, #616]	; (8007f70 <_dtoa_r+0x2d8>)
 8007d06:	bfbc      	itt	lt
 8007d08:	2201      	movlt	r2, #1
 8007d0a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d0e:	ea33 030b 	bics.w	r3, r3, fp
 8007d12:	d11b      	bne.n	8007d4c <_dtoa_r+0xb4>
 8007d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d16:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d20:	4333      	orrs	r3, r6
 8007d22:	f000 8592 	beq.w	800884a <_dtoa_r+0xbb2>
 8007d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d28:	b963      	cbnz	r3, 8007d44 <_dtoa_r+0xac>
 8007d2a:	4b92      	ldr	r3, [pc, #584]	; (8007f74 <_dtoa_r+0x2dc>)
 8007d2c:	e022      	b.n	8007d74 <_dtoa_r+0xdc>
 8007d2e:	4b92      	ldr	r3, [pc, #584]	; (8007f78 <_dtoa_r+0x2e0>)
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	3308      	adds	r3, #8
 8007d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	9801      	ldr	r0, [sp, #4]
 8007d3a:	b013      	add	sp, #76	; 0x4c
 8007d3c:	ecbd 8b04 	vpop	{d8-d9}
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	4b8b      	ldr	r3, [pc, #556]	; (8007f74 <_dtoa_r+0x2dc>)
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	3303      	adds	r3, #3
 8007d4a:	e7f3      	b.n	8007d34 <_dtoa_r+0x9c>
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4650      	mov	r0, sl
 8007d52:	4659      	mov	r1, fp
 8007d54:	f7f8 fee8 	bl	8000b28 <__aeabi_dcmpeq>
 8007d58:	ec4b ab19 	vmov	d9, sl, fp
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	b158      	cbz	r0, 8007d78 <_dtoa_r+0xe0>
 8007d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d62:	2301      	movs	r3, #1
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 856b 	beq.w	8008844 <_dtoa_r+0xbac>
 8007d6e:	4883      	ldr	r0, [pc, #524]	; (8007f7c <_dtoa_r+0x2e4>)
 8007d70:	6018      	str	r0, [r3, #0]
 8007d72:	1e43      	subs	r3, r0, #1
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	e7df      	b.n	8007d38 <_dtoa_r+0xa0>
 8007d78:	ec4b ab10 	vmov	d0, sl, fp
 8007d7c:	aa10      	add	r2, sp, #64	; 0x40
 8007d7e:	a911      	add	r1, sp, #68	; 0x44
 8007d80:	4620      	mov	r0, r4
 8007d82:	f001 ff1f 	bl	8009bc4 <__d2b>
 8007d86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d8a:	ee08 0a10 	vmov	s16, r0
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	f000 8084 	beq.w	8007e9c <_dtoa_r+0x204>
 8007d94:	ee19 3a90 	vmov	r3, s19
 8007d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007da0:	4656      	mov	r6, sl
 8007da2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007da6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007daa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dae:	4b74      	ldr	r3, [pc, #464]	; (8007f80 <_dtoa_r+0x2e8>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	4630      	mov	r0, r6
 8007db4:	4639      	mov	r1, r7
 8007db6:	f7f8 fa97 	bl	80002e8 <__aeabi_dsub>
 8007dba:	a365      	add	r3, pc, #404	; (adr r3, 8007f50 <_dtoa_r+0x2b8>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fc4a 	bl	8000658 <__aeabi_dmul>
 8007dc4:	a364      	add	r3, pc, #400	; (adr r3, 8007f58 <_dtoa_r+0x2c0>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fa8f 	bl	80002ec <__adddf3>
 8007dce:	4606      	mov	r6, r0
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	460f      	mov	r7, r1
 8007dd4:	f7f8 fbd6 	bl	8000584 <__aeabi_i2d>
 8007dd8:	a361      	add	r3, pc, #388	; (adr r3, 8007f60 <_dtoa_r+0x2c8>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fc3b 	bl	8000658 <__aeabi_dmul>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4630      	mov	r0, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	f7f8 fa7f 	bl	80002ec <__adddf3>
 8007dee:	4606      	mov	r6, r0
 8007df0:	460f      	mov	r7, r1
 8007df2:	f7f8 fee1 	bl	8000bb8 <__aeabi_d2iz>
 8007df6:	2200      	movs	r2, #0
 8007df8:	9000      	str	r0, [sp, #0]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	4639      	mov	r1, r7
 8007e00:	f7f8 fe9c 	bl	8000b3c <__aeabi_dcmplt>
 8007e04:	b150      	cbz	r0, 8007e1c <_dtoa_r+0x184>
 8007e06:	9800      	ldr	r0, [sp, #0]
 8007e08:	f7f8 fbbc 	bl	8000584 <__aeabi_i2d>
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	463b      	mov	r3, r7
 8007e10:	f7f8 fe8a 	bl	8000b28 <__aeabi_dcmpeq>
 8007e14:	b910      	cbnz	r0, 8007e1c <_dtoa_r+0x184>
 8007e16:	9b00      	ldr	r3, [sp, #0]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	9b00      	ldr	r3, [sp, #0]
 8007e1e:	2b16      	cmp	r3, #22
 8007e20:	d85a      	bhi.n	8007ed8 <_dtoa_r+0x240>
 8007e22:	9a00      	ldr	r2, [sp, #0]
 8007e24:	4b57      	ldr	r3, [pc, #348]	; (8007f84 <_dtoa_r+0x2ec>)
 8007e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	ec51 0b19 	vmov	r0, r1, d9
 8007e32:	f7f8 fe83 	bl	8000b3c <__aeabi_dcmplt>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d050      	beq.n	8007edc <_dtoa_r+0x244>
 8007e3a:	9b00      	ldr	r3, [sp, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2300      	movs	r3, #0
 8007e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e46:	1b5d      	subs	r5, r3, r5
 8007e48:	1e6b      	subs	r3, r5, #1
 8007e4a:	9305      	str	r3, [sp, #20]
 8007e4c:	bf45      	ittet	mi
 8007e4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e52:	9304      	strmi	r3, [sp, #16]
 8007e54:	2300      	movpl	r3, #0
 8007e56:	2300      	movmi	r3, #0
 8007e58:	bf4c      	ite	mi
 8007e5a:	9305      	strmi	r3, [sp, #20]
 8007e5c:	9304      	strpl	r3, [sp, #16]
 8007e5e:	9b00      	ldr	r3, [sp, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	db3d      	blt.n	8007ee0 <_dtoa_r+0x248>
 8007e64:	9b05      	ldr	r3, [sp, #20]
 8007e66:	9a00      	ldr	r2, [sp, #0]
 8007e68:	920a      	str	r2, [sp, #40]	; 0x28
 8007e6a:	4413      	add	r3, r2
 8007e6c:	9305      	str	r3, [sp, #20]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9307      	str	r3, [sp, #28]
 8007e72:	9b06      	ldr	r3, [sp, #24]
 8007e74:	2b09      	cmp	r3, #9
 8007e76:	f200 8089 	bhi.w	8007f8c <_dtoa_r+0x2f4>
 8007e7a:	2b05      	cmp	r3, #5
 8007e7c:	bfc4      	itt	gt
 8007e7e:	3b04      	subgt	r3, #4
 8007e80:	9306      	strgt	r3, [sp, #24]
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	f1a3 0302 	sub.w	r3, r3, #2
 8007e88:	bfcc      	ite	gt
 8007e8a:	2500      	movgt	r5, #0
 8007e8c:	2501      	movle	r5, #1
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	f200 8087 	bhi.w	8007fa2 <_dtoa_r+0x30a>
 8007e94:	e8df f003 	tbb	[pc, r3]
 8007e98:	59383a2d 	.word	0x59383a2d
 8007e9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ea0:	441d      	add	r5, r3
 8007ea2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	bfc1      	itttt	gt
 8007eaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007eae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007eb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007eb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eba:	bfda      	itte	le
 8007ebc:	f1c3 0320 	rsble	r3, r3, #32
 8007ec0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ec4:	4318      	orrgt	r0, r3
 8007ec6:	f7f8 fb4d 	bl	8000564 <__aeabi_ui2d>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	4606      	mov	r6, r0
 8007ece:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ed2:	3d01      	subs	r5, #1
 8007ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ed6:	e76a      	b.n	8007dae <_dtoa_r+0x116>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e7b2      	b.n	8007e42 <_dtoa_r+0x1aa>
 8007edc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ede:	e7b1      	b.n	8007e44 <_dtoa_r+0x1ac>
 8007ee0:	9b04      	ldr	r3, [sp, #16]
 8007ee2:	9a00      	ldr	r2, [sp, #0]
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	4253      	negs	r3, r2
 8007eea:	9307      	str	r3, [sp, #28]
 8007eec:	2300      	movs	r3, #0
 8007eee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef0:	e7bf      	b.n	8007e72 <_dtoa_r+0x1da>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	9308      	str	r3, [sp, #32]
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dc55      	bgt.n	8007fa8 <_dtoa_r+0x310>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f02:	461a      	mov	r2, r3
 8007f04:	9209      	str	r2, [sp, #36]	; 0x24
 8007f06:	e00c      	b.n	8007f22 <_dtoa_r+0x28a>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e7f3      	b.n	8007ef4 <_dtoa_r+0x25c>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f10:	9308      	str	r3, [sp, #32]
 8007f12:	9b00      	ldr	r3, [sp, #0]
 8007f14:	4413      	add	r3, r2
 8007f16:	9302      	str	r3, [sp, #8]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	bfb8      	it	lt
 8007f20:	2301      	movlt	r3, #1
 8007f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f24:	2200      	movs	r2, #0
 8007f26:	6042      	str	r2, [r0, #4]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	f102 0614 	add.w	r6, r2, #20
 8007f2e:	429e      	cmp	r6, r3
 8007f30:	6841      	ldr	r1, [r0, #4]
 8007f32:	d93d      	bls.n	8007fb0 <_dtoa_r+0x318>
 8007f34:	4620      	mov	r0, r4
 8007f36:	f001 fa57 	bl	80093e8 <_Balloc>
 8007f3a:	9001      	str	r0, [sp, #4]
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d13b      	bne.n	8007fb8 <_dtoa_r+0x320>
 8007f40:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <_dtoa_r+0x2f0>)
 8007f42:	4602      	mov	r2, r0
 8007f44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f48:	e6c0      	b.n	8007ccc <_dtoa_r+0x34>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e7df      	b.n	8007f0e <_dtoa_r+0x276>
 8007f4e:	bf00      	nop
 8007f50:	636f4361 	.word	0x636f4361
 8007f54:	3fd287a7 	.word	0x3fd287a7
 8007f58:	8b60c8b3 	.word	0x8b60c8b3
 8007f5c:	3fc68a28 	.word	0x3fc68a28
 8007f60:	509f79fb 	.word	0x509f79fb
 8007f64:	3fd34413 	.word	0x3fd34413
 8007f68:	0800b9b6 	.word	0x0800b9b6
 8007f6c:	0800b9cd 	.word	0x0800b9cd
 8007f70:	7ff00000 	.word	0x7ff00000
 8007f74:	0800b9b2 	.word	0x0800b9b2
 8007f78:	0800b9a9 	.word	0x0800b9a9
 8007f7c:	0800b82d 	.word	0x0800b82d
 8007f80:	3ff80000 	.word	0x3ff80000
 8007f84:	0800bba0 	.word	0x0800bba0
 8007f88:	0800ba28 	.word	0x0800ba28
 8007f8c:	2501      	movs	r5, #1
 8007f8e:	2300      	movs	r3, #0
 8007f90:	9306      	str	r3, [sp, #24]
 8007f92:	9508      	str	r5, [sp, #32]
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2312      	movs	r3, #18
 8007fa0:	e7b0      	b.n	8007f04 <_dtoa_r+0x26c>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	9308      	str	r3, [sp, #32]
 8007fa6:	e7f5      	b.n	8007f94 <_dtoa_r+0x2fc>
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fae:	e7b8      	b.n	8007f22 <_dtoa_r+0x28a>
 8007fb0:	3101      	adds	r1, #1
 8007fb2:	6041      	str	r1, [r0, #4]
 8007fb4:	0052      	lsls	r2, r2, #1
 8007fb6:	e7b8      	b.n	8007f2a <_dtoa_r+0x292>
 8007fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fba:	9a01      	ldr	r2, [sp, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	2b0e      	cmp	r3, #14
 8007fc2:	f200 809d 	bhi.w	8008100 <_dtoa_r+0x468>
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	f000 809a 	beq.w	8008100 <_dtoa_r+0x468>
 8007fcc:	9b00      	ldr	r3, [sp, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	dd32      	ble.n	8008038 <_dtoa_r+0x3a0>
 8007fd2:	4ab7      	ldr	r2, [pc, #732]	; (80082b0 <_dtoa_r+0x618>)
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fe0:	9b00      	ldr	r3, [sp, #0]
 8007fe2:	05d8      	lsls	r0, r3, #23
 8007fe4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007fe8:	d516      	bpl.n	8008018 <_dtoa_r+0x380>
 8007fea:	4bb2      	ldr	r3, [pc, #712]	; (80082b4 <_dtoa_r+0x61c>)
 8007fec:	ec51 0b19 	vmov	r0, r1, d9
 8007ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ff4:	f7f8 fc5a 	bl	80008ac <__aeabi_ddiv>
 8007ff8:	f007 070f 	and.w	r7, r7, #15
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	468b      	mov	fp, r1
 8008000:	2503      	movs	r5, #3
 8008002:	4eac      	ldr	r6, [pc, #688]	; (80082b4 <_dtoa_r+0x61c>)
 8008004:	b957      	cbnz	r7, 800801c <_dtoa_r+0x384>
 8008006:	4642      	mov	r2, r8
 8008008:	464b      	mov	r3, r9
 800800a:	4650      	mov	r0, sl
 800800c:	4659      	mov	r1, fp
 800800e:	f7f8 fc4d 	bl	80008ac <__aeabi_ddiv>
 8008012:	4682      	mov	sl, r0
 8008014:	468b      	mov	fp, r1
 8008016:	e028      	b.n	800806a <_dtoa_r+0x3d2>
 8008018:	2502      	movs	r5, #2
 800801a:	e7f2      	b.n	8008002 <_dtoa_r+0x36a>
 800801c:	07f9      	lsls	r1, r7, #31
 800801e:	d508      	bpl.n	8008032 <_dtoa_r+0x39a>
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008028:	f7f8 fb16 	bl	8000658 <__aeabi_dmul>
 800802c:	3501      	adds	r5, #1
 800802e:	4680      	mov	r8, r0
 8008030:	4689      	mov	r9, r1
 8008032:	107f      	asrs	r7, r7, #1
 8008034:	3608      	adds	r6, #8
 8008036:	e7e5      	b.n	8008004 <_dtoa_r+0x36c>
 8008038:	f000 809b 	beq.w	8008172 <_dtoa_r+0x4da>
 800803c:	9b00      	ldr	r3, [sp, #0]
 800803e:	4f9d      	ldr	r7, [pc, #628]	; (80082b4 <_dtoa_r+0x61c>)
 8008040:	425e      	negs	r6, r3
 8008042:	4b9b      	ldr	r3, [pc, #620]	; (80082b0 <_dtoa_r+0x618>)
 8008044:	f006 020f 	and.w	r2, r6, #15
 8008048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	ec51 0b19 	vmov	r0, r1, d9
 8008054:	f7f8 fb00 	bl	8000658 <__aeabi_dmul>
 8008058:	1136      	asrs	r6, r6, #4
 800805a:	4682      	mov	sl, r0
 800805c:	468b      	mov	fp, r1
 800805e:	2300      	movs	r3, #0
 8008060:	2502      	movs	r5, #2
 8008062:	2e00      	cmp	r6, #0
 8008064:	d17a      	bne.n	800815c <_dtoa_r+0x4c4>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1d3      	bne.n	8008012 <_dtoa_r+0x37a>
 800806a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8082 	beq.w	8008176 <_dtoa_r+0x4de>
 8008072:	4b91      	ldr	r3, [pc, #580]	; (80082b8 <_dtoa_r+0x620>)
 8008074:	2200      	movs	r2, #0
 8008076:	4650      	mov	r0, sl
 8008078:	4659      	mov	r1, fp
 800807a:	f7f8 fd5f 	bl	8000b3c <__aeabi_dcmplt>
 800807e:	2800      	cmp	r0, #0
 8008080:	d079      	beq.n	8008176 <_dtoa_r+0x4de>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d076      	beq.n	8008176 <_dtoa_r+0x4de>
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	dd36      	ble.n	80080fc <_dtoa_r+0x464>
 800808e:	9b00      	ldr	r3, [sp, #0]
 8008090:	4650      	mov	r0, sl
 8008092:	4659      	mov	r1, fp
 8008094:	1e5f      	subs	r7, r3, #1
 8008096:	2200      	movs	r2, #0
 8008098:	4b88      	ldr	r3, [pc, #544]	; (80082bc <_dtoa_r+0x624>)
 800809a:	f7f8 fadd 	bl	8000658 <__aeabi_dmul>
 800809e:	9e02      	ldr	r6, [sp, #8]
 80080a0:	4682      	mov	sl, r0
 80080a2:	468b      	mov	fp, r1
 80080a4:	3501      	adds	r5, #1
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7f8 fa6c 	bl	8000584 <__aeabi_i2d>
 80080ac:	4652      	mov	r2, sl
 80080ae:	465b      	mov	r3, fp
 80080b0:	f7f8 fad2 	bl	8000658 <__aeabi_dmul>
 80080b4:	4b82      	ldr	r3, [pc, #520]	; (80082c0 <_dtoa_r+0x628>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	f7f8 f918 	bl	80002ec <__adddf3>
 80080bc:	46d0      	mov	r8, sl
 80080be:	46d9      	mov	r9, fp
 80080c0:	4682      	mov	sl, r0
 80080c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	d158      	bne.n	800817c <_dtoa_r+0x4e4>
 80080ca:	4b7e      	ldr	r3, [pc, #504]	; (80082c4 <_dtoa_r+0x62c>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	4640      	mov	r0, r8
 80080d0:	4649      	mov	r1, r9
 80080d2:	f7f8 f909 	bl	80002e8 <__aeabi_dsub>
 80080d6:	4652      	mov	r2, sl
 80080d8:	465b      	mov	r3, fp
 80080da:	4680      	mov	r8, r0
 80080dc:	4689      	mov	r9, r1
 80080de:	f7f8 fd4b 	bl	8000b78 <__aeabi_dcmpgt>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f040 8295 	bne.w	8008612 <_dtoa_r+0x97a>
 80080e8:	4652      	mov	r2, sl
 80080ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080ee:	4640      	mov	r0, r8
 80080f0:	4649      	mov	r1, r9
 80080f2:	f7f8 fd23 	bl	8000b3c <__aeabi_dcmplt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f040 8289 	bne.w	800860e <_dtoa_r+0x976>
 80080fc:	ec5b ab19 	vmov	sl, fp, d9
 8008100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008102:	2b00      	cmp	r3, #0
 8008104:	f2c0 8148 	blt.w	8008398 <_dtoa_r+0x700>
 8008108:	9a00      	ldr	r2, [sp, #0]
 800810a:	2a0e      	cmp	r2, #14
 800810c:	f300 8144 	bgt.w	8008398 <_dtoa_r+0x700>
 8008110:	4b67      	ldr	r3, [pc, #412]	; (80082b0 <_dtoa_r+0x618>)
 8008112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008116:	e9d3 8900 	ldrd	r8, r9, [r3]
 800811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811c:	2b00      	cmp	r3, #0
 800811e:	f280 80d5 	bge.w	80082cc <_dtoa_r+0x634>
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f300 80d1 	bgt.w	80082cc <_dtoa_r+0x634>
 800812a:	f040 826f 	bne.w	800860c <_dtoa_r+0x974>
 800812e:	4b65      	ldr	r3, [pc, #404]	; (80082c4 <_dtoa_r+0x62c>)
 8008130:	2200      	movs	r2, #0
 8008132:	4640      	mov	r0, r8
 8008134:	4649      	mov	r1, r9
 8008136:	f7f8 fa8f 	bl	8000658 <__aeabi_dmul>
 800813a:	4652      	mov	r2, sl
 800813c:	465b      	mov	r3, fp
 800813e:	f7f8 fd11 	bl	8000b64 <__aeabi_dcmpge>
 8008142:	9e03      	ldr	r6, [sp, #12]
 8008144:	4637      	mov	r7, r6
 8008146:	2800      	cmp	r0, #0
 8008148:	f040 8245 	bne.w	80085d6 <_dtoa_r+0x93e>
 800814c:	9d01      	ldr	r5, [sp, #4]
 800814e:	2331      	movs	r3, #49	; 0x31
 8008150:	f805 3b01 	strb.w	r3, [r5], #1
 8008154:	9b00      	ldr	r3, [sp, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	e240      	b.n	80085de <_dtoa_r+0x946>
 800815c:	07f2      	lsls	r2, r6, #31
 800815e:	d505      	bpl.n	800816c <_dtoa_r+0x4d4>
 8008160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008164:	f7f8 fa78 	bl	8000658 <__aeabi_dmul>
 8008168:	3501      	adds	r5, #1
 800816a:	2301      	movs	r3, #1
 800816c:	1076      	asrs	r6, r6, #1
 800816e:	3708      	adds	r7, #8
 8008170:	e777      	b.n	8008062 <_dtoa_r+0x3ca>
 8008172:	2502      	movs	r5, #2
 8008174:	e779      	b.n	800806a <_dtoa_r+0x3d2>
 8008176:	9f00      	ldr	r7, [sp, #0]
 8008178:	9e03      	ldr	r6, [sp, #12]
 800817a:	e794      	b.n	80080a6 <_dtoa_r+0x40e>
 800817c:	9901      	ldr	r1, [sp, #4]
 800817e:	4b4c      	ldr	r3, [pc, #304]	; (80082b0 <_dtoa_r+0x618>)
 8008180:	4431      	add	r1, r6
 8008182:	910d      	str	r1, [sp, #52]	; 0x34
 8008184:	9908      	ldr	r1, [sp, #32]
 8008186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800818a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800818e:	2900      	cmp	r1, #0
 8008190:	d043      	beq.n	800821a <_dtoa_r+0x582>
 8008192:	494d      	ldr	r1, [pc, #308]	; (80082c8 <_dtoa_r+0x630>)
 8008194:	2000      	movs	r0, #0
 8008196:	f7f8 fb89 	bl	80008ac <__aeabi_ddiv>
 800819a:	4652      	mov	r2, sl
 800819c:	465b      	mov	r3, fp
 800819e:	f7f8 f8a3 	bl	80002e8 <__aeabi_dsub>
 80081a2:	9d01      	ldr	r5, [sp, #4]
 80081a4:	4682      	mov	sl, r0
 80081a6:	468b      	mov	fp, r1
 80081a8:	4649      	mov	r1, r9
 80081aa:	4640      	mov	r0, r8
 80081ac:	f7f8 fd04 	bl	8000bb8 <__aeabi_d2iz>
 80081b0:	4606      	mov	r6, r0
 80081b2:	f7f8 f9e7 	bl	8000584 <__aeabi_i2d>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4640      	mov	r0, r8
 80081bc:	4649      	mov	r1, r9
 80081be:	f7f8 f893 	bl	80002e8 <__aeabi_dsub>
 80081c2:	3630      	adds	r6, #48	; 0x30
 80081c4:	f805 6b01 	strb.w	r6, [r5], #1
 80081c8:	4652      	mov	r2, sl
 80081ca:	465b      	mov	r3, fp
 80081cc:	4680      	mov	r8, r0
 80081ce:	4689      	mov	r9, r1
 80081d0:	f7f8 fcb4 	bl	8000b3c <__aeabi_dcmplt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d163      	bne.n	80082a0 <_dtoa_r+0x608>
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	4936      	ldr	r1, [pc, #216]	; (80082b8 <_dtoa_r+0x620>)
 80081de:	2000      	movs	r0, #0
 80081e0:	f7f8 f882 	bl	80002e8 <__aeabi_dsub>
 80081e4:	4652      	mov	r2, sl
 80081e6:	465b      	mov	r3, fp
 80081e8:	f7f8 fca8 	bl	8000b3c <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	f040 80b5 	bne.w	800835c <_dtoa_r+0x6c4>
 80081f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f4:	429d      	cmp	r5, r3
 80081f6:	d081      	beq.n	80080fc <_dtoa_r+0x464>
 80081f8:	4b30      	ldr	r3, [pc, #192]	; (80082bc <_dtoa_r+0x624>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	4650      	mov	r0, sl
 80081fe:	4659      	mov	r1, fp
 8008200:	f7f8 fa2a 	bl	8000658 <__aeabi_dmul>
 8008204:	4b2d      	ldr	r3, [pc, #180]	; (80082bc <_dtoa_r+0x624>)
 8008206:	4682      	mov	sl, r0
 8008208:	468b      	mov	fp, r1
 800820a:	4640      	mov	r0, r8
 800820c:	4649      	mov	r1, r9
 800820e:	2200      	movs	r2, #0
 8008210:	f7f8 fa22 	bl	8000658 <__aeabi_dmul>
 8008214:	4680      	mov	r8, r0
 8008216:	4689      	mov	r9, r1
 8008218:	e7c6      	b.n	80081a8 <_dtoa_r+0x510>
 800821a:	4650      	mov	r0, sl
 800821c:	4659      	mov	r1, fp
 800821e:	f7f8 fa1b 	bl	8000658 <__aeabi_dmul>
 8008222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008224:	9d01      	ldr	r5, [sp, #4]
 8008226:	930f      	str	r3, [sp, #60]	; 0x3c
 8008228:	4682      	mov	sl, r0
 800822a:	468b      	mov	fp, r1
 800822c:	4649      	mov	r1, r9
 800822e:	4640      	mov	r0, r8
 8008230:	f7f8 fcc2 	bl	8000bb8 <__aeabi_d2iz>
 8008234:	4606      	mov	r6, r0
 8008236:	f7f8 f9a5 	bl	8000584 <__aeabi_i2d>
 800823a:	3630      	adds	r6, #48	; 0x30
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4640      	mov	r0, r8
 8008242:	4649      	mov	r1, r9
 8008244:	f7f8 f850 	bl	80002e8 <__aeabi_dsub>
 8008248:	f805 6b01 	strb.w	r6, [r5], #1
 800824c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800824e:	429d      	cmp	r5, r3
 8008250:	4680      	mov	r8, r0
 8008252:	4689      	mov	r9, r1
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	d124      	bne.n	80082a4 <_dtoa_r+0x60c>
 800825a:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <_dtoa_r+0x630>)
 800825c:	4650      	mov	r0, sl
 800825e:	4659      	mov	r1, fp
 8008260:	f7f8 f844 	bl	80002ec <__adddf3>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4640      	mov	r0, r8
 800826a:	4649      	mov	r1, r9
 800826c:	f7f8 fc84 	bl	8000b78 <__aeabi_dcmpgt>
 8008270:	2800      	cmp	r0, #0
 8008272:	d173      	bne.n	800835c <_dtoa_r+0x6c4>
 8008274:	4652      	mov	r2, sl
 8008276:	465b      	mov	r3, fp
 8008278:	4913      	ldr	r1, [pc, #76]	; (80082c8 <_dtoa_r+0x630>)
 800827a:	2000      	movs	r0, #0
 800827c:	f7f8 f834 	bl	80002e8 <__aeabi_dsub>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fc58 	bl	8000b3c <__aeabi_dcmplt>
 800828c:	2800      	cmp	r0, #0
 800828e:	f43f af35 	beq.w	80080fc <_dtoa_r+0x464>
 8008292:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008294:	1e6b      	subs	r3, r5, #1
 8008296:	930f      	str	r3, [sp, #60]	; 0x3c
 8008298:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800829c:	2b30      	cmp	r3, #48	; 0x30
 800829e:	d0f8      	beq.n	8008292 <_dtoa_r+0x5fa>
 80082a0:	9700      	str	r7, [sp, #0]
 80082a2:	e049      	b.n	8008338 <_dtoa_r+0x6a0>
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <_dtoa_r+0x624>)
 80082a6:	f7f8 f9d7 	bl	8000658 <__aeabi_dmul>
 80082aa:	4680      	mov	r8, r0
 80082ac:	4689      	mov	r9, r1
 80082ae:	e7bd      	b.n	800822c <_dtoa_r+0x594>
 80082b0:	0800bba0 	.word	0x0800bba0
 80082b4:	0800bb78 	.word	0x0800bb78
 80082b8:	3ff00000 	.word	0x3ff00000
 80082bc:	40240000 	.word	0x40240000
 80082c0:	401c0000 	.word	0x401c0000
 80082c4:	40140000 	.word	0x40140000
 80082c8:	3fe00000 	.word	0x3fe00000
 80082cc:	9d01      	ldr	r5, [sp, #4]
 80082ce:	4656      	mov	r6, sl
 80082d0:	465f      	mov	r7, fp
 80082d2:	4642      	mov	r2, r8
 80082d4:	464b      	mov	r3, r9
 80082d6:	4630      	mov	r0, r6
 80082d8:	4639      	mov	r1, r7
 80082da:	f7f8 fae7 	bl	80008ac <__aeabi_ddiv>
 80082de:	f7f8 fc6b 	bl	8000bb8 <__aeabi_d2iz>
 80082e2:	4682      	mov	sl, r0
 80082e4:	f7f8 f94e 	bl	8000584 <__aeabi_i2d>
 80082e8:	4642      	mov	r2, r8
 80082ea:	464b      	mov	r3, r9
 80082ec:	f7f8 f9b4 	bl	8000658 <__aeabi_dmul>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80082fc:	f7f7 fff4 	bl	80002e8 <__aeabi_dsub>
 8008300:	f805 6b01 	strb.w	r6, [r5], #1
 8008304:	9e01      	ldr	r6, [sp, #4]
 8008306:	9f03      	ldr	r7, [sp, #12]
 8008308:	1bae      	subs	r6, r5, r6
 800830a:	42b7      	cmp	r7, r6
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	d135      	bne.n	800837e <_dtoa_r+0x6e6>
 8008312:	f7f7 ffeb 	bl	80002ec <__adddf3>
 8008316:	4642      	mov	r2, r8
 8008318:	464b      	mov	r3, r9
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	f7f8 fc2b 	bl	8000b78 <__aeabi_dcmpgt>
 8008322:	b9d0      	cbnz	r0, 800835a <_dtoa_r+0x6c2>
 8008324:	4642      	mov	r2, r8
 8008326:	464b      	mov	r3, r9
 8008328:	4630      	mov	r0, r6
 800832a:	4639      	mov	r1, r7
 800832c:	f7f8 fbfc 	bl	8000b28 <__aeabi_dcmpeq>
 8008330:	b110      	cbz	r0, 8008338 <_dtoa_r+0x6a0>
 8008332:	f01a 0f01 	tst.w	sl, #1
 8008336:	d110      	bne.n	800835a <_dtoa_r+0x6c2>
 8008338:	4620      	mov	r0, r4
 800833a:	ee18 1a10 	vmov	r1, s16
 800833e:	f001 f893 	bl	8009468 <_Bfree>
 8008342:	2300      	movs	r3, #0
 8008344:	9800      	ldr	r0, [sp, #0]
 8008346:	702b      	strb	r3, [r5, #0]
 8008348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800834a:	3001      	adds	r0, #1
 800834c:	6018      	str	r0, [r3, #0]
 800834e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008350:	2b00      	cmp	r3, #0
 8008352:	f43f acf1 	beq.w	8007d38 <_dtoa_r+0xa0>
 8008356:	601d      	str	r5, [r3, #0]
 8008358:	e4ee      	b.n	8007d38 <_dtoa_r+0xa0>
 800835a:	9f00      	ldr	r7, [sp, #0]
 800835c:	462b      	mov	r3, r5
 800835e:	461d      	mov	r5, r3
 8008360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008364:	2a39      	cmp	r2, #57	; 0x39
 8008366:	d106      	bne.n	8008376 <_dtoa_r+0x6de>
 8008368:	9a01      	ldr	r2, [sp, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d1f7      	bne.n	800835e <_dtoa_r+0x6c6>
 800836e:	9901      	ldr	r1, [sp, #4]
 8008370:	2230      	movs	r2, #48	; 0x30
 8008372:	3701      	adds	r7, #1
 8008374:	700a      	strb	r2, [r1, #0]
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	3201      	adds	r2, #1
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	e790      	b.n	80082a0 <_dtoa_r+0x608>
 800837e:	4ba6      	ldr	r3, [pc, #664]	; (8008618 <_dtoa_r+0x980>)
 8008380:	2200      	movs	r2, #0
 8008382:	f7f8 f969 	bl	8000658 <__aeabi_dmul>
 8008386:	2200      	movs	r2, #0
 8008388:	2300      	movs	r3, #0
 800838a:	4606      	mov	r6, r0
 800838c:	460f      	mov	r7, r1
 800838e:	f7f8 fbcb 	bl	8000b28 <__aeabi_dcmpeq>
 8008392:	2800      	cmp	r0, #0
 8008394:	d09d      	beq.n	80082d2 <_dtoa_r+0x63a>
 8008396:	e7cf      	b.n	8008338 <_dtoa_r+0x6a0>
 8008398:	9a08      	ldr	r2, [sp, #32]
 800839a:	2a00      	cmp	r2, #0
 800839c:	f000 80d7 	beq.w	800854e <_dtoa_r+0x8b6>
 80083a0:	9a06      	ldr	r2, [sp, #24]
 80083a2:	2a01      	cmp	r2, #1
 80083a4:	f300 80ba 	bgt.w	800851c <_dtoa_r+0x884>
 80083a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	f000 80b2 	beq.w	8008514 <_dtoa_r+0x87c>
 80083b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083b4:	9e07      	ldr	r6, [sp, #28]
 80083b6:	9d04      	ldr	r5, [sp, #16]
 80083b8:	9a04      	ldr	r2, [sp, #16]
 80083ba:	441a      	add	r2, r3
 80083bc:	9204      	str	r2, [sp, #16]
 80083be:	9a05      	ldr	r2, [sp, #20]
 80083c0:	2101      	movs	r1, #1
 80083c2:	441a      	add	r2, r3
 80083c4:	4620      	mov	r0, r4
 80083c6:	9205      	str	r2, [sp, #20]
 80083c8:	f001 f950 	bl	800966c <__i2b>
 80083cc:	4607      	mov	r7, r0
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	dd0c      	ble.n	80083ec <_dtoa_r+0x754>
 80083d2:	9b05      	ldr	r3, [sp, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dd09      	ble.n	80083ec <_dtoa_r+0x754>
 80083d8:	42ab      	cmp	r3, r5
 80083da:	9a04      	ldr	r2, [sp, #16]
 80083dc:	bfa8      	it	ge
 80083de:	462b      	movge	r3, r5
 80083e0:	1ad2      	subs	r2, r2, r3
 80083e2:	9204      	str	r2, [sp, #16]
 80083e4:	9a05      	ldr	r2, [sp, #20]
 80083e6:	1aed      	subs	r5, r5, r3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	9b07      	ldr	r3, [sp, #28]
 80083ee:	b31b      	cbz	r3, 8008438 <_dtoa_r+0x7a0>
 80083f0:	9b08      	ldr	r3, [sp, #32]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 80af 	beq.w	8008556 <_dtoa_r+0x8be>
 80083f8:	2e00      	cmp	r6, #0
 80083fa:	dd13      	ble.n	8008424 <_dtoa_r+0x78c>
 80083fc:	4639      	mov	r1, r7
 80083fe:	4632      	mov	r2, r6
 8008400:	4620      	mov	r0, r4
 8008402:	f001 f9f3 	bl	80097ec <__pow5mult>
 8008406:	ee18 2a10 	vmov	r2, s16
 800840a:	4601      	mov	r1, r0
 800840c:	4607      	mov	r7, r0
 800840e:	4620      	mov	r0, r4
 8008410:	f001 f942 	bl	8009698 <__multiply>
 8008414:	ee18 1a10 	vmov	r1, s16
 8008418:	4680      	mov	r8, r0
 800841a:	4620      	mov	r0, r4
 800841c:	f001 f824 	bl	8009468 <_Bfree>
 8008420:	ee08 8a10 	vmov	s16, r8
 8008424:	9b07      	ldr	r3, [sp, #28]
 8008426:	1b9a      	subs	r2, r3, r6
 8008428:	d006      	beq.n	8008438 <_dtoa_r+0x7a0>
 800842a:	ee18 1a10 	vmov	r1, s16
 800842e:	4620      	mov	r0, r4
 8008430:	f001 f9dc 	bl	80097ec <__pow5mult>
 8008434:	ee08 0a10 	vmov	s16, r0
 8008438:	2101      	movs	r1, #1
 800843a:	4620      	mov	r0, r4
 800843c:	f001 f916 	bl	800966c <__i2b>
 8008440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	4606      	mov	r6, r0
 8008446:	f340 8088 	ble.w	800855a <_dtoa_r+0x8c2>
 800844a:	461a      	mov	r2, r3
 800844c:	4601      	mov	r1, r0
 800844e:	4620      	mov	r0, r4
 8008450:	f001 f9cc 	bl	80097ec <__pow5mult>
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	2b01      	cmp	r3, #1
 8008458:	4606      	mov	r6, r0
 800845a:	f340 8081 	ble.w	8008560 <_dtoa_r+0x8c8>
 800845e:	f04f 0800 	mov.w	r8, #0
 8008462:	6933      	ldr	r3, [r6, #16]
 8008464:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008468:	6918      	ldr	r0, [r3, #16]
 800846a:	f001 f8af 	bl	80095cc <__hi0bits>
 800846e:	f1c0 0020 	rsb	r0, r0, #32
 8008472:	9b05      	ldr	r3, [sp, #20]
 8008474:	4418      	add	r0, r3
 8008476:	f010 001f 	ands.w	r0, r0, #31
 800847a:	f000 8092 	beq.w	80085a2 <_dtoa_r+0x90a>
 800847e:	f1c0 0320 	rsb	r3, r0, #32
 8008482:	2b04      	cmp	r3, #4
 8008484:	f340 808a 	ble.w	800859c <_dtoa_r+0x904>
 8008488:	f1c0 001c 	rsb	r0, r0, #28
 800848c:	9b04      	ldr	r3, [sp, #16]
 800848e:	4403      	add	r3, r0
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	4403      	add	r3, r0
 8008496:	4405      	add	r5, r0
 8008498:	9305      	str	r3, [sp, #20]
 800849a:	9b04      	ldr	r3, [sp, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd07      	ble.n	80084b0 <_dtoa_r+0x818>
 80084a0:	ee18 1a10 	vmov	r1, s16
 80084a4:	461a      	mov	r2, r3
 80084a6:	4620      	mov	r0, r4
 80084a8:	f001 f9fa 	bl	80098a0 <__lshift>
 80084ac:	ee08 0a10 	vmov	s16, r0
 80084b0:	9b05      	ldr	r3, [sp, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dd05      	ble.n	80084c2 <_dtoa_r+0x82a>
 80084b6:	4631      	mov	r1, r6
 80084b8:	461a      	mov	r2, r3
 80084ba:	4620      	mov	r0, r4
 80084bc:	f001 f9f0 	bl	80098a0 <__lshift>
 80084c0:	4606      	mov	r6, r0
 80084c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d06e      	beq.n	80085a6 <_dtoa_r+0x90e>
 80084c8:	ee18 0a10 	vmov	r0, s16
 80084cc:	4631      	mov	r1, r6
 80084ce:	f001 fa57 	bl	8009980 <__mcmp>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	da67      	bge.n	80085a6 <_dtoa_r+0x90e>
 80084d6:	9b00      	ldr	r3, [sp, #0]
 80084d8:	3b01      	subs	r3, #1
 80084da:	ee18 1a10 	vmov	r1, s16
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	220a      	movs	r2, #10
 80084e2:	2300      	movs	r3, #0
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 ffe1 	bl	80094ac <__multadd>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	ee08 0a10 	vmov	s16, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 81b1 	beq.w	8008858 <_dtoa_r+0xbc0>
 80084f6:	2300      	movs	r3, #0
 80084f8:	4639      	mov	r1, r7
 80084fa:	220a      	movs	r2, #10
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 ffd5 	bl	80094ac <__multadd>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	4607      	mov	r7, r0
 8008508:	f300 808e 	bgt.w	8008628 <_dtoa_r+0x990>
 800850c:	9b06      	ldr	r3, [sp, #24]
 800850e:	2b02      	cmp	r3, #2
 8008510:	dc51      	bgt.n	80085b6 <_dtoa_r+0x91e>
 8008512:	e089      	b.n	8008628 <_dtoa_r+0x990>
 8008514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800851a:	e74b      	b.n	80083b4 <_dtoa_r+0x71c>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	1e5e      	subs	r6, r3, #1
 8008520:	9b07      	ldr	r3, [sp, #28]
 8008522:	42b3      	cmp	r3, r6
 8008524:	bfbf      	itttt	lt
 8008526:	9b07      	ldrlt	r3, [sp, #28]
 8008528:	9607      	strlt	r6, [sp, #28]
 800852a:	1af2      	sublt	r2, r6, r3
 800852c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800852e:	bfb6      	itet	lt
 8008530:	189b      	addlt	r3, r3, r2
 8008532:	1b9e      	subge	r6, r3, r6
 8008534:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	bfb8      	it	lt
 800853a:	2600      	movlt	r6, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	bfb7      	itett	lt
 8008540:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008544:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008548:	1a9d      	sublt	r5, r3, r2
 800854a:	2300      	movlt	r3, #0
 800854c:	e734      	b.n	80083b8 <_dtoa_r+0x720>
 800854e:	9e07      	ldr	r6, [sp, #28]
 8008550:	9d04      	ldr	r5, [sp, #16]
 8008552:	9f08      	ldr	r7, [sp, #32]
 8008554:	e73b      	b.n	80083ce <_dtoa_r+0x736>
 8008556:	9a07      	ldr	r2, [sp, #28]
 8008558:	e767      	b.n	800842a <_dtoa_r+0x792>
 800855a:	9b06      	ldr	r3, [sp, #24]
 800855c:	2b01      	cmp	r3, #1
 800855e:	dc18      	bgt.n	8008592 <_dtoa_r+0x8fa>
 8008560:	f1ba 0f00 	cmp.w	sl, #0
 8008564:	d115      	bne.n	8008592 <_dtoa_r+0x8fa>
 8008566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800856a:	b993      	cbnz	r3, 8008592 <_dtoa_r+0x8fa>
 800856c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008570:	0d1b      	lsrs	r3, r3, #20
 8008572:	051b      	lsls	r3, r3, #20
 8008574:	b183      	cbz	r3, 8008598 <_dtoa_r+0x900>
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	3301      	adds	r3, #1
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	9b05      	ldr	r3, [sp, #20]
 800857e:	3301      	adds	r3, #1
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	f04f 0801 	mov.w	r8, #1
 8008586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008588:	2b00      	cmp	r3, #0
 800858a:	f47f af6a 	bne.w	8008462 <_dtoa_r+0x7ca>
 800858e:	2001      	movs	r0, #1
 8008590:	e76f      	b.n	8008472 <_dtoa_r+0x7da>
 8008592:	f04f 0800 	mov.w	r8, #0
 8008596:	e7f6      	b.n	8008586 <_dtoa_r+0x8ee>
 8008598:	4698      	mov	r8, r3
 800859a:	e7f4      	b.n	8008586 <_dtoa_r+0x8ee>
 800859c:	f43f af7d 	beq.w	800849a <_dtoa_r+0x802>
 80085a0:	4618      	mov	r0, r3
 80085a2:	301c      	adds	r0, #28
 80085a4:	e772      	b.n	800848c <_dtoa_r+0x7f4>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dc37      	bgt.n	800861c <_dtoa_r+0x984>
 80085ac:	9b06      	ldr	r3, [sp, #24]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	dd34      	ble.n	800861c <_dtoa_r+0x984>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	9302      	str	r3, [sp, #8]
 80085b6:	9b02      	ldr	r3, [sp, #8]
 80085b8:	b96b      	cbnz	r3, 80085d6 <_dtoa_r+0x93e>
 80085ba:	4631      	mov	r1, r6
 80085bc:	2205      	movs	r2, #5
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 ff74 	bl	80094ac <__multadd>
 80085c4:	4601      	mov	r1, r0
 80085c6:	4606      	mov	r6, r0
 80085c8:	ee18 0a10 	vmov	r0, s16
 80085cc:	f001 f9d8 	bl	8009980 <__mcmp>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f73f adbb 	bgt.w	800814c <_dtoa_r+0x4b4>
 80085d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d8:	9d01      	ldr	r5, [sp, #4]
 80085da:	43db      	mvns	r3, r3
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	f04f 0800 	mov.w	r8, #0
 80085e2:	4631      	mov	r1, r6
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 ff3f 	bl	8009468 <_Bfree>
 80085ea:	2f00      	cmp	r7, #0
 80085ec:	f43f aea4 	beq.w	8008338 <_dtoa_r+0x6a0>
 80085f0:	f1b8 0f00 	cmp.w	r8, #0
 80085f4:	d005      	beq.n	8008602 <_dtoa_r+0x96a>
 80085f6:	45b8      	cmp	r8, r7
 80085f8:	d003      	beq.n	8008602 <_dtoa_r+0x96a>
 80085fa:	4641      	mov	r1, r8
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 ff33 	bl	8009468 <_Bfree>
 8008602:	4639      	mov	r1, r7
 8008604:	4620      	mov	r0, r4
 8008606:	f000 ff2f 	bl	8009468 <_Bfree>
 800860a:	e695      	b.n	8008338 <_dtoa_r+0x6a0>
 800860c:	2600      	movs	r6, #0
 800860e:	4637      	mov	r7, r6
 8008610:	e7e1      	b.n	80085d6 <_dtoa_r+0x93e>
 8008612:	9700      	str	r7, [sp, #0]
 8008614:	4637      	mov	r7, r6
 8008616:	e599      	b.n	800814c <_dtoa_r+0x4b4>
 8008618:	40240000 	.word	0x40240000
 800861c:	9b08      	ldr	r3, [sp, #32]
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80ca 	beq.w	80087b8 <_dtoa_r+0xb20>
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	9302      	str	r3, [sp, #8]
 8008628:	2d00      	cmp	r5, #0
 800862a:	dd05      	ble.n	8008638 <_dtoa_r+0x9a0>
 800862c:	4639      	mov	r1, r7
 800862e:	462a      	mov	r2, r5
 8008630:	4620      	mov	r0, r4
 8008632:	f001 f935 	bl	80098a0 <__lshift>
 8008636:	4607      	mov	r7, r0
 8008638:	f1b8 0f00 	cmp.w	r8, #0
 800863c:	d05b      	beq.n	80086f6 <_dtoa_r+0xa5e>
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fed1 	bl	80093e8 <_Balloc>
 8008646:	4605      	mov	r5, r0
 8008648:	b928      	cbnz	r0, 8008656 <_dtoa_r+0x9be>
 800864a:	4b87      	ldr	r3, [pc, #540]	; (8008868 <_dtoa_r+0xbd0>)
 800864c:	4602      	mov	r2, r0
 800864e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008652:	f7ff bb3b 	b.w	8007ccc <_dtoa_r+0x34>
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	3202      	adds	r2, #2
 800865a:	0092      	lsls	r2, r2, #2
 800865c:	f107 010c 	add.w	r1, r7, #12
 8008660:	300c      	adds	r0, #12
 8008662:	f000 feb3 	bl	80093cc <memcpy>
 8008666:	2201      	movs	r2, #1
 8008668:	4629      	mov	r1, r5
 800866a:	4620      	mov	r0, r4
 800866c:	f001 f918 	bl	80098a0 <__lshift>
 8008670:	9b01      	ldr	r3, [sp, #4]
 8008672:	f103 0901 	add.w	r9, r3, #1
 8008676:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800867a:	4413      	add	r3, r2
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	f00a 0301 	and.w	r3, sl, #1
 8008682:	46b8      	mov	r8, r7
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	4607      	mov	r7, r0
 8008688:	4631      	mov	r1, r6
 800868a:	ee18 0a10 	vmov	r0, s16
 800868e:	f7ff fa77 	bl	8007b80 <quorem>
 8008692:	4641      	mov	r1, r8
 8008694:	9002      	str	r0, [sp, #8]
 8008696:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800869a:	ee18 0a10 	vmov	r0, s16
 800869e:	f001 f96f 	bl	8009980 <__mcmp>
 80086a2:	463a      	mov	r2, r7
 80086a4:	9003      	str	r0, [sp, #12]
 80086a6:	4631      	mov	r1, r6
 80086a8:	4620      	mov	r0, r4
 80086aa:	f001 f985 	bl	80099b8 <__mdiff>
 80086ae:	68c2      	ldr	r2, [r0, #12]
 80086b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80086b4:	4605      	mov	r5, r0
 80086b6:	bb02      	cbnz	r2, 80086fa <_dtoa_r+0xa62>
 80086b8:	4601      	mov	r1, r0
 80086ba:	ee18 0a10 	vmov	r0, s16
 80086be:	f001 f95f 	bl	8009980 <__mcmp>
 80086c2:	4602      	mov	r2, r0
 80086c4:	4629      	mov	r1, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	9207      	str	r2, [sp, #28]
 80086ca:	f000 fecd 	bl	8009468 <_Bfree>
 80086ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086d2:	ea43 0102 	orr.w	r1, r3, r2
 80086d6:	9b04      	ldr	r3, [sp, #16]
 80086d8:	430b      	orrs	r3, r1
 80086da:	464d      	mov	r5, r9
 80086dc:	d10f      	bne.n	80086fe <_dtoa_r+0xa66>
 80086de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086e2:	d02a      	beq.n	800873a <_dtoa_r+0xaa2>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	dd02      	ble.n	80086f0 <_dtoa_r+0xa58>
 80086ea:	9b02      	ldr	r3, [sp, #8]
 80086ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80086f0:	f88b a000 	strb.w	sl, [fp]
 80086f4:	e775      	b.n	80085e2 <_dtoa_r+0x94a>
 80086f6:	4638      	mov	r0, r7
 80086f8:	e7ba      	b.n	8008670 <_dtoa_r+0x9d8>
 80086fa:	2201      	movs	r2, #1
 80086fc:	e7e2      	b.n	80086c4 <_dtoa_r+0xa2c>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	db04      	blt.n	800870e <_dtoa_r+0xa76>
 8008704:	9906      	ldr	r1, [sp, #24]
 8008706:	430b      	orrs	r3, r1
 8008708:	9904      	ldr	r1, [sp, #16]
 800870a:	430b      	orrs	r3, r1
 800870c:	d122      	bne.n	8008754 <_dtoa_r+0xabc>
 800870e:	2a00      	cmp	r2, #0
 8008710:	ddee      	ble.n	80086f0 <_dtoa_r+0xa58>
 8008712:	ee18 1a10 	vmov	r1, s16
 8008716:	2201      	movs	r2, #1
 8008718:	4620      	mov	r0, r4
 800871a:	f001 f8c1 	bl	80098a0 <__lshift>
 800871e:	4631      	mov	r1, r6
 8008720:	ee08 0a10 	vmov	s16, r0
 8008724:	f001 f92c 	bl	8009980 <__mcmp>
 8008728:	2800      	cmp	r0, #0
 800872a:	dc03      	bgt.n	8008734 <_dtoa_r+0xa9c>
 800872c:	d1e0      	bne.n	80086f0 <_dtoa_r+0xa58>
 800872e:	f01a 0f01 	tst.w	sl, #1
 8008732:	d0dd      	beq.n	80086f0 <_dtoa_r+0xa58>
 8008734:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008738:	d1d7      	bne.n	80086ea <_dtoa_r+0xa52>
 800873a:	2339      	movs	r3, #57	; 0x39
 800873c:	f88b 3000 	strb.w	r3, [fp]
 8008740:	462b      	mov	r3, r5
 8008742:	461d      	mov	r5, r3
 8008744:	3b01      	subs	r3, #1
 8008746:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800874a:	2a39      	cmp	r2, #57	; 0x39
 800874c:	d071      	beq.n	8008832 <_dtoa_r+0xb9a>
 800874e:	3201      	adds	r2, #1
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e746      	b.n	80085e2 <_dtoa_r+0x94a>
 8008754:	2a00      	cmp	r2, #0
 8008756:	dd07      	ble.n	8008768 <_dtoa_r+0xad0>
 8008758:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800875c:	d0ed      	beq.n	800873a <_dtoa_r+0xaa2>
 800875e:	f10a 0301 	add.w	r3, sl, #1
 8008762:	f88b 3000 	strb.w	r3, [fp]
 8008766:	e73c      	b.n	80085e2 <_dtoa_r+0x94a>
 8008768:	9b05      	ldr	r3, [sp, #20]
 800876a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800876e:	4599      	cmp	r9, r3
 8008770:	d047      	beq.n	8008802 <_dtoa_r+0xb6a>
 8008772:	ee18 1a10 	vmov	r1, s16
 8008776:	2300      	movs	r3, #0
 8008778:	220a      	movs	r2, #10
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fe96 	bl	80094ac <__multadd>
 8008780:	45b8      	cmp	r8, r7
 8008782:	ee08 0a10 	vmov	s16, r0
 8008786:	f04f 0300 	mov.w	r3, #0
 800878a:	f04f 020a 	mov.w	r2, #10
 800878e:	4641      	mov	r1, r8
 8008790:	4620      	mov	r0, r4
 8008792:	d106      	bne.n	80087a2 <_dtoa_r+0xb0a>
 8008794:	f000 fe8a 	bl	80094ac <__multadd>
 8008798:	4680      	mov	r8, r0
 800879a:	4607      	mov	r7, r0
 800879c:	f109 0901 	add.w	r9, r9, #1
 80087a0:	e772      	b.n	8008688 <_dtoa_r+0x9f0>
 80087a2:	f000 fe83 	bl	80094ac <__multadd>
 80087a6:	4639      	mov	r1, r7
 80087a8:	4680      	mov	r8, r0
 80087aa:	2300      	movs	r3, #0
 80087ac:	220a      	movs	r2, #10
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 fe7c 	bl	80094ac <__multadd>
 80087b4:	4607      	mov	r7, r0
 80087b6:	e7f1      	b.n	800879c <_dtoa_r+0xb04>
 80087b8:	9b03      	ldr	r3, [sp, #12]
 80087ba:	9302      	str	r3, [sp, #8]
 80087bc:	9d01      	ldr	r5, [sp, #4]
 80087be:	ee18 0a10 	vmov	r0, s16
 80087c2:	4631      	mov	r1, r6
 80087c4:	f7ff f9dc 	bl	8007b80 <quorem>
 80087c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	f805 ab01 	strb.w	sl, [r5], #1
 80087d2:	1aea      	subs	r2, r5, r3
 80087d4:	9b02      	ldr	r3, [sp, #8]
 80087d6:	4293      	cmp	r3, r2
 80087d8:	dd09      	ble.n	80087ee <_dtoa_r+0xb56>
 80087da:	ee18 1a10 	vmov	r1, s16
 80087de:	2300      	movs	r3, #0
 80087e0:	220a      	movs	r2, #10
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fe62 	bl	80094ac <__multadd>
 80087e8:	ee08 0a10 	vmov	s16, r0
 80087ec:	e7e7      	b.n	80087be <_dtoa_r+0xb26>
 80087ee:	9b02      	ldr	r3, [sp, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bfc8      	it	gt
 80087f4:	461d      	movgt	r5, r3
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	bfd8      	it	le
 80087fa:	2501      	movle	r5, #1
 80087fc:	441d      	add	r5, r3
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	ee18 1a10 	vmov	r1, s16
 8008806:	2201      	movs	r2, #1
 8008808:	4620      	mov	r0, r4
 800880a:	f001 f849 	bl	80098a0 <__lshift>
 800880e:	4631      	mov	r1, r6
 8008810:	ee08 0a10 	vmov	s16, r0
 8008814:	f001 f8b4 	bl	8009980 <__mcmp>
 8008818:	2800      	cmp	r0, #0
 800881a:	dc91      	bgt.n	8008740 <_dtoa_r+0xaa8>
 800881c:	d102      	bne.n	8008824 <_dtoa_r+0xb8c>
 800881e:	f01a 0f01 	tst.w	sl, #1
 8008822:	d18d      	bne.n	8008740 <_dtoa_r+0xaa8>
 8008824:	462b      	mov	r3, r5
 8008826:	461d      	mov	r5, r3
 8008828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800882c:	2a30      	cmp	r2, #48	; 0x30
 800882e:	d0fa      	beq.n	8008826 <_dtoa_r+0xb8e>
 8008830:	e6d7      	b.n	80085e2 <_dtoa_r+0x94a>
 8008832:	9a01      	ldr	r2, [sp, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d184      	bne.n	8008742 <_dtoa_r+0xaaa>
 8008838:	9b00      	ldr	r3, [sp, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	2331      	movs	r3, #49	; 0x31
 8008840:	7013      	strb	r3, [r2, #0]
 8008842:	e6ce      	b.n	80085e2 <_dtoa_r+0x94a>
 8008844:	4b09      	ldr	r3, [pc, #36]	; (800886c <_dtoa_r+0xbd4>)
 8008846:	f7ff ba95 	b.w	8007d74 <_dtoa_r+0xdc>
 800884a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800884c:	2b00      	cmp	r3, #0
 800884e:	f47f aa6e 	bne.w	8007d2e <_dtoa_r+0x96>
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <_dtoa_r+0xbd8>)
 8008854:	f7ff ba8e 	b.w	8007d74 <_dtoa_r+0xdc>
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	dcae      	bgt.n	80087bc <_dtoa_r+0xb24>
 800885e:	9b06      	ldr	r3, [sp, #24]
 8008860:	2b02      	cmp	r3, #2
 8008862:	f73f aea8 	bgt.w	80085b6 <_dtoa_r+0x91e>
 8008866:	e7a9      	b.n	80087bc <_dtoa_r+0xb24>
 8008868:	0800ba28 	.word	0x0800ba28
 800886c:	0800b82c 	.word	0x0800b82c
 8008870:	0800b9a9 	.word	0x0800b9a9

08008874 <__sflush_r>:
 8008874:	898a      	ldrh	r2, [r1, #12]
 8008876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887a:	4605      	mov	r5, r0
 800887c:	0710      	lsls	r0, r2, #28
 800887e:	460c      	mov	r4, r1
 8008880:	d458      	bmi.n	8008934 <__sflush_r+0xc0>
 8008882:	684b      	ldr	r3, [r1, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	dc05      	bgt.n	8008894 <__sflush_r+0x20>
 8008888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	dc02      	bgt.n	8008894 <__sflush_r+0x20>
 800888e:	2000      	movs	r0, #0
 8008890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008896:	2e00      	cmp	r6, #0
 8008898:	d0f9      	beq.n	800888e <__sflush_r+0x1a>
 800889a:	2300      	movs	r3, #0
 800889c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088a0:	682f      	ldr	r7, [r5, #0]
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	d032      	beq.n	800890c <__sflush_r+0x98>
 80088a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	075a      	lsls	r2, r3, #29
 80088ac:	d505      	bpl.n	80088ba <__sflush_r+0x46>
 80088ae:	6863      	ldr	r3, [r4, #4]
 80088b0:	1ac0      	subs	r0, r0, r3
 80088b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088b4:	b10b      	cbz	r3, 80088ba <__sflush_r+0x46>
 80088b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088b8:	1ac0      	subs	r0, r0, r3
 80088ba:	2300      	movs	r3, #0
 80088bc:	4602      	mov	r2, r0
 80088be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c0:	6a21      	ldr	r1, [r4, #32]
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b0      	blx	r6
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	d106      	bne.n	80088da <__sflush_r+0x66>
 80088cc:	6829      	ldr	r1, [r5, #0]
 80088ce:	291d      	cmp	r1, #29
 80088d0:	d82c      	bhi.n	800892c <__sflush_r+0xb8>
 80088d2:	4a2a      	ldr	r2, [pc, #168]	; (800897c <__sflush_r+0x108>)
 80088d4:	40ca      	lsrs	r2, r1
 80088d6:	07d6      	lsls	r6, r2, #31
 80088d8:	d528      	bpl.n	800892c <__sflush_r+0xb8>
 80088da:	2200      	movs	r2, #0
 80088dc:	6062      	str	r2, [r4, #4]
 80088de:	04d9      	lsls	r1, r3, #19
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	6022      	str	r2, [r4, #0]
 80088e4:	d504      	bpl.n	80088f0 <__sflush_r+0x7c>
 80088e6:	1c42      	adds	r2, r0, #1
 80088e8:	d101      	bne.n	80088ee <__sflush_r+0x7a>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	b903      	cbnz	r3, 80088f0 <__sflush_r+0x7c>
 80088ee:	6560      	str	r0, [r4, #84]	; 0x54
 80088f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f2:	602f      	str	r7, [r5, #0]
 80088f4:	2900      	cmp	r1, #0
 80088f6:	d0ca      	beq.n	800888e <__sflush_r+0x1a>
 80088f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088fc:	4299      	cmp	r1, r3
 80088fe:	d002      	beq.n	8008906 <__sflush_r+0x92>
 8008900:	4628      	mov	r0, r5
 8008902:	f001 fa49 	bl	8009d98 <_free_r>
 8008906:	2000      	movs	r0, #0
 8008908:	6360      	str	r0, [r4, #52]	; 0x34
 800890a:	e7c1      	b.n	8008890 <__sflush_r+0x1c>
 800890c:	6a21      	ldr	r1, [r4, #32]
 800890e:	2301      	movs	r3, #1
 8008910:	4628      	mov	r0, r5
 8008912:	47b0      	blx	r6
 8008914:	1c41      	adds	r1, r0, #1
 8008916:	d1c7      	bne.n	80088a8 <__sflush_r+0x34>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0c4      	beq.n	80088a8 <__sflush_r+0x34>
 800891e:	2b1d      	cmp	r3, #29
 8008920:	d001      	beq.n	8008926 <__sflush_r+0xb2>
 8008922:	2b16      	cmp	r3, #22
 8008924:	d101      	bne.n	800892a <__sflush_r+0xb6>
 8008926:	602f      	str	r7, [r5, #0]
 8008928:	e7b1      	b.n	800888e <__sflush_r+0x1a>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	e7ad      	b.n	8008890 <__sflush_r+0x1c>
 8008934:	690f      	ldr	r7, [r1, #16]
 8008936:	2f00      	cmp	r7, #0
 8008938:	d0a9      	beq.n	800888e <__sflush_r+0x1a>
 800893a:	0793      	lsls	r3, r2, #30
 800893c:	680e      	ldr	r6, [r1, #0]
 800893e:	bf08      	it	eq
 8008940:	694b      	ldreq	r3, [r1, #20]
 8008942:	600f      	str	r7, [r1, #0]
 8008944:	bf18      	it	ne
 8008946:	2300      	movne	r3, #0
 8008948:	eba6 0807 	sub.w	r8, r6, r7
 800894c:	608b      	str	r3, [r1, #8]
 800894e:	f1b8 0f00 	cmp.w	r8, #0
 8008952:	dd9c      	ble.n	800888e <__sflush_r+0x1a>
 8008954:	6a21      	ldr	r1, [r4, #32]
 8008956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008958:	4643      	mov	r3, r8
 800895a:	463a      	mov	r2, r7
 800895c:	4628      	mov	r0, r5
 800895e:	47b0      	blx	r6
 8008960:	2800      	cmp	r0, #0
 8008962:	dc06      	bgt.n	8008972 <__sflush_r+0xfe>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008970:	e78e      	b.n	8008890 <__sflush_r+0x1c>
 8008972:	4407      	add	r7, r0
 8008974:	eba8 0800 	sub.w	r8, r8, r0
 8008978:	e7e9      	b.n	800894e <__sflush_r+0xda>
 800897a:	bf00      	nop
 800897c:	20400001 	.word	0x20400001

08008980 <_fflush_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	690b      	ldr	r3, [r1, #16]
 8008984:	4605      	mov	r5, r0
 8008986:	460c      	mov	r4, r1
 8008988:	b913      	cbnz	r3, 8008990 <_fflush_r+0x10>
 800898a:	2500      	movs	r5, #0
 800898c:	4628      	mov	r0, r5
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	b118      	cbz	r0, 800899a <_fflush_r+0x1a>
 8008992:	6983      	ldr	r3, [r0, #24]
 8008994:	b90b      	cbnz	r3, 800899a <_fflush_r+0x1a>
 8008996:	f000 f887 	bl	8008aa8 <__sinit>
 800899a:	4b14      	ldr	r3, [pc, #80]	; (80089ec <_fflush_r+0x6c>)
 800899c:	429c      	cmp	r4, r3
 800899e:	d11b      	bne.n	80089d8 <_fflush_r+0x58>
 80089a0:	686c      	ldr	r4, [r5, #4]
 80089a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0ef      	beq.n	800898a <_fflush_r+0xa>
 80089aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089ac:	07d0      	lsls	r0, r2, #31
 80089ae:	d404      	bmi.n	80089ba <_fflush_r+0x3a>
 80089b0:	0599      	lsls	r1, r3, #22
 80089b2:	d402      	bmi.n	80089ba <_fflush_r+0x3a>
 80089b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089b6:	f000 fc88 	bl	80092ca <__retarget_lock_acquire_recursive>
 80089ba:	4628      	mov	r0, r5
 80089bc:	4621      	mov	r1, r4
 80089be:	f7ff ff59 	bl	8008874 <__sflush_r>
 80089c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089c4:	07da      	lsls	r2, r3, #31
 80089c6:	4605      	mov	r5, r0
 80089c8:	d4e0      	bmi.n	800898c <_fflush_r+0xc>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	059b      	lsls	r3, r3, #22
 80089ce:	d4dd      	bmi.n	800898c <_fflush_r+0xc>
 80089d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089d2:	f000 fc7b 	bl	80092cc <__retarget_lock_release_recursive>
 80089d6:	e7d9      	b.n	800898c <_fflush_r+0xc>
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <_fflush_r+0x70>)
 80089da:	429c      	cmp	r4, r3
 80089dc:	d101      	bne.n	80089e2 <_fflush_r+0x62>
 80089de:	68ac      	ldr	r4, [r5, #8]
 80089e0:	e7df      	b.n	80089a2 <_fflush_r+0x22>
 80089e2:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <_fflush_r+0x74>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	bf08      	it	eq
 80089e8:	68ec      	ldreq	r4, [r5, #12]
 80089ea:	e7da      	b.n	80089a2 <_fflush_r+0x22>
 80089ec:	0800ba5c 	.word	0x0800ba5c
 80089f0:	0800ba7c 	.word	0x0800ba7c
 80089f4:	0800ba3c 	.word	0x0800ba3c

080089f8 <std>:
 80089f8:	2300      	movs	r3, #0
 80089fa:	b510      	push	{r4, lr}
 80089fc:	4604      	mov	r4, r0
 80089fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a06:	6083      	str	r3, [r0, #8]
 8008a08:	8181      	strh	r1, [r0, #12]
 8008a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a0c:	81c2      	strh	r2, [r0, #14]
 8008a0e:	6183      	str	r3, [r0, #24]
 8008a10:	4619      	mov	r1, r3
 8008a12:	2208      	movs	r2, #8
 8008a14:	305c      	adds	r0, #92	; 0x5c
 8008a16:	f7fd fa0f 	bl	8005e38 <memset>
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <std+0x38>)
 8008a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a1e:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <std+0x3c>)
 8008a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <std+0x40>)
 8008a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <std+0x44>)
 8008a28:	6224      	str	r4, [r4, #32]
 8008a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	0800a4f9 	.word	0x0800a4f9
 8008a34:	0800a51b 	.word	0x0800a51b
 8008a38:	0800a553 	.word	0x0800a553
 8008a3c:	0800a577 	.word	0x0800a577

08008a40 <_cleanup_r>:
 8008a40:	4901      	ldr	r1, [pc, #4]	; (8008a48 <_cleanup_r+0x8>)
 8008a42:	f000 b8af 	b.w	8008ba4 <_fwalk_reent>
 8008a46:	bf00      	nop
 8008a48:	08008981 	.word	0x08008981

08008a4c <__sfmoreglue>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	2268      	movs	r2, #104	; 0x68
 8008a50:	1e4d      	subs	r5, r1, #1
 8008a52:	4355      	muls	r5, r2
 8008a54:	460e      	mov	r6, r1
 8008a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a5a:	f001 fa09 	bl	8009e70 <_malloc_r>
 8008a5e:	4604      	mov	r4, r0
 8008a60:	b140      	cbz	r0, 8008a74 <__sfmoreglue+0x28>
 8008a62:	2100      	movs	r1, #0
 8008a64:	e9c0 1600 	strd	r1, r6, [r0]
 8008a68:	300c      	adds	r0, #12
 8008a6a:	60a0      	str	r0, [r4, #8]
 8008a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a70:	f7fd f9e2 	bl	8005e38 <memset>
 8008a74:	4620      	mov	r0, r4
 8008a76:	bd70      	pop	{r4, r5, r6, pc}

08008a78 <__sfp_lock_acquire>:
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <__sfp_lock_acquire+0x8>)
 8008a7a:	f000 bc26 	b.w	80092ca <__retarget_lock_acquire_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20000371 	.word	0x20000371

08008a84 <__sfp_lock_release>:
 8008a84:	4801      	ldr	r0, [pc, #4]	; (8008a8c <__sfp_lock_release+0x8>)
 8008a86:	f000 bc21 	b.w	80092cc <__retarget_lock_release_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	20000371 	.word	0x20000371

08008a90 <__sinit_lock_acquire>:
 8008a90:	4801      	ldr	r0, [pc, #4]	; (8008a98 <__sinit_lock_acquire+0x8>)
 8008a92:	f000 bc1a 	b.w	80092ca <__retarget_lock_acquire_recursive>
 8008a96:	bf00      	nop
 8008a98:	20000372 	.word	0x20000372

08008a9c <__sinit_lock_release>:
 8008a9c:	4801      	ldr	r0, [pc, #4]	; (8008aa4 <__sinit_lock_release+0x8>)
 8008a9e:	f000 bc15 	b.w	80092cc <__retarget_lock_release_recursive>
 8008aa2:	bf00      	nop
 8008aa4:	20000372 	.word	0x20000372

08008aa8 <__sinit>:
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	4604      	mov	r4, r0
 8008aac:	f7ff fff0 	bl	8008a90 <__sinit_lock_acquire>
 8008ab0:	69a3      	ldr	r3, [r4, #24]
 8008ab2:	b11b      	cbz	r3, 8008abc <__sinit+0x14>
 8008ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab8:	f7ff bff0 	b.w	8008a9c <__sinit_lock_release>
 8008abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ac2:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <__sinit+0x68>)
 8008ac4:	4a13      	ldr	r2, [pc, #76]	; (8008b14 <__sinit+0x6c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008aca:	42a3      	cmp	r3, r4
 8008acc:	bf04      	itt	eq
 8008ace:	2301      	moveq	r3, #1
 8008ad0:	61a3      	streq	r3, [r4, #24]
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 f820 	bl	8008b18 <__sfp>
 8008ad8:	6060      	str	r0, [r4, #4]
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 f81c 	bl	8008b18 <__sfp>
 8008ae0:	60a0      	str	r0, [r4, #8]
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 f818 	bl	8008b18 <__sfp>
 8008ae8:	2200      	movs	r2, #0
 8008aea:	60e0      	str	r0, [r4, #12]
 8008aec:	2104      	movs	r1, #4
 8008aee:	6860      	ldr	r0, [r4, #4]
 8008af0:	f7ff ff82 	bl	80089f8 <std>
 8008af4:	68a0      	ldr	r0, [r4, #8]
 8008af6:	2201      	movs	r2, #1
 8008af8:	2109      	movs	r1, #9
 8008afa:	f7ff ff7d 	bl	80089f8 <std>
 8008afe:	68e0      	ldr	r0, [r4, #12]
 8008b00:	2202      	movs	r2, #2
 8008b02:	2112      	movs	r1, #18
 8008b04:	f7ff ff78 	bl	80089f8 <std>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	61a3      	str	r3, [r4, #24]
 8008b0c:	e7d2      	b.n	8008ab4 <__sinit+0xc>
 8008b0e:	bf00      	nop
 8008b10:	0800b818 	.word	0x0800b818
 8008b14:	08008a41 	.word	0x08008a41

08008b18 <__sfp>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	4607      	mov	r7, r0
 8008b1c:	f7ff ffac 	bl	8008a78 <__sfp_lock_acquire>
 8008b20:	4b1e      	ldr	r3, [pc, #120]	; (8008b9c <__sfp+0x84>)
 8008b22:	681e      	ldr	r6, [r3, #0]
 8008b24:	69b3      	ldr	r3, [r6, #24]
 8008b26:	b913      	cbnz	r3, 8008b2e <__sfp+0x16>
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff ffbd 	bl	8008aa8 <__sinit>
 8008b2e:	3648      	adds	r6, #72	; 0x48
 8008b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	d503      	bpl.n	8008b40 <__sfp+0x28>
 8008b38:	6833      	ldr	r3, [r6, #0]
 8008b3a:	b30b      	cbz	r3, 8008b80 <__sfp+0x68>
 8008b3c:	6836      	ldr	r6, [r6, #0]
 8008b3e:	e7f7      	b.n	8008b30 <__sfp+0x18>
 8008b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b44:	b9d5      	cbnz	r5, 8008b7c <__sfp+0x64>
 8008b46:	4b16      	ldr	r3, [pc, #88]	; (8008ba0 <__sfp+0x88>)
 8008b48:	60e3      	str	r3, [r4, #12]
 8008b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b50:	f000 fbba 	bl	80092c8 <__retarget_lock_init_recursive>
 8008b54:	f7ff ff96 	bl	8008a84 <__sfp_lock_release>
 8008b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b60:	6025      	str	r5, [r4, #0]
 8008b62:	61a5      	str	r5, [r4, #24]
 8008b64:	2208      	movs	r2, #8
 8008b66:	4629      	mov	r1, r5
 8008b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b6c:	f7fd f964 	bl	8005e38 <memset>
 8008b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b78:	4620      	mov	r0, r4
 8008b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7c:	3468      	adds	r4, #104	; 0x68
 8008b7e:	e7d9      	b.n	8008b34 <__sfp+0x1c>
 8008b80:	2104      	movs	r1, #4
 8008b82:	4638      	mov	r0, r7
 8008b84:	f7ff ff62 	bl	8008a4c <__sfmoreglue>
 8008b88:	4604      	mov	r4, r0
 8008b8a:	6030      	str	r0, [r6, #0]
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d1d5      	bne.n	8008b3c <__sfp+0x24>
 8008b90:	f7ff ff78 	bl	8008a84 <__sfp_lock_release>
 8008b94:	230c      	movs	r3, #12
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	e7ee      	b.n	8008b78 <__sfp+0x60>
 8008b9a:	bf00      	nop
 8008b9c:	0800b818 	.word	0x0800b818
 8008ba0:	ffff0001 	.word	0xffff0001

08008ba4 <_fwalk_reent>:
 8008ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba8:	4606      	mov	r6, r0
 8008baa:	4688      	mov	r8, r1
 8008bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bb0:	2700      	movs	r7, #0
 8008bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8008bba:	d505      	bpl.n	8008bc8 <_fwalk_reent+0x24>
 8008bbc:	6824      	ldr	r4, [r4, #0]
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	d1f7      	bne.n	8008bb2 <_fwalk_reent+0xe>
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc8:	89ab      	ldrh	r3, [r5, #12]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d907      	bls.n	8008bde <_fwalk_reent+0x3a>
 8008bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	d003      	beq.n	8008bde <_fwalk_reent+0x3a>
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4630      	mov	r0, r6
 8008bda:	47c0      	blx	r8
 8008bdc:	4307      	orrs	r7, r0
 8008bde:	3568      	adds	r5, #104	; 0x68
 8008be0:	e7e9      	b.n	8008bb6 <_fwalk_reent+0x12>

08008be2 <rshift>:
 8008be2:	6903      	ldr	r3, [r0, #16]
 8008be4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bec:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008bf0:	f100 0414 	add.w	r4, r0, #20
 8008bf4:	dd45      	ble.n	8008c82 <rshift+0xa0>
 8008bf6:	f011 011f 	ands.w	r1, r1, #31
 8008bfa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008bfe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c02:	d10c      	bne.n	8008c1e <rshift+0x3c>
 8008c04:	f100 0710 	add.w	r7, r0, #16
 8008c08:	4629      	mov	r1, r5
 8008c0a:	42b1      	cmp	r1, r6
 8008c0c:	d334      	bcc.n	8008c78 <rshift+0x96>
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	1eea      	subs	r2, r5, #3
 8008c14:	4296      	cmp	r6, r2
 8008c16:	bf38      	it	cc
 8008c18:	2300      	movcc	r3, #0
 8008c1a:	4423      	add	r3, r4
 8008c1c:	e015      	b.n	8008c4a <rshift+0x68>
 8008c1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c22:	f1c1 0820 	rsb	r8, r1, #32
 8008c26:	40cf      	lsrs	r7, r1
 8008c28:	f105 0e04 	add.w	lr, r5, #4
 8008c2c:	46a1      	mov	r9, r4
 8008c2e:	4576      	cmp	r6, lr
 8008c30:	46f4      	mov	ip, lr
 8008c32:	d815      	bhi.n	8008c60 <rshift+0x7e>
 8008c34:	1a9a      	subs	r2, r3, r2
 8008c36:	0092      	lsls	r2, r2, #2
 8008c38:	3a04      	subs	r2, #4
 8008c3a:	3501      	adds	r5, #1
 8008c3c:	42ae      	cmp	r6, r5
 8008c3e:	bf38      	it	cc
 8008c40:	2200      	movcc	r2, #0
 8008c42:	18a3      	adds	r3, r4, r2
 8008c44:	50a7      	str	r7, [r4, r2]
 8008c46:	b107      	cbz	r7, 8008c4a <rshift+0x68>
 8008c48:	3304      	adds	r3, #4
 8008c4a:	1b1a      	subs	r2, r3, r4
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c52:	bf08      	it	eq
 8008c54:	2300      	moveq	r3, #0
 8008c56:	6102      	str	r2, [r0, #16]
 8008c58:	bf08      	it	eq
 8008c5a:	6143      	streq	r3, [r0, #20]
 8008c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c60:	f8dc c000 	ldr.w	ip, [ip]
 8008c64:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c68:	ea4c 0707 	orr.w	r7, ip, r7
 8008c6c:	f849 7b04 	str.w	r7, [r9], #4
 8008c70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c74:	40cf      	lsrs	r7, r1
 8008c76:	e7da      	b.n	8008c2e <rshift+0x4c>
 8008c78:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c80:	e7c3      	b.n	8008c0a <rshift+0x28>
 8008c82:	4623      	mov	r3, r4
 8008c84:	e7e1      	b.n	8008c4a <rshift+0x68>

08008c86 <__hexdig_fun>:
 8008c86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c8a:	2b09      	cmp	r3, #9
 8008c8c:	d802      	bhi.n	8008c94 <__hexdig_fun+0xe>
 8008c8e:	3820      	subs	r0, #32
 8008c90:	b2c0      	uxtb	r0, r0
 8008c92:	4770      	bx	lr
 8008c94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c98:	2b05      	cmp	r3, #5
 8008c9a:	d801      	bhi.n	8008ca0 <__hexdig_fun+0x1a>
 8008c9c:	3847      	subs	r0, #71	; 0x47
 8008c9e:	e7f7      	b.n	8008c90 <__hexdig_fun+0xa>
 8008ca0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ca4:	2b05      	cmp	r3, #5
 8008ca6:	d801      	bhi.n	8008cac <__hexdig_fun+0x26>
 8008ca8:	3827      	subs	r0, #39	; 0x27
 8008caa:	e7f1      	b.n	8008c90 <__hexdig_fun+0xa>
 8008cac:	2000      	movs	r0, #0
 8008cae:	4770      	bx	lr

08008cb0 <__gethex>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	ed2d 8b02 	vpush	{d8}
 8008cb8:	b089      	sub	sp, #36	; 0x24
 8008cba:	ee08 0a10 	vmov	s16, r0
 8008cbe:	9304      	str	r3, [sp, #16]
 8008cc0:	4bb4      	ldr	r3, [pc, #720]	; (8008f94 <__gethex+0x2e4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	468b      	mov	fp, r1
 8008cca:	4690      	mov	r8, r2
 8008ccc:	f7f7 faaa 	bl	8000224 <strlen>
 8008cd0:	9b01      	ldr	r3, [sp, #4]
 8008cd2:	f8db 2000 	ldr.w	r2, [fp]
 8008cd6:	4403      	add	r3, r0
 8008cd8:	4682      	mov	sl, r0
 8008cda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008cde:	9305      	str	r3, [sp, #20]
 8008ce0:	1c93      	adds	r3, r2, #2
 8008ce2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ce6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008cea:	32fe      	adds	r2, #254	; 0xfe
 8008cec:	18d1      	adds	r1, r2, r3
 8008cee:	461f      	mov	r7, r3
 8008cf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008cf4:	9100      	str	r1, [sp, #0]
 8008cf6:	2830      	cmp	r0, #48	; 0x30
 8008cf8:	d0f8      	beq.n	8008cec <__gethex+0x3c>
 8008cfa:	f7ff ffc4 	bl	8008c86 <__hexdig_fun>
 8008cfe:	4604      	mov	r4, r0
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d13a      	bne.n	8008d7a <__gethex+0xca>
 8008d04:	9901      	ldr	r1, [sp, #4]
 8008d06:	4652      	mov	r2, sl
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f001 fc38 	bl	800a57e <strncmp>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d168      	bne.n	8008de6 <__gethex+0x136>
 8008d14:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008d18:	eb07 060a 	add.w	r6, r7, sl
 8008d1c:	f7ff ffb3 	bl	8008c86 <__hexdig_fun>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d062      	beq.n	8008dea <__gethex+0x13a>
 8008d24:	4633      	mov	r3, r6
 8008d26:	7818      	ldrb	r0, [r3, #0]
 8008d28:	2830      	cmp	r0, #48	; 0x30
 8008d2a:	461f      	mov	r7, r3
 8008d2c:	f103 0301 	add.w	r3, r3, #1
 8008d30:	d0f9      	beq.n	8008d26 <__gethex+0x76>
 8008d32:	f7ff ffa8 	bl	8008c86 <__hexdig_fun>
 8008d36:	2301      	movs	r3, #1
 8008d38:	fab0 f480 	clz	r4, r0
 8008d3c:	0964      	lsrs	r4, r4, #5
 8008d3e:	4635      	mov	r5, r6
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	463a      	mov	r2, r7
 8008d44:	4616      	mov	r6, r2
 8008d46:	3201      	adds	r2, #1
 8008d48:	7830      	ldrb	r0, [r6, #0]
 8008d4a:	f7ff ff9c 	bl	8008c86 <__hexdig_fun>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d1f8      	bne.n	8008d44 <__gethex+0x94>
 8008d52:	9901      	ldr	r1, [sp, #4]
 8008d54:	4652      	mov	r2, sl
 8008d56:	4630      	mov	r0, r6
 8008d58:	f001 fc11 	bl	800a57e <strncmp>
 8008d5c:	b980      	cbnz	r0, 8008d80 <__gethex+0xd0>
 8008d5e:	b94d      	cbnz	r5, 8008d74 <__gethex+0xc4>
 8008d60:	eb06 050a 	add.w	r5, r6, sl
 8008d64:	462a      	mov	r2, r5
 8008d66:	4616      	mov	r6, r2
 8008d68:	3201      	adds	r2, #1
 8008d6a:	7830      	ldrb	r0, [r6, #0]
 8008d6c:	f7ff ff8b 	bl	8008c86 <__hexdig_fun>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d1f8      	bne.n	8008d66 <__gethex+0xb6>
 8008d74:	1bad      	subs	r5, r5, r6
 8008d76:	00ad      	lsls	r5, r5, #2
 8008d78:	e004      	b.n	8008d84 <__gethex+0xd4>
 8008d7a:	2400      	movs	r4, #0
 8008d7c:	4625      	mov	r5, r4
 8008d7e:	e7e0      	b.n	8008d42 <__gethex+0x92>
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	d1f7      	bne.n	8008d74 <__gethex+0xc4>
 8008d84:	7833      	ldrb	r3, [r6, #0]
 8008d86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d8a:	2b50      	cmp	r3, #80	; 0x50
 8008d8c:	d13b      	bne.n	8008e06 <__gethex+0x156>
 8008d8e:	7873      	ldrb	r3, [r6, #1]
 8008d90:	2b2b      	cmp	r3, #43	; 0x2b
 8008d92:	d02c      	beq.n	8008dee <__gethex+0x13e>
 8008d94:	2b2d      	cmp	r3, #45	; 0x2d
 8008d96:	d02e      	beq.n	8008df6 <__gethex+0x146>
 8008d98:	1c71      	adds	r1, r6, #1
 8008d9a:	f04f 0900 	mov.w	r9, #0
 8008d9e:	7808      	ldrb	r0, [r1, #0]
 8008da0:	f7ff ff71 	bl	8008c86 <__hexdig_fun>
 8008da4:	1e43      	subs	r3, r0, #1
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b18      	cmp	r3, #24
 8008daa:	d82c      	bhi.n	8008e06 <__gethex+0x156>
 8008dac:	f1a0 0210 	sub.w	r2, r0, #16
 8008db0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008db4:	f7ff ff67 	bl	8008c86 <__hexdig_fun>
 8008db8:	1e43      	subs	r3, r0, #1
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b18      	cmp	r3, #24
 8008dbe:	d91d      	bls.n	8008dfc <__gethex+0x14c>
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	d000      	beq.n	8008dc8 <__gethex+0x118>
 8008dc6:	4252      	negs	r2, r2
 8008dc8:	4415      	add	r5, r2
 8008dca:	f8cb 1000 	str.w	r1, [fp]
 8008dce:	b1e4      	cbz	r4, 8008e0a <__gethex+0x15a>
 8008dd0:	9b00      	ldr	r3, [sp, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	bf14      	ite	ne
 8008dd6:	2700      	movne	r7, #0
 8008dd8:	2706      	moveq	r7, #6
 8008dda:	4638      	mov	r0, r7
 8008ddc:	b009      	add	sp, #36	; 0x24
 8008dde:	ecbd 8b02 	vpop	{d8}
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	463e      	mov	r6, r7
 8008de8:	4625      	mov	r5, r4
 8008dea:	2401      	movs	r4, #1
 8008dec:	e7ca      	b.n	8008d84 <__gethex+0xd4>
 8008dee:	f04f 0900 	mov.w	r9, #0
 8008df2:	1cb1      	adds	r1, r6, #2
 8008df4:	e7d3      	b.n	8008d9e <__gethex+0xee>
 8008df6:	f04f 0901 	mov.w	r9, #1
 8008dfa:	e7fa      	b.n	8008df2 <__gethex+0x142>
 8008dfc:	230a      	movs	r3, #10
 8008dfe:	fb03 0202 	mla	r2, r3, r2, r0
 8008e02:	3a10      	subs	r2, #16
 8008e04:	e7d4      	b.n	8008db0 <__gethex+0x100>
 8008e06:	4631      	mov	r1, r6
 8008e08:	e7df      	b.n	8008dca <__gethex+0x11a>
 8008e0a:	1bf3      	subs	r3, r6, r7
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4621      	mov	r1, r4
 8008e10:	2b07      	cmp	r3, #7
 8008e12:	dc0b      	bgt.n	8008e2c <__gethex+0x17c>
 8008e14:	ee18 0a10 	vmov	r0, s16
 8008e18:	f000 fae6 	bl	80093e8 <_Balloc>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	b940      	cbnz	r0, 8008e32 <__gethex+0x182>
 8008e20:	4b5d      	ldr	r3, [pc, #372]	; (8008f98 <__gethex+0x2e8>)
 8008e22:	4602      	mov	r2, r0
 8008e24:	21de      	movs	r1, #222	; 0xde
 8008e26:	485d      	ldr	r0, [pc, #372]	; (8008f9c <__gethex+0x2ec>)
 8008e28:	f001 fbdc 	bl	800a5e4 <__assert_func>
 8008e2c:	3101      	adds	r1, #1
 8008e2e:	105b      	asrs	r3, r3, #1
 8008e30:	e7ee      	b.n	8008e10 <__gethex+0x160>
 8008e32:	f100 0914 	add.w	r9, r0, #20
 8008e36:	f04f 0b00 	mov.w	fp, #0
 8008e3a:	f1ca 0301 	rsb	r3, sl, #1
 8008e3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e42:	f8cd b000 	str.w	fp, [sp]
 8008e46:	9306      	str	r3, [sp, #24]
 8008e48:	42b7      	cmp	r7, r6
 8008e4a:	d340      	bcc.n	8008ece <__gethex+0x21e>
 8008e4c:	9802      	ldr	r0, [sp, #8]
 8008e4e:	9b00      	ldr	r3, [sp, #0]
 8008e50:	f840 3b04 	str.w	r3, [r0], #4
 8008e54:	eba0 0009 	sub.w	r0, r0, r9
 8008e58:	1080      	asrs	r0, r0, #2
 8008e5a:	0146      	lsls	r6, r0, #5
 8008e5c:	6120      	str	r0, [r4, #16]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fbb4 	bl	80095cc <__hi0bits>
 8008e64:	1a30      	subs	r0, r6, r0
 8008e66:	f8d8 6000 	ldr.w	r6, [r8]
 8008e6a:	42b0      	cmp	r0, r6
 8008e6c:	dd63      	ble.n	8008f36 <__gethex+0x286>
 8008e6e:	1b87      	subs	r7, r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 ff58 	bl	8009d28 <__any_on>
 8008e78:	4682      	mov	sl, r0
 8008e7a:	b1a8      	cbz	r0, 8008ea8 <__gethex+0x1f8>
 8008e7c:	1e7b      	subs	r3, r7, #1
 8008e7e:	1159      	asrs	r1, r3, #5
 8008e80:	f003 021f 	and.w	r2, r3, #31
 8008e84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e88:	f04f 0a01 	mov.w	sl, #1
 8008e8c:	fa0a f202 	lsl.w	r2, sl, r2
 8008e90:	420a      	tst	r2, r1
 8008e92:	d009      	beq.n	8008ea8 <__gethex+0x1f8>
 8008e94:	4553      	cmp	r3, sl
 8008e96:	dd05      	ble.n	8008ea4 <__gethex+0x1f4>
 8008e98:	1eb9      	subs	r1, r7, #2
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 ff44 	bl	8009d28 <__any_on>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d145      	bne.n	8008f30 <__gethex+0x280>
 8008ea4:	f04f 0a02 	mov.w	sl, #2
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff fe99 	bl	8008be2 <rshift>
 8008eb0:	443d      	add	r5, r7
 8008eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008eb6:	42ab      	cmp	r3, r5
 8008eb8:	da4c      	bge.n	8008f54 <__gethex+0x2a4>
 8008eba:	ee18 0a10 	vmov	r0, s16
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	f000 fad2 	bl	8009468 <_Bfree>
 8008ec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	27a3      	movs	r7, #163	; 0xa3
 8008ecc:	e785      	b.n	8008dda <__gethex+0x12a>
 8008ece:	1e73      	subs	r3, r6, #1
 8008ed0:	9a05      	ldr	r2, [sp, #20]
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d019      	beq.n	8008f10 <__gethex+0x260>
 8008edc:	f1bb 0f20 	cmp.w	fp, #32
 8008ee0:	d107      	bne.n	8008ef2 <__gethex+0x242>
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	9a00      	ldr	r2, [sp, #0]
 8008ee6:	f843 2b04 	str.w	r2, [r3], #4
 8008eea:	9302      	str	r3, [sp, #8]
 8008eec:	2300      	movs	r3, #0
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	469b      	mov	fp, r3
 8008ef2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ef6:	f7ff fec6 	bl	8008c86 <__hexdig_fun>
 8008efa:	9b00      	ldr	r3, [sp, #0]
 8008efc:	f000 000f 	and.w	r0, r0, #15
 8008f00:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f04:	4303      	orrs	r3, r0
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	f10b 0b04 	add.w	fp, fp, #4
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	e00d      	b.n	8008f2c <__gethex+0x27c>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	9a06      	ldr	r2, [sp, #24]
 8008f14:	4413      	add	r3, r2
 8008f16:	42bb      	cmp	r3, r7
 8008f18:	d3e0      	bcc.n	8008edc <__gethex+0x22c>
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	9901      	ldr	r1, [sp, #4]
 8008f1e:	9307      	str	r3, [sp, #28]
 8008f20:	4652      	mov	r2, sl
 8008f22:	f001 fb2c 	bl	800a57e <strncmp>
 8008f26:	9b07      	ldr	r3, [sp, #28]
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1d7      	bne.n	8008edc <__gethex+0x22c>
 8008f2c:	461e      	mov	r6, r3
 8008f2e:	e78b      	b.n	8008e48 <__gethex+0x198>
 8008f30:	f04f 0a03 	mov.w	sl, #3
 8008f34:	e7b8      	b.n	8008ea8 <__gethex+0x1f8>
 8008f36:	da0a      	bge.n	8008f4e <__gethex+0x29e>
 8008f38:	1a37      	subs	r7, r6, r0
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	ee18 0a10 	vmov	r0, s16
 8008f40:	463a      	mov	r2, r7
 8008f42:	f000 fcad 	bl	80098a0 <__lshift>
 8008f46:	1bed      	subs	r5, r5, r7
 8008f48:	4604      	mov	r4, r0
 8008f4a:	f100 0914 	add.w	r9, r0, #20
 8008f4e:	f04f 0a00 	mov.w	sl, #0
 8008f52:	e7ae      	b.n	8008eb2 <__gethex+0x202>
 8008f54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f58:	42a8      	cmp	r0, r5
 8008f5a:	dd72      	ble.n	8009042 <__gethex+0x392>
 8008f5c:	1b45      	subs	r5, r0, r5
 8008f5e:	42ae      	cmp	r6, r5
 8008f60:	dc36      	bgt.n	8008fd0 <__gethex+0x320>
 8008f62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d02a      	beq.n	8008fc0 <__gethex+0x310>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d02c      	beq.n	8008fc8 <__gethex+0x318>
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d11c      	bne.n	8008fac <__gethex+0x2fc>
 8008f72:	42ae      	cmp	r6, r5
 8008f74:	d11a      	bne.n	8008fac <__gethex+0x2fc>
 8008f76:	2e01      	cmp	r6, #1
 8008f78:	d112      	bne.n	8008fa0 <__gethex+0x2f0>
 8008f7a:	9a04      	ldr	r2, [sp, #16]
 8008f7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	2301      	movs	r3, #1
 8008f84:	6123      	str	r3, [r4, #16]
 8008f86:	f8c9 3000 	str.w	r3, [r9]
 8008f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f8c:	2762      	movs	r7, #98	; 0x62
 8008f8e:	601c      	str	r4, [r3, #0]
 8008f90:	e723      	b.n	8008dda <__gethex+0x12a>
 8008f92:	bf00      	nop
 8008f94:	0800bb04 	.word	0x0800bb04
 8008f98:	0800ba28 	.word	0x0800ba28
 8008f9c:	0800ba9c 	.word	0x0800ba9c
 8008fa0:	1e71      	subs	r1, r6, #1
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fec0 	bl	8009d28 <__any_on>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1e6      	bne.n	8008f7a <__gethex+0x2ca>
 8008fac:	ee18 0a10 	vmov	r0, s16
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f000 fa59 	bl	8009468 <_Bfree>
 8008fb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fb8:	2300      	movs	r3, #0
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	2750      	movs	r7, #80	; 0x50
 8008fbe:	e70c      	b.n	8008dda <__gethex+0x12a>
 8008fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f2      	bne.n	8008fac <__gethex+0x2fc>
 8008fc6:	e7d8      	b.n	8008f7a <__gethex+0x2ca>
 8008fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1d5      	bne.n	8008f7a <__gethex+0x2ca>
 8008fce:	e7ed      	b.n	8008fac <__gethex+0x2fc>
 8008fd0:	1e6f      	subs	r7, r5, #1
 8008fd2:	f1ba 0f00 	cmp.w	sl, #0
 8008fd6:	d131      	bne.n	800903c <__gethex+0x38c>
 8008fd8:	b127      	cbz	r7, 8008fe4 <__gethex+0x334>
 8008fda:	4639      	mov	r1, r7
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fea3 	bl	8009d28 <__any_on>
 8008fe2:	4682      	mov	sl, r0
 8008fe4:	117b      	asrs	r3, r7, #5
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008fec:	f007 071f 	and.w	r7, r7, #31
 8008ff0:	fa01 f707 	lsl.w	r7, r1, r7
 8008ff4:	421f      	tst	r7, r3
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	bf18      	it	ne
 8008ffc:	f04a 0a02 	orrne.w	sl, sl, #2
 8009000:	1b76      	subs	r6, r6, r5
 8009002:	f7ff fdee 	bl	8008be2 <rshift>
 8009006:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800900a:	2702      	movs	r7, #2
 800900c:	f1ba 0f00 	cmp.w	sl, #0
 8009010:	d048      	beq.n	80090a4 <__gethex+0x3f4>
 8009012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d015      	beq.n	8009046 <__gethex+0x396>
 800901a:	2b03      	cmp	r3, #3
 800901c:	d017      	beq.n	800904e <__gethex+0x39e>
 800901e:	2b01      	cmp	r3, #1
 8009020:	d109      	bne.n	8009036 <__gethex+0x386>
 8009022:	f01a 0f02 	tst.w	sl, #2
 8009026:	d006      	beq.n	8009036 <__gethex+0x386>
 8009028:	f8d9 0000 	ldr.w	r0, [r9]
 800902c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009030:	f01a 0f01 	tst.w	sl, #1
 8009034:	d10e      	bne.n	8009054 <__gethex+0x3a4>
 8009036:	f047 0710 	orr.w	r7, r7, #16
 800903a:	e033      	b.n	80090a4 <__gethex+0x3f4>
 800903c:	f04f 0a01 	mov.w	sl, #1
 8009040:	e7d0      	b.n	8008fe4 <__gethex+0x334>
 8009042:	2701      	movs	r7, #1
 8009044:	e7e2      	b.n	800900c <__gethex+0x35c>
 8009046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009048:	f1c3 0301 	rsb	r3, r3, #1
 800904c:	9315      	str	r3, [sp, #84]	; 0x54
 800904e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0f0      	beq.n	8009036 <__gethex+0x386>
 8009054:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009058:	f104 0314 	add.w	r3, r4, #20
 800905c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009060:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009064:	f04f 0c00 	mov.w	ip, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f853 2b04 	ldr.w	r2, [r3], #4
 800906e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009072:	d01c      	beq.n	80090ae <__gethex+0x3fe>
 8009074:	3201      	adds	r2, #1
 8009076:	6002      	str	r2, [r0, #0]
 8009078:	2f02      	cmp	r7, #2
 800907a:	f104 0314 	add.w	r3, r4, #20
 800907e:	d13f      	bne.n	8009100 <__gethex+0x450>
 8009080:	f8d8 2000 	ldr.w	r2, [r8]
 8009084:	3a01      	subs	r2, #1
 8009086:	42b2      	cmp	r2, r6
 8009088:	d10a      	bne.n	80090a0 <__gethex+0x3f0>
 800908a:	1171      	asrs	r1, r6, #5
 800908c:	2201      	movs	r2, #1
 800908e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009092:	f006 061f 	and.w	r6, r6, #31
 8009096:	fa02 f606 	lsl.w	r6, r2, r6
 800909a:	421e      	tst	r6, r3
 800909c:	bf18      	it	ne
 800909e:	4617      	movne	r7, r2
 80090a0:	f047 0720 	orr.w	r7, r7, #32
 80090a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a6:	601c      	str	r4, [r3, #0]
 80090a8:	9b04      	ldr	r3, [sp, #16]
 80090aa:	601d      	str	r5, [r3, #0]
 80090ac:	e695      	b.n	8008dda <__gethex+0x12a>
 80090ae:	4299      	cmp	r1, r3
 80090b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80090b4:	d8d8      	bhi.n	8009068 <__gethex+0x3b8>
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	459b      	cmp	fp, r3
 80090ba:	db19      	blt.n	80090f0 <__gethex+0x440>
 80090bc:	6861      	ldr	r1, [r4, #4]
 80090be:	ee18 0a10 	vmov	r0, s16
 80090c2:	3101      	adds	r1, #1
 80090c4:	f000 f990 	bl	80093e8 <_Balloc>
 80090c8:	4681      	mov	r9, r0
 80090ca:	b918      	cbnz	r0, 80090d4 <__gethex+0x424>
 80090cc:	4b1a      	ldr	r3, [pc, #104]	; (8009138 <__gethex+0x488>)
 80090ce:	4602      	mov	r2, r0
 80090d0:	2184      	movs	r1, #132	; 0x84
 80090d2:	e6a8      	b.n	8008e26 <__gethex+0x176>
 80090d4:	6922      	ldr	r2, [r4, #16]
 80090d6:	3202      	adds	r2, #2
 80090d8:	f104 010c 	add.w	r1, r4, #12
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	300c      	adds	r0, #12
 80090e0:	f000 f974 	bl	80093cc <memcpy>
 80090e4:	4621      	mov	r1, r4
 80090e6:	ee18 0a10 	vmov	r0, s16
 80090ea:	f000 f9bd 	bl	8009468 <_Bfree>
 80090ee:	464c      	mov	r4, r9
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090f8:	6122      	str	r2, [r4, #16]
 80090fa:	2201      	movs	r2, #1
 80090fc:	615a      	str	r2, [r3, #20]
 80090fe:	e7bb      	b.n	8009078 <__gethex+0x3c8>
 8009100:	6922      	ldr	r2, [r4, #16]
 8009102:	455a      	cmp	r2, fp
 8009104:	dd0b      	ble.n	800911e <__gethex+0x46e>
 8009106:	2101      	movs	r1, #1
 8009108:	4620      	mov	r0, r4
 800910a:	f7ff fd6a 	bl	8008be2 <rshift>
 800910e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009112:	3501      	adds	r5, #1
 8009114:	42ab      	cmp	r3, r5
 8009116:	f6ff aed0 	blt.w	8008eba <__gethex+0x20a>
 800911a:	2701      	movs	r7, #1
 800911c:	e7c0      	b.n	80090a0 <__gethex+0x3f0>
 800911e:	f016 061f 	ands.w	r6, r6, #31
 8009122:	d0fa      	beq.n	800911a <__gethex+0x46a>
 8009124:	4453      	add	r3, sl
 8009126:	f1c6 0620 	rsb	r6, r6, #32
 800912a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800912e:	f000 fa4d 	bl	80095cc <__hi0bits>
 8009132:	42b0      	cmp	r0, r6
 8009134:	dbe7      	blt.n	8009106 <__gethex+0x456>
 8009136:	e7f0      	b.n	800911a <__gethex+0x46a>
 8009138:	0800ba28 	.word	0x0800ba28

0800913c <L_shift>:
 800913c:	f1c2 0208 	rsb	r2, r2, #8
 8009140:	0092      	lsls	r2, r2, #2
 8009142:	b570      	push	{r4, r5, r6, lr}
 8009144:	f1c2 0620 	rsb	r6, r2, #32
 8009148:	6843      	ldr	r3, [r0, #4]
 800914a:	6804      	ldr	r4, [r0, #0]
 800914c:	fa03 f506 	lsl.w	r5, r3, r6
 8009150:	432c      	orrs	r4, r5
 8009152:	40d3      	lsrs	r3, r2
 8009154:	6004      	str	r4, [r0, #0]
 8009156:	f840 3f04 	str.w	r3, [r0, #4]!
 800915a:	4288      	cmp	r0, r1
 800915c:	d3f4      	bcc.n	8009148 <L_shift+0xc>
 800915e:	bd70      	pop	{r4, r5, r6, pc}

08009160 <__match>:
 8009160:	b530      	push	{r4, r5, lr}
 8009162:	6803      	ldr	r3, [r0, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800916a:	b914      	cbnz	r4, 8009172 <__match+0x12>
 800916c:	6003      	str	r3, [r0, #0]
 800916e:	2001      	movs	r0, #1
 8009170:	bd30      	pop	{r4, r5, pc}
 8009172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009176:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800917a:	2d19      	cmp	r5, #25
 800917c:	bf98      	it	ls
 800917e:	3220      	addls	r2, #32
 8009180:	42a2      	cmp	r2, r4
 8009182:	d0f0      	beq.n	8009166 <__match+0x6>
 8009184:	2000      	movs	r0, #0
 8009186:	e7f3      	b.n	8009170 <__match+0x10>

08009188 <__hexnan>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	680b      	ldr	r3, [r1, #0]
 800918e:	115e      	asrs	r6, r3, #5
 8009190:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009194:	f013 031f 	ands.w	r3, r3, #31
 8009198:	b087      	sub	sp, #28
 800919a:	bf18      	it	ne
 800919c:	3604      	addne	r6, #4
 800919e:	2500      	movs	r5, #0
 80091a0:	1f37      	subs	r7, r6, #4
 80091a2:	4690      	mov	r8, r2
 80091a4:	6802      	ldr	r2, [r0, #0]
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	4682      	mov	sl, r0
 80091aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80091ae:	46b9      	mov	r9, r7
 80091b0:	463c      	mov	r4, r7
 80091b2:	9502      	str	r5, [sp, #8]
 80091b4:	46ab      	mov	fp, r5
 80091b6:	7851      	ldrb	r1, [r2, #1]
 80091b8:	1c53      	adds	r3, r2, #1
 80091ba:	9303      	str	r3, [sp, #12]
 80091bc:	b341      	cbz	r1, 8009210 <__hexnan+0x88>
 80091be:	4608      	mov	r0, r1
 80091c0:	9205      	str	r2, [sp, #20]
 80091c2:	9104      	str	r1, [sp, #16]
 80091c4:	f7ff fd5f 	bl	8008c86 <__hexdig_fun>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d14f      	bne.n	800926c <__hexnan+0xe4>
 80091cc:	9904      	ldr	r1, [sp, #16]
 80091ce:	9a05      	ldr	r2, [sp, #20]
 80091d0:	2920      	cmp	r1, #32
 80091d2:	d818      	bhi.n	8009206 <__hexnan+0x7e>
 80091d4:	9b02      	ldr	r3, [sp, #8]
 80091d6:	459b      	cmp	fp, r3
 80091d8:	dd13      	ble.n	8009202 <__hexnan+0x7a>
 80091da:	454c      	cmp	r4, r9
 80091dc:	d206      	bcs.n	80091ec <__hexnan+0x64>
 80091de:	2d07      	cmp	r5, #7
 80091e0:	dc04      	bgt.n	80091ec <__hexnan+0x64>
 80091e2:	462a      	mov	r2, r5
 80091e4:	4649      	mov	r1, r9
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7ff ffa8 	bl	800913c <L_shift>
 80091ec:	4544      	cmp	r4, r8
 80091ee:	d950      	bls.n	8009292 <__hexnan+0x10a>
 80091f0:	2300      	movs	r3, #0
 80091f2:	f1a4 0904 	sub.w	r9, r4, #4
 80091f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80091fa:	f8cd b008 	str.w	fp, [sp, #8]
 80091fe:	464c      	mov	r4, r9
 8009200:	461d      	mov	r5, r3
 8009202:	9a03      	ldr	r2, [sp, #12]
 8009204:	e7d7      	b.n	80091b6 <__hexnan+0x2e>
 8009206:	2929      	cmp	r1, #41	; 0x29
 8009208:	d156      	bne.n	80092b8 <__hexnan+0x130>
 800920a:	3202      	adds	r2, #2
 800920c:	f8ca 2000 	str.w	r2, [sl]
 8009210:	f1bb 0f00 	cmp.w	fp, #0
 8009214:	d050      	beq.n	80092b8 <__hexnan+0x130>
 8009216:	454c      	cmp	r4, r9
 8009218:	d206      	bcs.n	8009228 <__hexnan+0xa0>
 800921a:	2d07      	cmp	r5, #7
 800921c:	dc04      	bgt.n	8009228 <__hexnan+0xa0>
 800921e:	462a      	mov	r2, r5
 8009220:	4649      	mov	r1, r9
 8009222:	4620      	mov	r0, r4
 8009224:	f7ff ff8a 	bl	800913c <L_shift>
 8009228:	4544      	cmp	r4, r8
 800922a:	d934      	bls.n	8009296 <__hexnan+0x10e>
 800922c:	f1a8 0204 	sub.w	r2, r8, #4
 8009230:	4623      	mov	r3, r4
 8009232:	f853 1b04 	ldr.w	r1, [r3], #4
 8009236:	f842 1f04 	str.w	r1, [r2, #4]!
 800923a:	429f      	cmp	r7, r3
 800923c:	d2f9      	bcs.n	8009232 <__hexnan+0xaa>
 800923e:	1b3b      	subs	r3, r7, r4
 8009240:	f023 0303 	bic.w	r3, r3, #3
 8009244:	3304      	adds	r3, #4
 8009246:	3401      	adds	r4, #1
 8009248:	3e03      	subs	r6, #3
 800924a:	42b4      	cmp	r4, r6
 800924c:	bf88      	it	hi
 800924e:	2304      	movhi	r3, #4
 8009250:	4443      	add	r3, r8
 8009252:	2200      	movs	r2, #0
 8009254:	f843 2b04 	str.w	r2, [r3], #4
 8009258:	429f      	cmp	r7, r3
 800925a:	d2fb      	bcs.n	8009254 <__hexnan+0xcc>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	b91b      	cbnz	r3, 8009268 <__hexnan+0xe0>
 8009260:	4547      	cmp	r7, r8
 8009262:	d127      	bne.n	80092b4 <__hexnan+0x12c>
 8009264:	2301      	movs	r3, #1
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	2005      	movs	r0, #5
 800926a:	e026      	b.n	80092ba <__hexnan+0x132>
 800926c:	3501      	adds	r5, #1
 800926e:	2d08      	cmp	r5, #8
 8009270:	f10b 0b01 	add.w	fp, fp, #1
 8009274:	dd06      	ble.n	8009284 <__hexnan+0xfc>
 8009276:	4544      	cmp	r4, r8
 8009278:	d9c3      	bls.n	8009202 <__hexnan+0x7a>
 800927a:	2300      	movs	r3, #0
 800927c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009280:	2501      	movs	r5, #1
 8009282:	3c04      	subs	r4, #4
 8009284:	6822      	ldr	r2, [r4, #0]
 8009286:	f000 000f 	and.w	r0, r0, #15
 800928a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800928e:	6022      	str	r2, [r4, #0]
 8009290:	e7b7      	b.n	8009202 <__hexnan+0x7a>
 8009292:	2508      	movs	r5, #8
 8009294:	e7b5      	b.n	8009202 <__hexnan+0x7a>
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0df      	beq.n	800925c <__hexnan+0xd4>
 800929c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092a0:	f1c3 0320 	rsb	r3, r3, #32
 80092a4:	fa22 f303 	lsr.w	r3, r2, r3
 80092a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092ac:	401a      	ands	r2, r3
 80092ae:	f846 2c04 	str.w	r2, [r6, #-4]
 80092b2:	e7d3      	b.n	800925c <__hexnan+0xd4>
 80092b4:	3f04      	subs	r7, #4
 80092b6:	e7d1      	b.n	800925c <__hexnan+0xd4>
 80092b8:	2004      	movs	r0, #4
 80092ba:	b007      	add	sp, #28
 80092bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092c0 <_localeconv_r>:
 80092c0:	4800      	ldr	r0, [pc, #0]	; (80092c4 <_localeconv_r+0x4>)
 80092c2:	4770      	bx	lr
 80092c4:	20000164 	.word	0x20000164

080092c8 <__retarget_lock_init_recursive>:
 80092c8:	4770      	bx	lr

080092ca <__retarget_lock_acquire_recursive>:
 80092ca:	4770      	bx	lr

080092cc <__retarget_lock_release_recursive>:
 80092cc:	4770      	bx	lr

080092ce <__swhatbuf_r>:
 80092ce:	b570      	push	{r4, r5, r6, lr}
 80092d0:	460e      	mov	r6, r1
 80092d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d6:	2900      	cmp	r1, #0
 80092d8:	b096      	sub	sp, #88	; 0x58
 80092da:	4614      	mov	r4, r2
 80092dc:	461d      	mov	r5, r3
 80092de:	da08      	bge.n	80092f2 <__swhatbuf_r+0x24>
 80092e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	602a      	str	r2, [r5, #0]
 80092e8:	061a      	lsls	r2, r3, #24
 80092ea:	d410      	bmi.n	800930e <__swhatbuf_r+0x40>
 80092ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f0:	e00e      	b.n	8009310 <__swhatbuf_r+0x42>
 80092f2:	466a      	mov	r2, sp
 80092f4:	f001 f9b6 	bl	800a664 <_fstat_r>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	dbf1      	blt.n	80092e0 <__swhatbuf_r+0x12>
 80092fc:	9a01      	ldr	r2, [sp, #4]
 80092fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009302:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009306:	425a      	negs	r2, r3
 8009308:	415a      	adcs	r2, r3
 800930a:	602a      	str	r2, [r5, #0]
 800930c:	e7ee      	b.n	80092ec <__swhatbuf_r+0x1e>
 800930e:	2340      	movs	r3, #64	; 0x40
 8009310:	2000      	movs	r0, #0
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	b016      	add	sp, #88	; 0x58
 8009316:	bd70      	pop	{r4, r5, r6, pc}

08009318 <__smakebuf_r>:
 8009318:	898b      	ldrh	r3, [r1, #12]
 800931a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800931c:	079d      	lsls	r5, r3, #30
 800931e:	4606      	mov	r6, r0
 8009320:	460c      	mov	r4, r1
 8009322:	d507      	bpl.n	8009334 <__smakebuf_r+0x1c>
 8009324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	6123      	str	r3, [r4, #16]
 800932c:	2301      	movs	r3, #1
 800932e:	6163      	str	r3, [r4, #20]
 8009330:	b002      	add	sp, #8
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	ab01      	add	r3, sp, #4
 8009336:	466a      	mov	r2, sp
 8009338:	f7ff ffc9 	bl	80092ce <__swhatbuf_r>
 800933c:	9900      	ldr	r1, [sp, #0]
 800933e:	4605      	mov	r5, r0
 8009340:	4630      	mov	r0, r6
 8009342:	f000 fd95 	bl	8009e70 <_malloc_r>
 8009346:	b948      	cbnz	r0, 800935c <__smakebuf_r+0x44>
 8009348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934c:	059a      	lsls	r2, r3, #22
 800934e:	d4ef      	bmi.n	8009330 <__smakebuf_r+0x18>
 8009350:	f023 0303 	bic.w	r3, r3, #3
 8009354:	f043 0302 	orr.w	r3, r3, #2
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	e7e3      	b.n	8009324 <__smakebuf_r+0xc>
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <__smakebuf_r+0x7c>)
 800935e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	6020      	str	r0, [r4, #0]
 8009364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	6163      	str	r3, [r4, #20]
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	6120      	str	r0, [r4, #16]
 8009372:	b15b      	cbz	r3, 800938c <__smakebuf_r+0x74>
 8009374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009378:	4630      	mov	r0, r6
 800937a:	f001 f985 	bl	800a688 <_isatty_r>
 800937e:	b128      	cbz	r0, 800938c <__smakebuf_r+0x74>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	89a0      	ldrh	r0, [r4, #12]
 800938e:	4305      	orrs	r5, r0
 8009390:	81a5      	strh	r5, [r4, #12]
 8009392:	e7cd      	b.n	8009330 <__smakebuf_r+0x18>
 8009394:	08008a41 	.word	0x08008a41

08009398 <malloc>:
 8009398:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <malloc+0xc>)
 800939a:	4601      	mov	r1, r0
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f000 bd67 	b.w	8009e70 <_malloc_r>
 80093a2:	bf00      	nop
 80093a4:	2000000c 	.word	0x2000000c

080093a8 <__ascii_mbtowc>:
 80093a8:	b082      	sub	sp, #8
 80093aa:	b901      	cbnz	r1, 80093ae <__ascii_mbtowc+0x6>
 80093ac:	a901      	add	r1, sp, #4
 80093ae:	b142      	cbz	r2, 80093c2 <__ascii_mbtowc+0x1a>
 80093b0:	b14b      	cbz	r3, 80093c6 <__ascii_mbtowc+0x1e>
 80093b2:	7813      	ldrb	r3, [r2, #0]
 80093b4:	600b      	str	r3, [r1, #0]
 80093b6:	7812      	ldrb	r2, [r2, #0]
 80093b8:	1e10      	subs	r0, r2, #0
 80093ba:	bf18      	it	ne
 80093bc:	2001      	movne	r0, #1
 80093be:	b002      	add	sp, #8
 80093c0:	4770      	bx	lr
 80093c2:	4610      	mov	r0, r2
 80093c4:	e7fb      	b.n	80093be <__ascii_mbtowc+0x16>
 80093c6:	f06f 0001 	mvn.w	r0, #1
 80093ca:	e7f8      	b.n	80093be <__ascii_mbtowc+0x16>

080093cc <memcpy>:
 80093cc:	440a      	add	r2, r1
 80093ce:	4291      	cmp	r1, r2
 80093d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093d4:	d100      	bne.n	80093d8 <memcpy+0xc>
 80093d6:	4770      	bx	lr
 80093d8:	b510      	push	{r4, lr}
 80093da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093e2:	4291      	cmp	r1, r2
 80093e4:	d1f9      	bne.n	80093da <memcpy+0xe>
 80093e6:	bd10      	pop	{r4, pc}

080093e8 <_Balloc>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	b976      	cbnz	r6, 8009410 <_Balloc+0x28>
 80093f2:	2010      	movs	r0, #16
 80093f4:	f7ff ffd0 	bl	8009398 <malloc>
 80093f8:	4602      	mov	r2, r0
 80093fa:	6260      	str	r0, [r4, #36]	; 0x24
 80093fc:	b920      	cbnz	r0, 8009408 <_Balloc+0x20>
 80093fe:	4b18      	ldr	r3, [pc, #96]	; (8009460 <_Balloc+0x78>)
 8009400:	4818      	ldr	r0, [pc, #96]	; (8009464 <_Balloc+0x7c>)
 8009402:	2166      	movs	r1, #102	; 0x66
 8009404:	f001 f8ee 	bl	800a5e4 <__assert_func>
 8009408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800940c:	6006      	str	r6, [r0, #0]
 800940e:	60c6      	str	r6, [r0, #12]
 8009410:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009412:	68f3      	ldr	r3, [r6, #12]
 8009414:	b183      	cbz	r3, 8009438 <_Balloc+0x50>
 8009416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800941e:	b9b8      	cbnz	r0, 8009450 <_Balloc+0x68>
 8009420:	2101      	movs	r1, #1
 8009422:	fa01 f605 	lsl.w	r6, r1, r5
 8009426:	1d72      	adds	r2, r6, #5
 8009428:	0092      	lsls	r2, r2, #2
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fc9d 	bl	8009d6a <_calloc_r>
 8009430:	b160      	cbz	r0, 800944c <_Balloc+0x64>
 8009432:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009436:	e00e      	b.n	8009456 <_Balloc+0x6e>
 8009438:	2221      	movs	r2, #33	; 0x21
 800943a:	2104      	movs	r1, #4
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fc94 	bl	8009d6a <_calloc_r>
 8009442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009444:	60f0      	str	r0, [r6, #12]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <_Balloc+0x2e>
 800944c:	2000      	movs	r0, #0
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	6802      	ldr	r2, [r0, #0]
 8009452:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009456:	2300      	movs	r3, #0
 8009458:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800945c:	e7f7      	b.n	800944e <_Balloc+0x66>
 800945e:	bf00      	nop
 8009460:	0800b9b6 	.word	0x0800b9b6
 8009464:	0800bb18 	.word	0x0800bb18

08009468 <_Bfree>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800946c:	4605      	mov	r5, r0
 800946e:	460c      	mov	r4, r1
 8009470:	b976      	cbnz	r6, 8009490 <_Bfree+0x28>
 8009472:	2010      	movs	r0, #16
 8009474:	f7ff ff90 	bl	8009398 <malloc>
 8009478:	4602      	mov	r2, r0
 800947a:	6268      	str	r0, [r5, #36]	; 0x24
 800947c:	b920      	cbnz	r0, 8009488 <_Bfree+0x20>
 800947e:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <_Bfree+0x3c>)
 8009480:	4809      	ldr	r0, [pc, #36]	; (80094a8 <_Bfree+0x40>)
 8009482:	218a      	movs	r1, #138	; 0x8a
 8009484:	f001 f8ae 	bl	800a5e4 <__assert_func>
 8009488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800948c:	6006      	str	r6, [r0, #0]
 800948e:	60c6      	str	r6, [r0, #12]
 8009490:	b13c      	cbz	r4, 80094a2 <_Bfree+0x3a>
 8009492:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009494:	6862      	ldr	r2, [r4, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800949c:	6021      	str	r1, [r4, #0]
 800949e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	0800b9b6 	.word	0x0800b9b6
 80094a8:	0800bb18 	.word	0x0800bb18

080094ac <__multadd>:
 80094ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b0:	690d      	ldr	r5, [r1, #16]
 80094b2:	4607      	mov	r7, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	461e      	mov	r6, r3
 80094b8:	f101 0c14 	add.w	ip, r1, #20
 80094bc:	2000      	movs	r0, #0
 80094be:	f8dc 3000 	ldr.w	r3, [ip]
 80094c2:	b299      	uxth	r1, r3
 80094c4:	fb02 6101 	mla	r1, r2, r1, r6
 80094c8:	0c1e      	lsrs	r6, r3, #16
 80094ca:	0c0b      	lsrs	r3, r1, #16
 80094cc:	fb02 3306 	mla	r3, r2, r6, r3
 80094d0:	b289      	uxth	r1, r1
 80094d2:	3001      	adds	r0, #1
 80094d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094d8:	4285      	cmp	r5, r0
 80094da:	f84c 1b04 	str.w	r1, [ip], #4
 80094de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094e2:	dcec      	bgt.n	80094be <__multadd+0x12>
 80094e4:	b30e      	cbz	r6, 800952a <__multadd+0x7e>
 80094e6:	68a3      	ldr	r3, [r4, #8]
 80094e8:	42ab      	cmp	r3, r5
 80094ea:	dc19      	bgt.n	8009520 <__multadd+0x74>
 80094ec:	6861      	ldr	r1, [r4, #4]
 80094ee:	4638      	mov	r0, r7
 80094f0:	3101      	adds	r1, #1
 80094f2:	f7ff ff79 	bl	80093e8 <_Balloc>
 80094f6:	4680      	mov	r8, r0
 80094f8:	b928      	cbnz	r0, 8009506 <__multadd+0x5a>
 80094fa:	4602      	mov	r2, r0
 80094fc:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <__multadd+0x84>)
 80094fe:	480d      	ldr	r0, [pc, #52]	; (8009534 <__multadd+0x88>)
 8009500:	21b5      	movs	r1, #181	; 0xb5
 8009502:	f001 f86f 	bl	800a5e4 <__assert_func>
 8009506:	6922      	ldr	r2, [r4, #16]
 8009508:	3202      	adds	r2, #2
 800950a:	f104 010c 	add.w	r1, r4, #12
 800950e:	0092      	lsls	r2, r2, #2
 8009510:	300c      	adds	r0, #12
 8009512:	f7ff ff5b 	bl	80093cc <memcpy>
 8009516:	4621      	mov	r1, r4
 8009518:	4638      	mov	r0, r7
 800951a:	f7ff ffa5 	bl	8009468 <_Bfree>
 800951e:	4644      	mov	r4, r8
 8009520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009524:	3501      	adds	r5, #1
 8009526:	615e      	str	r6, [r3, #20]
 8009528:	6125      	str	r5, [r4, #16]
 800952a:	4620      	mov	r0, r4
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	0800ba28 	.word	0x0800ba28
 8009534:	0800bb18 	.word	0x0800bb18

08009538 <__s2b>:
 8009538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800953c:	460c      	mov	r4, r1
 800953e:	4615      	mov	r5, r2
 8009540:	461f      	mov	r7, r3
 8009542:	2209      	movs	r2, #9
 8009544:	3308      	adds	r3, #8
 8009546:	4606      	mov	r6, r0
 8009548:	fb93 f3f2 	sdiv	r3, r3, r2
 800954c:	2100      	movs	r1, #0
 800954e:	2201      	movs	r2, #1
 8009550:	429a      	cmp	r2, r3
 8009552:	db09      	blt.n	8009568 <__s2b+0x30>
 8009554:	4630      	mov	r0, r6
 8009556:	f7ff ff47 	bl	80093e8 <_Balloc>
 800955a:	b940      	cbnz	r0, 800956e <__s2b+0x36>
 800955c:	4602      	mov	r2, r0
 800955e:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <__s2b+0x8c>)
 8009560:	4819      	ldr	r0, [pc, #100]	; (80095c8 <__s2b+0x90>)
 8009562:	21ce      	movs	r1, #206	; 0xce
 8009564:	f001 f83e 	bl	800a5e4 <__assert_func>
 8009568:	0052      	lsls	r2, r2, #1
 800956a:	3101      	adds	r1, #1
 800956c:	e7f0      	b.n	8009550 <__s2b+0x18>
 800956e:	9b08      	ldr	r3, [sp, #32]
 8009570:	6143      	str	r3, [r0, #20]
 8009572:	2d09      	cmp	r5, #9
 8009574:	f04f 0301 	mov.w	r3, #1
 8009578:	6103      	str	r3, [r0, #16]
 800957a:	dd16      	ble.n	80095aa <__s2b+0x72>
 800957c:	f104 0909 	add.w	r9, r4, #9
 8009580:	46c8      	mov	r8, r9
 8009582:	442c      	add	r4, r5
 8009584:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009588:	4601      	mov	r1, r0
 800958a:	3b30      	subs	r3, #48	; 0x30
 800958c:	220a      	movs	r2, #10
 800958e:	4630      	mov	r0, r6
 8009590:	f7ff ff8c 	bl	80094ac <__multadd>
 8009594:	45a0      	cmp	r8, r4
 8009596:	d1f5      	bne.n	8009584 <__s2b+0x4c>
 8009598:	f1a5 0408 	sub.w	r4, r5, #8
 800959c:	444c      	add	r4, r9
 800959e:	1b2d      	subs	r5, r5, r4
 80095a0:	1963      	adds	r3, r4, r5
 80095a2:	42bb      	cmp	r3, r7
 80095a4:	db04      	blt.n	80095b0 <__s2b+0x78>
 80095a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095aa:	340a      	adds	r4, #10
 80095ac:	2509      	movs	r5, #9
 80095ae:	e7f6      	b.n	800959e <__s2b+0x66>
 80095b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095b4:	4601      	mov	r1, r0
 80095b6:	3b30      	subs	r3, #48	; 0x30
 80095b8:	220a      	movs	r2, #10
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ff76 	bl	80094ac <__multadd>
 80095c0:	e7ee      	b.n	80095a0 <__s2b+0x68>
 80095c2:	bf00      	nop
 80095c4:	0800ba28 	.word	0x0800ba28
 80095c8:	0800bb18 	.word	0x0800bb18

080095cc <__hi0bits>:
 80095cc:	0c03      	lsrs	r3, r0, #16
 80095ce:	041b      	lsls	r3, r3, #16
 80095d0:	b9d3      	cbnz	r3, 8009608 <__hi0bits+0x3c>
 80095d2:	0400      	lsls	r0, r0, #16
 80095d4:	2310      	movs	r3, #16
 80095d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095da:	bf04      	itt	eq
 80095dc:	0200      	lsleq	r0, r0, #8
 80095de:	3308      	addeq	r3, #8
 80095e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095e4:	bf04      	itt	eq
 80095e6:	0100      	lsleq	r0, r0, #4
 80095e8:	3304      	addeq	r3, #4
 80095ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095ee:	bf04      	itt	eq
 80095f0:	0080      	lsleq	r0, r0, #2
 80095f2:	3302      	addeq	r3, #2
 80095f4:	2800      	cmp	r0, #0
 80095f6:	db05      	blt.n	8009604 <__hi0bits+0x38>
 80095f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80095fc:	f103 0301 	add.w	r3, r3, #1
 8009600:	bf08      	it	eq
 8009602:	2320      	moveq	r3, #32
 8009604:	4618      	mov	r0, r3
 8009606:	4770      	bx	lr
 8009608:	2300      	movs	r3, #0
 800960a:	e7e4      	b.n	80095d6 <__hi0bits+0xa>

0800960c <__lo0bits>:
 800960c:	6803      	ldr	r3, [r0, #0]
 800960e:	f013 0207 	ands.w	r2, r3, #7
 8009612:	4601      	mov	r1, r0
 8009614:	d00b      	beq.n	800962e <__lo0bits+0x22>
 8009616:	07da      	lsls	r2, r3, #31
 8009618:	d423      	bmi.n	8009662 <__lo0bits+0x56>
 800961a:	0798      	lsls	r0, r3, #30
 800961c:	bf49      	itett	mi
 800961e:	085b      	lsrmi	r3, r3, #1
 8009620:	089b      	lsrpl	r3, r3, #2
 8009622:	2001      	movmi	r0, #1
 8009624:	600b      	strmi	r3, [r1, #0]
 8009626:	bf5c      	itt	pl
 8009628:	600b      	strpl	r3, [r1, #0]
 800962a:	2002      	movpl	r0, #2
 800962c:	4770      	bx	lr
 800962e:	b298      	uxth	r0, r3
 8009630:	b9a8      	cbnz	r0, 800965e <__lo0bits+0x52>
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	2010      	movs	r0, #16
 8009636:	b2da      	uxtb	r2, r3
 8009638:	b90a      	cbnz	r2, 800963e <__lo0bits+0x32>
 800963a:	3008      	adds	r0, #8
 800963c:	0a1b      	lsrs	r3, r3, #8
 800963e:	071a      	lsls	r2, r3, #28
 8009640:	bf04      	itt	eq
 8009642:	091b      	lsreq	r3, r3, #4
 8009644:	3004      	addeq	r0, #4
 8009646:	079a      	lsls	r2, r3, #30
 8009648:	bf04      	itt	eq
 800964a:	089b      	lsreq	r3, r3, #2
 800964c:	3002      	addeq	r0, #2
 800964e:	07da      	lsls	r2, r3, #31
 8009650:	d403      	bmi.n	800965a <__lo0bits+0x4e>
 8009652:	085b      	lsrs	r3, r3, #1
 8009654:	f100 0001 	add.w	r0, r0, #1
 8009658:	d005      	beq.n	8009666 <__lo0bits+0x5a>
 800965a:	600b      	str	r3, [r1, #0]
 800965c:	4770      	bx	lr
 800965e:	4610      	mov	r0, r2
 8009660:	e7e9      	b.n	8009636 <__lo0bits+0x2a>
 8009662:	2000      	movs	r0, #0
 8009664:	4770      	bx	lr
 8009666:	2020      	movs	r0, #32
 8009668:	4770      	bx	lr
	...

0800966c <__i2b>:
 800966c:	b510      	push	{r4, lr}
 800966e:	460c      	mov	r4, r1
 8009670:	2101      	movs	r1, #1
 8009672:	f7ff feb9 	bl	80093e8 <_Balloc>
 8009676:	4602      	mov	r2, r0
 8009678:	b928      	cbnz	r0, 8009686 <__i2b+0x1a>
 800967a:	4b05      	ldr	r3, [pc, #20]	; (8009690 <__i2b+0x24>)
 800967c:	4805      	ldr	r0, [pc, #20]	; (8009694 <__i2b+0x28>)
 800967e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009682:	f000 ffaf 	bl	800a5e4 <__assert_func>
 8009686:	2301      	movs	r3, #1
 8009688:	6144      	str	r4, [r0, #20]
 800968a:	6103      	str	r3, [r0, #16]
 800968c:	bd10      	pop	{r4, pc}
 800968e:	bf00      	nop
 8009690:	0800ba28 	.word	0x0800ba28
 8009694:	0800bb18 	.word	0x0800bb18

08009698 <__multiply>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4691      	mov	r9, r2
 800969e:	690a      	ldr	r2, [r1, #16]
 80096a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	bfb8      	it	lt
 80096a8:	460b      	movlt	r3, r1
 80096aa:	460c      	mov	r4, r1
 80096ac:	bfbc      	itt	lt
 80096ae:	464c      	movlt	r4, r9
 80096b0:	4699      	movlt	r9, r3
 80096b2:	6927      	ldr	r7, [r4, #16]
 80096b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096b8:	68a3      	ldr	r3, [r4, #8]
 80096ba:	6861      	ldr	r1, [r4, #4]
 80096bc:	eb07 060a 	add.w	r6, r7, sl
 80096c0:	42b3      	cmp	r3, r6
 80096c2:	b085      	sub	sp, #20
 80096c4:	bfb8      	it	lt
 80096c6:	3101      	addlt	r1, #1
 80096c8:	f7ff fe8e 	bl	80093e8 <_Balloc>
 80096cc:	b930      	cbnz	r0, 80096dc <__multiply+0x44>
 80096ce:	4602      	mov	r2, r0
 80096d0:	4b44      	ldr	r3, [pc, #272]	; (80097e4 <__multiply+0x14c>)
 80096d2:	4845      	ldr	r0, [pc, #276]	; (80097e8 <__multiply+0x150>)
 80096d4:	f240 115d 	movw	r1, #349	; 0x15d
 80096d8:	f000 ff84 	bl	800a5e4 <__assert_func>
 80096dc:	f100 0514 	add.w	r5, r0, #20
 80096e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096e4:	462b      	mov	r3, r5
 80096e6:	2200      	movs	r2, #0
 80096e8:	4543      	cmp	r3, r8
 80096ea:	d321      	bcc.n	8009730 <__multiply+0x98>
 80096ec:	f104 0314 	add.w	r3, r4, #20
 80096f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096f4:	f109 0314 	add.w	r3, r9, #20
 80096f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096fc:	9202      	str	r2, [sp, #8]
 80096fe:	1b3a      	subs	r2, r7, r4
 8009700:	3a15      	subs	r2, #21
 8009702:	f022 0203 	bic.w	r2, r2, #3
 8009706:	3204      	adds	r2, #4
 8009708:	f104 0115 	add.w	r1, r4, #21
 800970c:	428f      	cmp	r7, r1
 800970e:	bf38      	it	cc
 8009710:	2204      	movcc	r2, #4
 8009712:	9201      	str	r2, [sp, #4]
 8009714:	9a02      	ldr	r2, [sp, #8]
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	429a      	cmp	r2, r3
 800971a:	d80c      	bhi.n	8009736 <__multiply+0x9e>
 800971c:	2e00      	cmp	r6, #0
 800971e:	dd03      	ble.n	8009728 <__multiply+0x90>
 8009720:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009724:	2b00      	cmp	r3, #0
 8009726:	d05a      	beq.n	80097de <__multiply+0x146>
 8009728:	6106      	str	r6, [r0, #16]
 800972a:	b005      	add	sp, #20
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	f843 2b04 	str.w	r2, [r3], #4
 8009734:	e7d8      	b.n	80096e8 <__multiply+0x50>
 8009736:	f8b3 a000 	ldrh.w	sl, [r3]
 800973a:	f1ba 0f00 	cmp.w	sl, #0
 800973e:	d024      	beq.n	800978a <__multiply+0xf2>
 8009740:	f104 0e14 	add.w	lr, r4, #20
 8009744:	46a9      	mov	r9, r5
 8009746:	f04f 0c00 	mov.w	ip, #0
 800974a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800974e:	f8d9 1000 	ldr.w	r1, [r9]
 8009752:	fa1f fb82 	uxth.w	fp, r2
 8009756:	b289      	uxth	r1, r1
 8009758:	fb0a 110b 	mla	r1, sl, fp, r1
 800975c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009760:	f8d9 2000 	ldr.w	r2, [r9]
 8009764:	4461      	add	r1, ip
 8009766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800976a:	fb0a c20b 	mla	r2, sl, fp, ip
 800976e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009772:	b289      	uxth	r1, r1
 8009774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009778:	4577      	cmp	r7, lr
 800977a:	f849 1b04 	str.w	r1, [r9], #4
 800977e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009782:	d8e2      	bhi.n	800974a <__multiply+0xb2>
 8009784:	9a01      	ldr	r2, [sp, #4]
 8009786:	f845 c002 	str.w	ip, [r5, r2]
 800978a:	9a03      	ldr	r2, [sp, #12]
 800978c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009790:	3304      	adds	r3, #4
 8009792:	f1b9 0f00 	cmp.w	r9, #0
 8009796:	d020      	beq.n	80097da <__multiply+0x142>
 8009798:	6829      	ldr	r1, [r5, #0]
 800979a:	f104 0c14 	add.w	ip, r4, #20
 800979e:	46ae      	mov	lr, r5
 80097a0:	f04f 0a00 	mov.w	sl, #0
 80097a4:	f8bc b000 	ldrh.w	fp, [ip]
 80097a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097ac:	fb09 220b 	mla	r2, r9, fp, r2
 80097b0:	4492      	add	sl, r2
 80097b2:	b289      	uxth	r1, r1
 80097b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80097b8:	f84e 1b04 	str.w	r1, [lr], #4
 80097bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80097c0:	f8be 1000 	ldrh.w	r1, [lr]
 80097c4:	0c12      	lsrs	r2, r2, #16
 80097c6:	fb09 1102 	mla	r1, r9, r2, r1
 80097ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80097ce:	4567      	cmp	r7, ip
 80097d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097d4:	d8e6      	bhi.n	80097a4 <__multiply+0x10c>
 80097d6:	9a01      	ldr	r2, [sp, #4]
 80097d8:	50a9      	str	r1, [r5, r2]
 80097da:	3504      	adds	r5, #4
 80097dc:	e79a      	b.n	8009714 <__multiply+0x7c>
 80097de:	3e01      	subs	r6, #1
 80097e0:	e79c      	b.n	800971c <__multiply+0x84>
 80097e2:	bf00      	nop
 80097e4:	0800ba28 	.word	0x0800ba28
 80097e8:	0800bb18 	.word	0x0800bb18

080097ec <__pow5mult>:
 80097ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f0:	4615      	mov	r5, r2
 80097f2:	f012 0203 	ands.w	r2, r2, #3
 80097f6:	4606      	mov	r6, r0
 80097f8:	460f      	mov	r7, r1
 80097fa:	d007      	beq.n	800980c <__pow5mult+0x20>
 80097fc:	4c25      	ldr	r4, [pc, #148]	; (8009894 <__pow5mult+0xa8>)
 80097fe:	3a01      	subs	r2, #1
 8009800:	2300      	movs	r3, #0
 8009802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009806:	f7ff fe51 	bl	80094ac <__multadd>
 800980a:	4607      	mov	r7, r0
 800980c:	10ad      	asrs	r5, r5, #2
 800980e:	d03d      	beq.n	800988c <__pow5mult+0xa0>
 8009810:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009812:	b97c      	cbnz	r4, 8009834 <__pow5mult+0x48>
 8009814:	2010      	movs	r0, #16
 8009816:	f7ff fdbf 	bl	8009398 <malloc>
 800981a:	4602      	mov	r2, r0
 800981c:	6270      	str	r0, [r6, #36]	; 0x24
 800981e:	b928      	cbnz	r0, 800982c <__pow5mult+0x40>
 8009820:	4b1d      	ldr	r3, [pc, #116]	; (8009898 <__pow5mult+0xac>)
 8009822:	481e      	ldr	r0, [pc, #120]	; (800989c <__pow5mult+0xb0>)
 8009824:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009828:	f000 fedc 	bl	800a5e4 <__assert_func>
 800982c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009830:	6004      	str	r4, [r0, #0]
 8009832:	60c4      	str	r4, [r0, #12]
 8009834:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800983c:	b94c      	cbnz	r4, 8009852 <__pow5mult+0x66>
 800983e:	f240 2171 	movw	r1, #625	; 0x271
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff12 	bl	800966c <__i2b>
 8009848:	2300      	movs	r3, #0
 800984a:	f8c8 0008 	str.w	r0, [r8, #8]
 800984e:	4604      	mov	r4, r0
 8009850:	6003      	str	r3, [r0, #0]
 8009852:	f04f 0900 	mov.w	r9, #0
 8009856:	07eb      	lsls	r3, r5, #31
 8009858:	d50a      	bpl.n	8009870 <__pow5mult+0x84>
 800985a:	4639      	mov	r1, r7
 800985c:	4622      	mov	r2, r4
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff1a 	bl	8009698 <__multiply>
 8009864:	4639      	mov	r1, r7
 8009866:	4680      	mov	r8, r0
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff fdfd 	bl	8009468 <_Bfree>
 800986e:	4647      	mov	r7, r8
 8009870:	106d      	asrs	r5, r5, #1
 8009872:	d00b      	beq.n	800988c <__pow5mult+0xa0>
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	b938      	cbnz	r0, 8009888 <__pow5mult+0x9c>
 8009878:	4622      	mov	r2, r4
 800987a:	4621      	mov	r1, r4
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff ff0b 	bl	8009698 <__multiply>
 8009882:	6020      	str	r0, [r4, #0]
 8009884:	f8c0 9000 	str.w	r9, [r0]
 8009888:	4604      	mov	r4, r0
 800988a:	e7e4      	b.n	8009856 <__pow5mult+0x6a>
 800988c:	4638      	mov	r0, r7
 800988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009892:	bf00      	nop
 8009894:	0800bc68 	.word	0x0800bc68
 8009898:	0800b9b6 	.word	0x0800b9b6
 800989c:	0800bb18 	.word	0x0800bb18

080098a0 <__lshift>:
 80098a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a4:	460c      	mov	r4, r1
 80098a6:	6849      	ldr	r1, [r1, #4]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	4607      	mov	r7, r0
 80098b2:	4691      	mov	r9, r2
 80098b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098b8:	f108 0601 	add.w	r6, r8, #1
 80098bc:	42b3      	cmp	r3, r6
 80098be:	db0b      	blt.n	80098d8 <__lshift+0x38>
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff fd91 	bl	80093e8 <_Balloc>
 80098c6:	4605      	mov	r5, r0
 80098c8:	b948      	cbnz	r0, 80098de <__lshift+0x3e>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b2a      	ldr	r3, [pc, #168]	; (8009978 <__lshift+0xd8>)
 80098ce:	482b      	ldr	r0, [pc, #172]	; (800997c <__lshift+0xdc>)
 80098d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80098d4:	f000 fe86 	bl	800a5e4 <__assert_func>
 80098d8:	3101      	adds	r1, #1
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	e7ee      	b.n	80098bc <__lshift+0x1c>
 80098de:	2300      	movs	r3, #0
 80098e0:	f100 0114 	add.w	r1, r0, #20
 80098e4:	f100 0210 	add.w	r2, r0, #16
 80098e8:	4618      	mov	r0, r3
 80098ea:	4553      	cmp	r3, sl
 80098ec:	db37      	blt.n	800995e <__lshift+0xbe>
 80098ee:	6920      	ldr	r0, [r4, #16]
 80098f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098f4:	f104 0314 	add.w	r3, r4, #20
 80098f8:	f019 091f 	ands.w	r9, r9, #31
 80098fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009900:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009904:	d02f      	beq.n	8009966 <__lshift+0xc6>
 8009906:	f1c9 0e20 	rsb	lr, r9, #32
 800990a:	468a      	mov	sl, r1
 800990c:	f04f 0c00 	mov.w	ip, #0
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	fa02 f209 	lsl.w	r2, r2, r9
 8009916:	ea42 020c 	orr.w	r2, r2, ip
 800991a:	f84a 2b04 	str.w	r2, [sl], #4
 800991e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009922:	4298      	cmp	r0, r3
 8009924:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009928:	d8f2      	bhi.n	8009910 <__lshift+0x70>
 800992a:	1b03      	subs	r3, r0, r4
 800992c:	3b15      	subs	r3, #21
 800992e:	f023 0303 	bic.w	r3, r3, #3
 8009932:	3304      	adds	r3, #4
 8009934:	f104 0215 	add.w	r2, r4, #21
 8009938:	4290      	cmp	r0, r2
 800993a:	bf38      	it	cc
 800993c:	2304      	movcc	r3, #4
 800993e:	f841 c003 	str.w	ip, [r1, r3]
 8009942:	f1bc 0f00 	cmp.w	ip, #0
 8009946:	d001      	beq.n	800994c <__lshift+0xac>
 8009948:	f108 0602 	add.w	r6, r8, #2
 800994c:	3e01      	subs	r6, #1
 800994e:	4638      	mov	r0, r7
 8009950:	612e      	str	r6, [r5, #16]
 8009952:	4621      	mov	r1, r4
 8009954:	f7ff fd88 	bl	8009468 <_Bfree>
 8009958:	4628      	mov	r0, r5
 800995a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800995e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009962:	3301      	adds	r3, #1
 8009964:	e7c1      	b.n	80098ea <__lshift+0x4a>
 8009966:	3904      	subs	r1, #4
 8009968:	f853 2b04 	ldr.w	r2, [r3], #4
 800996c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009970:	4298      	cmp	r0, r3
 8009972:	d8f9      	bhi.n	8009968 <__lshift+0xc8>
 8009974:	e7ea      	b.n	800994c <__lshift+0xac>
 8009976:	bf00      	nop
 8009978:	0800ba28 	.word	0x0800ba28
 800997c:	0800bb18 	.word	0x0800bb18

08009980 <__mcmp>:
 8009980:	b530      	push	{r4, r5, lr}
 8009982:	6902      	ldr	r2, [r0, #16]
 8009984:	690c      	ldr	r4, [r1, #16]
 8009986:	1b12      	subs	r2, r2, r4
 8009988:	d10e      	bne.n	80099a8 <__mcmp+0x28>
 800998a:	f100 0314 	add.w	r3, r0, #20
 800998e:	3114      	adds	r1, #20
 8009990:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009994:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009998:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800999c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099a0:	42a5      	cmp	r5, r4
 80099a2:	d003      	beq.n	80099ac <__mcmp+0x2c>
 80099a4:	d305      	bcc.n	80099b2 <__mcmp+0x32>
 80099a6:	2201      	movs	r2, #1
 80099a8:	4610      	mov	r0, r2
 80099aa:	bd30      	pop	{r4, r5, pc}
 80099ac:	4283      	cmp	r3, r0
 80099ae:	d3f3      	bcc.n	8009998 <__mcmp+0x18>
 80099b0:	e7fa      	b.n	80099a8 <__mcmp+0x28>
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b6:	e7f7      	b.n	80099a8 <__mcmp+0x28>

080099b8 <__mdiff>:
 80099b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	460c      	mov	r4, r1
 80099be:	4606      	mov	r6, r0
 80099c0:	4611      	mov	r1, r2
 80099c2:	4620      	mov	r0, r4
 80099c4:	4690      	mov	r8, r2
 80099c6:	f7ff ffdb 	bl	8009980 <__mcmp>
 80099ca:	1e05      	subs	r5, r0, #0
 80099cc:	d110      	bne.n	80099f0 <__mdiff+0x38>
 80099ce:	4629      	mov	r1, r5
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff fd09 	bl	80093e8 <_Balloc>
 80099d6:	b930      	cbnz	r0, 80099e6 <__mdiff+0x2e>
 80099d8:	4b3a      	ldr	r3, [pc, #232]	; (8009ac4 <__mdiff+0x10c>)
 80099da:	4602      	mov	r2, r0
 80099dc:	f240 2132 	movw	r1, #562	; 0x232
 80099e0:	4839      	ldr	r0, [pc, #228]	; (8009ac8 <__mdiff+0x110>)
 80099e2:	f000 fdff 	bl	800a5e4 <__assert_func>
 80099e6:	2301      	movs	r3, #1
 80099e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	bfa4      	itt	ge
 80099f2:	4643      	movge	r3, r8
 80099f4:	46a0      	movge	r8, r4
 80099f6:	4630      	mov	r0, r6
 80099f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099fc:	bfa6      	itte	ge
 80099fe:	461c      	movge	r4, r3
 8009a00:	2500      	movge	r5, #0
 8009a02:	2501      	movlt	r5, #1
 8009a04:	f7ff fcf0 	bl	80093e8 <_Balloc>
 8009a08:	b920      	cbnz	r0, 8009a14 <__mdiff+0x5c>
 8009a0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ac4 <__mdiff+0x10c>)
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a12:	e7e5      	b.n	80099e0 <__mdiff+0x28>
 8009a14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a18:	6926      	ldr	r6, [r4, #16]
 8009a1a:	60c5      	str	r5, [r0, #12]
 8009a1c:	f104 0914 	add.w	r9, r4, #20
 8009a20:	f108 0514 	add.w	r5, r8, #20
 8009a24:	f100 0e14 	add.w	lr, r0, #20
 8009a28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a30:	f108 0210 	add.w	r2, r8, #16
 8009a34:	46f2      	mov	sl, lr
 8009a36:	2100      	movs	r1, #0
 8009a38:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a40:	fa1f f883 	uxth.w	r8, r3
 8009a44:	fa11 f18b 	uxtah	r1, r1, fp
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	eba1 0808 	sub.w	r8, r1, r8
 8009a4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a56:	fa1f f888 	uxth.w	r8, r8
 8009a5a:	1419      	asrs	r1, r3, #16
 8009a5c:	454e      	cmp	r6, r9
 8009a5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a62:	f84a 3b04 	str.w	r3, [sl], #4
 8009a66:	d8e7      	bhi.n	8009a38 <__mdiff+0x80>
 8009a68:	1b33      	subs	r3, r6, r4
 8009a6a:	3b15      	subs	r3, #21
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	3304      	adds	r3, #4
 8009a72:	3415      	adds	r4, #21
 8009a74:	42a6      	cmp	r6, r4
 8009a76:	bf38      	it	cc
 8009a78:	2304      	movcc	r3, #4
 8009a7a:	441d      	add	r5, r3
 8009a7c:	4473      	add	r3, lr
 8009a7e:	469e      	mov	lr, r3
 8009a80:	462e      	mov	r6, r5
 8009a82:	4566      	cmp	r6, ip
 8009a84:	d30e      	bcc.n	8009aa4 <__mdiff+0xec>
 8009a86:	f10c 0203 	add.w	r2, ip, #3
 8009a8a:	1b52      	subs	r2, r2, r5
 8009a8c:	f022 0203 	bic.w	r2, r2, #3
 8009a90:	3d03      	subs	r5, #3
 8009a92:	45ac      	cmp	ip, r5
 8009a94:	bf38      	it	cc
 8009a96:	2200      	movcc	r2, #0
 8009a98:	441a      	add	r2, r3
 8009a9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a9e:	b17b      	cbz	r3, 8009ac0 <__mdiff+0x108>
 8009aa0:	6107      	str	r7, [r0, #16]
 8009aa2:	e7a3      	b.n	80099ec <__mdiff+0x34>
 8009aa4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009aa8:	fa11 f288 	uxtah	r2, r1, r8
 8009aac:	1414      	asrs	r4, r2, #16
 8009aae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ab2:	b292      	uxth	r2, r2
 8009ab4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ab8:	f84e 2b04 	str.w	r2, [lr], #4
 8009abc:	1421      	asrs	r1, r4, #16
 8009abe:	e7e0      	b.n	8009a82 <__mdiff+0xca>
 8009ac0:	3f01      	subs	r7, #1
 8009ac2:	e7ea      	b.n	8009a9a <__mdiff+0xe2>
 8009ac4:	0800ba28 	.word	0x0800ba28
 8009ac8:	0800bb18 	.word	0x0800bb18

08009acc <__ulp>:
 8009acc:	b082      	sub	sp, #8
 8009ace:	ed8d 0b00 	vstr	d0, [sp]
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	4912      	ldr	r1, [pc, #72]	; (8009b20 <__ulp+0x54>)
 8009ad6:	4019      	ands	r1, r3
 8009ad8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009adc:	2900      	cmp	r1, #0
 8009ade:	dd05      	ble.n	8009aec <__ulp+0x20>
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	ec43 2b10 	vmov	d0, r2, r3
 8009ae8:	b002      	add	sp, #8
 8009aea:	4770      	bx	lr
 8009aec:	4249      	negs	r1, r1
 8009aee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009af2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009af6:	f04f 0200 	mov.w	r2, #0
 8009afa:	f04f 0300 	mov.w	r3, #0
 8009afe:	da04      	bge.n	8009b0a <__ulp+0x3e>
 8009b00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b04:	fa41 f300 	asr.w	r3, r1, r0
 8009b08:	e7ec      	b.n	8009ae4 <__ulp+0x18>
 8009b0a:	f1a0 0114 	sub.w	r1, r0, #20
 8009b0e:	291e      	cmp	r1, #30
 8009b10:	bfda      	itte	le
 8009b12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b16:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b1a:	2101      	movgt	r1, #1
 8009b1c:	460a      	mov	r2, r1
 8009b1e:	e7e1      	b.n	8009ae4 <__ulp+0x18>
 8009b20:	7ff00000 	.word	0x7ff00000

08009b24 <__b2d>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	6905      	ldr	r5, [r0, #16]
 8009b28:	f100 0714 	add.w	r7, r0, #20
 8009b2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b30:	1f2e      	subs	r6, r5, #4
 8009b32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b36:	4620      	mov	r0, r4
 8009b38:	f7ff fd48 	bl	80095cc <__hi0bits>
 8009b3c:	f1c0 0320 	rsb	r3, r0, #32
 8009b40:	280a      	cmp	r0, #10
 8009b42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009bc0 <__b2d+0x9c>
 8009b46:	600b      	str	r3, [r1, #0]
 8009b48:	dc14      	bgt.n	8009b74 <__b2d+0x50>
 8009b4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b52:	42b7      	cmp	r7, r6
 8009b54:	ea41 030c 	orr.w	r3, r1, ip
 8009b58:	bf34      	ite	cc
 8009b5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b5e:	2100      	movcs	r1, #0
 8009b60:	3015      	adds	r0, #21
 8009b62:	fa04 f000 	lsl.w	r0, r4, r0
 8009b66:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b6a:	ea40 0201 	orr.w	r2, r0, r1
 8009b6e:	ec43 2b10 	vmov	d0, r2, r3
 8009b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b74:	42b7      	cmp	r7, r6
 8009b76:	bf3a      	itte	cc
 8009b78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b80:	2100      	movcs	r1, #0
 8009b82:	380b      	subs	r0, #11
 8009b84:	d017      	beq.n	8009bb6 <__b2d+0x92>
 8009b86:	f1c0 0c20 	rsb	ip, r0, #32
 8009b8a:	fa04 f500 	lsl.w	r5, r4, r0
 8009b8e:	42be      	cmp	r6, r7
 8009b90:	fa21 f40c 	lsr.w	r4, r1, ip
 8009b94:	ea45 0504 	orr.w	r5, r5, r4
 8009b98:	bf8c      	ite	hi
 8009b9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b9e:	2400      	movls	r4, #0
 8009ba0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009ba4:	fa01 f000 	lsl.w	r0, r1, r0
 8009ba8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009bac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bb0:	ea40 0204 	orr.w	r2, r0, r4
 8009bb4:	e7db      	b.n	8009b6e <__b2d+0x4a>
 8009bb6:	ea44 030c 	orr.w	r3, r4, ip
 8009bba:	460a      	mov	r2, r1
 8009bbc:	e7d7      	b.n	8009b6e <__b2d+0x4a>
 8009bbe:	bf00      	nop
 8009bc0:	3ff00000 	.word	0x3ff00000

08009bc4 <__d2b>:
 8009bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	4689      	mov	r9, r1
 8009bca:	2101      	movs	r1, #1
 8009bcc:	ec57 6b10 	vmov	r6, r7, d0
 8009bd0:	4690      	mov	r8, r2
 8009bd2:	f7ff fc09 	bl	80093e8 <_Balloc>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	b930      	cbnz	r0, 8009be8 <__d2b+0x24>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <__d2b+0xb0>)
 8009bde:	4826      	ldr	r0, [pc, #152]	; (8009c78 <__d2b+0xb4>)
 8009be0:	f240 310a 	movw	r1, #778	; 0x30a
 8009be4:	f000 fcfe 	bl	800a5e4 <__assert_func>
 8009be8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bf0:	bb35      	cbnz	r5, 8009c40 <__d2b+0x7c>
 8009bf2:	2e00      	cmp	r6, #0
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	d028      	beq.n	8009c4a <__d2b+0x86>
 8009bf8:	4668      	mov	r0, sp
 8009bfa:	9600      	str	r6, [sp, #0]
 8009bfc:	f7ff fd06 	bl	800960c <__lo0bits>
 8009c00:	9900      	ldr	r1, [sp, #0]
 8009c02:	b300      	cbz	r0, 8009c46 <__d2b+0x82>
 8009c04:	9a01      	ldr	r2, [sp, #4]
 8009c06:	f1c0 0320 	rsb	r3, r0, #32
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	40c2      	lsrs	r2, r0
 8009c12:	6163      	str	r3, [r4, #20]
 8009c14:	9201      	str	r2, [sp, #4]
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	61a3      	str	r3, [r4, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	bf14      	ite	ne
 8009c1e:	2202      	movne	r2, #2
 8009c20:	2201      	moveq	r2, #1
 8009c22:	6122      	str	r2, [r4, #16]
 8009c24:	b1d5      	cbz	r5, 8009c5c <__d2b+0x98>
 8009c26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c2a:	4405      	add	r5, r0
 8009c2c:	f8c9 5000 	str.w	r5, [r9]
 8009c30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c34:	f8c8 0000 	str.w	r0, [r8]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	b003      	add	sp, #12
 8009c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c44:	e7d5      	b.n	8009bf2 <__d2b+0x2e>
 8009c46:	6161      	str	r1, [r4, #20]
 8009c48:	e7e5      	b.n	8009c16 <__d2b+0x52>
 8009c4a:	a801      	add	r0, sp, #4
 8009c4c:	f7ff fcde 	bl	800960c <__lo0bits>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	6163      	str	r3, [r4, #20]
 8009c54:	2201      	movs	r2, #1
 8009c56:	6122      	str	r2, [r4, #16]
 8009c58:	3020      	adds	r0, #32
 8009c5a:	e7e3      	b.n	8009c24 <__d2b+0x60>
 8009c5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c64:	f8c9 0000 	str.w	r0, [r9]
 8009c68:	6918      	ldr	r0, [r3, #16]
 8009c6a:	f7ff fcaf 	bl	80095cc <__hi0bits>
 8009c6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c72:	e7df      	b.n	8009c34 <__d2b+0x70>
 8009c74:	0800ba28 	.word	0x0800ba28
 8009c78:	0800bb18 	.word	0x0800bb18

08009c7c <__ratio>:
 8009c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	4688      	mov	r8, r1
 8009c82:	4669      	mov	r1, sp
 8009c84:	4681      	mov	r9, r0
 8009c86:	f7ff ff4d 	bl	8009b24 <__b2d>
 8009c8a:	a901      	add	r1, sp, #4
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	ec55 4b10 	vmov	r4, r5, d0
 8009c92:	f7ff ff47 	bl	8009b24 <__b2d>
 8009c96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c9e:	eba3 0c02 	sub.w	ip, r3, r2
 8009ca2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ca6:	1a9b      	subs	r3, r3, r2
 8009ca8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cac:	ec51 0b10 	vmov	r0, r1, d0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfd6      	itet	le
 8009cb4:	460a      	movle	r2, r1
 8009cb6:	462a      	movgt	r2, r5
 8009cb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cbc:	468b      	mov	fp, r1
 8009cbe:	462f      	mov	r7, r5
 8009cc0:	bfd4      	ite	le
 8009cc2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cca:	4620      	mov	r0, r4
 8009ccc:	ee10 2a10 	vmov	r2, s0
 8009cd0:	465b      	mov	r3, fp
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 fdea 	bl	80008ac <__aeabi_ddiv>
 8009cd8:	ec41 0b10 	vmov	d0, r0, r1
 8009cdc:	b003      	add	sp, #12
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ce2 <__copybits>:
 8009ce2:	3901      	subs	r1, #1
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	1149      	asrs	r1, r1, #5
 8009ce8:	6914      	ldr	r4, [r2, #16]
 8009cea:	3101      	adds	r1, #1
 8009cec:	f102 0314 	add.w	r3, r2, #20
 8009cf0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cf4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cf8:	1f05      	subs	r5, r0, #4
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	d30c      	bcc.n	8009d18 <__copybits+0x36>
 8009cfe:	1aa3      	subs	r3, r4, r2
 8009d00:	3b11      	subs	r3, #17
 8009d02:	f023 0303 	bic.w	r3, r3, #3
 8009d06:	3211      	adds	r2, #17
 8009d08:	42a2      	cmp	r2, r4
 8009d0a:	bf88      	it	hi
 8009d0c:	2300      	movhi	r3, #0
 8009d0e:	4418      	add	r0, r3
 8009d10:	2300      	movs	r3, #0
 8009d12:	4288      	cmp	r0, r1
 8009d14:	d305      	bcc.n	8009d22 <__copybits+0x40>
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d1c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d20:	e7eb      	b.n	8009cfa <__copybits+0x18>
 8009d22:	f840 3b04 	str.w	r3, [r0], #4
 8009d26:	e7f4      	b.n	8009d12 <__copybits+0x30>

08009d28 <__any_on>:
 8009d28:	f100 0214 	add.w	r2, r0, #20
 8009d2c:	6900      	ldr	r0, [r0, #16]
 8009d2e:	114b      	asrs	r3, r1, #5
 8009d30:	4298      	cmp	r0, r3
 8009d32:	b510      	push	{r4, lr}
 8009d34:	db11      	blt.n	8009d5a <__any_on+0x32>
 8009d36:	dd0a      	ble.n	8009d4e <__any_on+0x26>
 8009d38:	f011 011f 	ands.w	r1, r1, #31
 8009d3c:	d007      	beq.n	8009d4e <__any_on+0x26>
 8009d3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d42:	fa24 f001 	lsr.w	r0, r4, r1
 8009d46:	fa00 f101 	lsl.w	r1, r0, r1
 8009d4a:	428c      	cmp	r4, r1
 8009d4c:	d10b      	bne.n	8009d66 <__any_on+0x3e>
 8009d4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d803      	bhi.n	8009d5e <__any_on+0x36>
 8009d56:	2000      	movs	r0, #0
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	e7f7      	b.n	8009d4e <__any_on+0x26>
 8009d5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d62:	2900      	cmp	r1, #0
 8009d64:	d0f5      	beq.n	8009d52 <__any_on+0x2a>
 8009d66:	2001      	movs	r0, #1
 8009d68:	e7f6      	b.n	8009d58 <__any_on+0x30>

08009d6a <_calloc_r>:
 8009d6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d6c:	fba1 2402 	umull	r2, r4, r1, r2
 8009d70:	b94c      	cbnz	r4, 8009d86 <_calloc_r+0x1c>
 8009d72:	4611      	mov	r1, r2
 8009d74:	9201      	str	r2, [sp, #4]
 8009d76:	f000 f87b 	bl	8009e70 <_malloc_r>
 8009d7a:	9a01      	ldr	r2, [sp, #4]
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	b930      	cbnz	r0, 8009d8e <_calloc_r+0x24>
 8009d80:	4628      	mov	r0, r5
 8009d82:	b003      	add	sp, #12
 8009d84:	bd30      	pop	{r4, r5, pc}
 8009d86:	220c      	movs	r2, #12
 8009d88:	6002      	str	r2, [r0, #0]
 8009d8a:	2500      	movs	r5, #0
 8009d8c:	e7f8      	b.n	8009d80 <_calloc_r+0x16>
 8009d8e:	4621      	mov	r1, r4
 8009d90:	f7fc f852 	bl	8005e38 <memset>
 8009d94:	e7f4      	b.n	8009d80 <_calloc_r+0x16>
	...

08009d98 <_free_r>:
 8009d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d044      	beq.n	8009e28 <_free_r+0x90>
 8009d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da2:	9001      	str	r0, [sp, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f1a1 0404 	sub.w	r4, r1, #4
 8009daa:	bfb8      	it	lt
 8009dac:	18e4      	addlt	r4, r4, r3
 8009dae:	f000 fca7 	bl	800a700 <__malloc_lock>
 8009db2:	4a1e      	ldr	r2, [pc, #120]	; (8009e2c <_free_r+0x94>)
 8009db4:	9801      	ldr	r0, [sp, #4]
 8009db6:	6813      	ldr	r3, [r2, #0]
 8009db8:	b933      	cbnz	r3, 8009dc8 <_free_r+0x30>
 8009dba:	6063      	str	r3, [r4, #4]
 8009dbc:	6014      	str	r4, [r2, #0]
 8009dbe:	b003      	add	sp, #12
 8009dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dc4:	f000 bca2 	b.w	800a70c <__malloc_unlock>
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d908      	bls.n	8009dde <_free_r+0x46>
 8009dcc:	6825      	ldr	r5, [r4, #0]
 8009dce:	1961      	adds	r1, r4, r5
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	bf01      	itttt	eq
 8009dd4:	6819      	ldreq	r1, [r3, #0]
 8009dd6:	685b      	ldreq	r3, [r3, #4]
 8009dd8:	1949      	addeq	r1, r1, r5
 8009dda:	6021      	streq	r1, [r4, #0]
 8009ddc:	e7ed      	b.n	8009dba <_free_r+0x22>
 8009dde:	461a      	mov	r2, r3
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	b10b      	cbz	r3, 8009de8 <_free_r+0x50>
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	d9fa      	bls.n	8009dde <_free_r+0x46>
 8009de8:	6811      	ldr	r1, [r2, #0]
 8009dea:	1855      	adds	r5, r2, r1
 8009dec:	42a5      	cmp	r5, r4
 8009dee:	d10b      	bne.n	8009e08 <_free_r+0x70>
 8009df0:	6824      	ldr	r4, [r4, #0]
 8009df2:	4421      	add	r1, r4
 8009df4:	1854      	adds	r4, r2, r1
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	6011      	str	r1, [r2, #0]
 8009dfa:	d1e0      	bne.n	8009dbe <_free_r+0x26>
 8009dfc:	681c      	ldr	r4, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	6053      	str	r3, [r2, #4]
 8009e02:	4421      	add	r1, r4
 8009e04:	6011      	str	r1, [r2, #0]
 8009e06:	e7da      	b.n	8009dbe <_free_r+0x26>
 8009e08:	d902      	bls.n	8009e10 <_free_r+0x78>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	e7d6      	b.n	8009dbe <_free_r+0x26>
 8009e10:	6825      	ldr	r5, [r4, #0]
 8009e12:	1961      	adds	r1, r4, r5
 8009e14:	428b      	cmp	r3, r1
 8009e16:	bf04      	itt	eq
 8009e18:	6819      	ldreq	r1, [r3, #0]
 8009e1a:	685b      	ldreq	r3, [r3, #4]
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	bf04      	itt	eq
 8009e20:	1949      	addeq	r1, r1, r5
 8009e22:	6021      	streq	r1, [r4, #0]
 8009e24:	6054      	str	r4, [r2, #4]
 8009e26:	e7ca      	b.n	8009dbe <_free_r+0x26>
 8009e28:	b003      	add	sp, #12
 8009e2a:	bd30      	pop	{r4, r5, pc}
 8009e2c:	20000374 	.word	0x20000374

08009e30 <sbrk_aligned>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	4e0e      	ldr	r6, [pc, #56]	; (8009e6c <sbrk_aligned+0x3c>)
 8009e34:	460c      	mov	r4, r1
 8009e36:	6831      	ldr	r1, [r6, #0]
 8009e38:	4605      	mov	r5, r0
 8009e3a:	b911      	cbnz	r1, 8009e42 <sbrk_aligned+0x12>
 8009e3c:	f000 fb4c 	bl	800a4d8 <_sbrk_r>
 8009e40:	6030      	str	r0, [r6, #0]
 8009e42:	4621      	mov	r1, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 fb47 	bl	800a4d8 <_sbrk_r>
 8009e4a:	1c43      	adds	r3, r0, #1
 8009e4c:	d00a      	beq.n	8009e64 <sbrk_aligned+0x34>
 8009e4e:	1cc4      	adds	r4, r0, #3
 8009e50:	f024 0403 	bic.w	r4, r4, #3
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d007      	beq.n	8009e68 <sbrk_aligned+0x38>
 8009e58:	1a21      	subs	r1, r4, r0
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 fb3c 	bl	800a4d8 <_sbrk_r>
 8009e60:	3001      	adds	r0, #1
 8009e62:	d101      	bne.n	8009e68 <sbrk_aligned+0x38>
 8009e64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009e68:	4620      	mov	r0, r4
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}
 8009e6c:	20000378 	.word	0x20000378

08009e70 <_malloc_r>:
 8009e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e74:	1ccd      	adds	r5, r1, #3
 8009e76:	f025 0503 	bic.w	r5, r5, #3
 8009e7a:	3508      	adds	r5, #8
 8009e7c:	2d0c      	cmp	r5, #12
 8009e7e:	bf38      	it	cc
 8009e80:	250c      	movcc	r5, #12
 8009e82:	2d00      	cmp	r5, #0
 8009e84:	4607      	mov	r7, r0
 8009e86:	db01      	blt.n	8009e8c <_malloc_r+0x1c>
 8009e88:	42a9      	cmp	r1, r5
 8009e8a:	d905      	bls.n	8009e98 <_malloc_r+0x28>
 8009e8c:	230c      	movs	r3, #12
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	2600      	movs	r6, #0
 8009e92:	4630      	mov	r0, r6
 8009e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e98:	4e2e      	ldr	r6, [pc, #184]	; (8009f54 <_malloc_r+0xe4>)
 8009e9a:	f000 fc31 	bl	800a700 <__malloc_lock>
 8009e9e:	6833      	ldr	r3, [r6, #0]
 8009ea0:	461c      	mov	r4, r3
 8009ea2:	bb34      	cbnz	r4, 8009ef2 <_malloc_r+0x82>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	f7ff ffc2 	bl	8009e30 <sbrk_aligned>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	4604      	mov	r4, r0
 8009eb0:	d14d      	bne.n	8009f4e <_malloc_r+0xde>
 8009eb2:	6834      	ldr	r4, [r6, #0]
 8009eb4:	4626      	mov	r6, r4
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	d140      	bne.n	8009f3c <_malloc_r+0xcc>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	eb04 0803 	add.w	r8, r4, r3
 8009ec4:	f000 fb08 	bl	800a4d8 <_sbrk_r>
 8009ec8:	4580      	cmp	r8, r0
 8009eca:	d13a      	bne.n	8009f42 <_malloc_r+0xd2>
 8009ecc:	6821      	ldr	r1, [r4, #0]
 8009ece:	3503      	adds	r5, #3
 8009ed0:	1a6d      	subs	r5, r5, r1
 8009ed2:	f025 0503 	bic.w	r5, r5, #3
 8009ed6:	3508      	adds	r5, #8
 8009ed8:	2d0c      	cmp	r5, #12
 8009eda:	bf38      	it	cc
 8009edc:	250c      	movcc	r5, #12
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7ff ffa5 	bl	8009e30 <sbrk_aligned>
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d02b      	beq.n	8009f42 <_malloc_r+0xd2>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	442b      	add	r3, r5
 8009eee:	6023      	str	r3, [r4, #0]
 8009ef0:	e00e      	b.n	8009f10 <_malloc_r+0xa0>
 8009ef2:	6822      	ldr	r2, [r4, #0]
 8009ef4:	1b52      	subs	r2, r2, r5
 8009ef6:	d41e      	bmi.n	8009f36 <_malloc_r+0xc6>
 8009ef8:	2a0b      	cmp	r2, #11
 8009efa:	d916      	bls.n	8009f2a <_malloc_r+0xba>
 8009efc:	1961      	adds	r1, r4, r5
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	6025      	str	r5, [r4, #0]
 8009f02:	bf18      	it	ne
 8009f04:	6059      	strne	r1, [r3, #4]
 8009f06:	6863      	ldr	r3, [r4, #4]
 8009f08:	bf08      	it	eq
 8009f0a:	6031      	streq	r1, [r6, #0]
 8009f0c:	5162      	str	r2, [r4, r5]
 8009f0e:	604b      	str	r3, [r1, #4]
 8009f10:	4638      	mov	r0, r7
 8009f12:	f104 060b 	add.w	r6, r4, #11
 8009f16:	f000 fbf9 	bl	800a70c <__malloc_unlock>
 8009f1a:	f026 0607 	bic.w	r6, r6, #7
 8009f1e:	1d23      	adds	r3, r4, #4
 8009f20:	1af2      	subs	r2, r6, r3
 8009f22:	d0b6      	beq.n	8009e92 <_malloc_r+0x22>
 8009f24:	1b9b      	subs	r3, r3, r6
 8009f26:	50a3      	str	r3, [r4, r2]
 8009f28:	e7b3      	b.n	8009e92 <_malloc_r+0x22>
 8009f2a:	6862      	ldr	r2, [r4, #4]
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	bf0c      	ite	eq
 8009f30:	6032      	streq	r2, [r6, #0]
 8009f32:	605a      	strne	r2, [r3, #4]
 8009f34:	e7ec      	b.n	8009f10 <_malloc_r+0xa0>
 8009f36:	4623      	mov	r3, r4
 8009f38:	6864      	ldr	r4, [r4, #4]
 8009f3a:	e7b2      	b.n	8009ea2 <_malloc_r+0x32>
 8009f3c:	4634      	mov	r4, r6
 8009f3e:	6876      	ldr	r6, [r6, #4]
 8009f40:	e7b9      	b.n	8009eb6 <_malloc_r+0x46>
 8009f42:	230c      	movs	r3, #12
 8009f44:	603b      	str	r3, [r7, #0]
 8009f46:	4638      	mov	r0, r7
 8009f48:	f000 fbe0 	bl	800a70c <__malloc_unlock>
 8009f4c:	e7a1      	b.n	8009e92 <_malloc_r+0x22>
 8009f4e:	6025      	str	r5, [r4, #0]
 8009f50:	e7de      	b.n	8009f10 <_malloc_r+0xa0>
 8009f52:	bf00      	nop
 8009f54:	20000374 	.word	0x20000374

08009f58 <__ssputs_r>:
 8009f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f5c:	688e      	ldr	r6, [r1, #8]
 8009f5e:	429e      	cmp	r6, r3
 8009f60:	4682      	mov	sl, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	4690      	mov	r8, r2
 8009f66:	461f      	mov	r7, r3
 8009f68:	d838      	bhi.n	8009fdc <__ssputs_r+0x84>
 8009f6a:	898a      	ldrh	r2, [r1, #12]
 8009f6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f70:	d032      	beq.n	8009fd8 <__ssputs_r+0x80>
 8009f72:	6825      	ldr	r5, [r4, #0]
 8009f74:	6909      	ldr	r1, [r1, #16]
 8009f76:	eba5 0901 	sub.w	r9, r5, r1
 8009f7a:	6965      	ldr	r5, [r4, #20]
 8009f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f84:	3301      	adds	r3, #1
 8009f86:	444b      	add	r3, r9
 8009f88:	106d      	asrs	r5, r5, #1
 8009f8a:	429d      	cmp	r5, r3
 8009f8c:	bf38      	it	cc
 8009f8e:	461d      	movcc	r5, r3
 8009f90:	0553      	lsls	r3, r2, #21
 8009f92:	d531      	bpl.n	8009ff8 <__ssputs_r+0xa0>
 8009f94:	4629      	mov	r1, r5
 8009f96:	f7ff ff6b 	bl	8009e70 <_malloc_r>
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	b950      	cbnz	r0, 8009fb4 <__ssputs_r+0x5c>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	f8ca 3000 	str.w	r3, [sl]
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb4:	6921      	ldr	r1, [r4, #16]
 8009fb6:	464a      	mov	r2, r9
 8009fb8:	f7ff fa08 	bl	80093cc <memcpy>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	6126      	str	r6, [r4, #16]
 8009fca:	6165      	str	r5, [r4, #20]
 8009fcc:	444e      	add	r6, r9
 8009fce:	eba5 0509 	sub.w	r5, r5, r9
 8009fd2:	6026      	str	r6, [r4, #0]
 8009fd4:	60a5      	str	r5, [r4, #8]
 8009fd6:	463e      	mov	r6, r7
 8009fd8:	42be      	cmp	r6, r7
 8009fda:	d900      	bls.n	8009fde <__ssputs_r+0x86>
 8009fdc:	463e      	mov	r6, r7
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	f000 fb72 	bl	800a6cc <memmove>
 8009fe8:	68a3      	ldr	r3, [r4, #8]
 8009fea:	1b9b      	subs	r3, r3, r6
 8009fec:	60a3      	str	r3, [r4, #8]
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	4433      	add	r3, r6
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7db      	b.n	8009fb0 <__ssputs_r+0x58>
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	f000 fb8d 	bl	800a718 <_realloc_r>
 8009ffe:	4606      	mov	r6, r0
 800a000:	2800      	cmp	r0, #0
 800a002:	d1e1      	bne.n	8009fc8 <__ssputs_r+0x70>
 800a004:	6921      	ldr	r1, [r4, #16]
 800a006:	4650      	mov	r0, sl
 800a008:	f7ff fec6 	bl	8009d98 <_free_r>
 800a00c:	e7c7      	b.n	8009f9e <__ssputs_r+0x46>
	...

0800a010 <_svfiprintf_r>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	4698      	mov	r8, r3
 800a016:	898b      	ldrh	r3, [r1, #12]
 800a018:	061b      	lsls	r3, r3, #24
 800a01a:	b09d      	sub	sp, #116	; 0x74
 800a01c:	4607      	mov	r7, r0
 800a01e:	460d      	mov	r5, r1
 800a020:	4614      	mov	r4, r2
 800a022:	d50e      	bpl.n	800a042 <_svfiprintf_r+0x32>
 800a024:	690b      	ldr	r3, [r1, #16]
 800a026:	b963      	cbnz	r3, 800a042 <_svfiprintf_r+0x32>
 800a028:	2140      	movs	r1, #64	; 0x40
 800a02a:	f7ff ff21 	bl	8009e70 <_malloc_r>
 800a02e:	6028      	str	r0, [r5, #0]
 800a030:	6128      	str	r0, [r5, #16]
 800a032:	b920      	cbnz	r0, 800a03e <_svfiprintf_r+0x2e>
 800a034:	230c      	movs	r3, #12
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a03c:	e0d1      	b.n	800a1e2 <_svfiprintf_r+0x1d2>
 800a03e:	2340      	movs	r3, #64	; 0x40
 800a040:	616b      	str	r3, [r5, #20]
 800a042:	2300      	movs	r3, #0
 800a044:	9309      	str	r3, [sp, #36]	; 0x24
 800a046:	2320      	movs	r3, #32
 800a048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a050:	2330      	movs	r3, #48	; 0x30
 800a052:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1fc <_svfiprintf_r+0x1ec>
 800a056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05a:	f04f 0901 	mov.w	r9, #1
 800a05e:	4623      	mov	r3, r4
 800a060:	469a      	mov	sl, r3
 800a062:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a066:	b10a      	cbz	r2, 800a06c <_svfiprintf_r+0x5c>
 800a068:	2a25      	cmp	r2, #37	; 0x25
 800a06a:	d1f9      	bne.n	800a060 <_svfiprintf_r+0x50>
 800a06c:	ebba 0b04 	subs.w	fp, sl, r4
 800a070:	d00b      	beq.n	800a08a <_svfiprintf_r+0x7a>
 800a072:	465b      	mov	r3, fp
 800a074:	4622      	mov	r2, r4
 800a076:	4629      	mov	r1, r5
 800a078:	4638      	mov	r0, r7
 800a07a:	f7ff ff6d 	bl	8009f58 <__ssputs_r>
 800a07e:	3001      	adds	r0, #1
 800a080:	f000 80aa 	beq.w	800a1d8 <_svfiprintf_r+0x1c8>
 800a084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a086:	445a      	add	r2, fp
 800a088:	9209      	str	r2, [sp, #36]	; 0x24
 800a08a:	f89a 3000 	ldrb.w	r3, [sl]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f000 80a2 	beq.w	800a1d8 <_svfiprintf_r+0x1c8>
 800a094:	2300      	movs	r3, #0
 800a096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a09e:	f10a 0a01 	add.w	sl, sl, #1
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	9307      	str	r3, [sp, #28]
 800a0a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ac:	4654      	mov	r4, sl
 800a0ae:	2205      	movs	r2, #5
 800a0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b4:	4851      	ldr	r0, [pc, #324]	; (800a1fc <_svfiprintf_r+0x1ec>)
 800a0b6:	f7f6 f8c3 	bl	8000240 <memchr>
 800a0ba:	9a04      	ldr	r2, [sp, #16]
 800a0bc:	b9d8      	cbnz	r0, 800a0f6 <_svfiprintf_r+0xe6>
 800a0be:	06d0      	lsls	r0, r2, #27
 800a0c0:	bf44      	itt	mi
 800a0c2:	2320      	movmi	r3, #32
 800a0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c8:	0711      	lsls	r1, r2, #28
 800a0ca:	bf44      	itt	mi
 800a0cc:	232b      	movmi	r3, #43	; 0x2b
 800a0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d8:	d015      	beq.n	800a106 <_svfiprintf_r+0xf6>
 800a0da:	9a07      	ldr	r2, [sp, #28]
 800a0dc:	4654      	mov	r4, sl
 800a0de:	2000      	movs	r0, #0
 800a0e0:	f04f 0c0a 	mov.w	ip, #10
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ea:	3b30      	subs	r3, #48	; 0x30
 800a0ec:	2b09      	cmp	r3, #9
 800a0ee:	d94e      	bls.n	800a18e <_svfiprintf_r+0x17e>
 800a0f0:	b1b0      	cbz	r0, 800a120 <_svfiprintf_r+0x110>
 800a0f2:	9207      	str	r2, [sp, #28]
 800a0f4:	e014      	b.n	800a120 <_svfiprintf_r+0x110>
 800a0f6:	eba0 0308 	sub.w	r3, r0, r8
 800a0fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a0fe:	4313      	orrs	r3, r2
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	46a2      	mov	sl, r4
 800a104:	e7d2      	b.n	800a0ac <_svfiprintf_r+0x9c>
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	1d19      	adds	r1, r3, #4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	9103      	str	r1, [sp, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	bfbb      	ittet	lt
 800a112:	425b      	neglt	r3, r3
 800a114:	f042 0202 	orrlt.w	r2, r2, #2
 800a118:	9307      	strge	r3, [sp, #28]
 800a11a:	9307      	strlt	r3, [sp, #28]
 800a11c:	bfb8      	it	lt
 800a11e:	9204      	strlt	r2, [sp, #16]
 800a120:	7823      	ldrb	r3, [r4, #0]
 800a122:	2b2e      	cmp	r3, #46	; 0x2e
 800a124:	d10c      	bne.n	800a140 <_svfiprintf_r+0x130>
 800a126:	7863      	ldrb	r3, [r4, #1]
 800a128:	2b2a      	cmp	r3, #42	; 0x2a
 800a12a:	d135      	bne.n	800a198 <_svfiprintf_r+0x188>
 800a12c:	9b03      	ldr	r3, [sp, #12]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	9203      	str	r2, [sp, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	bfb8      	it	lt
 800a138:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a13c:	3402      	adds	r4, #2
 800a13e:	9305      	str	r3, [sp, #20]
 800a140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a20c <_svfiprintf_r+0x1fc>
 800a144:	7821      	ldrb	r1, [r4, #0]
 800a146:	2203      	movs	r2, #3
 800a148:	4650      	mov	r0, sl
 800a14a:	f7f6 f879 	bl	8000240 <memchr>
 800a14e:	b140      	cbz	r0, 800a162 <_svfiprintf_r+0x152>
 800a150:	2340      	movs	r3, #64	; 0x40
 800a152:	eba0 000a 	sub.w	r0, r0, sl
 800a156:	fa03 f000 	lsl.w	r0, r3, r0
 800a15a:	9b04      	ldr	r3, [sp, #16]
 800a15c:	4303      	orrs	r3, r0
 800a15e:	3401      	adds	r4, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a166:	4826      	ldr	r0, [pc, #152]	; (800a200 <_svfiprintf_r+0x1f0>)
 800a168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16c:	2206      	movs	r2, #6
 800a16e:	f7f6 f867 	bl	8000240 <memchr>
 800a172:	2800      	cmp	r0, #0
 800a174:	d038      	beq.n	800a1e8 <_svfiprintf_r+0x1d8>
 800a176:	4b23      	ldr	r3, [pc, #140]	; (800a204 <_svfiprintf_r+0x1f4>)
 800a178:	bb1b      	cbnz	r3, 800a1c2 <_svfiprintf_r+0x1b2>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	3307      	adds	r3, #7
 800a17e:	f023 0307 	bic.w	r3, r3, #7
 800a182:	3308      	adds	r3, #8
 800a184:	9303      	str	r3, [sp, #12]
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	4433      	add	r3, r6
 800a18a:	9309      	str	r3, [sp, #36]	; 0x24
 800a18c:	e767      	b.n	800a05e <_svfiprintf_r+0x4e>
 800a18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a192:	460c      	mov	r4, r1
 800a194:	2001      	movs	r0, #1
 800a196:	e7a5      	b.n	800a0e4 <_svfiprintf_r+0xd4>
 800a198:	2300      	movs	r3, #0
 800a19a:	3401      	adds	r4, #1
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f04f 0c0a 	mov.w	ip, #10
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1aa:	3a30      	subs	r2, #48	; 0x30
 800a1ac:	2a09      	cmp	r2, #9
 800a1ae:	d903      	bls.n	800a1b8 <_svfiprintf_r+0x1a8>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0c5      	beq.n	800a140 <_svfiprintf_r+0x130>
 800a1b4:	9105      	str	r1, [sp, #20]
 800a1b6:	e7c3      	b.n	800a140 <_svfiprintf_r+0x130>
 800a1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1bc:	4604      	mov	r4, r0
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e7f0      	b.n	800a1a4 <_svfiprintf_r+0x194>
 800a1c2:	ab03      	add	r3, sp, #12
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <_svfiprintf_r+0x1f8>)
 800a1ca:	a904      	add	r1, sp, #16
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f7fb fedb 	bl	8005f88 <_printf_float>
 800a1d2:	1c42      	adds	r2, r0, #1
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	d1d6      	bne.n	800a186 <_svfiprintf_r+0x176>
 800a1d8:	89ab      	ldrh	r3, [r5, #12]
 800a1da:	065b      	lsls	r3, r3, #25
 800a1dc:	f53f af2c 	bmi.w	800a038 <_svfiprintf_r+0x28>
 800a1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e2:	b01d      	add	sp, #116	; 0x74
 800a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e8:	ab03      	add	r3, sp, #12
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	4b06      	ldr	r3, [pc, #24]	; (800a208 <_svfiprintf_r+0x1f8>)
 800a1f0:	a904      	add	r1, sp, #16
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f7fc f96c 	bl	80064d0 <_printf_i>
 800a1f8:	e7eb      	b.n	800a1d2 <_svfiprintf_r+0x1c2>
 800a1fa:	bf00      	nop
 800a1fc:	0800bc74 	.word	0x0800bc74
 800a200:	0800bc7e 	.word	0x0800bc7e
 800a204:	08005f89 	.word	0x08005f89
 800a208:	08009f59 	.word	0x08009f59
 800a20c:	0800bc7a 	.word	0x0800bc7a

0800a210 <__sfputc_r>:
 800a210:	6893      	ldr	r3, [r2, #8]
 800a212:	3b01      	subs	r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	b410      	push	{r4}
 800a218:	6093      	str	r3, [r2, #8]
 800a21a:	da08      	bge.n	800a22e <__sfputc_r+0x1e>
 800a21c:	6994      	ldr	r4, [r2, #24]
 800a21e:	42a3      	cmp	r3, r4
 800a220:	db01      	blt.n	800a226 <__sfputc_r+0x16>
 800a222:	290a      	cmp	r1, #10
 800a224:	d103      	bne.n	800a22e <__sfputc_r+0x1e>
 800a226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a22a:	f7fd bbe9 	b.w	8007a00 <__swbuf_r>
 800a22e:	6813      	ldr	r3, [r2, #0]
 800a230:	1c58      	adds	r0, r3, #1
 800a232:	6010      	str	r0, [r2, #0]
 800a234:	7019      	strb	r1, [r3, #0]
 800a236:	4608      	mov	r0, r1
 800a238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <__sfputs_r>:
 800a23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a240:	4606      	mov	r6, r0
 800a242:	460f      	mov	r7, r1
 800a244:	4614      	mov	r4, r2
 800a246:	18d5      	adds	r5, r2, r3
 800a248:	42ac      	cmp	r4, r5
 800a24a:	d101      	bne.n	800a250 <__sfputs_r+0x12>
 800a24c:	2000      	movs	r0, #0
 800a24e:	e007      	b.n	800a260 <__sfputs_r+0x22>
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	463a      	mov	r2, r7
 800a256:	4630      	mov	r0, r6
 800a258:	f7ff ffda 	bl	800a210 <__sfputc_r>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d1f3      	bne.n	800a248 <__sfputs_r+0xa>
 800a260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a264 <_vfiprintf_r>:
 800a264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a268:	460d      	mov	r5, r1
 800a26a:	b09d      	sub	sp, #116	; 0x74
 800a26c:	4614      	mov	r4, r2
 800a26e:	4698      	mov	r8, r3
 800a270:	4606      	mov	r6, r0
 800a272:	b118      	cbz	r0, 800a27c <_vfiprintf_r+0x18>
 800a274:	6983      	ldr	r3, [r0, #24]
 800a276:	b90b      	cbnz	r3, 800a27c <_vfiprintf_r+0x18>
 800a278:	f7fe fc16 	bl	8008aa8 <__sinit>
 800a27c:	4b89      	ldr	r3, [pc, #548]	; (800a4a4 <_vfiprintf_r+0x240>)
 800a27e:	429d      	cmp	r5, r3
 800a280:	d11b      	bne.n	800a2ba <_vfiprintf_r+0x56>
 800a282:	6875      	ldr	r5, [r6, #4]
 800a284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a286:	07d9      	lsls	r1, r3, #31
 800a288:	d405      	bmi.n	800a296 <_vfiprintf_r+0x32>
 800a28a:	89ab      	ldrh	r3, [r5, #12]
 800a28c:	059a      	lsls	r2, r3, #22
 800a28e:	d402      	bmi.n	800a296 <_vfiprintf_r+0x32>
 800a290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a292:	f7ff f81a 	bl	80092ca <__retarget_lock_acquire_recursive>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	071b      	lsls	r3, r3, #28
 800a29a:	d501      	bpl.n	800a2a0 <_vfiprintf_r+0x3c>
 800a29c:	692b      	ldr	r3, [r5, #16]
 800a29e:	b9eb      	cbnz	r3, 800a2dc <_vfiprintf_r+0x78>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f7fd fbfe 	bl	8007aa4 <__swsetup_r>
 800a2a8:	b1c0      	cbz	r0, 800a2dc <_vfiprintf_r+0x78>
 800a2aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ac:	07dc      	lsls	r4, r3, #31
 800a2ae:	d50e      	bpl.n	800a2ce <_vfiprintf_r+0x6a>
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b4:	b01d      	add	sp, #116	; 0x74
 800a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ba:	4b7b      	ldr	r3, [pc, #492]	; (800a4a8 <_vfiprintf_r+0x244>)
 800a2bc:	429d      	cmp	r5, r3
 800a2be:	d101      	bne.n	800a2c4 <_vfiprintf_r+0x60>
 800a2c0:	68b5      	ldr	r5, [r6, #8]
 800a2c2:	e7df      	b.n	800a284 <_vfiprintf_r+0x20>
 800a2c4:	4b79      	ldr	r3, [pc, #484]	; (800a4ac <_vfiprintf_r+0x248>)
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	bf08      	it	eq
 800a2ca:	68f5      	ldreq	r5, [r6, #12]
 800a2cc:	e7da      	b.n	800a284 <_vfiprintf_r+0x20>
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	0598      	lsls	r0, r3, #22
 800a2d2:	d4ed      	bmi.n	800a2b0 <_vfiprintf_r+0x4c>
 800a2d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d6:	f7fe fff9 	bl	80092cc <__retarget_lock_release_recursive>
 800a2da:	e7e9      	b.n	800a2b0 <_vfiprintf_r+0x4c>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e0:	2320      	movs	r3, #32
 800a2e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ea:	2330      	movs	r3, #48	; 0x30
 800a2ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4b0 <_vfiprintf_r+0x24c>
 800a2f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2f4:	f04f 0901 	mov.w	r9, #1
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	469a      	mov	sl, r3
 800a2fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a300:	b10a      	cbz	r2, 800a306 <_vfiprintf_r+0xa2>
 800a302:	2a25      	cmp	r2, #37	; 0x25
 800a304:	d1f9      	bne.n	800a2fa <_vfiprintf_r+0x96>
 800a306:	ebba 0b04 	subs.w	fp, sl, r4
 800a30a:	d00b      	beq.n	800a324 <_vfiprintf_r+0xc0>
 800a30c:	465b      	mov	r3, fp
 800a30e:	4622      	mov	r2, r4
 800a310:	4629      	mov	r1, r5
 800a312:	4630      	mov	r0, r6
 800a314:	f7ff ff93 	bl	800a23e <__sfputs_r>
 800a318:	3001      	adds	r0, #1
 800a31a:	f000 80aa 	beq.w	800a472 <_vfiprintf_r+0x20e>
 800a31e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a320:	445a      	add	r2, fp
 800a322:	9209      	str	r2, [sp, #36]	; 0x24
 800a324:	f89a 3000 	ldrb.w	r3, [sl]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80a2 	beq.w	800a472 <_vfiprintf_r+0x20e>
 800a32e:	2300      	movs	r3, #0
 800a330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a338:	f10a 0a01 	add.w	sl, sl, #1
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	9307      	str	r3, [sp, #28]
 800a340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a344:	931a      	str	r3, [sp, #104]	; 0x68
 800a346:	4654      	mov	r4, sl
 800a348:	2205      	movs	r2, #5
 800a34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a34e:	4858      	ldr	r0, [pc, #352]	; (800a4b0 <_vfiprintf_r+0x24c>)
 800a350:	f7f5 ff76 	bl	8000240 <memchr>
 800a354:	9a04      	ldr	r2, [sp, #16]
 800a356:	b9d8      	cbnz	r0, 800a390 <_vfiprintf_r+0x12c>
 800a358:	06d1      	lsls	r1, r2, #27
 800a35a:	bf44      	itt	mi
 800a35c:	2320      	movmi	r3, #32
 800a35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a362:	0713      	lsls	r3, r2, #28
 800a364:	bf44      	itt	mi
 800a366:	232b      	movmi	r3, #43	; 0x2b
 800a368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b2a      	cmp	r3, #42	; 0x2a
 800a372:	d015      	beq.n	800a3a0 <_vfiprintf_r+0x13c>
 800a374:	9a07      	ldr	r2, [sp, #28]
 800a376:	4654      	mov	r4, sl
 800a378:	2000      	movs	r0, #0
 800a37a:	f04f 0c0a 	mov.w	ip, #10
 800a37e:	4621      	mov	r1, r4
 800a380:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a384:	3b30      	subs	r3, #48	; 0x30
 800a386:	2b09      	cmp	r3, #9
 800a388:	d94e      	bls.n	800a428 <_vfiprintf_r+0x1c4>
 800a38a:	b1b0      	cbz	r0, 800a3ba <_vfiprintf_r+0x156>
 800a38c:	9207      	str	r2, [sp, #28]
 800a38e:	e014      	b.n	800a3ba <_vfiprintf_r+0x156>
 800a390:	eba0 0308 	sub.w	r3, r0, r8
 800a394:	fa09 f303 	lsl.w	r3, r9, r3
 800a398:	4313      	orrs	r3, r2
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	46a2      	mov	sl, r4
 800a39e:	e7d2      	b.n	800a346 <_vfiprintf_r+0xe2>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	1d19      	adds	r1, r3, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	9103      	str	r1, [sp, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bfbb      	ittet	lt
 800a3ac:	425b      	neglt	r3, r3
 800a3ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a3b2:	9307      	strge	r3, [sp, #28]
 800a3b4:	9307      	strlt	r3, [sp, #28]
 800a3b6:	bfb8      	it	lt
 800a3b8:	9204      	strlt	r2, [sp, #16]
 800a3ba:	7823      	ldrb	r3, [r4, #0]
 800a3bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a3be:	d10c      	bne.n	800a3da <_vfiprintf_r+0x176>
 800a3c0:	7863      	ldrb	r3, [r4, #1]
 800a3c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c4:	d135      	bne.n	800a432 <_vfiprintf_r+0x1ce>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	1d1a      	adds	r2, r3, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	9203      	str	r2, [sp, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfb8      	it	lt
 800a3d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a3d6:	3402      	adds	r4, #2
 800a3d8:	9305      	str	r3, [sp, #20]
 800a3da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4c0 <_vfiprintf_r+0x25c>
 800a3de:	7821      	ldrb	r1, [r4, #0]
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	4650      	mov	r0, sl
 800a3e4:	f7f5 ff2c 	bl	8000240 <memchr>
 800a3e8:	b140      	cbz	r0, 800a3fc <_vfiprintf_r+0x198>
 800a3ea:	2340      	movs	r3, #64	; 0x40
 800a3ec:	eba0 000a 	sub.w	r0, r0, sl
 800a3f0:	fa03 f000 	lsl.w	r0, r3, r0
 800a3f4:	9b04      	ldr	r3, [sp, #16]
 800a3f6:	4303      	orrs	r3, r0
 800a3f8:	3401      	adds	r4, #1
 800a3fa:	9304      	str	r3, [sp, #16]
 800a3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a400:	482c      	ldr	r0, [pc, #176]	; (800a4b4 <_vfiprintf_r+0x250>)
 800a402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a406:	2206      	movs	r2, #6
 800a408:	f7f5 ff1a 	bl	8000240 <memchr>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d03f      	beq.n	800a490 <_vfiprintf_r+0x22c>
 800a410:	4b29      	ldr	r3, [pc, #164]	; (800a4b8 <_vfiprintf_r+0x254>)
 800a412:	bb1b      	cbnz	r3, 800a45c <_vfiprintf_r+0x1f8>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	3307      	adds	r3, #7
 800a418:	f023 0307 	bic.w	r3, r3, #7
 800a41c:	3308      	adds	r3, #8
 800a41e:	9303      	str	r3, [sp, #12]
 800a420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a422:	443b      	add	r3, r7
 800a424:	9309      	str	r3, [sp, #36]	; 0x24
 800a426:	e767      	b.n	800a2f8 <_vfiprintf_r+0x94>
 800a428:	fb0c 3202 	mla	r2, ip, r2, r3
 800a42c:	460c      	mov	r4, r1
 800a42e:	2001      	movs	r0, #1
 800a430:	e7a5      	b.n	800a37e <_vfiprintf_r+0x11a>
 800a432:	2300      	movs	r3, #0
 800a434:	3401      	adds	r4, #1
 800a436:	9305      	str	r3, [sp, #20]
 800a438:	4619      	mov	r1, r3
 800a43a:	f04f 0c0a 	mov.w	ip, #10
 800a43e:	4620      	mov	r0, r4
 800a440:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a444:	3a30      	subs	r2, #48	; 0x30
 800a446:	2a09      	cmp	r2, #9
 800a448:	d903      	bls.n	800a452 <_vfiprintf_r+0x1ee>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0c5      	beq.n	800a3da <_vfiprintf_r+0x176>
 800a44e:	9105      	str	r1, [sp, #20]
 800a450:	e7c3      	b.n	800a3da <_vfiprintf_r+0x176>
 800a452:	fb0c 2101 	mla	r1, ip, r1, r2
 800a456:	4604      	mov	r4, r0
 800a458:	2301      	movs	r3, #1
 800a45a:	e7f0      	b.n	800a43e <_vfiprintf_r+0x1da>
 800a45c:	ab03      	add	r3, sp, #12
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	462a      	mov	r2, r5
 800a462:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <_vfiprintf_r+0x258>)
 800a464:	a904      	add	r1, sp, #16
 800a466:	4630      	mov	r0, r6
 800a468:	f7fb fd8e 	bl	8005f88 <_printf_float>
 800a46c:	4607      	mov	r7, r0
 800a46e:	1c78      	adds	r0, r7, #1
 800a470:	d1d6      	bne.n	800a420 <_vfiprintf_r+0x1bc>
 800a472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a474:	07d9      	lsls	r1, r3, #31
 800a476:	d405      	bmi.n	800a484 <_vfiprintf_r+0x220>
 800a478:	89ab      	ldrh	r3, [r5, #12]
 800a47a:	059a      	lsls	r2, r3, #22
 800a47c:	d402      	bmi.n	800a484 <_vfiprintf_r+0x220>
 800a47e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a480:	f7fe ff24 	bl	80092cc <__retarget_lock_release_recursive>
 800a484:	89ab      	ldrh	r3, [r5, #12]
 800a486:	065b      	lsls	r3, r3, #25
 800a488:	f53f af12 	bmi.w	800a2b0 <_vfiprintf_r+0x4c>
 800a48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a48e:	e711      	b.n	800a2b4 <_vfiprintf_r+0x50>
 800a490:	ab03      	add	r3, sp, #12
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	462a      	mov	r2, r5
 800a496:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <_vfiprintf_r+0x258>)
 800a498:	a904      	add	r1, sp, #16
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7fc f818 	bl	80064d0 <_printf_i>
 800a4a0:	e7e4      	b.n	800a46c <_vfiprintf_r+0x208>
 800a4a2:	bf00      	nop
 800a4a4:	0800ba5c 	.word	0x0800ba5c
 800a4a8:	0800ba7c 	.word	0x0800ba7c
 800a4ac:	0800ba3c 	.word	0x0800ba3c
 800a4b0:	0800bc74 	.word	0x0800bc74
 800a4b4:	0800bc7e 	.word	0x0800bc7e
 800a4b8:	08005f89 	.word	0x08005f89
 800a4bc:	0800a23f 	.word	0x0800a23f
 800a4c0:	0800bc7a 	.word	0x0800bc7a
 800a4c4:	00000000 	.word	0x00000000

0800a4c8 <nan>:
 800a4c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4d0 <nan+0x8>
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	00000000 	.word	0x00000000
 800a4d4:	7ff80000 	.word	0x7ff80000

0800a4d8 <_sbrk_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	; (800a4f4 <_sbrk_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f7 fd10 	bl	8001f08 <_sbrk>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_sbrk_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_sbrk_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	2000037c 	.word	0x2000037c

0800a4f8 <__sread>:
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a500:	f000 f93a 	bl	800a778 <_read_r>
 800a504:	2800      	cmp	r0, #0
 800a506:	bfab      	itete	ge
 800a508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a50a:	89a3      	ldrhlt	r3, [r4, #12]
 800a50c:	181b      	addge	r3, r3, r0
 800a50e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a512:	bfac      	ite	ge
 800a514:	6563      	strge	r3, [r4, #84]	; 0x54
 800a516:	81a3      	strhlt	r3, [r4, #12]
 800a518:	bd10      	pop	{r4, pc}

0800a51a <__swrite>:
 800a51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51e:	461f      	mov	r7, r3
 800a520:	898b      	ldrh	r3, [r1, #12]
 800a522:	05db      	lsls	r3, r3, #23
 800a524:	4605      	mov	r5, r0
 800a526:	460c      	mov	r4, r1
 800a528:	4616      	mov	r6, r2
 800a52a:	d505      	bpl.n	800a538 <__swrite+0x1e>
 800a52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a530:	2302      	movs	r3, #2
 800a532:	2200      	movs	r2, #0
 800a534:	f000 f8b8 	bl	800a6a8 <_lseek_r>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a53e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	4632      	mov	r2, r6
 800a546:	463b      	mov	r3, r7
 800a548:	4628      	mov	r0, r5
 800a54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a54e:	f000 b837 	b.w	800a5c0 <_write_r>

0800a552 <__sseek>:
 800a552:	b510      	push	{r4, lr}
 800a554:	460c      	mov	r4, r1
 800a556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55a:	f000 f8a5 	bl	800a6a8 <_lseek_r>
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	bf15      	itete	ne
 800a564:	6560      	strne	r0, [r4, #84]	; 0x54
 800a566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a56a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a56e:	81a3      	strheq	r3, [r4, #12]
 800a570:	bf18      	it	ne
 800a572:	81a3      	strhne	r3, [r4, #12]
 800a574:	bd10      	pop	{r4, pc}

0800a576 <__sclose>:
 800a576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57a:	f000 b851 	b.w	800a620 <_close_r>

0800a57e <strncmp>:
 800a57e:	b510      	push	{r4, lr}
 800a580:	b17a      	cbz	r2, 800a5a2 <strncmp+0x24>
 800a582:	4603      	mov	r3, r0
 800a584:	3901      	subs	r1, #1
 800a586:	1884      	adds	r4, r0, r2
 800a588:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a58c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a590:	4290      	cmp	r0, r2
 800a592:	d101      	bne.n	800a598 <strncmp+0x1a>
 800a594:	42a3      	cmp	r3, r4
 800a596:	d101      	bne.n	800a59c <strncmp+0x1e>
 800a598:	1a80      	subs	r0, r0, r2
 800a59a:	bd10      	pop	{r4, pc}
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d1f3      	bne.n	800a588 <strncmp+0xa>
 800a5a0:	e7fa      	b.n	800a598 <strncmp+0x1a>
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	e7f9      	b.n	800a59a <strncmp+0x1c>

0800a5a6 <__ascii_wctomb>:
 800a5a6:	b149      	cbz	r1, 800a5bc <__ascii_wctomb+0x16>
 800a5a8:	2aff      	cmp	r2, #255	; 0xff
 800a5aa:	bf85      	ittet	hi
 800a5ac:	238a      	movhi	r3, #138	; 0x8a
 800a5ae:	6003      	strhi	r3, [r0, #0]
 800a5b0:	700a      	strbls	r2, [r1, #0]
 800a5b2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a5b6:	bf98      	it	ls
 800a5b8:	2001      	movls	r0, #1
 800a5ba:	4770      	bx	lr
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4770      	bx	lr

0800a5c0 <_write_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4d07      	ldr	r5, [pc, #28]	; (800a5e0 <_write_r+0x20>)
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	4608      	mov	r0, r1
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	602a      	str	r2, [r5, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f7f7 fc49 	bl	8001e66 <_write>
 800a5d4:	1c43      	adds	r3, r0, #1
 800a5d6:	d102      	bne.n	800a5de <_write_r+0x1e>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	b103      	cbz	r3, 800a5de <_write_r+0x1e>
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	2000037c 	.word	0x2000037c

0800a5e4 <__assert_func>:
 800a5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5e6:	4614      	mov	r4, r2
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <__assert_func+0x2c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	68d8      	ldr	r0, [r3, #12]
 800a5f2:	b14c      	cbz	r4, 800a608 <__assert_func+0x24>
 800a5f4:	4b07      	ldr	r3, [pc, #28]	; (800a614 <__assert_func+0x30>)
 800a5f6:	9100      	str	r1, [sp, #0]
 800a5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5fc:	4906      	ldr	r1, [pc, #24]	; (800a618 <__assert_func+0x34>)
 800a5fe:	462b      	mov	r3, r5
 800a600:	f000 f81e 	bl	800a640 <fiprintf>
 800a604:	f000 f8ca 	bl	800a79c <abort>
 800a608:	4b04      	ldr	r3, [pc, #16]	; (800a61c <__assert_func+0x38>)
 800a60a:	461c      	mov	r4, r3
 800a60c:	e7f3      	b.n	800a5f6 <__assert_func+0x12>
 800a60e:	bf00      	nop
 800a610:	2000000c 	.word	0x2000000c
 800a614:	0800bc85 	.word	0x0800bc85
 800a618:	0800bc92 	.word	0x0800bc92
 800a61c:	0800bcc0 	.word	0x0800bcc0

0800a620 <_close_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4d06      	ldr	r5, [pc, #24]	; (800a63c <_close_r+0x1c>)
 800a624:	2300      	movs	r3, #0
 800a626:	4604      	mov	r4, r0
 800a628:	4608      	mov	r0, r1
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	f7f7 fc37 	bl	8001e9e <_close>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_close_r+0x1a>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_close_r+0x1a>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	2000037c 	.word	0x2000037c

0800a640 <fiprintf>:
 800a640:	b40e      	push	{r1, r2, r3}
 800a642:	b503      	push	{r0, r1, lr}
 800a644:	4601      	mov	r1, r0
 800a646:	ab03      	add	r3, sp, #12
 800a648:	4805      	ldr	r0, [pc, #20]	; (800a660 <fiprintf+0x20>)
 800a64a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64e:	6800      	ldr	r0, [r0, #0]
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	f7ff fe07 	bl	800a264 <_vfiprintf_r>
 800a656:	b002      	add	sp, #8
 800a658:	f85d eb04 	ldr.w	lr, [sp], #4
 800a65c:	b003      	add	sp, #12
 800a65e:	4770      	bx	lr
 800a660:	2000000c 	.word	0x2000000c

0800a664 <_fstat_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d07      	ldr	r5, [pc, #28]	; (800a684 <_fstat_r+0x20>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	4611      	mov	r1, r2
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	f7f7 fc20 	bl	8001eb6 <_fstat>
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d102      	bne.n	800a680 <_fstat_r+0x1c>
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	b103      	cbz	r3, 800a680 <_fstat_r+0x1c>
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	bd38      	pop	{r3, r4, r5, pc}
 800a682:	bf00      	nop
 800a684:	2000037c 	.word	0x2000037c

0800a688 <_isatty_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d06      	ldr	r5, [pc, #24]	; (800a6a4 <_isatty_r+0x1c>)
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	f7f7 fc1f 	bl	8001ed6 <_isatty>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_isatty_r+0x1a>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_isatty_r+0x1a>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	2000037c 	.word	0x2000037c

0800a6a8 <_lseek_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d07      	ldr	r5, [pc, #28]	; (800a6c8 <_lseek_r+0x20>)
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	4608      	mov	r0, r1
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	602a      	str	r2, [r5, #0]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f7f7 fc18 	bl	8001eec <_lseek>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d102      	bne.n	800a6c6 <_lseek_r+0x1e>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b103      	cbz	r3, 800a6c6 <_lseek_r+0x1e>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	2000037c 	.word	0x2000037c

0800a6cc <memmove>:
 800a6cc:	4288      	cmp	r0, r1
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	eb01 0402 	add.w	r4, r1, r2
 800a6d4:	d902      	bls.n	800a6dc <memmove+0x10>
 800a6d6:	4284      	cmp	r4, r0
 800a6d8:	4623      	mov	r3, r4
 800a6da:	d807      	bhi.n	800a6ec <memmove+0x20>
 800a6dc:	1e43      	subs	r3, r0, #1
 800a6de:	42a1      	cmp	r1, r4
 800a6e0:	d008      	beq.n	800a6f4 <memmove+0x28>
 800a6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ea:	e7f8      	b.n	800a6de <memmove+0x12>
 800a6ec:	4402      	add	r2, r0
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	428a      	cmp	r2, r1
 800a6f2:	d100      	bne.n	800a6f6 <memmove+0x2a>
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6fe:	e7f7      	b.n	800a6f0 <memmove+0x24>

0800a700 <__malloc_lock>:
 800a700:	4801      	ldr	r0, [pc, #4]	; (800a708 <__malloc_lock+0x8>)
 800a702:	f7fe bde2 	b.w	80092ca <__retarget_lock_acquire_recursive>
 800a706:	bf00      	nop
 800a708:	20000370 	.word	0x20000370

0800a70c <__malloc_unlock>:
 800a70c:	4801      	ldr	r0, [pc, #4]	; (800a714 <__malloc_unlock+0x8>)
 800a70e:	f7fe bddd 	b.w	80092cc <__retarget_lock_release_recursive>
 800a712:	bf00      	nop
 800a714:	20000370 	.word	0x20000370

0800a718 <_realloc_r>:
 800a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71c:	4680      	mov	r8, r0
 800a71e:	4614      	mov	r4, r2
 800a720:	460e      	mov	r6, r1
 800a722:	b921      	cbnz	r1, 800a72e <_realloc_r+0x16>
 800a724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a728:	4611      	mov	r1, r2
 800a72a:	f7ff bba1 	b.w	8009e70 <_malloc_r>
 800a72e:	b92a      	cbnz	r2, 800a73c <_realloc_r+0x24>
 800a730:	f7ff fb32 	bl	8009d98 <_free_r>
 800a734:	4625      	mov	r5, r4
 800a736:	4628      	mov	r0, r5
 800a738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a73c:	f000 f835 	bl	800a7aa <_malloc_usable_size_r>
 800a740:	4284      	cmp	r4, r0
 800a742:	4607      	mov	r7, r0
 800a744:	d802      	bhi.n	800a74c <_realloc_r+0x34>
 800a746:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a74a:	d812      	bhi.n	800a772 <_realloc_r+0x5a>
 800a74c:	4621      	mov	r1, r4
 800a74e:	4640      	mov	r0, r8
 800a750:	f7ff fb8e 	bl	8009e70 <_malloc_r>
 800a754:	4605      	mov	r5, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	d0ed      	beq.n	800a736 <_realloc_r+0x1e>
 800a75a:	42bc      	cmp	r4, r7
 800a75c:	4622      	mov	r2, r4
 800a75e:	4631      	mov	r1, r6
 800a760:	bf28      	it	cs
 800a762:	463a      	movcs	r2, r7
 800a764:	f7fe fe32 	bl	80093cc <memcpy>
 800a768:	4631      	mov	r1, r6
 800a76a:	4640      	mov	r0, r8
 800a76c:	f7ff fb14 	bl	8009d98 <_free_r>
 800a770:	e7e1      	b.n	800a736 <_realloc_r+0x1e>
 800a772:	4635      	mov	r5, r6
 800a774:	e7df      	b.n	800a736 <_realloc_r+0x1e>
	...

0800a778 <_read_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_read_r+0x20>)
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	4611      	mov	r1, r2
 800a782:	2200      	movs	r2, #0
 800a784:	602a      	str	r2, [r5, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	f7f7 fb50 	bl	8001e2c <_read>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_read_r+0x1e>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_read_r+0x1e>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	2000037c 	.word	0x2000037c

0800a79c <abort>:
 800a79c:	b508      	push	{r3, lr}
 800a79e:	2006      	movs	r0, #6
 800a7a0:	f000 f834 	bl	800a80c <raise>
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	f7f7 fb37 	bl	8001e18 <_exit>

0800a7aa <_malloc_usable_size_r>:
 800a7aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ae:	1f18      	subs	r0, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfbc      	itt	lt
 800a7b4:	580b      	ldrlt	r3, [r1, r0]
 800a7b6:	18c0      	addlt	r0, r0, r3
 800a7b8:	4770      	bx	lr

0800a7ba <_raise_r>:
 800a7ba:	291f      	cmp	r1, #31
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	d904      	bls.n	800a7ce <_raise_r+0x14>
 800a7c4:	2316      	movs	r3, #22
 800a7c6:	6003      	str	r3, [r0, #0]
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7cc:	bd38      	pop	{r3, r4, r5, pc}
 800a7ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7d0:	b112      	cbz	r2, 800a7d8 <_raise_r+0x1e>
 800a7d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7d6:	b94b      	cbnz	r3, 800a7ec <_raise_r+0x32>
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 f831 	bl	800a840 <_getpid_r>
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4601      	mov	r1, r0
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e8:	f000 b818 	b.w	800a81c <_kill_r>
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d00a      	beq.n	800a806 <_raise_r+0x4c>
 800a7f0:	1c59      	adds	r1, r3, #1
 800a7f2:	d103      	bne.n	800a7fc <_raise_r+0x42>
 800a7f4:	2316      	movs	r3, #22
 800a7f6:	6003      	str	r3, [r0, #0]
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	e7e7      	b.n	800a7cc <_raise_r+0x12>
 800a7fc:	2400      	movs	r4, #0
 800a7fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a802:	4628      	mov	r0, r5
 800a804:	4798      	blx	r3
 800a806:	2000      	movs	r0, #0
 800a808:	e7e0      	b.n	800a7cc <_raise_r+0x12>
	...

0800a80c <raise>:
 800a80c:	4b02      	ldr	r3, [pc, #8]	; (800a818 <raise+0xc>)
 800a80e:	4601      	mov	r1, r0
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	f7ff bfd2 	b.w	800a7ba <_raise_r>
 800a816:	bf00      	nop
 800a818:	2000000c 	.word	0x2000000c

0800a81c <_kill_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	; (800a83c <_kill_r+0x20>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f7f7 fae5 	bl	8001df8 <_kill>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d102      	bne.n	800a838 <_kill_r+0x1c>
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	b103      	cbz	r3, 800a838 <_kill_r+0x1c>
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	bf00      	nop
 800a83c:	2000037c 	.word	0x2000037c

0800a840 <_getpid_r>:
 800a840:	f7f7 bad2 	b.w	8001de8 <_getpid>

0800a844 <pow>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	ed2d 8b02 	vpush	{d8}
 800a84a:	eeb0 8a40 	vmov.f32	s16, s0
 800a84e:	eef0 8a60 	vmov.f32	s17, s1
 800a852:	ec55 4b11 	vmov	r4, r5, d1
 800a856:	f000 f867 	bl	800a928 <__ieee754_pow>
 800a85a:	4622      	mov	r2, r4
 800a85c:	462b      	mov	r3, r5
 800a85e:	4620      	mov	r0, r4
 800a860:	4629      	mov	r1, r5
 800a862:	ec57 6b10 	vmov	r6, r7, d0
 800a866:	f7f6 f991 	bl	8000b8c <__aeabi_dcmpun>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d13b      	bne.n	800a8e6 <pow+0xa2>
 800a86e:	ec51 0b18 	vmov	r0, r1, d8
 800a872:	2200      	movs	r2, #0
 800a874:	2300      	movs	r3, #0
 800a876:	f7f6 f957 	bl	8000b28 <__aeabi_dcmpeq>
 800a87a:	b1b8      	cbz	r0, 800a8ac <pow+0x68>
 800a87c:	2200      	movs	r2, #0
 800a87e:	2300      	movs	r3, #0
 800a880:	4620      	mov	r0, r4
 800a882:	4629      	mov	r1, r5
 800a884:	f7f6 f950 	bl	8000b28 <__aeabi_dcmpeq>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d146      	bne.n	800a91a <pow+0xd6>
 800a88c:	ec45 4b10 	vmov	d0, r4, r5
 800a890:	f000 fe63 	bl	800b55a <finite>
 800a894:	b338      	cbz	r0, 800a8e6 <pow+0xa2>
 800a896:	2200      	movs	r2, #0
 800a898:	2300      	movs	r3, #0
 800a89a:	4620      	mov	r0, r4
 800a89c:	4629      	mov	r1, r5
 800a89e:	f7f6 f94d 	bl	8000b3c <__aeabi_dcmplt>
 800a8a2:	b300      	cbz	r0, 800a8e6 <pow+0xa2>
 800a8a4:	f7fb fa8e 	bl	8005dc4 <__errno>
 800a8a8:	2322      	movs	r3, #34	; 0x22
 800a8aa:	e01b      	b.n	800a8e4 <pow+0xa0>
 800a8ac:	ec47 6b10 	vmov	d0, r6, r7
 800a8b0:	f000 fe53 	bl	800b55a <finite>
 800a8b4:	b9e0      	cbnz	r0, 800a8f0 <pow+0xac>
 800a8b6:	eeb0 0a48 	vmov.f32	s0, s16
 800a8ba:	eef0 0a68 	vmov.f32	s1, s17
 800a8be:	f000 fe4c 	bl	800b55a <finite>
 800a8c2:	b1a8      	cbz	r0, 800a8f0 <pow+0xac>
 800a8c4:	ec45 4b10 	vmov	d0, r4, r5
 800a8c8:	f000 fe47 	bl	800b55a <finite>
 800a8cc:	b180      	cbz	r0, 800a8f0 <pow+0xac>
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	463b      	mov	r3, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f7f6 f959 	bl	8000b8c <__aeabi_dcmpun>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d0e2      	beq.n	800a8a4 <pow+0x60>
 800a8de:	f7fb fa71 	bl	8005dc4 <__errno>
 800a8e2:	2321      	movs	r3, #33	; 0x21
 800a8e4:	6003      	str	r3, [r0, #0]
 800a8e6:	ecbd 8b02 	vpop	{d8}
 800a8ea:	ec47 6b10 	vmov	d0, r6, r7
 800a8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	f7f6 f916 	bl	8000b28 <__aeabi_dcmpeq>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d0f2      	beq.n	800a8e6 <pow+0xa2>
 800a900:	eeb0 0a48 	vmov.f32	s0, s16
 800a904:	eef0 0a68 	vmov.f32	s1, s17
 800a908:	f000 fe27 	bl	800b55a <finite>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d0ea      	beq.n	800a8e6 <pow+0xa2>
 800a910:	ec45 4b10 	vmov	d0, r4, r5
 800a914:	f000 fe21 	bl	800b55a <finite>
 800a918:	e7c3      	b.n	800a8a2 <pow+0x5e>
 800a91a:	4f01      	ldr	r7, [pc, #4]	; (800a920 <pow+0xdc>)
 800a91c:	2600      	movs	r6, #0
 800a91e:	e7e2      	b.n	800a8e6 <pow+0xa2>
 800a920:	3ff00000 	.word	0x3ff00000
 800a924:	00000000 	.word	0x00000000

0800a928 <__ieee754_pow>:
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	ed2d 8b06 	vpush	{d8-d10}
 800a930:	b089      	sub	sp, #36	; 0x24
 800a932:	ed8d 1b00 	vstr	d1, [sp]
 800a936:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a93a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a93e:	ea58 0102 	orrs.w	r1, r8, r2
 800a942:	ec57 6b10 	vmov	r6, r7, d0
 800a946:	d115      	bne.n	800a974 <__ieee754_pow+0x4c>
 800a948:	19b3      	adds	r3, r6, r6
 800a94a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a94e:	4152      	adcs	r2, r2
 800a950:	4299      	cmp	r1, r3
 800a952:	4b89      	ldr	r3, [pc, #548]	; (800ab78 <__ieee754_pow+0x250>)
 800a954:	4193      	sbcs	r3, r2
 800a956:	f080 84d2 	bcs.w	800b2fe <__ieee754_pow+0x9d6>
 800a95a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7f5 fcc3 	bl	80002ec <__adddf3>
 800a966:	ec41 0b10 	vmov	d0, r0, r1
 800a96a:	b009      	add	sp, #36	; 0x24
 800a96c:	ecbd 8b06 	vpop	{d8-d10}
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a974:	4b81      	ldr	r3, [pc, #516]	; (800ab7c <__ieee754_pow+0x254>)
 800a976:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a97a:	429c      	cmp	r4, r3
 800a97c:	ee10 aa10 	vmov	sl, s0
 800a980:	463d      	mov	r5, r7
 800a982:	dc06      	bgt.n	800a992 <__ieee754_pow+0x6a>
 800a984:	d101      	bne.n	800a98a <__ieee754_pow+0x62>
 800a986:	2e00      	cmp	r6, #0
 800a988:	d1e7      	bne.n	800a95a <__ieee754_pow+0x32>
 800a98a:	4598      	cmp	r8, r3
 800a98c:	dc01      	bgt.n	800a992 <__ieee754_pow+0x6a>
 800a98e:	d10f      	bne.n	800a9b0 <__ieee754_pow+0x88>
 800a990:	b172      	cbz	r2, 800a9b0 <__ieee754_pow+0x88>
 800a992:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a996:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a99a:	ea55 050a 	orrs.w	r5, r5, sl
 800a99e:	d1dc      	bne.n	800a95a <__ieee754_pow+0x32>
 800a9a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a9a4:	18db      	adds	r3, r3, r3
 800a9a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a9aa:	4152      	adcs	r2, r2
 800a9ac:	429d      	cmp	r5, r3
 800a9ae:	e7d0      	b.n	800a952 <__ieee754_pow+0x2a>
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	da3b      	bge.n	800aa2c <__ieee754_pow+0x104>
 800a9b4:	4b72      	ldr	r3, [pc, #456]	; (800ab80 <__ieee754_pow+0x258>)
 800a9b6:	4598      	cmp	r8, r3
 800a9b8:	dc51      	bgt.n	800aa5e <__ieee754_pow+0x136>
 800a9ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a9be:	4598      	cmp	r8, r3
 800a9c0:	f340 84ac 	ble.w	800b31c <__ieee754_pow+0x9f4>
 800a9c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a9c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a9cc:	2b14      	cmp	r3, #20
 800a9ce:	dd0f      	ble.n	800a9f0 <__ieee754_pow+0xc8>
 800a9d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a9d4:	fa22 f103 	lsr.w	r1, r2, r3
 800a9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	f040 849d 	bne.w	800b31c <__ieee754_pow+0x9f4>
 800a9e2:	f001 0101 	and.w	r1, r1, #1
 800a9e6:	f1c1 0302 	rsb	r3, r1, #2
 800a9ea:	9304      	str	r3, [sp, #16]
 800a9ec:	b182      	cbz	r2, 800aa10 <__ieee754_pow+0xe8>
 800a9ee:	e05f      	b.n	800aab0 <__ieee754_pow+0x188>
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d15b      	bne.n	800aaac <__ieee754_pow+0x184>
 800a9f4:	f1c3 0314 	rsb	r3, r3, #20
 800a9f8:	fa48 f103 	asr.w	r1, r8, r3
 800a9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800aa00:	4543      	cmp	r3, r8
 800aa02:	f040 8488 	bne.w	800b316 <__ieee754_pow+0x9ee>
 800aa06:	f001 0101 	and.w	r1, r1, #1
 800aa0a:	f1c1 0302 	rsb	r3, r1, #2
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	4b5c      	ldr	r3, [pc, #368]	; (800ab84 <__ieee754_pow+0x25c>)
 800aa12:	4598      	cmp	r8, r3
 800aa14:	d132      	bne.n	800aa7c <__ieee754_pow+0x154>
 800aa16:	f1b9 0f00 	cmp.w	r9, #0
 800aa1a:	f280 8478 	bge.w	800b30e <__ieee754_pow+0x9e6>
 800aa1e:	4959      	ldr	r1, [pc, #356]	; (800ab84 <__ieee754_pow+0x25c>)
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	2000      	movs	r0, #0
 800aa26:	f7f5 ff41 	bl	80008ac <__aeabi_ddiv>
 800aa2a:	e79c      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9304      	str	r3, [sp, #16]
 800aa30:	2a00      	cmp	r2, #0
 800aa32:	d13d      	bne.n	800aab0 <__ieee754_pow+0x188>
 800aa34:	4b51      	ldr	r3, [pc, #324]	; (800ab7c <__ieee754_pow+0x254>)
 800aa36:	4598      	cmp	r8, r3
 800aa38:	d1ea      	bne.n	800aa10 <__ieee754_pow+0xe8>
 800aa3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aa3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aa42:	ea53 030a 	orrs.w	r3, r3, sl
 800aa46:	f000 845a 	beq.w	800b2fe <__ieee754_pow+0x9d6>
 800aa4a:	4b4f      	ldr	r3, [pc, #316]	; (800ab88 <__ieee754_pow+0x260>)
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	dd08      	ble.n	800aa62 <__ieee754_pow+0x13a>
 800aa50:	f1b9 0f00 	cmp.w	r9, #0
 800aa54:	f2c0 8457 	blt.w	800b306 <__ieee754_pow+0x9de>
 800aa58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa5c:	e783      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e7e5      	b.n	800aa2e <__ieee754_pow+0x106>
 800aa62:	f1b9 0f00 	cmp.w	r9, #0
 800aa66:	f04f 0000 	mov.w	r0, #0
 800aa6a:	f04f 0100 	mov.w	r1, #0
 800aa6e:	f6bf af7a 	bge.w	800a966 <__ieee754_pow+0x3e>
 800aa72:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aa76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa7a:	e774      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800aa80:	d106      	bne.n	800aa90 <__ieee754_pow+0x168>
 800aa82:	4632      	mov	r2, r6
 800aa84:	463b      	mov	r3, r7
 800aa86:	4630      	mov	r0, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 fde5 	bl	8000658 <__aeabi_dmul>
 800aa8e:	e76a      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa90:	4b3e      	ldr	r3, [pc, #248]	; (800ab8c <__ieee754_pow+0x264>)
 800aa92:	4599      	cmp	r9, r3
 800aa94:	d10c      	bne.n	800aab0 <__ieee754_pow+0x188>
 800aa96:	2d00      	cmp	r5, #0
 800aa98:	db0a      	blt.n	800aab0 <__ieee754_pow+0x188>
 800aa9a:	ec47 6b10 	vmov	d0, r6, r7
 800aa9e:	b009      	add	sp, #36	; 0x24
 800aaa0:	ecbd 8b06 	vpop	{d8-d10}
 800aaa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	f000 bc6c 	b.w	800b384 <__ieee754_sqrt>
 800aaac:	2300      	movs	r3, #0
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	ec47 6b10 	vmov	d0, r6, r7
 800aab4:	f000 fd48 	bl	800b548 <fabs>
 800aab8:	ec51 0b10 	vmov	r0, r1, d0
 800aabc:	f1ba 0f00 	cmp.w	sl, #0
 800aac0:	d129      	bne.n	800ab16 <__ieee754_pow+0x1ee>
 800aac2:	b124      	cbz	r4, 800aace <__ieee754_pow+0x1a6>
 800aac4:	4b2f      	ldr	r3, [pc, #188]	; (800ab84 <__ieee754_pow+0x25c>)
 800aac6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d123      	bne.n	800ab16 <__ieee754_pow+0x1ee>
 800aace:	f1b9 0f00 	cmp.w	r9, #0
 800aad2:	da05      	bge.n	800aae0 <__ieee754_pow+0x1b8>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	2000      	movs	r0, #0
 800aada:	492a      	ldr	r1, [pc, #168]	; (800ab84 <__ieee754_pow+0x25c>)
 800aadc:	f7f5 fee6 	bl	80008ac <__aeabi_ddiv>
 800aae0:	2d00      	cmp	r5, #0
 800aae2:	f6bf af40 	bge.w	800a966 <__ieee754_pow+0x3e>
 800aae6:	9b04      	ldr	r3, [sp, #16]
 800aae8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aaec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aaf0:	4323      	orrs	r3, r4
 800aaf2:	d108      	bne.n	800ab06 <__ieee754_pow+0x1de>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4619      	mov	r1, r3
 800aafc:	f7f5 fbf4 	bl	80002e8 <__aeabi_dsub>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	e78f      	b.n	800aa26 <__ieee754_pow+0xfe>
 800ab06:	9b04      	ldr	r3, [sp, #16]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	f47f af2c 	bne.w	800a966 <__ieee754_pow+0x3e>
 800ab0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab12:	4619      	mov	r1, r3
 800ab14:	e727      	b.n	800a966 <__ieee754_pow+0x3e>
 800ab16:	0feb      	lsrs	r3, r5, #31
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	9306      	str	r3, [sp, #24]
 800ab1c:	9a06      	ldr	r2, [sp, #24]
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	d102      	bne.n	800ab2a <__ieee754_pow+0x202>
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	e7e6      	b.n	800aaf8 <__ieee754_pow+0x1d0>
 800ab2a:	4b19      	ldr	r3, [pc, #100]	; (800ab90 <__ieee754_pow+0x268>)
 800ab2c:	4598      	cmp	r8, r3
 800ab2e:	f340 80fb 	ble.w	800ad28 <__ieee754_pow+0x400>
 800ab32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ab36:	4598      	cmp	r8, r3
 800ab38:	4b13      	ldr	r3, [pc, #76]	; (800ab88 <__ieee754_pow+0x260>)
 800ab3a:	dd0c      	ble.n	800ab56 <__ieee754_pow+0x22e>
 800ab3c:	429c      	cmp	r4, r3
 800ab3e:	dc0f      	bgt.n	800ab60 <__ieee754_pow+0x238>
 800ab40:	f1b9 0f00 	cmp.w	r9, #0
 800ab44:	da0f      	bge.n	800ab66 <__ieee754_pow+0x23e>
 800ab46:	2000      	movs	r0, #0
 800ab48:	b009      	add	sp, #36	; 0x24
 800ab4a:	ecbd 8b06 	vpop	{d8-d10}
 800ab4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab52:	f000 bcf0 	b.w	800b536 <__math_oflow>
 800ab56:	429c      	cmp	r4, r3
 800ab58:	dbf2      	blt.n	800ab40 <__ieee754_pow+0x218>
 800ab5a:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <__ieee754_pow+0x25c>)
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	dd19      	ble.n	800ab94 <__ieee754_pow+0x26c>
 800ab60:	f1b9 0f00 	cmp.w	r9, #0
 800ab64:	dcef      	bgt.n	800ab46 <__ieee754_pow+0x21e>
 800ab66:	2000      	movs	r0, #0
 800ab68:	b009      	add	sp, #36	; 0x24
 800ab6a:	ecbd 8b06 	vpop	{d8-d10}
 800ab6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab72:	f000 bcd7 	b.w	800b524 <__math_uflow>
 800ab76:	bf00      	nop
 800ab78:	fff00000 	.word	0xfff00000
 800ab7c:	7ff00000 	.word	0x7ff00000
 800ab80:	433fffff 	.word	0x433fffff
 800ab84:	3ff00000 	.word	0x3ff00000
 800ab88:	3fefffff 	.word	0x3fefffff
 800ab8c:	3fe00000 	.word	0x3fe00000
 800ab90:	41e00000 	.word	0x41e00000
 800ab94:	4b60      	ldr	r3, [pc, #384]	; (800ad18 <__ieee754_pow+0x3f0>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	f7f5 fba6 	bl	80002e8 <__aeabi_dsub>
 800ab9c:	a354      	add	r3, pc, #336	; (adr r3, 800acf0 <__ieee754_pow+0x3c8>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	4604      	mov	r4, r0
 800aba4:	460d      	mov	r5, r1
 800aba6:	f7f5 fd57 	bl	8000658 <__aeabi_dmul>
 800abaa:	a353      	add	r3, pc, #332	; (adr r3, 800acf8 <__ieee754_pow+0x3d0>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	4606      	mov	r6, r0
 800abb2:	460f      	mov	r7, r1
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fd4e 	bl	8000658 <__aeabi_dmul>
 800abbc:	4b57      	ldr	r3, [pc, #348]	; (800ad1c <__ieee754_pow+0x3f4>)
 800abbe:	4682      	mov	sl, r0
 800abc0:	468b      	mov	fp, r1
 800abc2:	2200      	movs	r2, #0
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	f7f5 fd46 	bl	8000658 <__aeabi_dmul>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	a14b      	add	r1, pc, #300	; (adr r1, 800ad00 <__ieee754_pow+0x3d8>)
 800abd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd6:	f7f5 fb87 	bl	80002e8 <__aeabi_dsub>
 800abda:	4622      	mov	r2, r4
 800abdc:	462b      	mov	r3, r5
 800abde:	f7f5 fd3b 	bl	8000658 <__aeabi_dmul>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	2000      	movs	r0, #0
 800abe8:	494d      	ldr	r1, [pc, #308]	; (800ad20 <__ieee754_pow+0x3f8>)
 800abea:	f7f5 fb7d 	bl	80002e8 <__aeabi_dsub>
 800abee:	4622      	mov	r2, r4
 800abf0:	4680      	mov	r8, r0
 800abf2:	4689      	mov	r9, r1
 800abf4:	462b      	mov	r3, r5
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 fd2d 	bl	8000658 <__aeabi_dmul>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4640      	mov	r0, r8
 800ac04:	4649      	mov	r1, r9
 800ac06:	f7f5 fd27 	bl	8000658 <__aeabi_dmul>
 800ac0a:	a33f      	add	r3, pc, #252	; (adr r3, 800ad08 <__ieee754_pow+0x3e0>)
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fd22 	bl	8000658 <__aeabi_dmul>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4650      	mov	r0, sl
 800ac1a:	4659      	mov	r1, fp
 800ac1c:	f7f5 fb64 	bl	80002e8 <__aeabi_dsub>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4680      	mov	r8, r0
 800ac26:	4689      	mov	r9, r1
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 fb5e 	bl	80002ec <__adddf3>
 800ac30:	2000      	movs	r0, #0
 800ac32:	4632      	mov	r2, r6
 800ac34:	463b      	mov	r3, r7
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	f7f5 fb55 	bl	80002e8 <__aeabi_dsub>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4640      	mov	r0, r8
 800ac44:	4649      	mov	r1, r9
 800ac46:	f7f5 fb4f 	bl	80002e8 <__aeabi_dsub>
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	9a06      	ldr	r2, [sp, #24]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	4313      	orrs	r3, r2
 800ac52:	4682      	mov	sl, r0
 800ac54:	468b      	mov	fp, r1
 800ac56:	f040 81e7 	bne.w	800b028 <__ieee754_pow+0x700>
 800ac5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ad10 <__ieee754_pow+0x3e8>
 800ac5e:	eeb0 8a47 	vmov.f32	s16, s14
 800ac62:	eef0 8a67 	vmov.f32	s17, s15
 800ac66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac74:	f7f5 fb38 	bl	80002e8 <__aeabi_dsub>
 800ac78:	4622      	mov	r2, r4
 800ac7a:	462b      	mov	r3, r5
 800ac7c:	f7f5 fcec 	bl	8000658 <__aeabi_dmul>
 800ac80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac84:	4680      	mov	r8, r0
 800ac86:	4689      	mov	r9, r1
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4659      	mov	r1, fp
 800ac8c:	f7f5 fce4 	bl	8000658 <__aeabi_dmul>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 fb28 	bl	80002ec <__adddf3>
 800ac9c:	4632      	mov	r2, r6
 800ac9e:	463b      	mov	r3, r7
 800aca0:	4680      	mov	r8, r0
 800aca2:	4689      	mov	r9, r1
 800aca4:	4620      	mov	r0, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 fcd6 	bl	8000658 <__aeabi_dmul>
 800acac:	460b      	mov	r3, r1
 800acae:	4604      	mov	r4, r0
 800acb0:	460d      	mov	r5, r1
 800acb2:	4602      	mov	r2, r0
 800acb4:	4649      	mov	r1, r9
 800acb6:	4640      	mov	r0, r8
 800acb8:	f7f5 fb18 	bl	80002ec <__adddf3>
 800acbc:	4b19      	ldr	r3, [pc, #100]	; (800ad24 <__ieee754_pow+0x3fc>)
 800acbe:	4299      	cmp	r1, r3
 800acc0:	ec45 4b19 	vmov	d9, r4, r5
 800acc4:	4606      	mov	r6, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	468b      	mov	fp, r1
 800acca:	f340 82f1 	ble.w	800b2b0 <__ieee754_pow+0x988>
 800acce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800acd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800acd6:	4303      	orrs	r3, r0
 800acd8:	f000 81e4 	beq.w	800b0a4 <__ieee754_pow+0x77c>
 800acdc:	ec51 0b18 	vmov	r0, r1, d8
 800ace0:	2200      	movs	r2, #0
 800ace2:	2300      	movs	r3, #0
 800ace4:	f7f5 ff2a 	bl	8000b3c <__aeabi_dcmplt>
 800ace8:	3800      	subs	r0, #0
 800acea:	bf18      	it	ne
 800acec:	2001      	movne	r0, #1
 800acee:	e72b      	b.n	800ab48 <__ieee754_pow+0x220>
 800acf0:	60000000 	.word	0x60000000
 800acf4:	3ff71547 	.word	0x3ff71547
 800acf8:	f85ddf44 	.word	0xf85ddf44
 800acfc:	3e54ae0b 	.word	0x3e54ae0b
 800ad00:	55555555 	.word	0x55555555
 800ad04:	3fd55555 	.word	0x3fd55555
 800ad08:	652b82fe 	.word	0x652b82fe
 800ad0c:	3ff71547 	.word	0x3ff71547
 800ad10:	00000000 	.word	0x00000000
 800ad14:	bff00000 	.word	0xbff00000
 800ad18:	3ff00000 	.word	0x3ff00000
 800ad1c:	3fd00000 	.word	0x3fd00000
 800ad20:	3fe00000 	.word	0x3fe00000
 800ad24:	408fffff 	.word	0x408fffff
 800ad28:	4bd5      	ldr	r3, [pc, #852]	; (800b080 <__ieee754_pow+0x758>)
 800ad2a:	402b      	ands	r3, r5
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	b92b      	cbnz	r3, 800ad3c <__ieee754_pow+0x414>
 800ad30:	4bd4      	ldr	r3, [pc, #848]	; (800b084 <__ieee754_pow+0x75c>)
 800ad32:	f7f5 fc91 	bl	8000658 <__aeabi_dmul>
 800ad36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	1523      	asrs	r3, r4, #20
 800ad3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad42:	4413      	add	r3, r2
 800ad44:	9305      	str	r3, [sp, #20]
 800ad46:	4bd0      	ldr	r3, [pc, #832]	; (800b088 <__ieee754_pow+0x760>)
 800ad48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ad4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ad50:	429c      	cmp	r4, r3
 800ad52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ad56:	dd08      	ble.n	800ad6a <__ieee754_pow+0x442>
 800ad58:	4bcc      	ldr	r3, [pc, #816]	; (800b08c <__ieee754_pow+0x764>)
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	f340 8162 	ble.w	800b024 <__ieee754_pow+0x6fc>
 800ad60:	9b05      	ldr	r3, [sp, #20]
 800ad62:	3301      	adds	r3, #1
 800ad64:	9305      	str	r3, [sp, #20]
 800ad66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ad6a:	2400      	movs	r4, #0
 800ad6c:	00e3      	lsls	r3, r4, #3
 800ad6e:	9307      	str	r3, [sp, #28]
 800ad70:	4bc7      	ldr	r3, [pc, #796]	; (800b090 <__ieee754_pow+0x768>)
 800ad72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad76:	ed93 7b00 	vldr	d7, [r3]
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	ec53 2b17 	vmov	r2, r3, d7
 800ad80:	eeb0 9a47 	vmov.f32	s18, s14
 800ad84:	eef0 9a67 	vmov.f32	s19, s15
 800ad88:	4682      	mov	sl, r0
 800ad8a:	f7f5 faad 	bl	80002e8 <__aeabi_dsub>
 800ad8e:	4652      	mov	r2, sl
 800ad90:	4606      	mov	r6, r0
 800ad92:	460f      	mov	r7, r1
 800ad94:	462b      	mov	r3, r5
 800ad96:	ec51 0b19 	vmov	r0, r1, d9
 800ad9a:	f7f5 faa7 	bl	80002ec <__adddf3>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	2000      	movs	r0, #0
 800ada4:	49bb      	ldr	r1, [pc, #748]	; (800b094 <__ieee754_pow+0x76c>)
 800ada6:	f7f5 fd81 	bl	80008ac <__aeabi_ddiv>
 800adaa:	ec41 0b1a 	vmov	d10, r0, r1
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4630      	mov	r0, r6
 800adb4:	4639      	mov	r1, r7
 800adb6:	f7f5 fc4f 	bl	8000658 <__aeabi_dmul>
 800adba:	2300      	movs	r3, #0
 800adbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc0:	9302      	str	r3, [sp, #8]
 800adc2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800adc6:	46ab      	mov	fp, r5
 800adc8:	106d      	asrs	r5, r5, #1
 800adca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800adce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800add2:	ec41 0b18 	vmov	d8, r0, r1
 800add6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800adda:	2200      	movs	r2, #0
 800addc:	4640      	mov	r0, r8
 800adde:	4649      	mov	r1, r9
 800ade0:	4614      	mov	r4, r2
 800ade2:	461d      	mov	r5, r3
 800ade4:	f7f5 fc38 	bl	8000658 <__aeabi_dmul>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	4630      	mov	r0, r6
 800adee:	4639      	mov	r1, r7
 800adf0:	f7f5 fa7a 	bl	80002e8 <__aeabi_dsub>
 800adf4:	ec53 2b19 	vmov	r2, r3, d9
 800adf8:	4606      	mov	r6, r0
 800adfa:	460f      	mov	r7, r1
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fa72 	bl	80002e8 <__aeabi_dsub>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4650      	mov	r0, sl
 800ae0a:	4659      	mov	r1, fp
 800ae0c:	f7f5 fa6c 	bl	80002e8 <__aeabi_dsub>
 800ae10:	4642      	mov	r2, r8
 800ae12:	464b      	mov	r3, r9
 800ae14:	f7f5 fc20 	bl	8000658 <__aeabi_dmul>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 fa62 	bl	80002e8 <__aeabi_dsub>
 800ae24:	ec53 2b1a 	vmov	r2, r3, d10
 800ae28:	f7f5 fc16 	bl	8000658 <__aeabi_dmul>
 800ae2c:	ec53 2b18 	vmov	r2, r3, d8
 800ae30:	ec41 0b19 	vmov	d9, r0, r1
 800ae34:	ec51 0b18 	vmov	r0, r1, d8
 800ae38:	f7f5 fc0e 	bl	8000658 <__aeabi_dmul>
 800ae3c:	a37c      	add	r3, pc, #496	; (adr r3, 800b030 <__ieee754_pow+0x708>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	4604      	mov	r4, r0
 800ae44:	460d      	mov	r5, r1
 800ae46:	f7f5 fc07 	bl	8000658 <__aeabi_dmul>
 800ae4a:	a37b      	add	r3, pc, #492	; (adr r3, 800b038 <__ieee754_pow+0x710>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 fa4c 	bl	80002ec <__adddf3>
 800ae54:	4622      	mov	r2, r4
 800ae56:	462b      	mov	r3, r5
 800ae58:	f7f5 fbfe 	bl	8000658 <__aeabi_dmul>
 800ae5c:	a378      	add	r3, pc, #480	; (adr r3, 800b040 <__ieee754_pow+0x718>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 fa43 	bl	80002ec <__adddf3>
 800ae66:	4622      	mov	r2, r4
 800ae68:	462b      	mov	r3, r5
 800ae6a:	f7f5 fbf5 	bl	8000658 <__aeabi_dmul>
 800ae6e:	a376      	add	r3, pc, #472	; (adr r3, 800b048 <__ieee754_pow+0x720>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f7f5 fa3a 	bl	80002ec <__adddf3>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	f7f5 fbec 	bl	8000658 <__aeabi_dmul>
 800ae80:	a373      	add	r3, pc, #460	; (adr r3, 800b050 <__ieee754_pow+0x728>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7f5 fa31 	bl	80002ec <__adddf3>
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	f7f5 fbe3 	bl	8000658 <__aeabi_dmul>
 800ae92:	a371      	add	r3, pc, #452	; (adr r3, 800b058 <__ieee754_pow+0x730>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 fa28 	bl	80002ec <__adddf3>
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460f      	mov	r7, r1
 800aea2:	462b      	mov	r3, r5
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 fbd6 	bl	8000658 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 fbd0 	bl	8000658 <__aeabi_dmul>
 800aeb8:	4642      	mov	r2, r8
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	464b      	mov	r3, r9
 800aec0:	ec51 0b18 	vmov	r0, r1, d8
 800aec4:	f7f5 fa12 	bl	80002ec <__adddf3>
 800aec8:	ec53 2b19 	vmov	r2, r3, d9
 800aecc:	f7f5 fbc4 	bl	8000658 <__aeabi_dmul>
 800aed0:	4622      	mov	r2, r4
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fa0a 	bl	80002ec <__adddf3>
 800aed8:	4642      	mov	r2, r8
 800aeda:	4682      	mov	sl, r0
 800aedc:	468b      	mov	fp, r1
 800aede:	464b      	mov	r3, r9
 800aee0:	4640      	mov	r0, r8
 800aee2:	4649      	mov	r1, r9
 800aee4:	f7f5 fbb8 	bl	8000658 <__aeabi_dmul>
 800aee8:	4b6b      	ldr	r3, [pc, #428]	; (800b098 <__ieee754_pow+0x770>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	4606      	mov	r6, r0
 800aeee:	460f      	mov	r7, r1
 800aef0:	f7f5 f9fc 	bl	80002ec <__adddf3>
 800aef4:	4652      	mov	r2, sl
 800aef6:	465b      	mov	r3, fp
 800aef8:	f7f5 f9f8 	bl	80002ec <__adddf3>
 800aefc:	2000      	movs	r0, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4640      	mov	r0, r8
 800af08:	4649      	mov	r1, r9
 800af0a:	f7f5 fba5 	bl	8000658 <__aeabi_dmul>
 800af0e:	4b62      	ldr	r3, [pc, #392]	; (800b098 <__ieee754_pow+0x770>)
 800af10:	4680      	mov	r8, r0
 800af12:	4689      	mov	r9, r1
 800af14:	2200      	movs	r2, #0
 800af16:	4620      	mov	r0, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	f7f5 f9e5 	bl	80002e8 <__aeabi_dsub>
 800af1e:	4632      	mov	r2, r6
 800af20:	463b      	mov	r3, r7
 800af22:	f7f5 f9e1 	bl	80002e8 <__aeabi_dsub>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	4650      	mov	r0, sl
 800af2c:	4659      	mov	r1, fp
 800af2e:	f7f5 f9db 	bl	80002e8 <__aeabi_dsub>
 800af32:	ec53 2b18 	vmov	r2, r3, d8
 800af36:	f7f5 fb8f 	bl	8000658 <__aeabi_dmul>
 800af3a:	4622      	mov	r2, r4
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	462b      	mov	r3, r5
 800af42:	ec51 0b19 	vmov	r0, r1, d9
 800af46:	f7f5 fb87 	bl	8000658 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 f9cb 	bl	80002ec <__adddf3>
 800af56:	4606      	mov	r6, r0
 800af58:	460f      	mov	r7, r1
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 f9c3 	bl	80002ec <__adddf3>
 800af66:	a33e      	add	r3, pc, #248	; (adr r3, 800b060 <__ieee754_pow+0x738>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	2000      	movs	r0, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	460d      	mov	r5, r1
 800af72:	f7f5 fb71 	bl	8000658 <__aeabi_dmul>
 800af76:	4642      	mov	r2, r8
 800af78:	ec41 0b18 	vmov	d8, r0, r1
 800af7c:	464b      	mov	r3, r9
 800af7e:	4620      	mov	r0, r4
 800af80:	4629      	mov	r1, r5
 800af82:	f7f5 f9b1 	bl	80002e8 <__aeabi_dsub>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	f7f5 f9ab 	bl	80002e8 <__aeabi_dsub>
 800af92:	a335      	add	r3, pc, #212	; (adr r3, 800b068 <__ieee754_pow+0x740>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f7f5 fb5e 	bl	8000658 <__aeabi_dmul>
 800af9c:	a334      	add	r3, pc, #208	; (adr r3, 800b070 <__ieee754_pow+0x748>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	4606      	mov	r6, r0
 800afa4:	460f      	mov	r7, r1
 800afa6:	4620      	mov	r0, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 fb55 	bl	8000658 <__aeabi_dmul>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	f7f5 f999 	bl	80002ec <__adddf3>
 800afba:	9a07      	ldr	r2, [sp, #28]
 800afbc:	4b37      	ldr	r3, [pc, #220]	; (800b09c <__ieee754_pow+0x774>)
 800afbe:	4413      	add	r3, r2
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f7f5 f992 	bl	80002ec <__adddf3>
 800afc8:	4682      	mov	sl, r0
 800afca:	9805      	ldr	r0, [sp, #20]
 800afcc:	468b      	mov	fp, r1
 800afce:	f7f5 fad9 	bl	8000584 <__aeabi_i2d>
 800afd2:	9a07      	ldr	r2, [sp, #28]
 800afd4:	4b32      	ldr	r3, [pc, #200]	; (800b0a0 <__ieee754_pow+0x778>)
 800afd6:	4413      	add	r3, r2
 800afd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
 800afe0:	4652      	mov	r2, sl
 800afe2:	465b      	mov	r3, fp
 800afe4:	ec51 0b18 	vmov	r0, r1, d8
 800afe8:	f7f5 f980 	bl	80002ec <__adddf3>
 800afec:	4642      	mov	r2, r8
 800afee:	464b      	mov	r3, r9
 800aff0:	f7f5 f97c 	bl	80002ec <__adddf3>
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	f7f5 f978 	bl	80002ec <__adddf3>
 800affc:	2000      	movs	r0, #0
 800affe:	4632      	mov	r2, r6
 800b000:	463b      	mov	r3, r7
 800b002:	4604      	mov	r4, r0
 800b004:	460d      	mov	r5, r1
 800b006:	f7f5 f96f 	bl	80002e8 <__aeabi_dsub>
 800b00a:	4642      	mov	r2, r8
 800b00c:	464b      	mov	r3, r9
 800b00e:	f7f5 f96b 	bl	80002e8 <__aeabi_dsub>
 800b012:	ec53 2b18 	vmov	r2, r3, d8
 800b016:	f7f5 f967 	bl	80002e8 <__aeabi_dsub>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4650      	mov	r0, sl
 800b020:	4659      	mov	r1, fp
 800b022:	e610      	b.n	800ac46 <__ieee754_pow+0x31e>
 800b024:	2401      	movs	r4, #1
 800b026:	e6a1      	b.n	800ad6c <__ieee754_pow+0x444>
 800b028:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b078 <__ieee754_pow+0x750>
 800b02c:	e617      	b.n	800ac5e <__ieee754_pow+0x336>
 800b02e:	bf00      	nop
 800b030:	4a454eef 	.word	0x4a454eef
 800b034:	3fca7e28 	.word	0x3fca7e28
 800b038:	93c9db65 	.word	0x93c9db65
 800b03c:	3fcd864a 	.word	0x3fcd864a
 800b040:	a91d4101 	.word	0xa91d4101
 800b044:	3fd17460 	.word	0x3fd17460
 800b048:	518f264d 	.word	0x518f264d
 800b04c:	3fd55555 	.word	0x3fd55555
 800b050:	db6fabff 	.word	0xdb6fabff
 800b054:	3fdb6db6 	.word	0x3fdb6db6
 800b058:	33333303 	.word	0x33333303
 800b05c:	3fe33333 	.word	0x3fe33333
 800b060:	e0000000 	.word	0xe0000000
 800b064:	3feec709 	.word	0x3feec709
 800b068:	dc3a03fd 	.word	0xdc3a03fd
 800b06c:	3feec709 	.word	0x3feec709
 800b070:	145b01f5 	.word	0x145b01f5
 800b074:	be3e2fe0 	.word	0xbe3e2fe0
 800b078:	00000000 	.word	0x00000000
 800b07c:	3ff00000 	.word	0x3ff00000
 800b080:	7ff00000 	.word	0x7ff00000
 800b084:	43400000 	.word	0x43400000
 800b088:	0003988e 	.word	0x0003988e
 800b08c:	000bb679 	.word	0x000bb679
 800b090:	0800bcc8 	.word	0x0800bcc8
 800b094:	3ff00000 	.word	0x3ff00000
 800b098:	40080000 	.word	0x40080000
 800b09c:	0800bce8 	.word	0x0800bce8
 800b0a0:	0800bcd8 	.word	0x0800bcd8
 800b0a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b37c <__ieee754_pow+0xa54>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	f7f5 f91d 	bl	80002ec <__adddf3>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	ec41 0b1a 	vmov	d10, r0, r1
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	4639      	mov	r1, r7
 800b0be:	f7f5 f913 	bl	80002e8 <__aeabi_dsub>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	ec51 0b1a 	vmov	r0, r1, d10
 800b0ca:	f7f5 fd55 	bl	8000b78 <__aeabi_dcmpgt>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f47f ae04 	bne.w	800acdc <__ieee754_pow+0x3b4>
 800b0d4:	4aa4      	ldr	r2, [pc, #656]	; (800b368 <__ieee754_pow+0xa40>)
 800b0d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	f340 8108 	ble.w	800b2f0 <__ieee754_pow+0x9c8>
 800b0e0:	151b      	asrs	r3, r3, #20
 800b0e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b0e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b0ea:	fa4a f303 	asr.w	r3, sl, r3
 800b0ee:	445b      	add	r3, fp
 800b0f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b0f4:	4e9d      	ldr	r6, [pc, #628]	; (800b36c <__ieee754_pow+0xa44>)
 800b0f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b0fa:	4116      	asrs	r6, r2
 800b0fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b100:	2000      	movs	r0, #0
 800b102:	ea23 0106 	bic.w	r1, r3, r6
 800b106:	f1c2 0214 	rsb	r2, r2, #20
 800b10a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b10e:	fa4a fa02 	asr.w	sl, sl, r2
 800b112:	f1bb 0f00 	cmp.w	fp, #0
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4620      	mov	r0, r4
 800b11c:	4629      	mov	r1, r5
 800b11e:	bfb8      	it	lt
 800b120:	f1ca 0a00 	rsblt	sl, sl, #0
 800b124:	f7f5 f8e0 	bl	80002e8 <__aeabi_dsub>
 800b128:	ec41 0b19 	vmov	d9, r0, r1
 800b12c:	4642      	mov	r2, r8
 800b12e:	464b      	mov	r3, r9
 800b130:	ec51 0b19 	vmov	r0, r1, d9
 800b134:	f7f5 f8da 	bl	80002ec <__adddf3>
 800b138:	a37b      	add	r3, pc, #492	; (adr r3, 800b328 <__ieee754_pow+0xa00>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	2000      	movs	r0, #0
 800b140:	4604      	mov	r4, r0
 800b142:	460d      	mov	r5, r1
 800b144:	f7f5 fa88 	bl	8000658 <__aeabi_dmul>
 800b148:	ec53 2b19 	vmov	r2, r3, d9
 800b14c:	4606      	mov	r6, r0
 800b14e:	460f      	mov	r7, r1
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 f8c8 	bl	80002e8 <__aeabi_dsub>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 f8c2 	bl	80002e8 <__aeabi_dsub>
 800b164:	a372      	add	r3, pc, #456	; (adr r3, 800b330 <__ieee754_pow+0xa08>)
 800b166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16a:	f7f5 fa75 	bl	8000658 <__aeabi_dmul>
 800b16e:	a372      	add	r3, pc, #456	; (adr r3, 800b338 <__ieee754_pow+0xa10>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	4680      	mov	r8, r0
 800b176:	4689      	mov	r9, r1
 800b178:	4620      	mov	r0, r4
 800b17a:	4629      	mov	r1, r5
 800b17c:	f7f5 fa6c 	bl	8000658 <__aeabi_dmul>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4640      	mov	r0, r8
 800b186:	4649      	mov	r1, r9
 800b188:	f7f5 f8b0 	bl	80002ec <__adddf3>
 800b18c:	4604      	mov	r4, r0
 800b18e:	460d      	mov	r5, r1
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 f8a8 	bl	80002ec <__adddf3>
 800b19c:	4632      	mov	r2, r6
 800b19e:	463b      	mov	r3, r7
 800b1a0:	4680      	mov	r8, r0
 800b1a2:	4689      	mov	r9, r1
 800b1a4:	f7f5 f8a0 	bl	80002e8 <__aeabi_dsub>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f7f5 f89a 	bl	80002e8 <__aeabi_dsub>
 800b1b4:	4642      	mov	r2, r8
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 fa4a 	bl	8000658 <__aeabi_dmul>
 800b1c4:	a35e      	add	r3, pc, #376	; (adr r3, 800b340 <__ieee754_pow+0xa18>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	f7f5 fa43 	bl	8000658 <__aeabi_dmul>
 800b1d2:	a35d      	add	r3, pc, #372	; (adr r3, 800b348 <__ieee754_pow+0xa20>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f7f5 f886 	bl	80002e8 <__aeabi_dsub>
 800b1dc:	4622      	mov	r2, r4
 800b1de:	462b      	mov	r3, r5
 800b1e0:	f7f5 fa3a 	bl	8000658 <__aeabi_dmul>
 800b1e4:	a35a      	add	r3, pc, #360	; (adr r3, 800b350 <__ieee754_pow+0xa28>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f7f5 f87f 	bl	80002ec <__adddf3>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	462b      	mov	r3, r5
 800b1f2:	f7f5 fa31 	bl	8000658 <__aeabi_dmul>
 800b1f6:	a358      	add	r3, pc, #352	; (adr r3, 800b358 <__ieee754_pow+0xa30>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	f7f5 f874 	bl	80002e8 <__aeabi_dsub>
 800b200:	4622      	mov	r2, r4
 800b202:	462b      	mov	r3, r5
 800b204:	f7f5 fa28 	bl	8000658 <__aeabi_dmul>
 800b208:	a355      	add	r3, pc, #340	; (adr r3, 800b360 <__ieee754_pow+0xa38>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f7f5 f86d 	bl	80002ec <__adddf3>
 800b212:	4622      	mov	r2, r4
 800b214:	462b      	mov	r3, r5
 800b216:	f7f5 fa1f 	bl	8000658 <__aeabi_dmul>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 f861 	bl	80002e8 <__aeabi_dsub>
 800b226:	4604      	mov	r4, r0
 800b228:	460d      	mov	r5, r1
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4640      	mov	r0, r8
 800b230:	4649      	mov	r1, r9
 800b232:	f7f5 fa11 	bl	8000658 <__aeabi_dmul>
 800b236:	2200      	movs	r2, #0
 800b238:	ec41 0b19 	vmov	d9, r0, r1
 800b23c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b240:	4620      	mov	r0, r4
 800b242:	4629      	mov	r1, r5
 800b244:	f7f5 f850 	bl	80002e8 <__aeabi_dsub>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	ec51 0b19 	vmov	r0, r1, d9
 800b250:	f7f5 fb2c 	bl	80008ac <__aeabi_ddiv>
 800b254:	4632      	mov	r2, r6
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	463b      	mov	r3, r7
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 f9fa 	bl	8000658 <__aeabi_dmul>
 800b264:	4632      	mov	r2, r6
 800b266:	463b      	mov	r3, r7
 800b268:	f7f5 f840 	bl	80002ec <__adddf3>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4620      	mov	r0, r4
 800b272:	4629      	mov	r1, r5
 800b274:	f7f5 f838 	bl	80002e8 <__aeabi_dsub>
 800b278:	4642      	mov	r2, r8
 800b27a:	464b      	mov	r3, r9
 800b27c:	f7f5 f834 	bl	80002e8 <__aeabi_dsub>
 800b280:	460b      	mov	r3, r1
 800b282:	4602      	mov	r2, r0
 800b284:	493a      	ldr	r1, [pc, #232]	; (800b370 <__ieee754_pow+0xa48>)
 800b286:	2000      	movs	r0, #0
 800b288:	f7f5 f82e 	bl	80002e8 <__aeabi_dsub>
 800b28c:	ec41 0b10 	vmov	d0, r0, r1
 800b290:	ee10 3a90 	vmov	r3, s1
 800b294:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b29c:	da2b      	bge.n	800b2f6 <__ieee754_pow+0x9ce>
 800b29e:	4650      	mov	r0, sl
 800b2a0:	f000 f966 	bl	800b570 <scalbn>
 800b2a4:	ec51 0b10 	vmov	r0, r1, d0
 800b2a8:	ec53 2b18 	vmov	r2, r3, d8
 800b2ac:	f7ff bbed 	b.w	800aa8a <__ieee754_pow+0x162>
 800b2b0:	4b30      	ldr	r3, [pc, #192]	; (800b374 <__ieee754_pow+0xa4c>)
 800b2b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b2b6:	429e      	cmp	r6, r3
 800b2b8:	f77f af0c 	ble.w	800b0d4 <__ieee754_pow+0x7ac>
 800b2bc:	4b2e      	ldr	r3, [pc, #184]	; (800b378 <__ieee754_pow+0xa50>)
 800b2be:	440b      	add	r3, r1
 800b2c0:	4303      	orrs	r3, r0
 800b2c2:	d009      	beq.n	800b2d8 <__ieee754_pow+0x9b0>
 800b2c4:	ec51 0b18 	vmov	r0, r1, d8
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f7f5 fc36 	bl	8000b3c <__aeabi_dcmplt>
 800b2d0:	3800      	subs	r0, #0
 800b2d2:	bf18      	it	ne
 800b2d4:	2001      	movne	r0, #1
 800b2d6:	e447      	b.n	800ab68 <__ieee754_pow+0x240>
 800b2d8:	4622      	mov	r2, r4
 800b2da:	462b      	mov	r3, r5
 800b2dc:	f7f5 f804 	bl	80002e8 <__aeabi_dsub>
 800b2e0:	4642      	mov	r2, r8
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	f7f5 fc3e 	bl	8000b64 <__aeabi_dcmpge>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f43f aef3 	beq.w	800b0d4 <__ieee754_pow+0x7ac>
 800b2ee:	e7e9      	b.n	800b2c4 <__ieee754_pow+0x99c>
 800b2f0:	f04f 0a00 	mov.w	sl, #0
 800b2f4:	e71a      	b.n	800b12c <__ieee754_pow+0x804>
 800b2f6:	ec51 0b10 	vmov	r0, r1, d0
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	e7d4      	b.n	800b2a8 <__ieee754_pow+0x980>
 800b2fe:	491c      	ldr	r1, [pc, #112]	; (800b370 <__ieee754_pow+0xa48>)
 800b300:	2000      	movs	r0, #0
 800b302:	f7ff bb30 	b.w	800a966 <__ieee754_pow+0x3e>
 800b306:	2000      	movs	r0, #0
 800b308:	2100      	movs	r1, #0
 800b30a:	f7ff bb2c 	b.w	800a966 <__ieee754_pow+0x3e>
 800b30e:	4630      	mov	r0, r6
 800b310:	4639      	mov	r1, r7
 800b312:	f7ff bb28 	b.w	800a966 <__ieee754_pow+0x3e>
 800b316:	9204      	str	r2, [sp, #16]
 800b318:	f7ff bb7a 	b.w	800aa10 <__ieee754_pow+0xe8>
 800b31c:	2300      	movs	r3, #0
 800b31e:	f7ff bb64 	b.w	800a9ea <__ieee754_pow+0xc2>
 800b322:	bf00      	nop
 800b324:	f3af 8000 	nop.w
 800b328:	00000000 	.word	0x00000000
 800b32c:	3fe62e43 	.word	0x3fe62e43
 800b330:	fefa39ef 	.word	0xfefa39ef
 800b334:	3fe62e42 	.word	0x3fe62e42
 800b338:	0ca86c39 	.word	0x0ca86c39
 800b33c:	be205c61 	.word	0xbe205c61
 800b340:	72bea4d0 	.word	0x72bea4d0
 800b344:	3e663769 	.word	0x3e663769
 800b348:	c5d26bf1 	.word	0xc5d26bf1
 800b34c:	3ebbbd41 	.word	0x3ebbbd41
 800b350:	af25de2c 	.word	0xaf25de2c
 800b354:	3f11566a 	.word	0x3f11566a
 800b358:	16bebd93 	.word	0x16bebd93
 800b35c:	3f66c16c 	.word	0x3f66c16c
 800b360:	5555553e 	.word	0x5555553e
 800b364:	3fc55555 	.word	0x3fc55555
 800b368:	3fe00000 	.word	0x3fe00000
 800b36c:	000fffff 	.word	0x000fffff
 800b370:	3ff00000 	.word	0x3ff00000
 800b374:	4090cbff 	.word	0x4090cbff
 800b378:	3f6f3400 	.word	0x3f6f3400
 800b37c:	652b82fe 	.word	0x652b82fe
 800b380:	3c971547 	.word	0x3c971547

0800b384 <__ieee754_sqrt>:
 800b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b388:	ec55 4b10 	vmov	r4, r5, d0
 800b38c:	4e55      	ldr	r6, [pc, #340]	; (800b4e4 <__ieee754_sqrt+0x160>)
 800b38e:	43ae      	bics	r6, r5
 800b390:	ee10 0a10 	vmov	r0, s0
 800b394:	ee10 3a10 	vmov	r3, s0
 800b398:	462a      	mov	r2, r5
 800b39a:	4629      	mov	r1, r5
 800b39c:	d110      	bne.n	800b3c0 <__ieee754_sqrt+0x3c>
 800b39e:	ee10 2a10 	vmov	r2, s0
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	f7f5 f958 	bl	8000658 <__aeabi_dmul>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	f7f4 ff9c 	bl	80002ec <__adddf3>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	ec45 4b10 	vmov	d0, r4, r5
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	dc10      	bgt.n	800b3e6 <__ieee754_sqrt+0x62>
 800b3c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b3c8:	4330      	orrs	r0, r6
 800b3ca:	d0f5      	beq.n	800b3b8 <__ieee754_sqrt+0x34>
 800b3cc:	b15d      	cbz	r5, 800b3e6 <__ieee754_sqrt+0x62>
 800b3ce:	ee10 2a10 	vmov	r2, s0
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	ee10 0a10 	vmov	r0, s0
 800b3d8:	f7f4 ff86 	bl	80002e8 <__aeabi_dsub>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	f7f5 fa64 	bl	80008ac <__aeabi_ddiv>
 800b3e4:	e7e6      	b.n	800b3b4 <__ieee754_sqrt+0x30>
 800b3e6:	1512      	asrs	r2, r2, #20
 800b3e8:	d074      	beq.n	800b4d4 <__ieee754_sqrt+0x150>
 800b3ea:	07d4      	lsls	r4, r2, #31
 800b3ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b3f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b3f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b3f8:	bf5e      	ittt	pl
 800b3fa:	0fda      	lsrpl	r2, r3, #31
 800b3fc:	005b      	lslpl	r3, r3, #1
 800b3fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b402:	2400      	movs	r4, #0
 800b404:	0fda      	lsrs	r2, r3, #31
 800b406:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b40a:	107f      	asrs	r7, r7, #1
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	2516      	movs	r5, #22
 800b410:	4620      	mov	r0, r4
 800b412:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b416:	1886      	adds	r6, r0, r2
 800b418:	428e      	cmp	r6, r1
 800b41a:	bfde      	ittt	le
 800b41c:	1b89      	suble	r1, r1, r6
 800b41e:	18b0      	addle	r0, r6, r2
 800b420:	18a4      	addle	r4, r4, r2
 800b422:	0049      	lsls	r1, r1, #1
 800b424:	3d01      	subs	r5, #1
 800b426:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b42a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b42e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b432:	d1f0      	bne.n	800b416 <__ieee754_sqrt+0x92>
 800b434:	462a      	mov	r2, r5
 800b436:	f04f 0e20 	mov.w	lr, #32
 800b43a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b43e:	4281      	cmp	r1, r0
 800b440:	eb06 0c05 	add.w	ip, r6, r5
 800b444:	dc02      	bgt.n	800b44c <__ieee754_sqrt+0xc8>
 800b446:	d113      	bne.n	800b470 <__ieee754_sqrt+0xec>
 800b448:	459c      	cmp	ip, r3
 800b44a:	d811      	bhi.n	800b470 <__ieee754_sqrt+0xec>
 800b44c:	f1bc 0f00 	cmp.w	ip, #0
 800b450:	eb0c 0506 	add.w	r5, ip, r6
 800b454:	da43      	bge.n	800b4de <__ieee754_sqrt+0x15a>
 800b456:	2d00      	cmp	r5, #0
 800b458:	db41      	blt.n	800b4de <__ieee754_sqrt+0x15a>
 800b45a:	f100 0801 	add.w	r8, r0, #1
 800b45e:	1a09      	subs	r1, r1, r0
 800b460:	459c      	cmp	ip, r3
 800b462:	bf88      	it	hi
 800b464:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800b468:	eba3 030c 	sub.w	r3, r3, ip
 800b46c:	4432      	add	r2, r6
 800b46e:	4640      	mov	r0, r8
 800b470:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b474:	f1be 0e01 	subs.w	lr, lr, #1
 800b478:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b47c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b480:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b484:	d1db      	bne.n	800b43e <__ieee754_sqrt+0xba>
 800b486:	430b      	orrs	r3, r1
 800b488:	d006      	beq.n	800b498 <__ieee754_sqrt+0x114>
 800b48a:	1c50      	adds	r0, r2, #1
 800b48c:	bf13      	iteet	ne
 800b48e:	3201      	addne	r2, #1
 800b490:	3401      	addeq	r4, #1
 800b492:	4672      	moveq	r2, lr
 800b494:	f022 0201 	bicne.w	r2, r2, #1
 800b498:	1063      	asrs	r3, r4, #1
 800b49a:	0852      	lsrs	r2, r2, #1
 800b49c:	07e1      	lsls	r1, r4, #31
 800b49e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b4a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b4a6:	bf48      	it	mi
 800b4a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b4ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b4b0:	4614      	mov	r4, r2
 800b4b2:	e781      	b.n	800b3b8 <__ieee754_sqrt+0x34>
 800b4b4:	0ad9      	lsrs	r1, r3, #11
 800b4b6:	3815      	subs	r0, #21
 800b4b8:	055b      	lsls	r3, r3, #21
 800b4ba:	2900      	cmp	r1, #0
 800b4bc:	d0fa      	beq.n	800b4b4 <__ieee754_sqrt+0x130>
 800b4be:	02cd      	lsls	r5, r1, #11
 800b4c0:	d50a      	bpl.n	800b4d8 <__ieee754_sqrt+0x154>
 800b4c2:	f1c2 0420 	rsb	r4, r2, #32
 800b4c6:	fa23 f404 	lsr.w	r4, r3, r4
 800b4ca:	1e55      	subs	r5, r2, #1
 800b4cc:	4093      	lsls	r3, r2
 800b4ce:	4321      	orrs	r1, r4
 800b4d0:	1b42      	subs	r2, r0, r5
 800b4d2:	e78a      	b.n	800b3ea <__ieee754_sqrt+0x66>
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	e7f0      	b.n	800b4ba <__ieee754_sqrt+0x136>
 800b4d8:	0049      	lsls	r1, r1, #1
 800b4da:	3201      	adds	r2, #1
 800b4dc:	e7ef      	b.n	800b4be <__ieee754_sqrt+0x13a>
 800b4de:	4680      	mov	r8, r0
 800b4e0:	e7bd      	b.n	800b45e <__ieee754_sqrt+0xda>
 800b4e2:	bf00      	nop
 800b4e4:	7ff00000 	.word	0x7ff00000

0800b4e8 <with_errno>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	4616      	mov	r6, r2
 800b4f0:	f7fa fc68 	bl	8005dc4 <__errno>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	6006      	str	r6, [r0, #0]
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}

0800b4fc <xflow>:
 800b4fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4fe:	4614      	mov	r4, r2
 800b500:	461d      	mov	r5, r3
 800b502:	b108      	cbz	r0, 800b508 <xflow+0xc>
 800b504:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b508:	e9cd 2300 	strd	r2, r3, [sp]
 800b50c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f5 f8a0 	bl	8000658 <__aeabi_dmul>
 800b518:	2222      	movs	r2, #34	; 0x22
 800b51a:	b003      	add	sp, #12
 800b51c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b520:	f7ff bfe2 	b.w	800b4e8 <with_errno>

0800b524 <__math_uflow>:
 800b524:	b508      	push	{r3, lr}
 800b526:	2200      	movs	r2, #0
 800b528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b52c:	f7ff ffe6 	bl	800b4fc <xflow>
 800b530:	ec41 0b10 	vmov	d0, r0, r1
 800b534:	bd08      	pop	{r3, pc}

0800b536 <__math_oflow>:
 800b536:	b508      	push	{r3, lr}
 800b538:	2200      	movs	r2, #0
 800b53a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b53e:	f7ff ffdd 	bl	800b4fc <xflow>
 800b542:	ec41 0b10 	vmov	d0, r0, r1
 800b546:	bd08      	pop	{r3, pc}

0800b548 <fabs>:
 800b548:	ec51 0b10 	vmov	r0, r1, d0
 800b54c:	ee10 2a10 	vmov	r2, s0
 800b550:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b554:	ec43 2b10 	vmov	d0, r2, r3
 800b558:	4770      	bx	lr

0800b55a <finite>:
 800b55a:	b082      	sub	sp, #8
 800b55c:	ed8d 0b00 	vstr	d0, [sp]
 800b560:	9801      	ldr	r0, [sp, #4]
 800b562:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b566:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b56a:	0fc0      	lsrs	r0, r0, #31
 800b56c:	b002      	add	sp, #8
 800b56e:	4770      	bx	lr

0800b570 <scalbn>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	ec55 4b10 	vmov	r4, r5, d0
 800b576:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b57a:	4606      	mov	r6, r0
 800b57c:	462b      	mov	r3, r5
 800b57e:	b99a      	cbnz	r2, 800b5a8 <scalbn+0x38>
 800b580:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b584:	4323      	orrs	r3, r4
 800b586:	d036      	beq.n	800b5f6 <scalbn+0x86>
 800b588:	4b39      	ldr	r3, [pc, #228]	; (800b670 <scalbn+0x100>)
 800b58a:	4629      	mov	r1, r5
 800b58c:	ee10 0a10 	vmov	r0, s0
 800b590:	2200      	movs	r2, #0
 800b592:	f7f5 f861 	bl	8000658 <__aeabi_dmul>
 800b596:	4b37      	ldr	r3, [pc, #220]	; (800b674 <scalbn+0x104>)
 800b598:	429e      	cmp	r6, r3
 800b59a:	4604      	mov	r4, r0
 800b59c:	460d      	mov	r5, r1
 800b59e:	da10      	bge.n	800b5c2 <scalbn+0x52>
 800b5a0:	a32b      	add	r3, pc, #172	; (adr r3, 800b650 <scalbn+0xe0>)
 800b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a6:	e03a      	b.n	800b61e <scalbn+0xae>
 800b5a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b5ac:	428a      	cmp	r2, r1
 800b5ae:	d10c      	bne.n	800b5ca <scalbn+0x5a>
 800b5b0:	ee10 2a10 	vmov	r2, s0
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f7f4 fe98 	bl	80002ec <__adddf3>
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	e019      	b.n	800b5f6 <scalbn+0x86>
 800b5c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	3a36      	subs	r2, #54	; 0x36
 800b5ca:	4432      	add	r2, r6
 800b5cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b5d0:	428a      	cmp	r2, r1
 800b5d2:	dd08      	ble.n	800b5e6 <scalbn+0x76>
 800b5d4:	2d00      	cmp	r5, #0
 800b5d6:	a120      	add	r1, pc, #128	; (adr r1, 800b658 <scalbn+0xe8>)
 800b5d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5dc:	da1c      	bge.n	800b618 <scalbn+0xa8>
 800b5de:	a120      	add	r1, pc, #128	; (adr r1, 800b660 <scalbn+0xf0>)
 800b5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e4:	e018      	b.n	800b618 <scalbn+0xa8>
 800b5e6:	2a00      	cmp	r2, #0
 800b5e8:	dd08      	ble.n	800b5fc <scalbn+0x8c>
 800b5ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b5ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b5f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5f6:	ec45 4b10 	vmov	d0, r4, r5
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b600:	da19      	bge.n	800b636 <scalbn+0xc6>
 800b602:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b606:	429e      	cmp	r6, r3
 800b608:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b60c:	dd0a      	ble.n	800b624 <scalbn+0xb4>
 800b60e:	a112      	add	r1, pc, #72	; (adr r1, 800b658 <scalbn+0xe8>)
 800b610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1e2      	bne.n	800b5de <scalbn+0x6e>
 800b618:	a30f      	add	r3, pc, #60	; (adr r3, 800b658 <scalbn+0xe8>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f7f5 f81b 	bl	8000658 <__aeabi_dmul>
 800b622:	e7cb      	b.n	800b5bc <scalbn+0x4c>
 800b624:	a10a      	add	r1, pc, #40	; (adr r1, 800b650 <scalbn+0xe0>)
 800b626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0b8      	beq.n	800b5a0 <scalbn+0x30>
 800b62e:	a10e      	add	r1, pc, #56	; (adr r1, 800b668 <scalbn+0xf8>)
 800b630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b634:	e7b4      	b.n	800b5a0 <scalbn+0x30>
 800b636:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b63a:	3236      	adds	r2, #54	; 0x36
 800b63c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b640:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b644:	4620      	mov	r0, r4
 800b646:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <scalbn+0x108>)
 800b648:	2200      	movs	r2, #0
 800b64a:	e7e8      	b.n	800b61e <scalbn+0xae>
 800b64c:	f3af 8000 	nop.w
 800b650:	c2f8f359 	.word	0xc2f8f359
 800b654:	01a56e1f 	.word	0x01a56e1f
 800b658:	8800759c 	.word	0x8800759c
 800b65c:	7e37e43c 	.word	0x7e37e43c
 800b660:	8800759c 	.word	0x8800759c
 800b664:	fe37e43c 	.word	0xfe37e43c
 800b668:	c2f8f359 	.word	0xc2f8f359
 800b66c:	81a56e1f 	.word	0x81a56e1f
 800b670:	43500000 	.word	0x43500000
 800b674:	ffff3cb0 	.word	0xffff3cb0
 800b678:	3c900000 	.word	0x3c900000

0800b67c <_init>:
 800b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67e:	bf00      	nop
 800b680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b682:	bc08      	pop	{r3}
 800b684:	469e      	mov	lr, r3
 800b686:	4770      	bx	lr

0800b688 <_fini>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	bf00      	nop
 800b68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68e:	bc08      	pop	{r3}
 800b690:	469e      	mov	lr, r3
 800b692:	4770      	bx	lr
