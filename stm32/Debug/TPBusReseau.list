
TPBusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000078  08005f30  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005f30  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e446  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201c  00000000  00000000  0002e4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00030510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00031110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d9d  00000000  00000000  00031c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4d0  00000000  00000000  000539fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceceb  00000000  00000000  00062ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131bb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  00131c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005cd0 	.word	0x08005cd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005cd0 	.word	0x08005cd0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fd41 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f921 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fa43 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fa17 	bl	8000a18 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005ea:	f000 f989 	bl	8000900 <MX_CAN1_Init>
  MX_I2C1_Init();
 80005ee:	f000 f9bb 	bl	8000968 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005f2:	f000 f9e7 	bl	80009c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Master_Transmit(&hi2c1, BMP280_SLV_ADD, &id_get_snd, BMP280_ID_SND_SIZE, HAL_MAX_DELAY);
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	4a6d      	ldr	r2, [pc, #436]	; (80007b4 <main+0x1e0>)
 8000600:	21ee      	movs	r1, #238	; 0xee
 8000602:	486d      	ldr	r0, [pc, #436]	; (80007b8 <main+0x1e4>)
 8000604:	f001 fb54 	bl	8001cb0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, BMP280_SLV_ADD, &id_get_rcv, BMP280_ID_RCV_SIZE, HAL_MAX_DELAY);
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	4a6a      	ldr	r2, [pc, #424]	; (80007bc <main+0x1e8>)
 8000612:	21ee      	movs	r1, #238	; 0xee
 8000614:	4868      	ldr	r0, [pc, #416]	; (80007b8 <main+0x1e4>)
 8000616:	f001 fc49 	bl	8001eac <HAL_I2C_Master_Receive>
  if (id_get_rcv == BMP280_ID_EXP){
 800061a:	4b68      	ldr	r3, [pc, #416]	; (80007bc <main+0x1e8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b58      	cmp	r3, #88	; 0x58
 8000620:	d106      	bne.n	8000630 <main+0x5c>
	  printf("Slave ID is 0x%x : Correct\r\n", id_get_rcv);
 8000622:	4b66      	ldr	r3, [pc, #408]	; (80007bc <main+0x1e8>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	4865      	ldr	r0, [pc, #404]	; (80007c0 <main+0x1ec>)
 800062a:	f004 fb4d 	bl	8004cc8 <iprintf>
 800062e:	e005      	b.n	800063c <main+0x68>
  }
  else {
	  printf("ERROR : Slave ID is 0x%x : Incorrect\r\n", id_get_rcv);
 8000630:	4b62      	ldr	r3, [pc, #392]	; (80007bc <main+0x1e8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4863      	ldr	r0, [pc, #396]	; (80007c4 <main+0x1f0>)
 8000638:	f004 fb46 	bl	8004cc8 <iprintf>
  }

  HAL_I2C_Master_Transmit(&hi2c1, BMP280_SLV_ADD, conf_set_snd, BMP280_CONF_SND_SIZE, HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2302      	movs	r3, #2
 8000644:	4a60      	ldr	r2, [pc, #384]	; (80007c8 <main+0x1f4>)
 8000646:	21ee      	movs	r1, #238	; 0xee
 8000648:	485b      	ldr	r0, [pc, #364]	; (80007b8 <main+0x1e4>)
 800064a:	f001 fb31 	bl	8001cb0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, BMP280_SLV_ADD, &conf_set_rcv, BMP280_CONF_RCV_SIZE, HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	4a5d      	ldr	r2, [pc, #372]	; (80007cc <main+0x1f8>)
 8000658:	21ee      	movs	r1, #238	; 0xee
 800065a:	4857      	ldr	r0, [pc, #348]	; (80007b8 <main+0x1e4>)
 800065c:	f001 fc26 	bl	8001eac <HAL_I2C_Master_Receive>
  if (conf_set_rcv == BMP280_CONF_SET){
 8000660:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <main+0x1f8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b57      	cmp	r3, #87	; 0x57
 8000666:	d103      	bne.n	8000670 <main+0x9c>
	  printf("Slave configuration set to desired parameters\r\n");
 8000668:	4859      	ldr	r0, [pc, #356]	; (80007d0 <main+0x1fc>)
 800066a:	f004 fbb3 	bl	8004dd4 <puts>
 800066e:	e002      	b.n	8000676 <main+0xa2>
  }
  else {
	  printf("ERROR : Slave configuration failed\r\n");
 8000670:	4858      	ldr	r0, [pc, #352]	; (80007d4 <main+0x200>)
 8000672:	f004 fbaf 	bl	8004dd4 <puts>
  }
  HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f000 fd64 	bl	8001144 <HAL_Delay>
  HAL_I2C_Mem_Read(&hi2c1, BMP280_SLV_ADD, BMP280_ETAL_REG, 1,
 800067c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	231a      	movs	r3, #26
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	4b54      	ldr	r3, [pc, #336]	; (80007d8 <main+0x204>)
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	2288      	movs	r2, #136	; 0x88
 800068e:	21ee      	movs	r1, #238	; 0xee
 8000690:	4849      	ldr	r0, [pc, #292]	; (80007b8 <main+0x1e4>)
 8000692:	f001 fe31 	bl	80022f8 <HAL_I2C_Mem_Read>
		  etal_rcv, BMP280_ETAL_RCV_SIZE, HAL_MAX_DELAY);
  printf("%x %x %x %x\r\n", etal_rcv[0], etal_rcv[4], etal_rcv[13], etal_rcv[25]);
 8000696:	4b50      	ldr	r3, [pc, #320]	; (80007d8 <main+0x204>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	4b4e      	ldr	r3, [pc, #312]	; (80007d8 <main+0x204>)
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <main+0x204>)
 80006a4:	7b5b      	ldrb	r3, [r3, #13]
 80006a6:	4618      	mov	r0, r3
 80006a8:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <main+0x204>)
 80006aa:	7e5b      	ldrb	r3, [r3, #25]
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4603      	mov	r3, r0
 80006b0:	484a      	ldr	r0, [pc, #296]	; (80007dc <main+0x208>)
 80006b2:	f004 fb09 	bl	8004cc8 <iprintf>

  HAL_UART_Receive_IT(&huart1, &uart1_buff, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	4949      	ldr	r1, [pc, #292]	; (80007e0 <main+0x20c>)
 80006ba:	484a      	ldr	r0, [pc, #296]	; (80007e4 <main+0x210>)
 80006bc:	f003 fb1f 	bl	8003cfe <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uart1_flag == 1) {
 80006c0:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <main+0x214>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1fb      	bne.n	80006c0 <main+0xec>
		  if (uart1_buff == 0x0D) {
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <main+0x20c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0d      	cmp	r3, #13
 80006ce:	d162      	bne.n	8000796 <main+0x1c2>
			  uart1_word[uart1_index] = 0;
 80006d0:	4b46      	ldr	r3, [pc, #280]	; (80007ec <main+0x218>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a46      	ldr	r2, [pc, #280]	; (80007f0 <main+0x21c>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	54d1      	strb	r1, [r2, r3]
			  printf("%s\r\n", uart1_word);
 80006da:	4945      	ldr	r1, [pc, #276]	; (80007f0 <main+0x21c>)
 80006dc:	4845      	ldr	r0, [pc, #276]	; (80007f4 <main+0x220>)
 80006de:	f004 faf3 	bl	8004cc8 <iprintf>
			  if (strcmp(uart1_word, "GET_T")==0) {
 80006e2:	4945      	ldr	r1, [pc, #276]	; (80007f8 <main+0x224>)
 80006e4:	4842      	ldr	r0, [pc, #264]	; (80007f0 <main+0x21c>)
 80006e6:	f7ff fd93 	bl	8000210 <strcmp>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d107      	bne.n	8000700 <main+0x12c>
				  HAL_UART_Transmit(&huart1, "\n274K\r\n", 7, HAL_MAX_DELAY);
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f4:	2207      	movs	r2, #7
 80006f6:	4941      	ldr	r1, [pc, #260]	; (80007fc <main+0x228>)
 80006f8:	483a      	ldr	r0, [pc, #232]	; (80007e4 <main+0x210>)
 80006fa:	f003 fa6e 	bl	8003bda <HAL_UART_Transmit>
 80006fe:	e043      	b.n	8000788 <main+0x1b4>
			  }
			  else if (strcmp(uart1_word, "GET_P")==0) {
 8000700:	493f      	ldr	r1, [pc, #252]	; (8000800 <main+0x22c>)
 8000702:	483b      	ldr	r0, [pc, #236]	; (80007f0 <main+0x21c>)
 8000704:	f7ff fd84 	bl	8000210 <strcmp>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d107      	bne.n	800071e <main+0x14a>
				  HAL_UART_Transmit(&huart1, "\n1Bar\r\n", 7, HAL_MAX_DELAY);
 800070e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000712:	2207      	movs	r2, #7
 8000714:	493b      	ldr	r1, [pc, #236]	; (8000804 <main+0x230>)
 8000716:	4833      	ldr	r0, [pc, #204]	; (80007e4 <main+0x210>)
 8000718:	f003 fa5f 	bl	8003bda <HAL_UART_Transmit>
 800071c:	e034      	b.n	8000788 <main+0x1b4>
			  }
			  else if (memcmp(uart1_word, "SET_K=", 6)==0) {
 800071e:	2206      	movs	r2, #6
 8000720:	4939      	ldr	r1, [pc, #228]	; (8000808 <main+0x234>)
 8000722:	4833      	ldr	r0, [pc, #204]	; (80007f0 <main+0x21c>)
 8000724:	f004 fab8 	bl	8004c98 <memcmp>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d107      	bne.n	800073e <main+0x16a>
				  HAL_UART_Transmit(&huart1, "\nOui\r\n", 6, HAL_MAX_DELAY);
 800072e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000732:	2206      	movs	r2, #6
 8000734:	4935      	ldr	r1, [pc, #212]	; (800080c <main+0x238>)
 8000736:	482b      	ldr	r0, [pc, #172]	; (80007e4 <main+0x210>)
 8000738:	f003 fa4f 	bl	8003bda <HAL_UART_Transmit>
 800073c:	e024      	b.n	8000788 <main+0x1b4>
			  }
			  else if (strcmp(uart1_word, "GET_K")==0) {
 800073e:	4934      	ldr	r1, [pc, #208]	; (8000810 <main+0x23c>)
 8000740:	482b      	ldr	r0, [pc, #172]	; (80007f0 <main+0x21c>)
 8000742:	f7ff fd65 	bl	8000210 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d107      	bne.n	800075c <main+0x188>
			  	  HAL_UART_Transmit(&huart1, "\nK\r\n", 4, HAL_MAX_DELAY);
 800074c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000750:	2204      	movs	r2, #4
 8000752:	4930      	ldr	r1, [pc, #192]	; (8000814 <main+0x240>)
 8000754:	4823      	ldr	r0, [pc, #140]	; (80007e4 <main+0x210>)
 8000756:	f003 fa40 	bl	8003bda <HAL_UART_Transmit>
 800075a:	e015      	b.n	8000788 <main+0x1b4>
			  }
			  else if (strcmp(uart1_word, "GET_A")==0) {
 800075c:	492e      	ldr	r1, [pc, #184]	; (8000818 <main+0x244>)
 800075e:	4824      	ldr	r0, [pc, #144]	; (80007f0 <main+0x21c>)
 8000760:	f7ff fd56 	bl	8000210 <strcmp>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d107      	bne.n	800077a <main+0x1a6>
				  HAL_UART_Transmit(&huart1, "\nA\r\n", 4, HAL_MAX_DELAY);
 800076a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800076e:	2204      	movs	r2, #4
 8000770:	492a      	ldr	r1, [pc, #168]	; (800081c <main+0x248>)
 8000772:	481c      	ldr	r0, [pc, #112]	; (80007e4 <main+0x210>)
 8000774:	f003 fa31 	bl	8003bda <HAL_UART_Transmit>
 8000778:	e006      	b.n	8000788 <main+0x1b4>
			  }
			  else {
				  HAL_UART_Transmit(&huart1, "\nUnknown\r\n", 10, HAL_MAX_DELAY);
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077e:	220a      	movs	r2, #10
 8000780:	4927      	ldr	r1, [pc, #156]	; (8000820 <main+0x24c>)
 8000782:	4818      	ldr	r0, [pc, #96]	; (80007e4 <main+0x210>)
 8000784:	f003 fa29 	bl	8003bda <HAL_UART_Transmit>
			  }
		  uart1_word[0] = 0;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <main+0x21c>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
		  uart1_index = 0;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <main+0x218>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	e00a      	b.n	80007ac <main+0x1d8>
		  }
		  else {
			  uart1_word[uart1_index] = uart1_buff;
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <main+0x218>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <main+0x20c>)
 800079c:	7811      	ldrb	r1, [r2, #0]
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <main+0x21c>)
 80007a0:	54d1      	strb	r1, [r2, r3]
			  uart1_index++;
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <main+0x218>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a10      	ldr	r2, [pc, #64]	; (80007ec <main+0x218>)
 80007aa:	6013      	str	r3, [r2, #0]
		  }
	  uart1_flag = 0;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <main+0x214>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	  if (uart1_flag == 1) {
 80007b2:	e785      	b.n	80006c0 <main+0xec>
 80007b4:	20000000 	.word	0x20000000
 80007b8:	200000bc 	.word	0x200000bc
 80007bc:	20000198 	.word	0x20000198
 80007c0:	08005ce8 	.word	0x08005ce8
 80007c4:	08005d08 	.word	0x08005d08
 80007c8:	20000004 	.word	0x20000004
 80007cc:	20000199 	.word	0x20000199
 80007d0:	08005d30 	.word	0x08005d30
 80007d4:	08005d60 	.word	0x08005d60
 80007d8:	2000019c 	.word	0x2000019c
 80007dc:	08005d84 	.word	0x08005d84
 80007e0:	200001bc 	.word	0x200001bc
 80007e4:	20000110 	.word	0x20000110
 80007e8:	200001b8 	.word	0x200001b8
 80007ec:	200001e0 	.word	0x200001e0
 80007f0:	200001c0 	.word	0x200001c0
 80007f4:	08005d94 	.word	0x08005d94
 80007f8:	08005d9c 	.word	0x08005d9c
 80007fc:	08005da4 	.word	0x08005da4
 8000800:	08005dac 	.word	0x08005dac
 8000804:	08005db4 	.word	0x08005db4
 8000808:	08005dbc 	.word	0x08005dbc
 800080c:	08005dc4 	.word	0x08005dc4
 8000810:	08005dcc 	.word	0x08005dcc
 8000814:	08005dd4 	.word	0x08005dd4
 8000818:	08005ddc 	.word	0x08005ddc
 800081c:	08005de4 	.word	0x08005de4
 8000820:	08005dec 	.word	0x08005dec

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2234      	movs	r2, #52	; 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f004 fa40 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <SystemClock_Config+0xd4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <SystemClock_Config+0xd4>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <SystemClock_Config+0xd4>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <SystemClock_Config+0xd8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000870:	4a22      	ldr	r2, [pc, #136]	; (80008fc <SystemClock_Config+0xd8>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <SystemClock_Config+0xd8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2310      	movs	r3, #16
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000898:	2310      	movs	r3, #16
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800089c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008a2:	2304      	movs	r3, #4
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fea6 	bl	8003604 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008be:	f000 f943 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2302      	movs	r3, #2
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2102      	movs	r1, #2
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fb46 	bl	8002f70 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ea:	f000 f92d 	bl	8000b48 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	; 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_CAN1_Init+0x60>)
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_CAN1_Init+0x64>)
 8000908:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_CAN1_Init+0x60>)
 800090c:	2210      	movs	r2, #16
 800090e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_CAN1_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_CAN1_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_CAN1_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_CAN1_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_CAN1_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_CAN1_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_CAN1_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_CAN1_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_CAN1_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_CAN1_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_CAN1_Init+0x60>)
 800094e:	f000 fc1d 	bl	800118c <HAL_CAN_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 f8f6 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000094 	.word	0x20000094
 8000964:	40006400 	.word	0x40006400

08000968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_I2C1_Init+0x50>)
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C1_Init+0x54>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x58>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_I2C1_Init+0x50>)
 80009a6:	f001 f83f 	bl	8001a28 <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 f8ca 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000bc 	.word	0x200000bc
 80009bc:	40005400 	.word	0x40005400
 80009c0:	000186a0 	.word	0x000186a0

080009c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_USART1_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009fc:	f003 f8a0 	bl	8003b40 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a06:	f000 f89f 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000110 	.word	0x20000110
 8000a14:	40011000 	.word	0x40011000

08000a18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART2_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f003 f876 	bl	8003b40 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 f875 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000154 	.word	0x20000154
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_GPIO_Init+0xd0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2120      	movs	r1, #32
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000af8:	f000 ff7c 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_GPIO_Init+0xd8>)
 8000b14:	f000 fdda 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000b30:	f000 fdcc 	bl	80016cc <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020800 	.word	0x40020800

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fcc6 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_CAN_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12c      	bne.n	8000c20 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_CAN_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_CAN_MspInit+0x88>)
 8000bd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_CAN_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_CAN_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_CAN_MspInit+0x88>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_CAN_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c10:	2309      	movs	r3, #9
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_CAN_MspInit+0x8c>)
 8000c1c:	f000 fd56 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40006400 	.word	0x40006400
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020400 	.word	0x40020400

08000c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_I2C_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c72:	23c0      	movs	r3, #192	; 0xc0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c76:	2312      	movs	r3, #18
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c82:	2304      	movs	r3, #4
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_I2C_MspInit+0x8c>)
 8000c8e:	f000 fd1d 	bl	80016cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a3a      	ldr	r2, [pc, #232]	; (8000dcc <HAL_UART_MspInit+0x108>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d135      	bne.n	8000d52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a38      	ldr	r2, [pc, #224]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a31      	ldr	r2, [pc, #196]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d30:	2307      	movs	r3, #7
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d3c:	f000 fcc6 	bl	80016cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2025      	movs	r0, #37	; 0x25
 8000d46:	f000 fbf8 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d4a:	2025      	movs	r0, #37	; 0x25
 8000d4c:	f000 fc11 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d50:	e038      	b.n	8000dc4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <HAL_UART_MspInit+0x114>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d133      	bne.n	8000dc4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d94:	230c      	movs	r3, #12
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da4:	2307      	movs	r3, #7
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <HAL_UART_MspInit+0x110>)
 8000db0:	f000 fc8c 	bl	80016cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2026      	movs	r0, #38	; 0x26
 8000dba:	f000 fbbe 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dbe:	2026      	movs	r0, #38	; 0x26
 8000dc0:	f000 fbd7 	bl	8001572 <HAL_NVIC_EnableIRQ>
}
 8000dc4:	bf00      	nop
 8000dc6:	3730      	adds	r7, #48	; 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40004400 	.word	0x40004400

08000ddc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000de4:	1d39      	adds	r1, r7, #4
 8000de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dea:	2201      	movs	r2, #1
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <__io_putchar+0x20>)
 8000dee:	f002 fef4 	bl	8003bda <HAL_UART_Transmit>

  return ch;
 8000df2:	687b      	ldr	r3, [r7, #4]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000154 	.word	0x20000154

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4c:	f000 f95a 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
	uart1_flag = 1;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <USART1_IRQHandler+0x2c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
  HAL_UART_IRQHandler(&huart1);
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <USART1_IRQHandler+0x30>)
 8000e60:	f002 ff7e 	bl	8003d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Transmit(&huart1, &uart1_buff, 1, HAL_MAX_DELAY);
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4907      	ldr	r1, [pc, #28]	; (8000e88 <USART1_IRQHandler+0x34>)
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <USART1_IRQHandler+0x30>)
 8000e6e:	f002 feb4 	bl	8003bda <HAL_UART_Transmit>

   HAL_UART_Receive_IT(&huart1, &uart1_buff, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	4904      	ldr	r1, [pc, #16]	; (8000e88 <USART1_IRQHandler+0x34>)
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <USART1_IRQHandler+0x30>)
 8000e78:	f002 ff41 	bl	8003cfe <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200001b8 	.word	0x200001b8
 8000e84:	20000110 	.word	0x20000110
 8000e88:	200001bc 	.word	0x200001bc

08000e8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USART2_IRQHandler+0x10>)
 8000e92:	f002 ff65 	bl	8003d60 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000154 	.word	0x20000154

08000ea0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
	}

return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e009      	b.n	8000f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff71 	bl	8000ddc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf1      	blt.n	8000eec <_write+0x12>
	}
	return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f003 fe4a 	bl	8004c44 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20020000 	.word	0x20020000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	200001e4 	.word	0x200001e4
 8000fe4:	20000200 	.word	0x20000200

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001028:	4c0b      	ldr	r4, [pc, #44]	; (8001058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001036:	f7ff ffd7 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f003 fe09 	bl	8004c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fac9 	bl	80005d4 <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001050:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 8001054:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001058:	200001fc 	.word	0x200001fc

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_Init+0x40>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_Init+0x40>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x40>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 fa4b 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fd5e 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fa63 	bl	800158e <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e0:	f000 fa2b 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000010 	.word	0x20000010
 8001100:	2000000c 	.word	0x2000000c

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000010 	.word	0x20000010
 8001128:	200001e8 	.word	0x200001e8

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200001e8 	.word	0x200001e8

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff ffee 	bl	800112c <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffde 	bl	800112c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000010 	.word	0x20000010

0800118c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0ed      	b.n	800137a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fcfa 	bl	8000ba4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c0:	f7ff ffb4 	bl	800112c <HAL_GetTick>
 80011c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011c6:	e012      	b.n	80011ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c8:	f7ff ffb0 	bl	800112c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d90b      	bls.n	80011ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2205      	movs	r2, #5
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0c5      	b.n	800137a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0e5      	beq.n	80011c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0202 	bic.w	r2, r2, #2
 800120a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff ff8e 	bl	800112c <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001212:	e012      	b.n	800123a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001214:	f7ff ff8a 	bl	800112c <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d90b      	bls.n	800123a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2205      	movs	r2, #5
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e09f      	b.n	800137a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e5      	bne.n	8001214 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e1b      	ldrb	r3, [r3, #24]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7e5b      	ldrb	r3, [r3, #25]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e007      	b.n	800129c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800129a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7e9b      	ldrb	r3, [r3, #26]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0220 	orr.w	r2, r2, #32
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0220 	bic.w	r2, r2, #32
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7edb      	ldrb	r3, [r3, #27]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0210 	bic.w	r2, r2, #16
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e007      	b.n	80012f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0210 	orr.w	r2, r2, #16
 80012ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7f1b      	ldrb	r3, [r3, #28]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d108      	bne.n	800130a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0208 	orr.w	r2, r2, #8
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e007      	b.n	800131a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0208 	bic.w	r2, r2, #8
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7f5b      	ldrb	r3, [r3, #29]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0204 	orr.w	r2, r2, #4
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e007      	b.n	8001344 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0204 	bic.w	r2, r2, #4
 8001342:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	ea42 0103 	orr.w	r1, r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff3e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff31 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff fdba 	bl	800112c <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d008      	beq.n	80015d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e052      	b.n	800167e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0216 	bic.w	r2, r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <HAL_DMA_Abort+0x62>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0208 	bic.w	r2, r2, #8
 8001616:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	e013      	b.n	8001652 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff fd7f 	bl	800112c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d90c      	bls.n	8001652 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e015      	b.n	800167e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e4      	bne.n	800162a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	223f      	movs	r2, #63	; 0x3f
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d004      	beq.n	80016a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e00c      	b.n	80016be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2205      	movs	r2, #5
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e165      	b.n	80019b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8154 	bne.w	80019ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80ae 	beq.w	80019ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_GPIO_Init+0x300>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a5c      	ldr	r2, [pc, #368]	; (80019cc <HAL_GPIO_Init+0x300>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_GPIO_Init+0x300>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <HAL_GPIO_Init+0x308>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d025      	beq.n	80018e6 <HAL_GPIO_Init+0x21a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <HAL_GPIO_Init+0x30c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01f      	beq.n	80018e2 <HAL_GPIO_Init+0x216>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <HAL_GPIO_Init+0x310>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x212>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_GPIO_Init+0x314>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x20e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <HAL_GPIO_Init+0x318>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x20a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4a      	ldr	r2, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x31c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x206>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_GPIO_Init+0x320>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x202>
 80018ca:	2306      	movs	r3, #6
 80018cc:	e00c      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018ce:	2307      	movs	r3, #7
 80018d0:	e00a      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018e6:	2300      	movs	r3, #0
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f002 0203 	and.w	r2, r2, #3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_GPIO_Init+0x324>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_GPIO_Init+0x324>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_GPIO_Init+0x324>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	f67f ae96 	bls.w	80016e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40021400 	.word	0x40021400
 80019ec:	40021800 	.word	0x40021800
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e12b      	b.n	8001c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff f8f0 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a8c:	f001 fb62 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8001a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a81      	ldr	r2, [pc, #516]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d807      	bhi.n	8001aac <HAL_I2C_Init+0x84>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4a80      	ldr	r2, [pc, #512]	; (8001ca0 <HAL_I2C_Init+0x278>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	bf94      	ite	ls
 8001aa4:	2301      	movls	r3, #1
 8001aa6:	2300      	movhi	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	e006      	b.n	8001aba <HAL_I2C_Init+0x92>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a7d      	ldr	r2, [pc, #500]	; (8001ca4 <HAL_I2C_Init+0x27c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	bf94      	ite	ls
 8001ab4:	2301      	movls	r3, #1
 8001ab6:	2300      	movhi	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0e7      	b.n	8001c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4a78      	ldr	r2, [pc, #480]	; (8001ca8 <HAL_I2C_Init+0x280>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d802      	bhi.n	8001afc <HAL_I2C_Init+0xd4>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	e009      	b.n	8001b10 <HAL_I2C_Init+0xe8>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a69      	ldr	r2, [pc, #420]	; (8001cac <HAL_I2C_Init+0x284>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	3301      	adds	r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	495c      	ldr	r1, [pc, #368]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001b2c:	428b      	cmp	r3, r1
 8001b2e:	d819      	bhi.n	8001b64 <HAL_I2C_Init+0x13c>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1e59      	subs	r1, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b44:	400b      	ands	r3, r1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <HAL_I2C_Init+0x138>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1e59      	subs	r1, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5e:	e051      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e04f      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <HAL_I2C_Init+0x168>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e012      	b.n	8001bb6 <HAL_I2C_Init+0x18e>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	0099      	lsls	r1, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Init+0x196>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e022      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10e      	bne.n	8001be4 <HAL_I2C_Init+0x1bc>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1e58      	subs	r0, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	440b      	add	r3, r1
 8001bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	e00f      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	0099      	lsls	r1, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	6809      	ldr	r1, [r1, #0]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6911      	ldr	r1, [r2, #16]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68d2      	ldr	r2, [r2, #12]
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	000186a0 	.word	0x000186a0
 8001ca0:	001e847f 	.word	0x001e847f
 8001ca4:	003d08ff 	.word	0x003d08ff
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	10624dd3 	.word	0x10624dd3

08001cb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	817b      	strh	r3, [r7, #10]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff fa32 	bl	800112c <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	f040 80e0 	bne.w	8001e98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2319      	movs	r3, #25
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4970      	ldr	r1, [pc, #448]	; (8001ea4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 ff66 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e0d3      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_I2C_Master_Transmit+0x50>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0cc      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d007      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2221      	movs	r2, #33	; 0x21
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2210      	movs	r2, #16
 8001d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	893a      	ldrh	r2, [r7, #8]
 8001d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a50      	ldr	r2, [pc, #320]	; (8001ea8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d68:	8979      	ldrh	r1, [r7, #10]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	6a3a      	ldr	r2, [r7, #32]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fce8 	bl	8002744 <I2C_MasterRequestWrite>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e08d      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d94:	e066      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	6a39      	ldr	r1, [r7, #32]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 ffe0 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00d      	beq.n	8001dc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d107      	bne.n	8001dbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e06b      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d11b      	bne.n	8001e38 <HAL_I2C_Master_Transmit+0x188>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d017      	beq.n	8001e38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	6a39      	ldr	r1, [r7, #32]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 ffd0 	bl	8002de2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d107      	bne.n	8001e60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e01a      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d194      	bne.n	8001d96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	00100002 	.word	0x00100002
 8001ea8:	ffff0000 	.word	0xffff0000

08001eac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	460b      	mov	r3, r1
 8001eba:	817b      	strh	r3, [r7, #10]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff f934 	bl	800112c <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	f040 820b 	bne.w	80022ea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2319      	movs	r3, #25
 8001eda:	2201      	movs	r2, #1
 8001edc:	497c      	ldr	r1, [pc, #496]	; (80020d0 <HAL_I2C_Master_Receive+0x224>)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fe68 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
 8001eec:	e1fe      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2C_Master_Receive+0x50>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e1f7      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d007      	beq.n	8001f22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2222      	movs	r2, #34	; 0x22
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a5c      	ldr	r2, [pc, #368]	; (80020d4 <HAL_I2C_Master_Receive+0x228>)
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fc6c 	bl	8002848 <I2C_MasterRequestRead>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1b8      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d113      	bne.n	8001faa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	623b      	str	r3, [r7, #32]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e18c      	b.n	80022c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d11b      	bne.n	8001fea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e16c      	b.n	80022c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d11b      	bne.n	800202a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002000:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	e14c      	b.n	80022c4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002050:	e138      	b.n	80022c4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	2b03      	cmp	r3, #3
 8002058:	f200 80f1 	bhi.w	800223e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	2b01      	cmp	r3, #1
 8002062:	d123      	bne.n	80020ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fefb 	bl	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e139      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020aa:	e10b      	b.n	80022c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d14e      	bne.n	8002152 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ba:	2200      	movs	r2, #0
 80020bc:	4906      	ldr	r1, [pc, #24]	; (80020d8 <HAL_I2C_Master_Receive+0x22c>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fd78 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e10e      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
 80020ce:	bf00      	nop
 80020d0:	00100002 	.word	0x00100002
 80020d4:	ffff0000 	.word	0xffff0000
 80020d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002150:	e0b8      	b.n	80022c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	2200      	movs	r2, #0
 800215a:	4966      	ldr	r1, [pc, #408]	; (80022f4 <HAL_I2C_Master_Receive+0x448>)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fd29 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0bf      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	2200      	movs	r2, #0
 80021b6:	494f      	ldr	r1, [pc, #316]	; (80022f4 <HAL_I2C_Master_Receive+0x448>)
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fcfb 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e091      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800223c:	e042      	b.n	80022c4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fe0e 	bl	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e04c      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b04      	cmp	r3, #4
 8002290:	d118      	bne.n	80022c4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f47f aec2 	bne.w	8002052 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	00010004 	.word	0x00010004

080022f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	; 0x30
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4603      	mov	r3, r0
 8002308:	817b      	strh	r3, [r7, #10]
 800230a:	460b      	mov	r3, r1
 800230c:	813b      	strh	r3, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002312:	f7fe ff0b 	bl	800112c <HAL_GetTick>
 8002316:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	f040 8208 	bne.w	8002736 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2319      	movs	r3, #25
 800232c:	2201      	movs	r2, #1
 800232e:	497b      	ldr	r1, [pc, #492]	; (800251c <HAL_I2C_Mem_Read+0x224>)
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fc3f 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
 800233e:	e1fb      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_I2C_Mem_Read+0x56>
 800234a:	2302      	movs	r3, #2
 800234c:	e1f4      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d007      	beq.n	8002374 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2222      	movs	r2, #34	; 0x22
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2240      	movs	r2, #64	; 0x40
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a5b      	ldr	r2, [pc, #364]	; (8002520 <HAL_I2C_Mem_Read+0x228>)
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023b6:	88f8      	ldrh	r0, [r7, #6]
 80023b8:	893a      	ldrh	r2, [r7, #8]
 80023ba:	8979      	ldrh	r1, [r7, #10]
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	4603      	mov	r3, r0
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fb0c 	bl	80029e4 <I2C_RequestMemoryRead>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e1b0      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d113      	bne.n	8002406 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	623b      	str	r3, [r7, #32]
 80023f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e184      	b.n	8002710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	2b01      	cmp	r3, #1
 800240c:	d11b      	bne.n	8002446 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e164      	b.n	8002710 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	2b02      	cmp	r3, #2
 800244c:	d11b      	bne.n	8002486 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	e144      	b.n	8002710 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800249c:	e138      	b.n	8002710 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	f200 80f1 	bhi.w	800268a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d123      	bne.n	80024f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fcd5 	bl	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e139      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f6:	e10b      	b.n	8002710 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d14e      	bne.n	800259e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	2200      	movs	r2, #0
 8002508:	4906      	ldr	r1, [pc, #24]	; (8002524 <HAL_I2C_Mem_Read+0x22c>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fb52 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e10e      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
 800251a:	bf00      	nop
 800251c:	00100002 	.word	0x00100002
 8002520:	ffff0000 	.word	0xffff0000
 8002524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800259c:	e0b8      	b.n	8002710 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	2200      	movs	r2, #0
 80025a6:	4966      	ldr	r1, [pc, #408]	; (8002740 <HAL_I2C_Mem_Read+0x448>)
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fb03 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0bf      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	2200      	movs	r2, #0
 8002602:	494f      	ldr	r1, [pc, #316]	; (8002740 <HAL_I2C_Mem_Read+0x448>)
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fad5 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e091      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002688:	e042      	b.n	8002710 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fbe8 	bl	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e04c      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d118      	bne.n	8002710 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f aec2 	bne.w	800249e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	3728      	adds	r7, #40	; 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	00010004 	.word	0x00010004

08002744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	460b      	mov	r3, r1
 8002752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d006      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d003      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800276c:	d108      	bne.n	8002780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e00b      	b.n	8002798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b12      	cmp	r3, #18
 8002786:	d107      	bne.n	8002798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa05 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027be:	d103      	bne.n	80027c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e035      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d4:	d108      	bne.n	80027e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	e01b      	b.n	8002820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	11db      	asrs	r3, r3, #7
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0306 	and.w	r3, r3, #6
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f063 030f 	orn	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <I2C_MasterRequestWrite+0xfc>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fa2b 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e010      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <I2C_MasterRequestWrite+0x100>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fa1b 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010008 	.word	0x00010008
 8002844:	00010002 	.word	0x00010002

08002848 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d006      	beq.n	8002882 <I2C_MasterRequestRead+0x3a>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d003      	beq.n	8002882 <I2C_MasterRequestRead+0x3a>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002880:	d108      	bne.n	8002894 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e00b      	b.n	80028ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	2b11      	cmp	r3, #17
 800289a:	d107      	bne.n	80028ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f97b 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d103      	bne.n	80028dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e079      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e8:	d108      	bne.n	80028fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e05f      	b.n	80029bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	11db      	asrs	r3, r3, #7
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 0306 	and.w	r3, r3, #6
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f063 030f 	orn	r3, r3, #15
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4930      	ldr	r1, [pc, #192]	; (80029dc <I2C_MasterRequestRead+0x194>)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f9a1 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e054      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4929      	ldr	r1, [pc, #164]	; (80029e0 <I2C_MasterRequestRead+0x198>)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f991 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e044      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f919 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002996:	d103      	bne.n	80029a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e017      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	11db      	asrs	r3, r3, #7
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 0306 	and.w	r3, r3, #6
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f063 030e 	orn	r3, r3, #14
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <I2C_MasterRequestRead+0x198>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f94d 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	00010008 	.word	0x00010008
 80029e0:	00010002 	.word	0x00010002

080029e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	460b      	mov	r3, r1
 80029f8:	813b      	strh	r3, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f8c2 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a44:	d103      	bne.n	8002a4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0aa      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	4952      	ldr	r1, [pc, #328]	; (8002bb0 <I2C_RequestMemoryRead+0x1cc>)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f8fa 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e097      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f964 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d107      	bne.n	8002ab6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e076      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	e021      	b.n	8002b10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002acc:	893b      	ldrh	r3, [r7, #8]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f93e 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d107      	bne.n	8002b02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e050      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b06:	893b      	ldrh	r3, [r7, #8]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	6a39      	ldr	r1, [r7, #32]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f923 	bl	8002d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e035      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f82b 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b72:	d103      	bne.n	8002b7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e013      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	6a3a      	ldr	r2, [r7, #32]
 8002b94:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <I2C_RequestMemoryRead+0x1cc>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f863 	bl	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	00010002 	.word	0x00010002

08002bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc4:	e025      	b.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bcc:	d021      	beq.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe faad 	bl	800112c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d116      	bne.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e023      	b.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d10d      	bne.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	e00c      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d0b6      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c70:	e051      	b.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c80:	d123      	bne.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0204 	orr.w	r2, r3, #4
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e046      	b.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd0:	d021      	beq.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe fa2b 	bl	800112c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e020      	b.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10c      	bne.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e00b      	b.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	43da      	mvns	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4013      	ands	r3, r2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d18d      	bne.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6c:	e02d      	b.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8ce 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e02d      	b.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d84:	d021      	beq.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe f9d1 	bl	800112c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e007      	b.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	2b80      	cmp	r3, #128	; 0x80
 8002dd6:	d1ca      	bne.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dee:	e02d      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f88d 	bl	8002f10 <I2C_IsAcknowledgeFailed>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e02d      	b.n	8002e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e06:	d021      	beq.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe f990 	bl	800112c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e007      	b.n	8002e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d1ca      	bne.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e70:	e042      	b.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d119      	bne.n	8002eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0210 	mvn.w	r2, #16
 8002e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e029      	b.n	8002f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7fe f93a 	bl	800112c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d302      	bcc.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e007      	b.n	8002f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d1b5      	bne.n	8002e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d11b      	bne.n	8002f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0cc      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b68      	ldr	r3, [pc, #416]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d90c      	bls.n	8002fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b8      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fdc:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	494d      	ldr	r1, [pc, #308]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d044      	beq.n	8003090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d119      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e07f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d003      	beq.n	800302e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302a:	2b03      	cmp	r3, #3
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e06f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e067      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4934      	ldr	r1, [pc, #208]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fe f864 	bl	800112c <HAL_GetTick>
 8003064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe f860 	bl	800112c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e04f      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d20c      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e032      	b.n	800311e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4916      	ldr	r1, [pc, #88]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030f6:	f000 f855 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	490a      	ldr	r1, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	fa22 f303 	lsr.w	r3, r2, r3
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd ffc4 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00
 800312c:	40023800 	.word	0x40023800
 8003130:	08005df8 	.word	0x08005df8
 8003134:	20000008 	.word	0x20000008
 8003138:	2000000c 	.word	0x2000000c

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000008 	.word	0x20000008

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	08005e08 	.word	0x08005e08

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	08005e08 	.word	0x08005e08

080031a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b0ae      	sub	sp, #184	; 0xb8
 80031aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ca:	4bcb      	ldr	r3, [pc, #812]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	f200 8206 	bhi.w	80035e4 <HAL_RCC_GetSysClockFreq+0x440>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	08003215 	.word	0x08003215
 80031e4:	080035e5 	.word	0x080035e5
 80031e8:	080035e5 	.word	0x080035e5
 80031ec:	080035e5 	.word	0x080035e5
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	080035e5 	.word	0x080035e5
 80031f8:	080035e5 	.word	0x080035e5
 80031fc:	080035e5 	.word	0x080035e5
 8003200:	08003225 	.word	0x08003225
 8003204:	080035e5 	.word	0x080035e5
 8003208:	080035e5 	.word	0x080035e5
 800320c:	080035e5 	.word	0x080035e5
 8003210:	08003415 	.word	0x08003415
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4bb9      	ldr	r3, [pc, #740]	; (80034fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800321a:	e1e7      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321c:	4bb8      	ldr	r3, [pc, #736]	; (8003500 <HAL_RCC_GetSysClockFreq+0x35c>)
 800321e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003222:	e1e3      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003224:	4bb4      	ldr	r3, [pc, #720]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800322c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003230:	4bb1      	ldr	r3, [pc, #708]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d071      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323c:	4bae      	ldr	r3, [pc, #696]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003248:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800324c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800325e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	f04f 0000 	mov.w	r0, #0
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	0159      	lsls	r1, r3, #5
 8003270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003274:	0150      	lsls	r0, r2, #5
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4621      	mov	r1, r4
 800327c:	1a51      	subs	r1, r2, r1
 800327e:	6439      	str	r1, [r7, #64]	; 0x40
 8003280:	4629      	mov	r1, r5
 8003282:	eb63 0301 	sbc.w	r3, r3, r1
 8003286:	647b      	str	r3, [r7, #68]	; 0x44
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003294:	4649      	mov	r1, r9
 8003296:	018b      	lsls	r3, r1, #6
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800329e:	4641      	mov	r1, r8
 80032a0:	018a      	lsls	r2, r1, #6
 80032a2:	4641      	mov	r1, r8
 80032a4:	1a51      	subs	r1, r2, r1
 80032a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032a8:	4649      	mov	r1, r9
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80032bc:	4649      	mov	r1, r9
 80032be:	00cb      	lsls	r3, r1, #3
 80032c0:	4641      	mov	r1, r8
 80032c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c6:	4641      	mov	r1, r8
 80032c8:	00ca      	lsls	r2, r1, #3
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	4622      	mov	r2, r4
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
 80032d6:	462b      	mov	r3, r5
 80032d8:	460a      	mov	r2, r1
 80032da:	eb42 0303 	adc.w	r3, r2, r3
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032ec:	4629      	mov	r1, r5
 80032ee:	024b      	lsls	r3, r1, #9
 80032f0:	4621      	mov	r1, r4
 80032f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f6:	4621      	mov	r1, r4
 80032f8:	024a      	lsls	r2, r1, #9
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003302:	2200      	movs	r2, #0
 8003304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003308:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800330c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003310:	f7fc ffde 	bl	80002d0 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800331e:	e067      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003320:	4b75      	ldr	r3, [pc, #468]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800332c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003330:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003338:	67bb      	str	r3, [r7, #120]	; 0x78
 800333a:	2300      	movs	r3, #0
 800333c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800333e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003342:	4622      	mov	r2, r4
 8003344:	462b      	mov	r3, r5
 8003346:	f04f 0000 	mov.w	r0, #0
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	0159      	lsls	r1, r3, #5
 8003350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003354:	0150      	lsls	r0, r2, #5
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4621      	mov	r1, r4
 800335c:	1a51      	subs	r1, r2, r1
 800335e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003360:	4629      	mov	r1, r5
 8003362:	eb63 0301 	sbc.w	r3, r3, r1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003374:	4649      	mov	r1, r9
 8003376:	018b      	lsls	r3, r1, #6
 8003378:	4641      	mov	r1, r8
 800337a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800337e:	4641      	mov	r1, r8
 8003380:	018a      	lsls	r2, r1, #6
 8003382:	4641      	mov	r1, r8
 8003384:	ebb2 0a01 	subs.w	sl, r2, r1
 8003388:	4649      	mov	r1, r9
 800338a:	eb63 0b01 	sbc.w	fp, r3, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800339a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800339e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a2:	4692      	mov	sl, r2
 80033a4:	469b      	mov	fp, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	eb1a 0303 	adds.w	r3, sl, r3
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	462b      	mov	r3, r5
 80033b0:	eb4b 0303 	adc.w	r3, fp, r3
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033d8:	2200      	movs	r2, #0
 80033da:	673b      	str	r3, [r7, #112]	; 0x70
 80033dc:	677a      	str	r2, [r7, #116]	; 0x74
 80033de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033e2:	f7fc ff75 	bl	80002d0 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4613      	mov	r3, r2
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f0:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003412:	e0eb      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800341c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003420:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d06b      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	2200      	movs	r2, #0
 8003434:	66bb      	str	r3, [r7, #104]	; 0x68
 8003436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	663b      	str	r3, [r7, #96]	; 0x60
 8003440:	2300      	movs	r3, #0
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
 8003444:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003448:	4622      	mov	r2, r4
 800344a:	462b      	mov	r3, r5
 800344c:	f04f 0000 	mov.w	r0, #0
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	0159      	lsls	r1, r3, #5
 8003456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345a:	0150      	lsls	r0, r2, #5
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4621      	mov	r1, r4
 8003462:	1a51      	subs	r1, r2, r1
 8003464:	61b9      	str	r1, [r7, #24]
 8003466:	4629      	mov	r1, r5
 8003468:	eb63 0301 	sbc.w	r3, r3, r1
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800347a:	4659      	mov	r1, fp
 800347c:	018b      	lsls	r3, r1, #6
 800347e:	4651      	mov	r1, sl
 8003480:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003484:	4651      	mov	r1, sl
 8003486:	018a      	lsls	r2, r1, #6
 8003488:	4651      	mov	r1, sl
 800348a:	ebb2 0801 	subs.w	r8, r2, r1
 800348e:	4659      	mov	r1, fp
 8003490:	eb63 0901 	sbc.w	r9, r3, r1
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a8:	4690      	mov	r8, r2
 80034aa:	4699      	mov	r9, r3
 80034ac:	4623      	mov	r3, r4
 80034ae:	eb18 0303 	adds.w	r3, r8, r3
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	462b      	mov	r3, r5
 80034b6:	eb49 0303 	adc.w	r3, r9, r3
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034c8:	4629      	mov	r1, r5
 80034ca:	024b      	lsls	r3, r1, #9
 80034cc:	4621      	mov	r1, r4
 80034ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034d2:	4621      	mov	r1, r4
 80034d4:	024a      	lsls	r2, r1, #9
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034de:	2200      	movs	r2, #0
 80034e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80034e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80034e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034e8:	f7fc fef2 	bl	80002d0 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034f6:	e065      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x420>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <HAL_RCC_GetSysClockFreq+0x458>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	2200      	movs	r2, #0
 800350c:	4618      	mov	r0, r3
 800350e:	4611      	mov	r1, r2
 8003510:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003514:	653b      	str	r3, [r7, #80]	; 0x50
 8003516:	2300      	movs	r3, #0
 8003518:	657b      	str	r3, [r7, #84]	; 0x54
 800351a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800351e:	4642      	mov	r2, r8
 8003520:	464b      	mov	r3, r9
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003530:	0150      	lsls	r0, r2, #5
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4641      	mov	r1, r8
 8003538:	1a51      	subs	r1, r2, r1
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	4649      	mov	r1, r9
 800353e:	eb63 0301 	sbc.w	r3, r3, r1
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003550:	4659      	mov	r1, fp
 8003552:	018b      	lsls	r3, r1, #6
 8003554:	4651      	mov	r1, sl
 8003556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800355a:	4651      	mov	r1, sl
 800355c:	018a      	lsls	r2, r1, #6
 800355e:	4651      	mov	r1, sl
 8003560:	1a54      	subs	r4, r2, r1
 8003562:	4659      	mov	r1, fp
 8003564:	eb63 0501 	sbc.w	r5, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	00eb      	lsls	r3, r5, #3
 8003572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003576:	00e2      	lsls	r2, r4, #3
 8003578:	4614      	mov	r4, r2
 800357a:	461d      	mov	r5, r3
 800357c:	4643      	mov	r3, r8
 800357e:	18e3      	adds	r3, r4, r3
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	464b      	mov	r3, r9
 8003584:	eb45 0303 	adc.w	r3, r5, r3
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003596:	4629      	mov	r1, r5
 8003598:	028b      	lsls	r3, r1, #10
 800359a:	4621      	mov	r1, r4
 800359c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035a0:	4621      	mov	r1, r4
 80035a2:	028a      	lsls	r2, r1, #10
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ac:	2200      	movs	r2, #0
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035b6:	f7fc fe8b 	bl	80002d0 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4613      	mov	r3, r2
 80035c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_RCC_GetSysClockFreq+0x458>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	0f1b      	lsrs	r3, r3, #28
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80035d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035e2:	e003      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_GetSysClockFreq+0x45c>)
 80035e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	37b8      	adds	r7, #184	; 0xb8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	00f42400 	.word	0x00f42400

08003604 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e28d      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8083 	beq.w	800372a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003624:	4b94      	ldr	r3, [pc, #592]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b04      	cmp	r3, #4
 800362e:	d019      	beq.n	8003664 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003630:	4b91      	ldr	r3, [pc, #580]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003638:	2b08      	cmp	r3, #8
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800363c:	4b8e      	ldr	r3, [pc, #568]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003648:	d00c      	beq.n	8003664 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364a:	4b8b      	ldr	r3, [pc, #556]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d112      	bne.n	800367c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003662:	d10b      	bne.n	800367c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	4b84      	ldr	r3, [pc, #528]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d05b      	beq.n	8003728 <HAL_RCC_OscConfig+0x124>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d157      	bne.n	8003728 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e25a      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d106      	bne.n	8003694 <HAL_RCC_OscConfig+0x90>
 8003686:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7b      	ldr	r2, [pc, #492]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e01d      	b.n	80036d0 <HAL_RCC_OscConfig+0xcc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0xb4>
 800369e:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a75      	ldr	r2, [pc, #468]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b73      	ldr	r3, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a72      	ldr	r2, [pc, #456]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0xcc>
 80036b8:	4b6f      	ldr	r3, [pc, #444]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6e      	ldr	r2, [pc, #440]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6b      	ldr	r2, [pc, #428]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd fd28 	bl	800112c <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fd fd24 	bl	800112c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e21f      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0xdc>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd fd14 	bl	800112c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7fd fd10 	bl	800112c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e20b      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	4b57      	ldr	r3, [pc, #348]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x104>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d06f      	beq.n	8003816 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003736:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b00      	cmp	r3, #0
 8003740:	d017      	beq.n	8003772 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003742:	4b4d      	ldr	r3, [pc, #308]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d105      	bne.n	800375a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800374e:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b44      	ldr	r3, [pc, #272]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x186>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1d3      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4937      	ldr	r1, [pc, #220]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e03a      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b34      	ldr	r3, [pc, #208]	; (800387c <HAL_RCC_OscConfig+0x278>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fd fcbd 	bl	800112c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fd fcb9 	bl	800112c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1b4      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4925      	ldr	r1, [pc, #148]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_RCC_OscConfig+0x278>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fd fc9c 	bl	800112c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fd fc98 	bl	800112c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e193      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d036      	beq.n	8003890 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <HAL_RCC_OscConfig+0x27c>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd fc7c 	bl	800112c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003838:	f7fd fc78 	bl	800112c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e173      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x234>
 8003856:	e01b      	b.n	8003890 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_OscConfig+0x27c>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fd fc65 	bl	800112c <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	e00e      	b.n	8003884 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003866:	f7fd fc61 	bl	800112c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d907      	bls.n	8003884 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e15c      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
 8003878:	40023800 	.word	0x40023800
 800387c:	42470000 	.word	0x42470000
 8003880:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b8a      	ldr	r3, [pc, #552]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ea      	bne.n	8003866 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8097 	beq.w	80039cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b83      	ldr	r3, [pc, #524]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10f      	bne.n	80038ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b7f      	ldr	r3, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a7e      	ldr	r2, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b7c      	ldr	r3, [pc, #496]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ce:	4b79      	ldr	r3, [pc, #484]	; (8003ab4 <HAL_RCC_OscConfig+0x4b0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d118      	bne.n	800390c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038da:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <HAL_RCC_OscConfig+0x4b0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a75      	ldr	r2, [pc, #468]	; (8003ab4 <HAL_RCC_OscConfig+0x4b0>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7fd fc21 	bl	800112c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7fd fc1d 	bl	800112c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e118      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <HAL_RCC_OscConfig+0x4b0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x31e>
 8003914:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a65      	ldr	r2, [pc, #404]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
 8003920:	e01c      	b.n	800395c <HAL_RCC_OscConfig+0x358>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x340>
 800392a:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a60      	ldr	r2, [pc, #384]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
 8003936:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	4a5d      	ldr	r2, [pc, #372]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6713      	str	r3, [r2, #112]	; 0x70
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0x358>
 8003944:	4b5a      	ldr	r3, [pc, #360]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a59      	ldr	r2, [pc, #356]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
 8003950:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d015      	beq.n	8003990 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fd fbe2 	bl	800112c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fd fbde 	bl	800112c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e0d7      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003982:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RCC_OscConfig+0x368>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fd fbcc 	bl	800112c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fd fbc8 	bl	800112c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0c1      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ee      	bne.n	8003998 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80ad 	beq.w	8003b30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039d6:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d060      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d145      	bne.n	8003a76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_RCC_OscConfig+0x4b4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fb9c 	bl	800112c <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fd fb98 	bl	800112c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e093      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	071b      	lsls	r3, r3, #28
 8003a42:	491b      	ldr	r1, [pc, #108]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCC_OscConfig+0x4b4>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fb6d 	bl	800112c <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a56:	f7fd fb69 	bl	800112c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e064      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x452>
 8003a74:	e05c      	b.n	8003b30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_RCC_OscConfig+0x4b4>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fb56 	bl	800112c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fb52 	bl	800112c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e04d      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_OscConfig+0x4ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x480>
 8003aa2:	e045      	b.n	8003b30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e040      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_RCC_OscConfig+0x538>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d030      	beq.n	8003b2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d129      	bne.n	8003b2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d122      	bne.n	8003b2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d119      	bne.n	8003b2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	3b01      	subs	r3, #1
 8003b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d10f      	bne.n	8003b2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800

08003b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e03f      	b.n	8003bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd f8ac 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fde9 	bl	800475c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b08a      	sub	sp, #40	; 0x28
 8003bde:	af02      	add	r7, sp, #8
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d17c      	bne.n	8003cf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_UART_Transmit+0x2c>
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e075      	b.n	8003cf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Transmit+0x3e>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e06e      	b.n	8003cf6 <HAL_UART_Transmit+0x11c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2221      	movs	r2, #33	; 0x21
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c2e:	f7fd fa7d 	bl	800112c <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d108      	bne.n	8003c5c <HAL_UART_Transmit+0x82>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e003      	b.n	8003c64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c6c:	e02a      	b.n	8003cc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fb29 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e036      	b.n	8003cf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	e007      	b.n	8003cb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1cf      	bne.n	8003c6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2140      	movs	r1, #64	; 0x40
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 faf9 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d11d      	bne.n	8003d54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_UART_Receive_IT+0x26>
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e016      	b.n	8003d56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Receive_IT+0x38>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e00f      	b.n	8003d56 <HAL_UART_Receive_IT+0x58>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fb2e 	bl	80043ac <UART_Start_Receive_IT>
 8003d50:	4603      	mov	r3, r0
 8003d52:	e000      	b.n	8003d56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b0ba      	sub	sp, #232	; 0xe8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x66>
 8003db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fc11 	bl	80045e6 <UART_Receive_IT>
      return;
 8003dc4:	e256      	b.n	8004274 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80de 	beq.w	8003f8c <HAL_UART_IRQHandler+0x22c>
 8003dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80d1 	beq.w	8003f8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_UART_IRQHandler+0xae>
 8003df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_UART_IRQHandler+0xd2>
 8003e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f043 0202 	orr.w	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xf6>
 8003e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d011      	beq.n	8003e86 <HAL_UART_IRQHandler+0x126>
 8003e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f043 0208 	orr.w	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 81ed 	beq.w	800426a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_UART_IRQHandler+0x14e>
 8003e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fb9c 	bl	80045e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <HAL_UART_IRQHandler+0x17a>
 8003ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04f      	beq.n	8003f7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 faa4 	bl	8004428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d141      	bne.n	8003f72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3314      	adds	r3, #20
 8003ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1d9      	bne.n	8003eee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d013      	beq.n	8003f6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	4a7d      	ldr	r2, [pc, #500]	; (800413c <HAL_UART_IRQHandler+0x3dc>)
 8003f48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fd fb99 	bl	8001686 <HAL_DMA_Abort_IT>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f64:	4610      	mov	r0, r2
 8003f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00e      	b.n	8003f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f99a 	bl	80042a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e00a      	b.n	8003f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f996 	bl	80042a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	e006      	b.n	8003f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f992 	bl	80042a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f86:	e170      	b.n	800426a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	bf00      	nop
    return;
 8003f8a:	e16e      	b.n	800426a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 814a 	bne.w	800422a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8143 	beq.w	800422a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 813c 	beq.w	800422a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	f040 80b4 	bne.w	8004140 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8140 	beq.w	800426e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f080 8139 	bcs.w	800426e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004002:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400e:	f000 8088 	beq.w	8004122 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800402c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800403e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800404a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1d9      	bne.n	8004012 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800406e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3314      	adds	r3, #20
 800407e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004082:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800408a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e1      	bne.n	800405e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e3      	bne.n	800409a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004104:	65ba      	str	r2, [r7, #88]	; 0x58
 8004106:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800410a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e3      	bne.n	80040e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd fa42 	bl	80015a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800412a:	b29b      	uxth	r3, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8c0 	bl	80042b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004138:	e099      	b.n	800426e <HAL_UART_IRQHandler+0x50e>
 800413a:	bf00      	nop
 800413c:	080044ef 	.word	0x080044ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004148:	b29b      	uxth	r3, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 808b 	beq.w	8004272 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800415c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8086 	beq.w	8004272 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800417c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800418a:	647a      	str	r2, [r7, #68]	; 0x44
 800418c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e3      	bne.n	8004166 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3314      	adds	r3, #20
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	623b      	str	r3, [r7, #32]
   return(result);
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3314      	adds	r3, #20
 80041be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041c2:	633a      	str	r2, [r7, #48]	; 0x30
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0310 	bic.w	r3, r3, #16
 80041fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004208:	61fa      	str	r2, [r7, #28]
 800420a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	617b      	str	r3, [r7, #20]
   return(result);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e3      	bne.n	80041e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800421c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f848 	bl	80042b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004228:	e023      	b.n	8004272 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_UART_IRQHandler+0x4ea>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f967 	bl	8004516 <UART_Transmit_IT>
    return;
 8004248:	e014      	b.n	8004274 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00e      	beq.n	8004274 <HAL_UART_IRQHandler+0x514>
 8004256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9a7 	bl	80045b6 <UART_EndTransmit_IT>
    return;
 8004268:	e004      	b.n	8004274 <HAL_UART_IRQHandler+0x514>
    return;
 800426a:	bf00      	nop
 800426c:	e002      	b.n	8004274 <HAL_UART_IRQHandler+0x514>
      return;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <HAL_UART_IRQHandler+0x514>
      return;
 8004272:	bf00      	nop
  }
}
 8004274:	37e8      	adds	r7, #232	; 0xe8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop

0800427c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b090      	sub	sp, #64	; 0x40
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e0:	e050      	b.n	8004384 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e8:	d04c      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x30>
 80042f0:	f7fc ff1c 	bl	800112c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d241      	bcs.n	8004384 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004320:	637a      	str	r2, [r7, #52]	; 0x34
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	613b      	str	r3, [r7, #16]
   return(result);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004354:	623a      	str	r2, [r7, #32]
 8004356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	69f9      	ldr	r1, [r7, #28]
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	61bb      	str	r3, [r7, #24]
   return(result);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e00f      	b.n	80043a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d09f      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3740      	adds	r7, #64	; 0x40
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2222      	movs	r2, #34	; 0x22
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0220 	orr.w	r2, r2, #32
 8004418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b095      	sub	sp, #84	; 0x54
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004450:	643a      	str	r2, [r7, #64]	; 0x40
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3314      	adds	r3, #20
 800446a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	61fb      	str	r3, [r7, #28]
   return(result);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004484:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800448a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e5      	bne.n	8004464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d119      	bne.n	80044d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f023 0310 	bic.w	r3, r3, #16
 80044b6:	647b      	str	r3, [r7, #68]	; 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c0:	61ba      	str	r2, [r7, #24]
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	613b      	str	r3, [r7, #16]
   return(result);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044e2:	bf00      	nop
 80044e4:	3754      	adds	r7, #84	; 0x54
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fecb 	bl	80042a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b21      	cmp	r3, #33	; 0x21
 8004528:	d13e      	bne.n	80045a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	d114      	bne.n	800455e <UART_Transmit_IT+0x48>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d110      	bne.n	800455e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004550:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	1c9a      	adds	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	621a      	str	r2, [r3, #32]
 800455c:	e008      	b.n	8004570 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6211      	str	r1, [r2, #32]
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4619      	mov	r1, r3
 800457e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10f      	bne.n	80045a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004592:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff fe50 	bl	800427c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b08c      	sub	sp, #48	; 0x30
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b22      	cmp	r3, #34	; 0x22
 80045f8:	f040 80ab 	bne.w	8004752 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d117      	bne.n	8004636 <UART_Receive_IT+0x50>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d113      	bne.n	8004636 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	b29a      	uxth	r2, r3
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
 8004634:	e026      	b.n	8004684 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d007      	beq.n	800465a <UART_Receive_IT+0x74>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <UART_Receive_IT+0x82>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	e008      	b.n	800467a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004674:	b2da      	uxtb	r2, r3
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29b      	uxth	r3, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4619      	mov	r1, r3
 8004692:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004694:	2b00      	cmp	r3, #0
 8004696:	d15a      	bne.n	800474e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0220 	bic.w	r2, r2, #32
 80046a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d135      	bne.n	8004744 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	613b      	str	r3, [r7, #16]
   return(result);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f023 0310 	bic.w	r3, r3, #16
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	623a      	str	r2, [r7, #32]
 8004700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	69f9      	ldr	r1, [r7, #28]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	61bb      	str	r3, [r7, #24]
   return(result);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d10a      	bne.n	8004736 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff fdbb 	bl	80042b8 <HAL_UARTEx_RxEventCallback>
 8004742:	e002      	b.n	800474a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fda3 	bl	8004290 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e002      	b.n	8004754 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3730      	adds	r7, #48	; 0x30
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b0c0      	sub	sp, #256	; 0x100
 8004762:	af00      	add	r7, sp, #0
 8004764:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	68d9      	ldr	r1, [r3, #12]
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	ea40 0301 	orr.w	r3, r0, r1
 8004784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	431a      	orrs	r2, r3
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047b4:	f021 010c 	bic.w	r1, r1, #12
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047c2:	430b      	orrs	r3, r1
 80047c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	ea40 0301 	orr.w	r3, r0, r1
 80047e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b8f      	ldr	r3, [pc, #572]	; (8004a28 <UART_SetConfig+0x2cc>)
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d005      	beq.n	80047fc <UART_SetConfig+0xa0>
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b8d      	ldr	r3, [pc, #564]	; (8004a2c <UART_SetConfig+0x2d0>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d104      	bne.n	8004806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fe fcbe 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8004800:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004804:	e003      	b.n	800480e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004806:	f7fe fca5 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 800480a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004818:	f040 810c 	bne.w	8004a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800481c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004826:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800482a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800482e:	4622      	mov	r2, r4
 8004830:	462b      	mov	r3, r5
 8004832:	1891      	adds	r1, r2, r2
 8004834:	65b9      	str	r1, [r7, #88]	; 0x58
 8004836:	415b      	adcs	r3, r3
 8004838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800483a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800483e:	4621      	mov	r1, r4
 8004840:	eb12 0801 	adds.w	r8, r2, r1
 8004844:	4629      	mov	r1, r5
 8004846:	eb43 0901 	adc.w	r9, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb18 0303 	adds.w	r3, r8, r3
 8004868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800486c:	462b      	mov	r3, r5
 800486e:	eb49 0303 	adc.w	r3, r9, r3
 8004872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004882:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800488a:	460b      	mov	r3, r1
 800488c:	18db      	adds	r3, r3, r3
 800488e:	653b      	str	r3, [r7, #80]	; 0x50
 8004890:	4613      	mov	r3, r2
 8004892:	eb42 0303 	adc.w	r3, r2, r3
 8004896:	657b      	str	r3, [r7, #84]	; 0x54
 8004898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800489c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048a0:	f7fb fd16 	bl	80002d0 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4b61      	ldr	r3, [pc, #388]	; (8004a30 <UART_SetConfig+0x2d4>)
 80048aa:	fba3 2302 	umull	r2, r3, r3, r2
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	011c      	lsls	r4, r3, #4
 80048b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80048cc:	415b      	adcs	r3, r3
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048d4:	4641      	mov	r1, r8
 80048d6:	eb12 0a01 	adds.w	sl, r2, r1
 80048da:	4649      	mov	r1, r9
 80048dc:	eb43 0b01 	adc.w	fp, r3, r1
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f4:	4692      	mov	sl, r2
 80048f6:	469b      	mov	fp, r3
 80048f8:	4643      	mov	r3, r8
 80048fa:	eb1a 0303 	adds.w	r3, sl, r3
 80048fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004902:	464b      	mov	r3, r9
 8004904:	eb4b 0303 	adc.w	r3, fp, r3
 8004908:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004918:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800491c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004920:	460b      	mov	r3, r1
 8004922:	18db      	adds	r3, r3, r3
 8004924:	643b      	str	r3, [r7, #64]	; 0x40
 8004926:	4613      	mov	r3, r2
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	647b      	str	r3, [r7, #68]	; 0x44
 800492e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004936:	f7fb fccb 	bl	80002d0 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4611      	mov	r1, r2
 8004940:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <UART_SetConfig+0x2d4>)
 8004942:	fba3 2301 	umull	r2, r3, r3, r1
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2264      	movs	r2, #100	; 0x64
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	1acb      	subs	r3, r1, r3
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <UART_SetConfig+0x2d4>)
 8004958:	fba3 2302 	umull	r2, r3, r3, r2
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004964:	441c      	add	r4, r3
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004970:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004980:	415b      	adcs	r3, r3
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004988:	4641      	mov	r1, r8
 800498a:	1851      	adds	r1, r2, r1
 800498c:	6339      	str	r1, [r7, #48]	; 0x30
 800498e:	4649      	mov	r1, r9
 8004990:	414b      	adcs	r3, r1
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049a0:	4659      	mov	r1, fp
 80049a2:	00cb      	lsls	r3, r1, #3
 80049a4:	4651      	mov	r1, sl
 80049a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049aa:	4651      	mov	r1, sl
 80049ac:	00ca      	lsls	r2, r1, #3
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	4642      	mov	r2, r8
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049bc:	464b      	mov	r3, r9
 80049be:	460a      	mov	r2, r1
 80049c0:	eb42 0303 	adc.w	r3, r2, r3
 80049c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049dc:	460b      	mov	r3, r1
 80049de:	18db      	adds	r3, r3, r3
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e2:	4613      	mov	r3, r2
 80049e4:	eb42 0303 	adc.w	r3, r2, r3
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049f2:	f7fb fc6d 	bl	80002d0 <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <UART_SetConfig+0x2d4>)
 80049fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	2164      	movs	r1, #100	; 0x64
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	3332      	adds	r3, #50	; 0x32
 8004a0e:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <UART_SetConfig+0x2d4>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	f003 0207 	and.w	r2, r3, #7
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4422      	add	r2, r4
 8004a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a24:	e105      	b.n	8004c32 <UART_SetConfig+0x4d6>
 8004a26:	bf00      	nop
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	40011400 	.word	0x40011400
 8004a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a46:	4642      	mov	r2, r8
 8004a48:	464b      	mov	r3, r9
 8004a4a:	1891      	adds	r1, r2, r2
 8004a4c:	6239      	str	r1, [r7, #32]
 8004a4e:	415b      	adcs	r3, r3
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
 8004a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a56:	4641      	mov	r1, r8
 8004a58:	1854      	adds	r4, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb43 0501 	adc.w	r5, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	00eb      	lsls	r3, r5, #3
 8004a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a6e:	00e2      	lsls	r2, r4, #3
 8004a70:	4614      	mov	r4, r2
 8004a72:	461d      	mov	r5, r3
 8004a74:	4643      	mov	r3, r8
 8004a76:	18e3      	adds	r3, r4, r3
 8004a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	eb45 0303 	adc.w	r3, r5, r3
 8004a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	008b      	lsls	r3, r1, #2
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aac:	4621      	mov	r1, r4
 8004aae:	008a      	lsls	r2, r1, #2
 8004ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ab4:	f7fb fc0c 	bl	80002d0 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4b60      	ldr	r3, [pc, #384]	; (8004c40 <UART_SetConfig+0x4e4>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	011c      	lsls	r4, r3, #4
 8004ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ad0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	1891      	adds	r1, r2, r2
 8004ade:	61b9      	str	r1, [r7, #24]
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae8:	4641      	mov	r1, r8
 8004aea:	1851      	adds	r1, r2, r1
 8004aec:	6139      	str	r1, [r7, #16]
 8004aee:	4649      	mov	r1, r9
 8004af0:	414b      	adcs	r3, r1
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b00:	4659      	mov	r1, fp
 8004b02:	00cb      	lsls	r3, r1, #3
 8004b04:	4651      	mov	r1, sl
 8004b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	00ca      	lsls	r2, r1, #3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	4642      	mov	r2, r8
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	460a      	mov	r2, r1
 8004b20:	eb42 0303 	adc.w	r3, r2, r3
 8004b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b40:	4649      	mov	r1, r9
 8004b42:	008b      	lsls	r3, r1, #2
 8004b44:	4641      	mov	r1, r8
 8004b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	008a      	lsls	r2, r1, #2
 8004b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b52:	f7fb fbbd 	bl	80002d0 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <UART_SetConfig+0x4e4>)
 8004b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	2164      	movs	r1, #100	; 0x64
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	3332      	adds	r3, #50	; 0x32
 8004b6e:	4a34      	ldr	r2, [pc, #208]	; (8004c40 <UART_SetConfig+0x4e4>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b7a:	441c      	add	r4, r3
 8004b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b80:	2200      	movs	r2, #0
 8004b82:	673b      	str	r3, [r7, #112]	; 0x70
 8004b84:	677a      	str	r2, [r7, #116]	; 0x74
 8004b86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b8a:	4642      	mov	r2, r8
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	1891      	adds	r1, r2, r2
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	415b      	adcs	r3, r3
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	1851      	adds	r1, r2, r1
 8004b9e:	6039      	str	r1, [r7, #0]
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	414b      	adcs	r3, r1
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	00cb      	lsls	r3, r1, #3
 8004bb6:	4651      	mov	r1, sl
 8004bb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbc:	4651      	mov	r1, sl
 8004bbe:	00ca      	lsls	r2, r1, #3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bcc:	464b      	mov	r3, r9
 8004bce:	460a      	mov	r2, r1
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	663b      	str	r3, [r7, #96]	; 0x60
 8004be0:	667a      	str	r2, [r7, #100]	; 0x64
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bee:	4649      	mov	r1, r9
 8004bf0:	008b      	lsls	r3, r1, #2
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	008a      	lsls	r2, r1, #2
 8004bfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c00:	f7fb fb66 	bl	80002d0 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <UART_SetConfig+0x4e4>)
 8004c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2164      	movs	r1, #100	; 0x64
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	3332      	adds	r3, #50	; 0x32
 8004c1c:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <UART_SetConfig+0x4e4>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4422      	add	r2, r4
 8004c30:	609a      	str	r2, [r3, #8]
}
 8004c32:	bf00      	nop
 8004c34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3e:	bf00      	nop
 8004c40:	51eb851f 	.word	0x51eb851f

08004c44 <__errno>:
 8004c44:	4b01      	ldr	r3, [pc, #4]	; (8004c4c <__errno+0x8>)
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000014 	.word	0x20000014

08004c50 <__libc_init_array>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4d0d      	ldr	r5, [pc, #52]	; (8004c88 <__libc_init_array+0x38>)
 8004c54:	4c0d      	ldr	r4, [pc, #52]	; (8004c8c <__libc_init_array+0x3c>)
 8004c56:	1b64      	subs	r4, r4, r5
 8004c58:	10a4      	asrs	r4, r4, #2
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	42a6      	cmp	r6, r4
 8004c5e:	d109      	bne.n	8004c74 <__libc_init_array+0x24>
 8004c60:	4d0b      	ldr	r5, [pc, #44]	; (8004c90 <__libc_init_array+0x40>)
 8004c62:	4c0c      	ldr	r4, [pc, #48]	; (8004c94 <__libc_init_array+0x44>)
 8004c64:	f001 f834 	bl	8005cd0 <_init>
 8004c68:	1b64      	subs	r4, r4, r5
 8004c6a:	10a4      	asrs	r4, r4, #2
 8004c6c:	2600      	movs	r6, #0
 8004c6e:	42a6      	cmp	r6, r4
 8004c70:	d105      	bne.n	8004c7e <__libc_init_array+0x2e>
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c78:	4798      	blx	r3
 8004c7a:	3601      	adds	r6, #1
 8004c7c:	e7ee      	b.n	8004c5c <__libc_init_array+0xc>
 8004c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c82:	4798      	blx	r3
 8004c84:	3601      	adds	r6, #1
 8004c86:	e7f2      	b.n	8004c6e <__libc_init_array+0x1e>
 8004c88:	08005eb0 	.word	0x08005eb0
 8004c8c:	08005eb0 	.word	0x08005eb0
 8004c90:	08005eb0 	.word	0x08005eb0
 8004c94:	08005eb4 	.word	0x08005eb4

08004c98 <memcmp>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	3901      	subs	r1, #1
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4290      	cmp	r0, r2
 8004ca0:	d101      	bne.n	8004ca6 <memcmp+0xe>
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	e005      	b.n	8004cb2 <memcmp+0x1a>
 8004ca6:	7803      	ldrb	r3, [r0, #0]
 8004ca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	d001      	beq.n	8004cb4 <memcmp+0x1c>
 8004cb0:	1b18      	subs	r0, r3, r4
 8004cb2:	bd10      	pop	{r4, pc}
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	e7f2      	b.n	8004c9e <memcmp+0x6>

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <iprintf>:
 8004cc8:	b40f      	push	{r0, r1, r2, r3}
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <iprintf+0x2c>)
 8004ccc:	b513      	push	{r0, r1, r4, lr}
 8004cce:	681c      	ldr	r4, [r3, #0]
 8004cd0:	b124      	cbz	r4, 8004cdc <iprintf+0x14>
 8004cd2:	69a3      	ldr	r3, [r4, #24]
 8004cd4:	b913      	cbnz	r3, 8004cdc <iprintf+0x14>
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f000 fa5e 	bl	8005198 <__sinit>
 8004cdc:	ab05      	add	r3, sp, #20
 8004cde:	9a04      	ldr	r2, [sp, #16]
 8004ce0:	68a1      	ldr	r1, [r4, #8]
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f000 fc67 	bl	80055b8 <_vfiprintf_r>
 8004cea:	b002      	add	sp, #8
 8004cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf0:	b004      	add	sp, #16
 8004cf2:	4770      	bx	lr
 8004cf4:	20000014 	.word	0x20000014

08004cf8 <_puts_r>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	460e      	mov	r6, r1
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	b118      	cbz	r0, 8004d08 <_puts_r+0x10>
 8004d00:	6983      	ldr	r3, [r0, #24]
 8004d02:	b90b      	cbnz	r3, 8004d08 <_puts_r+0x10>
 8004d04:	f000 fa48 	bl	8005198 <__sinit>
 8004d08:	69ab      	ldr	r3, [r5, #24]
 8004d0a:	68ac      	ldr	r4, [r5, #8]
 8004d0c:	b913      	cbnz	r3, 8004d14 <_puts_r+0x1c>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 fa42 	bl	8005198 <__sinit>
 8004d14:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <_puts_r+0xd0>)
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d120      	bne.n	8004d5c <_puts_r+0x64>
 8004d1a:	686c      	ldr	r4, [r5, #4]
 8004d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d1e:	07db      	lsls	r3, r3, #31
 8004d20:	d405      	bmi.n	8004d2e <_puts_r+0x36>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	0598      	lsls	r0, r3, #22
 8004d26:	d402      	bmi.n	8004d2e <_puts_r+0x36>
 8004d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d2a:	f000 fad3 	bl	80052d4 <__retarget_lock_acquire_recursive>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	0719      	lsls	r1, r3, #28
 8004d32:	d51d      	bpl.n	8004d70 <_puts_r+0x78>
 8004d34:	6923      	ldr	r3, [r4, #16]
 8004d36:	b1db      	cbz	r3, 8004d70 <_puts_r+0x78>
 8004d38:	3e01      	subs	r6, #1
 8004d3a:	68a3      	ldr	r3, [r4, #8]
 8004d3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d40:	3b01      	subs	r3, #1
 8004d42:	60a3      	str	r3, [r4, #8]
 8004d44:	bb39      	cbnz	r1, 8004d96 <_puts_r+0x9e>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da38      	bge.n	8004dbc <_puts_r+0xc4>
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	210a      	movs	r1, #10
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f848 	bl	8004de4 <__swbuf_r>
 8004d54:	3001      	adds	r0, #1
 8004d56:	d011      	beq.n	8004d7c <_puts_r+0x84>
 8004d58:	250a      	movs	r5, #10
 8004d5a:	e011      	b.n	8004d80 <_puts_r+0x88>
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <_puts_r+0xd4>)
 8004d5e:	429c      	cmp	r4, r3
 8004d60:	d101      	bne.n	8004d66 <_puts_r+0x6e>
 8004d62:	68ac      	ldr	r4, [r5, #8]
 8004d64:	e7da      	b.n	8004d1c <_puts_r+0x24>
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <_puts_r+0xd8>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	bf08      	it	eq
 8004d6c:	68ec      	ldreq	r4, [r5, #12]
 8004d6e:	e7d5      	b.n	8004d1c <_puts_r+0x24>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 f888 	bl	8004e88 <__swsetup_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d0dd      	beq.n	8004d38 <_puts_r+0x40>
 8004d7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d82:	07da      	lsls	r2, r3, #31
 8004d84:	d405      	bmi.n	8004d92 <_puts_r+0x9a>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	059b      	lsls	r3, r3, #22
 8004d8a:	d402      	bmi.n	8004d92 <_puts_r+0x9a>
 8004d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8e:	f000 faa2 	bl	80052d6 <__retarget_lock_release_recursive>
 8004d92:	4628      	mov	r0, r5
 8004d94:	bd70      	pop	{r4, r5, r6, pc}
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da04      	bge.n	8004da4 <_puts_r+0xac>
 8004d9a:	69a2      	ldr	r2, [r4, #24]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	dc06      	bgt.n	8004dae <_puts_r+0xb6>
 8004da0:	290a      	cmp	r1, #10
 8004da2:	d004      	beq.n	8004dae <_puts_r+0xb6>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	6022      	str	r2, [r4, #0]
 8004daa:	7019      	strb	r1, [r3, #0]
 8004dac:	e7c5      	b.n	8004d3a <_puts_r+0x42>
 8004dae:	4622      	mov	r2, r4
 8004db0:	4628      	mov	r0, r5
 8004db2:	f000 f817 	bl	8004de4 <__swbuf_r>
 8004db6:	3001      	adds	r0, #1
 8004db8:	d1bf      	bne.n	8004d3a <_puts_r+0x42>
 8004dba:	e7df      	b.n	8004d7c <_puts_r+0x84>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	250a      	movs	r5, #10
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	6022      	str	r2, [r4, #0]
 8004dc4:	701d      	strb	r5, [r3, #0]
 8004dc6:	e7db      	b.n	8004d80 <_puts_r+0x88>
 8004dc8:	08005e34 	.word	0x08005e34
 8004dcc:	08005e54 	.word	0x08005e54
 8004dd0:	08005e14 	.word	0x08005e14

08004dd4 <puts>:
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <puts+0xc>)
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f7ff bf8d 	b.w	8004cf8 <_puts_r>
 8004dde:	bf00      	nop
 8004de0:	20000014 	.word	0x20000014

08004de4 <__swbuf_r>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	460e      	mov	r6, r1
 8004de8:	4614      	mov	r4, r2
 8004dea:	4605      	mov	r5, r0
 8004dec:	b118      	cbz	r0, 8004df6 <__swbuf_r+0x12>
 8004dee:	6983      	ldr	r3, [r0, #24]
 8004df0:	b90b      	cbnz	r3, 8004df6 <__swbuf_r+0x12>
 8004df2:	f000 f9d1 	bl	8005198 <__sinit>
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <__swbuf_r+0x98>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	d12b      	bne.n	8004e54 <__swbuf_r+0x70>
 8004dfc:	686c      	ldr	r4, [r5, #4]
 8004dfe:	69a3      	ldr	r3, [r4, #24]
 8004e00:	60a3      	str	r3, [r4, #8]
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	071a      	lsls	r2, r3, #28
 8004e06:	d52f      	bpl.n	8004e68 <__swbuf_r+0x84>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	b36b      	cbz	r3, 8004e68 <__swbuf_r+0x84>
 8004e0c:	6923      	ldr	r3, [r4, #16]
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	1ac0      	subs	r0, r0, r3
 8004e12:	6963      	ldr	r3, [r4, #20]
 8004e14:	b2f6      	uxtb	r6, r6
 8004e16:	4283      	cmp	r3, r0
 8004e18:	4637      	mov	r7, r6
 8004e1a:	dc04      	bgt.n	8004e26 <__swbuf_r+0x42>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f926 	bl	8005070 <_fflush_r>
 8004e24:	bb30      	cbnz	r0, 8004e74 <__swbuf_r+0x90>
 8004e26:	68a3      	ldr	r3, [r4, #8]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	60a3      	str	r3, [r4, #8]
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	6022      	str	r2, [r4, #0]
 8004e32:	701e      	strb	r6, [r3, #0]
 8004e34:	6963      	ldr	r3, [r4, #20]
 8004e36:	3001      	adds	r0, #1
 8004e38:	4283      	cmp	r3, r0
 8004e3a:	d004      	beq.n	8004e46 <__swbuf_r+0x62>
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	07db      	lsls	r3, r3, #31
 8004e40:	d506      	bpl.n	8004e50 <__swbuf_r+0x6c>
 8004e42:	2e0a      	cmp	r6, #10
 8004e44:	d104      	bne.n	8004e50 <__swbuf_r+0x6c>
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f911 	bl	8005070 <_fflush_r>
 8004e4e:	b988      	cbnz	r0, 8004e74 <__swbuf_r+0x90>
 8004e50:	4638      	mov	r0, r7
 8004e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <__swbuf_r+0x9c>)
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d101      	bne.n	8004e5e <__swbuf_r+0x7a>
 8004e5a:	68ac      	ldr	r4, [r5, #8]
 8004e5c:	e7cf      	b.n	8004dfe <__swbuf_r+0x1a>
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <__swbuf_r+0xa0>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	bf08      	it	eq
 8004e64:	68ec      	ldreq	r4, [r5, #12]
 8004e66:	e7ca      	b.n	8004dfe <__swbuf_r+0x1a>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 f80c 	bl	8004e88 <__swsetup_r>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d0cb      	beq.n	8004e0c <__swbuf_r+0x28>
 8004e74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e78:	e7ea      	b.n	8004e50 <__swbuf_r+0x6c>
 8004e7a:	bf00      	nop
 8004e7c:	08005e34 	.word	0x08005e34
 8004e80:	08005e54 	.word	0x08005e54
 8004e84:	08005e14 	.word	0x08005e14

08004e88 <__swsetup_r>:
 8004e88:	4b32      	ldr	r3, [pc, #200]	; (8004f54 <__swsetup_r+0xcc>)
 8004e8a:	b570      	push	{r4, r5, r6, lr}
 8004e8c:	681d      	ldr	r5, [r3, #0]
 8004e8e:	4606      	mov	r6, r0
 8004e90:	460c      	mov	r4, r1
 8004e92:	b125      	cbz	r5, 8004e9e <__swsetup_r+0x16>
 8004e94:	69ab      	ldr	r3, [r5, #24]
 8004e96:	b913      	cbnz	r3, 8004e9e <__swsetup_r+0x16>
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 f97d 	bl	8005198 <__sinit>
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	; (8004f58 <__swsetup_r+0xd0>)
 8004ea0:	429c      	cmp	r4, r3
 8004ea2:	d10f      	bne.n	8004ec4 <__swsetup_r+0x3c>
 8004ea4:	686c      	ldr	r4, [r5, #4]
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eac:	0719      	lsls	r1, r3, #28
 8004eae:	d42c      	bmi.n	8004f0a <__swsetup_r+0x82>
 8004eb0:	06dd      	lsls	r5, r3, #27
 8004eb2:	d411      	bmi.n	8004ed8 <__swsetup_r+0x50>
 8004eb4:	2309      	movs	r3, #9
 8004eb6:	6033      	str	r3, [r6, #0]
 8004eb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec2:	e03e      	b.n	8004f42 <__swsetup_r+0xba>
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <__swsetup_r+0xd4>)
 8004ec6:	429c      	cmp	r4, r3
 8004ec8:	d101      	bne.n	8004ece <__swsetup_r+0x46>
 8004eca:	68ac      	ldr	r4, [r5, #8]
 8004ecc:	e7eb      	b.n	8004ea6 <__swsetup_r+0x1e>
 8004ece:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <__swsetup_r+0xd8>)
 8004ed0:	429c      	cmp	r4, r3
 8004ed2:	bf08      	it	eq
 8004ed4:	68ec      	ldreq	r4, [r5, #12]
 8004ed6:	e7e6      	b.n	8004ea6 <__swsetup_r+0x1e>
 8004ed8:	0758      	lsls	r0, r3, #29
 8004eda:	d512      	bpl.n	8004f02 <__swsetup_r+0x7a>
 8004edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ede:	b141      	cbz	r1, 8004ef2 <__swsetup_r+0x6a>
 8004ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee4:	4299      	cmp	r1, r3
 8004ee6:	d002      	beq.n	8004eee <__swsetup_r+0x66>
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 fa5b 	bl	80053a4 <_free_r>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ef8:	81a3      	strh	r3, [r4, #12]
 8004efa:	2300      	movs	r3, #0
 8004efc:	6063      	str	r3, [r4, #4]
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	f043 0308 	orr.w	r3, r3, #8
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	b94b      	cbnz	r3, 8004f22 <__swsetup_r+0x9a>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f18:	d003      	beq.n	8004f22 <__swsetup_r+0x9a>
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 fa01 	bl	8005324 <__smakebuf_r>
 8004f22:	89a0      	ldrh	r0, [r4, #12]
 8004f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f28:	f010 0301 	ands.w	r3, r0, #1
 8004f2c:	d00a      	beq.n	8004f44 <__swsetup_r+0xbc>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60a3      	str	r3, [r4, #8]
 8004f32:	6963      	ldr	r3, [r4, #20]
 8004f34:	425b      	negs	r3, r3
 8004f36:	61a3      	str	r3, [r4, #24]
 8004f38:	6923      	ldr	r3, [r4, #16]
 8004f3a:	b943      	cbnz	r3, 8004f4e <__swsetup_r+0xc6>
 8004f3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f40:	d1ba      	bne.n	8004eb8 <__swsetup_r+0x30>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	0781      	lsls	r1, r0, #30
 8004f46:	bf58      	it	pl
 8004f48:	6963      	ldrpl	r3, [r4, #20]
 8004f4a:	60a3      	str	r3, [r4, #8]
 8004f4c:	e7f4      	b.n	8004f38 <__swsetup_r+0xb0>
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e7f7      	b.n	8004f42 <__swsetup_r+0xba>
 8004f52:	bf00      	nop
 8004f54:	20000014 	.word	0x20000014
 8004f58:	08005e34 	.word	0x08005e34
 8004f5c:	08005e54 	.word	0x08005e54
 8004f60:	08005e14 	.word	0x08005e14

08004f64 <__sflush_r>:
 8004f64:	898a      	ldrh	r2, [r1, #12]
 8004f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	0710      	lsls	r0, r2, #28
 8004f6e:	460c      	mov	r4, r1
 8004f70:	d458      	bmi.n	8005024 <__sflush_r+0xc0>
 8004f72:	684b      	ldr	r3, [r1, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	dc05      	bgt.n	8004f84 <__sflush_r+0x20>
 8004f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dc02      	bgt.n	8004f84 <__sflush_r+0x20>
 8004f7e:	2000      	movs	r0, #0
 8004f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f86:	2e00      	cmp	r6, #0
 8004f88:	d0f9      	beq.n	8004f7e <__sflush_r+0x1a>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f90:	682f      	ldr	r7, [r5, #0]
 8004f92:	602b      	str	r3, [r5, #0]
 8004f94:	d032      	beq.n	8004ffc <__sflush_r+0x98>
 8004f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	075a      	lsls	r2, r3, #29
 8004f9c:	d505      	bpl.n	8004faa <__sflush_r+0x46>
 8004f9e:	6863      	ldr	r3, [r4, #4]
 8004fa0:	1ac0      	subs	r0, r0, r3
 8004fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fa4:	b10b      	cbz	r3, 8004faa <__sflush_r+0x46>
 8004fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fa8:	1ac0      	subs	r0, r0, r3
 8004faa:	2300      	movs	r3, #0
 8004fac:	4602      	mov	r2, r0
 8004fae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fb0:	6a21      	ldr	r1, [r4, #32]
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b0      	blx	r6
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	d106      	bne.n	8004fca <__sflush_r+0x66>
 8004fbc:	6829      	ldr	r1, [r5, #0]
 8004fbe:	291d      	cmp	r1, #29
 8004fc0:	d82c      	bhi.n	800501c <__sflush_r+0xb8>
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	; (800506c <__sflush_r+0x108>)
 8004fc4:	40ca      	lsrs	r2, r1
 8004fc6:	07d6      	lsls	r6, r2, #31
 8004fc8:	d528      	bpl.n	800501c <__sflush_r+0xb8>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6062      	str	r2, [r4, #4]
 8004fce:	04d9      	lsls	r1, r3, #19
 8004fd0:	6922      	ldr	r2, [r4, #16]
 8004fd2:	6022      	str	r2, [r4, #0]
 8004fd4:	d504      	bpl.n	8004fe0 <__sflush_r+0x7c>
 8004fd6:	1c42      	adds	r2, r0, #1
 8004fd8:	d101      	bne.n	8004fde <__sflush_r+0x7a>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	b903      	cbnz	r3, 8004fe0 <__sflush_r+0x7c>
 8004fde:	6560      	str	r0, [r4, #84]	; 0x54
 8004fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fe2:	602f      	str	r7, [r5, #0]
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	d0ca      	beq.n	8004f7e <__sflush_r+0x1a>
 8004fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fec:	4299      	cmp	r1, r3
 8004fee:	d002      	beq.n	8004ff6 <__sflush_r+0x92>
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f000 f9d7 	bl	80053a4 <_free_r>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8004ffa:	e7c1      	b.n	8004f80 <__sflush_r+0x1c>
 8004ffc:	6a21      	ldr	r1, [r4, #32]
 8004ffe:	2301      	movs	r3, #1
 8005000:	4628      	mov	r0, r5
 8005002:	47b0      	blx	r6
 8005004:	1c41      	adds	r1, r0, #1
 8005006:	d1c7      	bne.n	8004f98 <__sflush_r+0x34>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0c4      	beq.n	8004f98 <__sflush_r+0x34>
 800500e:	2b1d      	cmp	r3, #29
 8005010:	d001      	beq.n	8005016 <__sflush_r+0xb2>
 8005012:	2b16      	cmp	r3, #22
 8005014:	d101      	bne.n	800501a <__sflush_r+0xb6>
 8005016:	602f      	str	r7, [r5, #0]
 8005018:	e7b1      	b.n	8004f7e <__sflush_r+0x1a>
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	e7ad      	b.n	8004f80 <__sflush_r+0x1c>
 8005024:	690f      	ldr	r7, [r1, #16]
 8005026:	2f00      	cmp	r7, #0
 8005028:	d0a9      	beq.n	8004f7e <__sflush_r+0x1a>
 800502a:	0793      	lsls	r3, r2, #30
 800502c:	680e      	ldr	r6, [r1, #0]
 800502e:	bf08      	it	eq
 8005030:	694b      	ldreq	r3, [r1, #20]
 8005032:	600f      	str	r7, [r1, #0]
 8005034:	bf18      	it	ne
 8005036:	2300      	movne	r3, #0
 8005038:	eba6 0807 	sub.w	r8, r6, r7
 800503c:	608b      	str	r3, [r1, #8]
 800503e:	f1b8 0f00 	cmp.w	r8, #0
 8005042:	dd9c      	ble.n	8004f7e <__sflush_r+0x1a>
 8005044:	6a21      	ldr	r1, [r4, #32]
 8005046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005048:	4643      	mov	r3, r8
 800504a:	463a      	mov	r2, r7
 800504c:	4628      	mov	r0, r5
 800504e:	47b0      	blx	r6
 8005050:	2800      	cmp	r0, #0
 8005052:	dc06      	bgt.n	8005062 <__sflush_r+0xfe>
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800505a:	81a3      	strh	r3, [r4, #12]
 800505c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005060:	e78e      	b.n	8004f80 <__sflush_r+0x1c>
 8005062:	4407      	add	r7, r0
 8005064:	eba8 0800 	sub.w	r8, r8, r0
 8005068:	e7e9      	b.n	800503e <__sflush_r+0xda>
 800506a:	bf00      	nop
 800506c:	20400001 	.word	0x20400001

08005070 <_fflush_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	4605      	mov	r5, r0
 8005076:	460c      	mov	r4, r1
 8005078:	b913      	cbnz	r3, 8005080 <_fflush_r+0x10>
 800507a:	2500      	movs	r5, #0
 800507c:	4628      	mov	r0, r5
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	b118      	cbz	r0, 800508a <_fflush_r+0x1a>
 8005082:	6983      	ldr	r3, [r0, #24]
 8005084:	b90b      	cbnz	r3, 800508a <_fflush_r+0x1a>
 8005086:	f000 f887 	bl	8005198 <__sinit>
 800508a:	4b14      	ldr	r3, [pc, #80]	; (80050dc <_fflush_r+0x6c>)
 800508c:	429c      	cmp	r4, r3
 800508e:	d11b      	bne.n	80050c8 <_fflush_r+0x58>
 8005090:	686c      	ldr	r4, [r5, #4]
 8005092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ef      	beq.n	800507a <_fflush_r+0xa>
 800509a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800509c:	07d0      	lsls	r0, r2, #31
 800509e:	d404      	bmi.n	80050aa <_fflush_r+0x3a>
 80050a0:	0599      	lsls	r1, r3, #22
 80050a2:	d402      	bmi.n	80050aa <_fflush_r+0x3a>
 80050a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050a6:	f000 f915 	bl	80052d4 <__retarget_lock_acquire_recursive>
 80050aa:	4628      	mov	r0, r5
 80050ac:	4621      	mov	r1, r4
 80050ae:	f7ff ff59 	bl	8004f64 <__sflush_r>
 80050b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050b4:	07da      	lsls	r2, r3, #31
 80050b6:	4605      	mov	r5, r0
 80050b8:	d4e0      	bmi.n	800507c <_fflush_r+0xc>
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	059b      	lsls	r3, r3, #22
 80050be:	d4dd      	bmi.n	800507c <_fflush_r+0xc>
 80050c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c2:	f000 f908 	bl	80052d6 <__retarget_lock_release_recursive>
 80050c6:	e7d9      	b.n	800507c <_fflush_r+0xc>
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <_fflush_r+0x70>)
 80050ca:	429c      	cmp	r4, r3
 80050cc:	d101      	bne.n	80050d2 <_fflush_r+0x62>
 80050ce:	68ac      	ldr	r4, [r5, #8]
 80050d0:	e7df      	b.n	8005092 <_fflush_r+0x22>
 80050d2:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <_fflush_r+0x74>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	bf08      	it	eq
 80050d8:	68ec      	ldreq	r4, [r5, #12]
 80050da:	e7da      	b.n	8005092 <_fflush_r+0x22>
 80050dc:	08005e34 	.word	0x08005e34
 80050e0:	08005e54 	.word	0x08005e54
 80050e4:	08005e14 	.word	0x08005e14

080050e8 <std>:
 80050e8:	2300      	movs	r3, #0
 80050ea:	b510      	push	{r4, lr}
 80050ec:	4604      	mov	r4, r0
 80050ee:	e9c0 3300 	strd	r3, r3, [r0]
 80050f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f6:	6083      	str	r3, [r0, #8]
 80050f8:	8181      	strh	r1, [r0, #12]
 80050fa:	6643      	str	r3, [r0, #100]	; 0x64
 80050fc:	81c2      	strh	r2, [r0, #14]
 80050fe:	6183      	str	r3, [r0, #24]
 8005100:	4619      	mov	r1, r3
 8005102:	2208      	movs	r2, #8
 8005104:	305c      	adds	r0, #92	; 0x5c
 8005106:	f7ff fdd7 	bl	8004cb8 <memset>
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <std+0x38>)
 800510c:	6263      	str	r3, [r4, #36]	; 0x24
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <std+0x3c>)
 8005110:	62a3      	str	r3, [r4, #40]	; 0x28
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x40>)
 8005114:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <std+0x44>)
 8005118:	6224      	str	r4, [r4, #32]
 800511a:	6323      	str	r3, [r4, #48]	; 0x30
 800511c:	bd10      	pop	{r4, pc}
 800511e:	bf00      	nop
 8005120:	08005b61 	.word	0x08005b61
 8005124:	08005b83 	.word	0x08005b83
 8005128:	08005bbb 	.word	0x08005bbb
 800512c:	08005bdf 	.word	0x08005bdf

08005130 <_cleanup_r>:
 8005130:	4901      	ldr	r1, [pc, #4]	; (8005138 <_cleanup_r+0x8>)
 8005132:	f000 b8af 	b.w	8005294 <_fwalk_reent>
 8005136:	bf00      	nop
 8005138:	08005071 	.word	0x08005071

0800513c <__sfmoreglue>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	2268      	movs	r2, #104	; 0x68
 8005140:	1e4d      	subs	r5, r1, #1
 8005142:	4355      	muls	r5, r2
 8005144:	460e      	mov	r6, r1
 8005146:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800514a:	f000 f997 	bl	800547c <_malloc_r>
 800514e:	4604      	mov	r4, r0
 8005150:	b140      	cbz	r0, 8005164 <__sfmoreglue+0x28>
 8005152:	2100      	movs	r1, #0
 8005154:	e9c0 1600 	strd	r1, r6, [r0]
 8005158:	300c      	adds	r0, #12
 800515a:	60a0      	str	r0, [r4, #8]
 800515c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005160:	f7ff fdaa 	bl	8004cb8 <memset>
 8005164:	4620      	mov	r0, r4
 8005166:	bd70      	pop	{r4, r5, r6, pc}

08005168 <__sfp_lock_acquire>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__sfp_lock_acquire+0x8>)
 800516a:	f000 b8b3 	b.w	80052d4 <__retarget_lock_acquire_recursive>
 800516e:	bf00      	nop
 8005170:	200001ed 	.word	0x200001ed

08005174 <__sfp_lock_release>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__sfp_lock_release+0x8>)
 8005176:	f000 b8ae 	b.w	80052d6 <__retarget_lock_release_recursive>
 800517a:	bf00      	nop
 800517c:	200001ed 	.word	0x200001ed

08005180 <__sinit_lock_acquire>:
 8005180:	4801      	ldr	r0, [pc, #4]	; (8005188 <__sinit_lock_acquire+0x8>)
 8005182:	f000 b8a7 	b.w	80052d4 <__retarget_lock_acquire_recursive>
 8005186:	bf00      	nop
 8005188:	200001ee 	.word	0x200001ee

0800518c <__sinit_lock_release>:
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <__sinit_lock_release+0x8>)
 800518e:	f000 b8a2 	b.w	80052d6 <__retarget_lock_release_recursive>
 8005192:	bf00      	nop
 8005194:	200001ee 	.word	0x200001ee

08005198 <__sinit>:
 8005198:	b510      	push	{r4, lr}
 800519a:	4604      	mov	r4, r0
 800519c:	f7ff fff0 	bl	8005180 <__sinit_lock_acquire>
 80051a0:	69a3      	ldr	r3, [r4, #24]
 80051a2:	b11b      	cbz	r3, 80051ac <__sinit+0x14>
 80051a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a8:	f7ff bff0 	b.w	800518c <__sinit_lock_release>
 80051ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051b0:	6523      	str	r3, [r4, #80]	; 0x50
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <__sinit+0x68>)
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <__sinit+0x6c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	bf04      	itt	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	61a3      	streq	r3, [r4, #24]
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 f820 	bl	8005208 <__sfp>
 80051c8:	6060      	str	r0, [r4, #4]
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 f81c 	bl	8005208 <__sfp>
 80051d0:	60a0      	str	r0, [r4, #8]
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f818 	bl	8005208 <__sfp>
 80051d8:	2200      	movs	r2, #0
 80051da:	60e0      	str	r0, [r4, #12]
 80051dc:	2104      	movs	r1, #4
 80051de:	6860      	ldr	r0, [r4, #4]
 80051e0:	f7ff ff82 	bl	80050e8 <std>
 80051e4:	68a0      	ldr	r0, [r4, #8]
 80051e6:	2201      	movs	r2, #1
 80051e8:	2109      	movs	r1, #9
 80051ea:	f7ff ff7d 	bl	80050e8 <std>
 80051ee:	68e0      	ldr	r0, [r4, #12]
 80051f0:	2202      	movs	r2, #2
 80051f2:	2112      	movs	r1, #18
 80051f4:	f7ff ff78 	bl	80050e8 <std>
 80051f8:	2301      	movs	r3, #1
 80051fa:	61a3      	str	r3, [r4, #24]
 80051fc:	e7d2      	b.n	80051a4 <__sinit+0xc>
 80051fe:	bf00      	nop
 8005200:	08005e10 	.word	0x08005e10
 8005204:	08005131 	.word	0x08005131

08005208 <__sfp>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	4607      	mov	r7, r0
 800520c:	f7ff ffac 	bl	8005168 <__sfp_lock_acquire>
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <__sfp+0x84>)
 8005212:	681e      	ldr	r6, [r3, #0]
 8005214:	69b3      	ldr	r3, [r6, #24]
 8005216:	b913      	cbnz	r3, 800521e <__sfp+0x16>
 8005218:	4630      	mov	r0, r6
 800521a:	f7ff ffbd 	bl	8005198 <__sinit>
 800521e:	3648      	adds	r6, #72	; 0x48
 8005220:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005224:	3b01      	subs	r3, #1
 8005226:	d503      	bpl.n	8005230 <__sfp+0x28>
 8005228:	6833      	ldr	r3, [r6, #0]
 800522a:	b30b      	cbz	r3, 8005270 <__sfp+0x68>
 800522c:	6836      	ldr	r6, [r6, #0]
 800522e:	e7f7      	b.n	8005220 <__sfp+0x18>
 8005230:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005234:	b9d5      	cbnz	r5, 800526c <__sfp+0x64>
 8005236:	4b16      	ldr	r3, [pc, #88]	; (8005290 <__sfp+0x88>)
 8005238:	60e3      	str	r3, [r4, #12]
 800523a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800523e:	6665      	str	r5, [r4, #100]	; 0x64
 8005240:	f000 f847 	bl	80052d2 <__retarget_lock_init_recursive>
 8005244:	f7ff ff96 	bl	8005174 <__sfp_lock_release>
 8005248:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800524c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005250:	6025      	str	r5, [r4, #0]
 8005252:	61a5      	str	r5, [r4, #24]
 8005254:	2208      	movs	r2, #8
 8005256:	4629      	mov	r1, r5
 8005258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800525c:	f7ff fd2c 	bl	8004cb8 <memset>
 8005260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005268:	4620      	mov	r0, r4
 800526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526c:	3468      	adds	r4, #104	; 0x68
 800526e:	e7d9      	b.n	8005224 <__sfp+0x1c>
 8005270:	2104      	movs	r1, #4
 8005272:	4638      	mov	r0, r7
 8005274:	f7ff ff62 	bl	800513c <__sfmoreglue>
 8005278:	4604      	mov	r4, r0
 800527a:	6030      	str	r0, [r6, #0]
 800527c:	2800      	cmp	r0, #0
 800527e:	d1d5      	bne.n	800522c <__sfp+0x24>
 8005280:	f7ff ff78 	bl	8005174 <__sfp_lock_release>
 8005284:	230c      	movs	r3, #12
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	e7ee      	b.n	8005268 <__sfp+0x60>
 800528a:	bf00      	nop
 800528c:	08005e10 	.word	0x08005e10
 8005290:	ffff0001 	.word	0xffff0001

08005294 <_fwalk_reent>:
 8005294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005298:	4606      	mov	r6, r0
 800529a:	4688      	mov	r8, r1
 800529c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052a0:	2700      	movs	r7, #0
 80052a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052a6:	f1b9 0901 	subs.w	r9, r9, #1
 80052aa:	d505      	bpl.n	80052b8 <_fwalk_reent+0x24>
 80052ac:	6824      	ldr	r4, [r4, #0]
 80052ae:	2c00      	cmp	r4, #0
 80052b0:	d1f7      	bne.n	80052a2 <_fwalk_reent+0xe>
 80052b2:	4638      	mov	r0, r7
 80052b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b8:	89ab      	ldrh	r3, [r5, #12]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d907      	bls.n	80052ce <_fwalk_reent+0x3a>
 80052be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052c2:	3301      	adds	r3, #1
 80052c4:	d003      	beq.n	80052ce <_fwalk_reent+0x3a>
 80052c6:	4629      	mov	r1, r5
 80052c8:	4630      	mov	r0, r6
 80052ca:	47c0      	blx	r8
 80052cc:	4307      	orrs	r7, r0
 80052ce:	3568      	adds	r5, #104	; 0x68
 80052d0:	e7e9      	b.n	80052a6 <_fwalk_reent+0x12>

080052d2 <__retarget_lock_init_recursive>:
 80052d2:	4770      	bx	lr

080052d4 <__retarget_lock_acquire_recursive>:
 80052d4:	4770      	bx	lr

080052d6 <__retarget_lock_release_recursive>:
 80052d6:	4770      	bx	lr

080052d8 <__swhatbuf_r>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	460e      	mov	r6, r1
 80052dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e0:	2900      	cmp	r1, #0
 80052e2:	b096      	sub	sp, #88	; 0x58
 80052e4:	4614      	mov	r4, r2
 80052e6:	461d      	mov	r5, r3
 80052e8:	da08      	bge.n	80052fc <__swhatbuf_r+0x24>
 80052ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	061a      	lsls	r2, r3, #24
 80052f4:	d410      	bmi.n	8005318 <__swhatbuf_r+0x40>
 80052f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052fa:	e00e      	b.n	800531a <__swhatbuf_r+0x42>
 80052fc:	466a      	mov	r2, sp
 80052fe:	f000 fc95 	bl	8005c2c <_fstat_r>
 8005302:	2800      	cmp	r0, #0
 8005304:	dbf1      	blt.n	80052ea <__swhatbuf_r+0x12>
 8005306:	9a01      	ldr	r2, [sp, #4]
 8005308:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800530c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005310:	425a      	negs	r2, r3
 8005312:	415a      	adcs	r2, r3
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	e7ee      	b.n	80052f6 <__swhatbuf_r+0x1e>
 8005318:	2340      	movs	r3, #64	; 0x40
 800531a:	2000      	movs	r0, #0
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	b016      	add	sp, #88	; 0x58
 8005320:	bd70      	pop	{r4, r5, r6, pc}
	...

08005324 <__smakebuf_r>:
 8005324:	898b      	ldrh	r3, [r1, #12]
 8005326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005328:	079d      	lsls	r5, r3, #30
 800532a:	4606      	mov	r6, r0
 800532c:	460c      	mov	r4, r1
 800532e:	d507      	bpl.n	8005340 <__smakebuf_r+0x1c>
 8005330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	6123      	str	r3, [r4, #16]
 8005338:	2301      	movs	r3, #1
 800533a:	6163      	str	r3, [r4, #20]
 800533c:	b002      	add	sp, #8
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	ab01      	add	r3, sp, #4
 8005342:	466a      	mov	r2, sp
 8005344:	f7ff ffc8 	bl	80052d8 <__swhatbuf_r>
 8005348:	9900      	ldr	r1, [sp, #0]
 800534a:	4605      	mov	r5, r0
 800534c:	4630      	mov	r0, r6
 800534e:	f000 f895 	bl	800547c <_malloc_r>
 8005352:	b948      	cbnz	r0, 8005368 <__smakebuf_r+0x44>
 8005354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005358:	059a      	lsls	r2, r3, #22
 800535a:	d4ef      	bmi.n	800533c <__smakebuf_r+0x18>
 800535c:	f023 0303 	bic.w	r3, r3, #3
 8005360:	f043 0302 	orr.w	r3, r3, #2
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	e7e3      	b.n	8005330 <__smakebuf_r+0xc>
 8005368:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <__smakebuf_r+0x7c>)
 800536a:	62b3      	str	r3, [r6, #40]	; 0x28
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	6020      	str	r0, [r4, #0]
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	6163      	str	r3, [r4, #20]
 800537a:	9b01      	ldr	r3, [sp, #4]
 800537c:	6120      	str	r0, [r4, #16]
 800537e:	b15b      	cbz	r3, 8005398 <__smakebuf_r+0x74>
 8005380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005384:	4630      	mov	r0, r6
 8005386:	f000 fc63 	bl	8005c50 <_isatty_r>
 800538a:	b128      	cbz	r0, 8005398 <__smakebuf_r+0x74>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	89a0      	ldrh	r0, [r4, #12]
 800539a:	4305      	orrs	r5, r0
 800539c:	81a5      	strh	r5, [r4, #12]
 800539e:	e7cd      	b.n	800533c <__smakebuf_r+0x18>
 80053a0:	08005131 	.word	0x08005131

080053a4 <_free_r>:
 80053a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053a6:	2900      	cmp	r1, #0
 80053a8:	d044      	beq.n	8005434 <_free_r+0x90>
 80053aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ae:	9001      	str	r0, [sp, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f1a1 0404 	sub.w	r4, r1, #4
 80053b6:	bfb8      	it	lt
 80053b8:	18e4      	addlt	r4, r4, r3
 80053ba:	f000 fc6b 	bl	8005c94 <__malloc_lock>
 80053be:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <_free_r+0x94>)
 80053c0:	9801      	ldr	r0, [sp, #4]
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	b933      	cbnz	r3, 80053d4 <_free_r+0x30>
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	6014      	str	r4, [r2, #0]
 80053ca:	b003      	add	sp, #12
 80053cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053d0:	f000 bc66 	b.w	8005ca0 <__malloc_unlock>
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d908      	bls.n	80053ea <_free_r+0x46>
 80053d8:	6825      	ldr	r5, [r4, #0]
 80053da:	1961      	adds	r1, r4, r5
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf01      	itttt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	1949      	addeq	r1, r1, r5
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	e7ed      	b.n	80053c6 <_free_r+0x22>
 80053ea:	461a      	mov	r2, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b10b      	cbz	r3, 80053f4 <_free_r+0x50>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x46>
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	1855      	adds	r5, r2, r1
 80053f8:	42a5      	cmp	r5, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x70>
 80053fc:	6824      	ldr	r4, [r4, #0]
 80053fe:	4421      	add	r1, r4
 8005400:	1854      	adds	r4, r2, r1
 8005402:	42a3      	cmp	r3, r4
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	d1e0      	bne.n	80053ca <_free_r+0x26>
 8005408:	681c      	ldr	r4, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	4421      	add	r1, r4
 8005410:	6011      	str	r1, [r2, #0]
 8005412:	e7da      	b.n	80053ca <_free_r+0x26>
 8005414:	d902      	bls.n	800541c <_free_r+0x78>
 8005416:	230c      	movs	r3, #12
 8005418:	6003      	str	r3, [r0, #0]
 800541a:	e7d6      	b.n	80053ca <_free_r+0x26>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1961      	adds	r1, r4, r5
 8005420:	428b      	cmp	r3, r1
 8005422:	bf04      	itt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1949      	addeq	r1, r1, r5
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	6054      	str	r4, [r2, #4]
 8005432:	e7ca      	b.n	80053ca <_free_r+0x26>
 8005434:	b003      	add	sp, #12
 8005436:	bd30      	pop	{r4, r5, pc}
 8005438:	200001f0 	.word	0x200001f0

0800543c <sbrk_aligned>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4e0e      	ldr	r6, [pc, #56]	; (8005478 <sbrk_aligned+0x3c>)
 8005440:	460c      	mov	r4, r1
 8005442:	6831      	ldr	r1, [r6, #0]
 8005444:	4605      	mov	r5, r0
 8005446:	b911      	cbnz	r1, 800544e <sbrk_aligned+0x12>
 8005448:	f000 fb7a 	bl	8005b40 <_sbrk_r>
 800544c:	6030      	str	r0, [r6, #0]
 800544e:	4621      	mov	r1, r4
 8005450:	4628      	mov	r0, r5
 8005452:	f000 fb75 	bl	8005b40 <_sbrk_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d00a      	beq.n	8005470 <sbrk_aligned+0x34>
 800545a:	1cc4      	adds	r4, r0, #3
 800545c:	f024 0403 	bic.w	r4, r4, #3
 8005460:	42a0      	cmp	r0, r4
 8005462:	d007      	beq.n	8005474 <sbrk_aligned+0x38>
 8005464:	1a21      	subs	r1, r4, r0
 8005466:	4628      	mov	r0, r5
 8005468:	f000 fb6a 	bl	8005b40 <_sbrk_r>
 800546c:	3001      	adds	r0, #1
 800546e:	d101      	bne.n	8005474 <sbrk_aligned+0x38>
 8005470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005474:	4620      	mov	r0, r4
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	200001f4 	.word	0x200001f4

0800547c <_malloc_r>:
 800547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005480:	1ccd      	adds	r5, r1, #3
 8005482:	f025 0503 	bic.w	r5, r5, #3
 8005486:	3508      	adds	r5, #8
 8005488:	2d0c      	cmp	r5, #12
 800548a:	bf38      	it	cc
 800548c:	250c      	movcc	r5, #12
 800548e:	2d00      	cmp	r5, #0
 8005490:	4607      	mov	r7, r0
 8005492:	db01      	blt.n	8005498 <_malloc_r+0x1c>
 8005494:	42a9      	cmp	r1, r5
 8005496:	d905      	bls.n	80054a4 <_malloc_r+0x28>
 8005498:	230c      	movs	r3, #12
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	2600      	movs	r6, #0
 800549e:	4630      	mov	r0, r6
 80054a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a4:	4e2e      	ldr	r6, [pc, #184]	; (8005560 <_malloc_r+0xe4>)
 80054a6:	f000 fbf5 	bl	8005c94 <__malloc_lock>
 80054aa:	6833      	ldr	r3, [r6, #0]
 80054ac:	461c      	mov	r4, r3
 80054ae:	bb34      	cbnz	r4, 80054fe <_malloc_r+0x82>
 80054b0:	4629      	mov	r1, r5
 80054b2:	4638      	mov	r0, r7
 80054b4:	f7ff ffc2 	bl	800543c <sbrk_aligned>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	4604      	mov	r4, r0
 80054bc:	d14d      	bne.n	800555a <_malloc_r+0xde>
 80054be:	6834      	ldr	r4, [r6, #0]
 80054c0:	4626      	mov	r6, r4
 80054c2:	2e00      	cmp	r6, #0
 80054c4:	d140      	bne.n	8005548 <_malloc_r+0xcc>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	4631      	mov	r1, r6
 80054ca:	4638      	mov	r0, r7
 80054cc:	eb04 0803 	add.w	r8, r4, r3
 80054d0:	f000 fb36 	bl	8005b40 <_sbrk_r>
 80054d4:	4580      	cmp	r8, r0
 80054d6:	d13a      	bne.n	800554e <_malloc_r+0xd2>
 80054d8:	6821      	ldr	r1, [r4, #0]
 80054da:	3503      	adds	r5, #3
 80054dc:	1a6d      	subs	r5, r5, r1
 80054de:	f025 0503 	bic.w	r5, r5, #3
 80054e2:	3508      	adds	r5, #8
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	bf38      	it	cc
 80054e8:	250c      	movcc	r5, #12
 80054ea:	4629      	mov	r1, r5
 80054ec:	4638      	mov	r0, r7
 80054ee:	f7ff ffa5 	bl	800543c <sbrk_aligned>
 80054f2:	3001      	adds	r0, #1
 80054f4:	d02b      	beq.n	800554e <_malloc_r+0xd2>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	442b      	add	r3, r5
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	e00e      	b.n	800551c <_malloc_r+0xa0>
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	1b52      	subs	r2, r2, r5
 8005502:	d41e      	bmi.n	8005542 <_malloc_r+0xc6>
 8005504:	2a0b      	cmp	r2, #11
 8005506:	d916      	bls.n	8005536 <_malloc_r+0xba>
 8005508:	1961      	adds	r1, r4, r5
 800550a:	42a3      	cmp	r3, r4
 800550c:	6025      	str	r5, [r4, #0]
 800550e:	bf18      	it	ne
 8005510:	6059      	strne	r1, [r3, #4]
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	bf08      	it	eq
 8005516:	6031      	streq	r1, [r6, #0]
 8005518:	5162      	str	r2, [r4, r5]
 800551a:	604b      	str	r3, [r1, #4]
 800551c:	4638      	mov	r0, r7
 800551e:	f104 060b 	add.w	r6, r4, #11
 8005522:	f000 fbbd 	bl	8005ca0 <__malloc_unlock>
 8005526:	f026 0607 	bic.w	r6, r6, #7
 800552a:	1d23      	adds	r3, r4, #4
 800552c:	1af2      	subs	r2, r6, r3
 800552e:	d0b6      	beq.n	800549e <_malloc_r+0x22>
 8005530:	1b9b      	subs	r3, r3, r6
 8005532:	50a3      	str	r3, [r4, r2]
 8005534:	e7b3      	b.n	800549e <_malloc_r+0x22>
 8005536:	6862      	ldr	r2, [r4, #4]
 8005538:	42a3      	cmp	r3, r4
 800553a:	bf0c      	ite	eq
 800553c:	6032      	streq	r2, [r6, #0]
 800553e:	605a      	strne	r2, [r3, #4]
 8005540:	e7ec      	b.n	800551c <_malloc_r+0xa0>
 8005542:	4623      	mov	r3, r4
 8005544:	6864      	ldr	r4, [r4, #4]
 8005546:	e7b2      	b.n	80054ae <_malloc_r+0x32>
 8005548:	4634      	mov	r4, r6
 800554a:	6876      	ldr	r6, [r6, #4]
 800554c:	e7b9      	b.n	80054c2 <_malloc_r+0x46>
 800554e:	230c      	movs	r3, #12
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4638      	mov	r0, r7
 8005554:	f000 fba4 	bl	8005ca0 <__malloc_unlock>
 8005558:	e7a1      	b.n	800549e <_malloc_r+0x22>
 800555a:	6025      	str	r5, [r4, #0]
 800555c:	e7de      	b.n	800551c <_malloc_r+0xa0>
 800555e:	bf00      	nop
 8005560:	200001f0 	.word	0x200001f0

08005564 <__sfputc_r>:
 8005564:	6893      	ldr	r3, [r2, #8]
 8005566:	3b01      	subs	r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	b410      	push	{r4}
 800556c:	6093      	str	r3, [r2, #8]
 800556e:	da08      	bge.n	8005582 <__sfputc_r+0x1e>
 8005570:	6994      	ldr	r4, [r2, #24]
 8005572:	42a3      	cmp	r3, r4
 8005574:	db01      	blt.n	800557a <__sfputc_r+0x16>
 8005576:	290a      	cmp	r1, #10
 8005578:	d103      	bne.n	8005582 <__sfputc_r+0x1e>
 800557a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800557e:	f7ff bc31 	b.w	8004de4 <__swbuf_r>
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	1c58      	adds	r0, r3, #1
 8005586:	6010      	str	r0, [r2, #0]
 8005588:	7019      	strb	r1, [r3, #0]
 800558a:	4608      	mov	r0, r1
 800558c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005590:	4770      	bx	lr

08005592 <__sfputs_r>:
 8005592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005594:	4606      	mov	r6, r0
 8005596:	460f      	mov	r7, r1
 8005598:	4614      	mov	r4, r2
 800559a:	18d5      	adds	r5, r2, r3
 800559c:	42ac      	cmp	r4, r5
 800559e:	d101      	bne.n	80055a4 <__sfputs_r+0x12>
 80055a0:	2000      	movs	r0, #0
 80055a2:	e007      	b.n	80055b4 <__sfputs_r+0x22>
 80055a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a8:	463a      	mov	r2, r7
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7ff ffda 	bl	8005564 <__sfputc_r>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d1f3      	bne.n	800559c <__sfputs_r+0xa>
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055b8 <_vfiprintf_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	460d      	mov	r5, r1
 80055be:	b09d      	sub	sp, #116	; 0x74
 80055c0:	4614      	mov	r4, r2
 80055c2:	4698      	mov	r8, r3
 80055c4:	4606      	mov	r6, r0
 80055c6:	b118      	cbz	r0, 80055d0 <_vfiprintf_r+0x18>
 80055c8:	6983      	ldr	r3, [r0, #24]
 80055ca:	b90b      	cbnz	r3, 80055d0 <_vfiprintf_r+0x18>
 80055cc:	f7ff fde4 	bl	8005198 <__sinit>
 80055d0:	4b89      	ldr	r3, [pc, #548]	; (80057f8 <_vfiprintf_r+0x240>)
 80055d2:	429d      	cmp	r5, r3
 80055d4:	d11b      	bne.n	800560e <_vfiprintf_r+0x56>
 80055d6:	6875      	ldr	r5, [r6, #4]
 80055d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055da:	07d9      	lsls	r1, r3, #31
 80055dc:	d405      	bmi.n	80055ea <_vfiprintf_r+0x32>
 80055de:	89ab      	ldrh	r3, [r5, #12]
 80055e0:	059a      	lsls	r2, r3, #22
 80055e2:	d402      	bmi.n	80055ea <_vfiprintf_r+0x32>
 80055e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e6:	f7ff fe75 	bl	80052d4 <__retarget_lock_acquire_recursive>
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	071b      	lsls	r3, r3, #28
 80055ee:	d501      	bpl.n	80055f4 <_vfiprintf_r+0x3c>
 80055f0:	692b      	ldr	r3, [r5, #16]
 80055f2:	b9eb      	cbnz	r3, 8005630 <_vfiprintf_r+0x78>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4630      	mov	r0, r6
 80055f8:	f7ff fc46 	bl	8004e88 <__swsetup_r>
 80055fc:	b1c0      	cbz	r0, 8005630 <_vfiprintf_r+0x78>
 80055fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005600:	07dc      	lsls	r4, r3, #31
 8005602:	d50e      	bpl.n	8005622 <_vfiprintf_r+0x6a>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005608:	b01d      	add	sp, #116	; 0x74
 800560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560e:	4b7b      	ldr	r3, [pc, #492]	; (80057fc <_vfiprintf_r+0x244>)
 8005610:	429d      	cmp	r5, r3
 8005612:	d101      	bne.n	8005618 <_vfiprintf_r+0x60>
 8005614:	68b5      	ldr	r5, [r6, #8]
 8005616:	e7df      	b.n	80055d8 <_vfiprintf_r+0x20>
 8005618:	4b79      	ldr	r3, [pc, #484]	; (8005800 <_vfiprintf_r+0x248>)
 800561a:	429d      	cmp	r5, r3
 800561c:	bf08      	it	eq
 800561e:	68f5      	ldreq	r5, [r6, #12]
 8005620:	e7da      	b.n	80055d8 <_vfiprintf_r+0x20>
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	0598      	lsls	r0, r3, #22
 8005626:	d4ed      	bmi.n	8005604 <_vfiprintf_r+0x4c>
 8005628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800562a:	f7ff fe54 	bl	80052d6 <__retarget_lock_release_recursive>
 800562e:	e7e9      	b.n	8005604 <_vfiprintf_r+0x4c>
 8005630:	2300      	movs	r3, #0
 8005632:	9309      	str	r3, [sp, #36]	; 0x24
 8005634:	2320      	movs	r3, #32
 8005636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563a:	f8cd 800c 	str.w	r8, [sp, #12]
 800563e:	2330      	movs	r3, #48	; 0x30
 8005640:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005804 <_vfiprintf_r+0x24c>
 8005644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005648:	f04f 0901 	mov.w	r9, #1
 800564c:	4623      	mov	r3, r4
 800564e:	469a      	mov	sl, r3
 8005650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005654:	b10a      	cbz	r2, 800565a <_vfiprintf_r+0xa2>
 8005656:	2a25      	cmp	r2, #37	; 0x25
 8005658:	d1f9      	bne.n	800564e <_vfiprintf_r+0x96>
 800565a:	ebba 0b04 	subs.w	fp, sl, r4
 800565e:	d00b      	beq.n	8005678 <_vfiprintf_r+0xc0>
 8005660:	465b      	mov	r3, fp
 8005662:	4622      	mov	r2, r4
 8005664:	4629      	mov	r1, r5
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff ff93 	bl	8005592 <__sfputs_r>
 800566c:	3001      	adds	r0, #1
 800566e:	f000 80aa 	beq.w	80057c6 <_vfiprintf_r+0x20e>
 8005672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005674:	445a      	add	r2, fp
 8005676:	9209      	str	r2, [sp, #36]	; 0x24
 8005678:	f89a 3000 	ldrb.w	r3, [sl]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80a2 	beq.w	80057c6 <_vfiprintf_r+0x20e>
 8005682:	2300      	movs	r3, #0
 8005684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568c:	f10a 0a01 	add.w	sl, sl, #1
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	9307      	str	r3, [sp, #28]
 8005694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005698:	931a      	str	r3, [sp, #104]	; 0x68
 800569a:	4654      	mov	r4, sl
 800569c:	2205      	movs	r2, #5
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	4858      	ldr	r0, [pc, #352]	; (8005804 <_vfiprintf_r+0x24c>)
 80056a4:	f7fa fdc4 	bl	8000230 <memchr>
 80056a8:	9a04      	ldr	r2, [sp, #16]
 80056aa:	b9d8      	cbnz	r0, 80056e4 <_vfiprintf_r+0x12c>
 80056ac:	06d1      	lsls	r1, r2, #27
 80056ae:	bf44      	itt	mi
 80056b0:	2320      	movmi	r3, #32
 80056b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b6:	0713      	lsls	r3, r2, #28
 80056b8:	bf44      	itt	mi
 80056ba:	232b      	movmi	r3, #43	; 0x2b
 80056bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c0:	f89a 3000 	ldrb.w	r3, [sl]
 80056c4:	2b2a      	cmp	r3, #42	; 0x2a
 80056c6:	d015      	beq.n	80056f4 <_vfiprintf_r+0x13c>
 80056c8:	9a07      	ldr	r2, [sp, #28]
 80056ca:	4654      	mov	r4, sl
 80056cc:	2000      	movs	r0, #0
 80056ce:	f04f 0c0a 	mov.w	ip, #10
 80056d2:	4621      	mov	r1, r4
 80056d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d8:	3b30      	subs	r3, #48	; 0x30
 80056da:	2b09      	cmp	r3, #9
 80056dc:	d94e      	bls.n	800577c <_vfiprintf_r+0x1c4>
 80056de:	b1b0      	cbz	r0, 800570e <_vfiprintf_r+0x156>
 80056e0:	9207      	str	r2, [sp, #28]
 80056e2:	e014      	b.n	800570e <_vfiprintf_r+0x156>
 80056e4:	eba0 0308 	sub.w	r3, r0, r8
 80056e8:	fa09 f303 	lsl.w	r3, r9, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	46a2      	mov	sl, r4
 80056f2:	e7d2      	b.n	800569a <_vfiprintf_r+0xe2>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	1d19      	adds	r1, r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	9103      	str	r1, [sp, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bfbb      	ittet	lt
 8005700:	425b      	neglt	r3, r3
 8005702:	f042 0202 	orrlt.w	r2, r2, #2
 8005706:	9307      	strge	r3, [sp, #28]
 8005708:	9307      	strlt	r3, [sp, #28]
 800570a:	bfb8      	it	lt
 800570c:	9204      	strlt	r2, [sp, #16]
 800570e:	7823      	ldrb	r3, [r4, #0]
 8005710:	2b2e      	cmp	r3, #46	; 0x2e
 8005712:	d10c      	bne.n	800572e <_vfiprintf_r+0x176>
 8005714:	7863      	ldrb	r3, [r4, #1]
 8005716:	2b2a      	cmp	r3, #42	; 0x2a
 8005718:	d135      	bne.n	8005786 <_vfiprintf_r+0x1ce>
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	1d1a      	adds	r2, r3, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	9203      	str	r2, [sp, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfb8      	it	lt
 8005726:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800572a:	3402      	adds	r4, #2
 800572c:	9305      	str	r3, [sp, #20]
 800572e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005814 <_vfiprintf_r+0x25c>
 8005732:	7821      	ldrb	r1, [r4, #0]
 8005734:	2203      	movs	r2, #3
 8005736:	4650      	mov	r0, sl
 8005738:	f7fa fd7a 	bl	8000230 <memchr>
 800573c:	b140      	cbz	r0, 8005750 <_vfiprintf_r+0x198>
 800573e:	2340      	movs	r3, #64	; 0x40
 8005740:	eba0 000a 	sub.w	r0, r0, sl
 8005744:	fa03 f000 	lsl.w	r0, r3, r0
 8005748:	9b04      	ldr	r3, [sp, #16]
 800574a:	4303      	orrs	r3, r0
 800574c:	3401      	adds	r4, #1
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005754:	482c      	ldr	r0, [pc, #176]	; (8005808 <_vfiprintf_r+0x250>)
 8005756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575a:	2206      	movs	r2, #6
 800575c:	f7fa fd68 	bl	8000230 <memchr>
 8005760:	2800      	cmp	r0, #0
 8005762:	d03f      	beq.n	80057e4 <_vfiprintf_r+0x22c>
 8005764:	4b29      	ldr	r3, [pc, #164]	; (800580c <_vfiprintf_r+0x254>)
 8005766:	bb1b      	cbnz	r3, 80057b0 <_vfiprintf_r+0x1f8>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	3307      	adds	r3, #7
 800576c:	f023 0307 	bic.w	r3, r3, #7
 8005770:	3308      	adds	r3, #8
 8005772:	9303      	str	r3, [sp, #12]
 8005774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005776:	443b      	add	r3, r7
 8005778:	9309      	str	r3, [sp, #36]	; 0x24
 800577a:	e767      	b.n	800564c <_vfiprintf_r+0x94>
 800577c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005780:	460c      	mov	r4, r1
 8005782:	2001      	movs	r0, #1
 8005784:	e7a5      	b.n	80056d2 <_vfiprintf_r+0x11a>
 8005786:	2300      	movs	r3, #0
 8005788:	3401      	adds	r4, #1
 800578a:	9305      	str	r3, [sp, #20]
 800578c:	4619      	mov	r1, r3
 800578e:	f04f 0c0a 	mov.w	ip, #10
 8005792:	4620      	mov	r0, r4
 8005794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005798:	3a30      	subs	r2, #48	; 0x30
 800579a:	2a09      	cmp	r2, #9
 800579c:	d903      	bls.n	80057a6 <_vfiprintf_r+0x1ee>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0c5      	beq.n	800572e <_vfiprintf_r+0x176>
 80057a2:	9105      	str	r1, [sp, #20]
 80057a4:	e7c3      	b.n	800572e <_vfiprintf_r+0x176>
 80057a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057aa:	4604      	mov	r4, r0
 80057ac:	2301      	movs	r3, #1
 80057ae:	e7f0      	b.n	8005792 <_vfiprintf_r+0x1da>
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	462a      	mov	r2, r5
 80057b6:	4b16      	ldr	r3, [pc, #88]	; (8005810 <_vfiprintf_r+0x258>)
 80057b8:	a904      	add	r1, sp, #16
 80057ba:	4630      	mov	r0, r6
 80057bc:	f3af 8000 	nop.w
 80057c0:	4607      	mov	r7, r0
 80057c2:	1c78      	adds	r0, r7, #1
 80057c4:	d1d6      	bne.n	8005774 <_vfiprintf_r+0x1bc>
 80057c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c8:	07d9      	lsls	r1, r3, #31
 80057ca:	d405      	bmi.n	80057d8 <_vfiprintf_r+0x220>
 80057cc:	89ab      	ldrh	r3, [r5, #12]
 80057ce:	059a      	lsls	r2, r3, #22
 80057d0:	d402      	bmi.n	80057d8 <_vfiprintf_r+0x220>
 80057d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d4:	f7ff fd7f 	bl	80052d6 <__retarget_lock_release_recursive>
 80057d8:	89ab      	ldrh	r3, [r5, #12]
 80057da:	065b      	lsls	r3, r3, #25
 80057dc:	f53f af12 	bmi.w	8005604 <_vfiprintf_r+0x4c>
 80057e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e2:	e711      	b.n	8005608 <_vfiprintf_r+0x50>
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	462a      	mov	r2, r5
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <_vfiprintf_r+0x258>)
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	4630      	mov	r0, r6
 80057f0:	f000 f880 	bl	80058f4 <_printf_i>
 80057f4:	e7e4      	b.n	80057c0 <_vfiprintf_r+0x208>
 80057f6:	bf00      	nop
 80057f8:	08005e34 	.word	0x08005e34
 80057fc:	08005e54 	.word	0x08005e54
 8005800:	08005e14 	.word	0x08005e14
 8005804:	08005e74 	.word	0x08005e74
 8005808:	08005e7e 	.word	0x08005e7e
 800580c:	00000000 	.word	0x00000000
 8005810:	08005593 	.word	0x08005593
 8005814:	08005e7a 	.word	0x08005e7a

08005818 <_printf_common>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	4616      	mov	r6, r2
 800581e:	4699      	mov	r9, r3
 8005820:	688a      	ldr	r2, [r1, #8]
 8005822:	690b      	ldr	r3, [r1, #16]
 8005824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005828:	4293      	cmp	r3, r2
 800582a:	bfb8      	it	lt
 800582c:	4613      	movlt	r3, r2
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005834:	4607      	mov	r7, r0
 8005836:	460c      	mov	r4, r1
 8005838:	b10a      	cbz	r2, 800583e <_printf_common+0x26>
 800583a:	3301      	adds	r3, #1
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	0699      	lsls	r1, r3, #26
 8005842:	bf42      	ittt	mi
 8005844:	6833      	ldrmi	r3, [r6, #0]
 8005846:	3302      	addmi	r3, #2
 8005848:	6033      	strmi	r3, [r6, #0]
 800584a:	6825      	ldr	r5, [r4, #0]
 800584c:	f015 0506 	ands.w	r5, r5, #6
 8005850:	d106      	bne.n	8005860 <_printf_common+0x48>
 8005852:	f104 0a19 	add.w	sl, r4, #25
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	6832      	ldr	r2, [r6, #0]
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	42ab      	cmp	r3, r5
 800585e:	dc26      	bgt.n	80058ae <_printf_common+0x96>
 8005860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005864:	1e13      	subs	r3, r2, #0
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	bf18      	it	ne
 800586a:	2301      	movne	r3, #1
 800586c:	0692      	lsls	r2, r2, #26
 800586e:	d42b      	bmi.n	80058c8 <_printf_common+0xb0>
 8005870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005874:	4649      	mov	r1, r9
 8005876:	4638      	mov	r0, r7
 8005878:	47c0      	blx	r8
 800587a:	3001      	adds	r0, #1
 800587c:	d01e      	beq.n	80058bc <_printf_common+0xa4>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	68e5      	ldr	r5, [r4, #12]
 8005882:	6832      	ldr	r2, [r6, #0]
 8005884:	f003 0306 	and.w	r3, r3, #6
 8005888:	2b04      	cmp	r3, #4
 800588a:	bf08      	it	eq
 800588c:	1aad      	subeq	r5, r5, r2
 800588e:	68a3      	ldr	r3, [r4, #8]
 8005890:	6922      	ldr	r2, [r4, #16]
 8005892:	bf0c      	ite	eq
 8005894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005898:	2500      	movne	r5, #0
 800589a:	4293      	cmp	r3, r2
 800589c:	bfc4      	itt	gt
 800589e:	1a9b      	subgt	r3, r3, r2
 80058a0:	18ed      	addgt	r5, r5, r3
 80058a2:	2600      	movs	r6, #0
 80058a4:	341a      	adds	r4, #26
 80058a6:	42b5      	cmp	r5, r6
 80058a8:	d11a      	bne.n	80058e0 <_printf_common+0xc8>
 80058aa:	2000      	movs	r0, #0
 80058ac:	e008      	b.n	80058c0 <_printf_common+0xa8>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4652      	mov	r2, sl
 80058b2:	4649      	mov	r1, r9
 80058b4:	4638      	mov	r0, r7
 80058b6:	47c0      	blx	r8
 80058b8:	3001      	adds	r0, #1
 80058ba:	d103      	bne.n	80058c4 <_printf_common+0xac>
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c4:	3501      	adds	r5, #1
 80058c6:	e7c6      	b.n	8005856 <_printf_common+0x3e>
 80058c8:	18e1      	adds	r1, r4, r3
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	2030      	movs	r0, #48	; 0x30
 80058ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058d2:	4422      	add	r2, r4
 80058d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058dc:	3302      	adds	r3, #2
 80058de:	e7c7      	b.n	8005870 <_printf_common+0x58>
 80058e0:	2301      	movs	r3, #1
 80058e2:	4622      	mov	r2, r4
 80058e4:	4649      	mov	r1, r9
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c0      	blx	r8
 80058ea:	3001      	adds	r0, #1
 80058ec:	d0e6      	beq.n	80058bc <_printf_common+0xa4>
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7d9      	b.n	80058a6 <_printf_common+0x8e>
	...

080058f4 <_printf_i>:
 80058f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	7e0f      	ldrb	r7, [r1, #24]
 80058fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058fc:	2f78      	cmp	r7, #120	; 0x78
 80058fe:	4691      	mov	r9, r2
 8005900:	4680      	mov	r8, r0
 8005902:	460c      	mov	r4, r1
 8005904:	469a      	mov	sl, r3
 8005906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800590a:	d807      	bhi.n	800591c <_printf_i+0x28>
 800590c:	2f62      	cmp	r7, #98	; 0x62
 800590e:	d80a      	bhi.n	8005926 <_printf_i+0x32>
 8005910:	2f00      	cmp	r7, #0
 8005912:	f000 80d8 	beq.w	8005ac6 <_printf_i+0x1d2>
 8005916:	2f58      	cmp	r7, #88	; 0x58
 8005918:	f000 80a3 	beq.w	8005a62 <_printf_i+0x16e>
 800591c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005924:	e03a      	b.n	800599c <_printf_i+0xa8>
 8005926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800592a:	2b15      	cmp	r3, #21
 800592c:	d8f6      	bhi.n	800591c <_printf_i+0x28>
 800592e:	a101      	add	r1, pc, #4	; (adr r1, 8005934 <_printf_i+0x40>)
 8005930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005934:	0800598d 	.word	0x0800598d
 8005938:	080059a1 	.word	0x080059a1
 800593c:	0800591d 	.word	0x0800591d
 8005940:	0800591d 	.word	0x0800591d
 8005944:	0800591d 	.word	0x0800591d
 8005948:	0800591d 	.word	0x0800591d
 800594c:	080059a1 	.word	0x080059a1
 8005950:	0800591d 	.word	0x0800591d
 8005954:	0800591d 	.word	0x0800591d
 8005958:	0800591d 	.word	0x0800591d
 800595c:	0800591d 	.word	0x0800591d
 8005960:	08005aad 	.word	0x08005aad
 8005964:	080059d1 	.word	0x080059d1
 8005968:	08005a8f 	.word	0x08005a8f
 800596c:	0800591d 	.word	0x0800591d
 8005970:	0800591d 	.word	0x0800591d
 8005974:	08005acf 	.word	0x08005acf
 8005978:	0800591d 	.word	0x0800591d
 800597c:	080059d1 	.word	0x080059d1
 8005980:	0800591d 	.word	0x0800591d
 8005984:	0800591d 	.word	0x0800591d
 8005988:	08005a97 	.word	0x08005a97
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	602a      	str	r2, [r5, #0]
 8005994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800599c:	2301      	movs	r3, #1
 800599e:	e0a3      	b.n	8005ae8 <_printf_i+0x1f4>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	6829      	ldr	r1, [r5, #0]
 80059a4:	0606      	lsls	r6, r0, #24
 80059a6:	f101 0304 	add.w	r3, r1, #4
 80059aa:	d50a      	bpl.n	80059c2 <_printf_i+0xce>
 80059ac:	680e      	ldr	r6, [r1, #0]
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	2e00      	cmp	r6, #0
 80059b2:	da03      	bge.n	80059bc <_printf_i+0xc8>
 80059b4:	232d      	movs	r3, #45	; 0x2d
 80059b6:	4276      	negs	r6, r6
 80059b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059bc:	485e      	ldr	r0, [pc, #376]	; (8005b38 <_printf_i+0x244>)
 80059be:	230a      	movs	r3, #10
 80059c0:	e019      	b.n	80059f6 <_printf_i+0x102>
 80059c2:	680e      	ldr	r6, [r1, #0]
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059ca:	bf18      	it	ne
 80059cc:	b236      	sxthne	r6, r6
 80059ce:	e7ef      	b.n	80059b0 <_printf_i+0xbc>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	1d19      	adds	r1, r3, #4
 80059d6:	6029      	str	r1, [r5, #0]
 80059d8:	0601      	lsls	r1, r0, #24
 80059da:	d501      	bpl.n	80059e0 <_printf_i+0xec>
 80059dc:	681e      	ldr	r6, [r3, #0]
 80059de:	e002      	b.n	80059e6 <_printf_i+0xf2>
 80059e0:	0646      	lsls	r6, r0, #25
 80059e2:	d5fb      	bpl.n	80059dc <_printf_i+0xe8>
 80059e4:	881e      	ldrh	r6, [r3, #0]
 80059e6:	4854      	ldr	r0, [pc, #336]	; (8005b38 <_printf_i+0x244>)
 80059e8:	2f6f      	cmp	r7, #111	; 0x6f
 80059ea:	bf0c      	ite	eq
 80059ec:	2308      	moveq	r3, #8
 80059ee:	230a      	movne	r3, #10
 80059f0:	2100      	movs	r1, #0
 80059f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059f6:	6865      	ldr	r5, [r4, #4]
 80059f8:	60a5      	str	r5, [r4, #8]
 80059fa:	2d00      	cmp	r5, #0
 80059fc:	bfa2      	ittt	ge
 80059fe:	6821      	ldrge	r1, [r4, #0]
 8005a00:	f021 0104 	bicge.w	r1, r1, #4
 8005a04:	6021      	strge	r1, [r4, #0]
 8005a06:	b90e      	cbnz	r6, 8005a0c <_printf_i+0x118>
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	d04d      	beq.n	8005aa8 <_printf_i+0x1b4>
 8005a0c:	4615      	mov	r5, r2
 8005a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a12:	fb03 6711 	mls	r7, r3, r1, r6
 8005a16:	5dc7      	ldrb	r7, [r0, r7]
 8005a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a1c:	4637      	mov	r7, r6
 8005a1e:	42bb      	cmp	r3, r7
 8005a20:	460e      	mov	r6, r1
 8005a22:	d9f4      	bls.n	8005a0e <_printf_i+0x11a>
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d10b      	bne.n	8005a40 <_printf_i+0x14c>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	07de      	lsls	r6, r3, #31
 8005a2c:	d508      	bpl.n	8005a40 <_printf_i+0x14c>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	6861      	ldr	r1, [r4, #4]
 8005a32:	4299      	cmp	r1, r3
 8005a34:	bfde      	ittt	le
 8005a36:	2330      	movle	r3, #48	; 0x30
 8005a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a40:	1b52      	subs	r2, r2, r5
 8005a42:	6122      	str	r2, [r4, #16]
 8005a44:	f8cd a000 	str.w	sl, [sp]
 8005a48:	464b      	mov	r3, r9
 8005a4a:	aa03      	add	r2, sp, #12
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4640      	mov	r0, r8
 8005a50:	f7ff fee2 	bl	8005818 <_printf_common>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d14c      	bne.n	8005af2 <_printf_i+0x1fe>
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a5c:	b004      	add	sp, #16
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	4835      	ldr	r0, [pc, #212]	; (8005b38 <_printf_i+0x244>)
 8005a64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a68:	6829      	ldr	r1, [r5, #0]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a70:	6029      	str	r1, [r5, #0]
 8005a72:	061d      	lsls	r5, r3, #24
 8005a74:	d514      	bpl.n	8005aa0 <_printf_i+0x1ac>
 8005a76:	07df      	lsls	r7, r3, #31
 8005a78:	bf44      	itt	mi
 8005a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a7e:	6023      	strmi	r3, [r4, #0]
 8005a80:	b91e      	cbnz	r6, 8005a8a <_printf_i+0x196>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	f023 0320 	bic.w	r3, r3, #32
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	2310      	movs	r3, #16
 8005a8c:	e7b0      	b.n	80059f0 <_printf_i+0xfc>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	f043 0320 	orr.w	r3, r3, #32
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	2378      	movs	r3, #120	; 0x78
 8005a98:	4828      	ldr	r0, [pc, #160]	; (8005b3c <_printf_i+0x248>)
 8005a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a9e:	e7e3      	b.n	8005a68 <_printf_i+0x174>
 8005aa0:	0659      	lsls	r1, r3, #25
 8005aa2:	bf48      	it	mi
 8005aa4:	b2b6      	uxthmi	r6, r6
 8005aa6:	e7e6      	b.n	8005a76 <_printf_i+0x182>
 8005aa8:	4615      	mov	r5, r2
 8005aaa:	e7bb      	b.n	8005a24 <_printf_i+0x130>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	6826      	ldr	r6, [r4, #0]
 8005ab0:	6961      	ldr	r1, [r4, #20]
 8005ab2:	1d18      	adds	r0, r3, #4
 8005ab4:	6028      	str	r0, [r5, #0]
 8005ab6:	0635      	lsls	r5, r6, #24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0x1cc>
 8005abc:	6019      	str	r1, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0x1d2>
 8005ac0:	0670      	lsls	r0, r6, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0x1c8>
 8005ac4:	8019      	strh	r1, [r3, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	4615      	mov	r5, r2
 8005acc:	e7ba      	b.n	8005a44 <_printf_i+0x150>
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	602a      	str	r2, [r5, #0]
 8005ad4:	681d      	ldr	r5, [r3, #0]
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7fa fba8 	bl	8000230 <memchr>
 8005ae0:	b108      	cbz	r0, 8005ae6 <_printf_i+0x1f2>
 8005ae2:	1b40      	subs	r0, r0, r5
 8005ae4:	6060      	str	r0, [r4, #4]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	2300      	movs	r3, #0
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af0:	e7a8      	b.n	8005a44 <_printf_i+0x150>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	462a      	mov	r2, r5
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0ab      	beq.n	8005a58 <_printf_i+0x164>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	079b      	lsls	r3, r3, #30
 8005b04:	d413      	bmi.n	8005b2e <_printf_i+0x23a>
 8005b06:	68e0      	ldr	r0, [r4, #12]
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	bfb8      	it	lt
 8005b0e:	4618      	movlt	r0, r3
 8005b10:	e7a4      	b.n	8005a5c <_printf_i+0x168>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4632      	mov	r2, r6
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	47d0      	blx	sl
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d09b      	beq.n	8005a58 <_printf_i+0x164>
 8005b20:	3501      	adds	r5, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	9903      	ldr	r1, [sp, #12]
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dcf2      	bgt.n	8005b12 <_printf_i+0x21e>
 8005b2c:	e7eb      	b.n	8005b06 <_printf_i+0x212>
 8005b2e:	2500      	movs	r5, #0
 8005b30:	f104 0619 	add.w	r6, r4, #25
 8005b34:	e7f5      	b.n	8005b22 <_printf_i+0x22e>
 8005b36:	bf00      	nop
 8005b38:	08005e85 	.word	0x08005e85
 8005b3c:	08005e96 	.word	0x08005e96

08005b40 <_sbrk_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d06      	ldr	r5, [pc, #24]	; (8005b5c <_sbrk_r+0x1c>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f7fb fa16 	bl	8000f7c <_sbrk>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_sbrk_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_sbrk_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	200001f8 	.word	0x200001f8

08005b60 <__sread>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	460c      	mov	r4, r1
 8005b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b68:	f000 f8a0 	bl	8005cac <_read_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	bfab      	itete	ge
 8005b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b72:	89a3      	ldrhlt	r3, [r4, #12]
 8005b74:	181b      	addge	r3, r3, r0
 8005b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b7a:	bfac      	ite	ge
 8005b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b7e:	81a3      	strhlt	r3, [r4, #12]
 8005b80:	bd10      	pop	{r4, pc}

08005b82 <__swrite>:
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	461f      	mov	r7, r3
 8005b88:	898b      	ldrh	r3, [r1, #12]
 8005b8a:	05db      	lsls	r3, r3, #23
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	4616      	mov	r6, r2
 8005b92:	d505      	bpl.n	8005ba0 <__swrite+0x1e>
 8005b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b98:	2302      	movs	r3, #2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f000 f868 	bl	8005c70 <_lseek_r>
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005baa:	81a3      	strh	r3, [r4, #12]
 8005bac:	4632      	mov	r2, r6
 8005bae:	463b      	mov	r3, r7
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb6:	f000 b817 	b.w	8005be8 <_write_r>

08005bba <__sseek>:
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc2:	f000 f855 	bl	8005c70 <_lseek_r>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	bf15      	itete	ne
 8005bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bd6:	81a3      	strheq	r3, [r4, #12]
 8005bd8:	bf18      	it	ne
 8005bda:	81a3      	strhne	r3, [r4, #12]
 8005bdc:	bd10      	pop	{r4, pc}

08005bde <__sclose>:
 8005bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be2:	f000 b813 	b.w	8005c0c <_close_r>
	...

08005be8 <_write_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	; (8005c08 <_write_r+0x20>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fb f96f 	bl	8000eda <_write>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_write_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_write_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	200001f8 	.word	0x200001f8

08005c0c <_close_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d06      	ldr	r5, [pc, #24]	; (8005c28 <_close_r+0x1c>)
 8005c10:	2300      	movs	r3, #0
 8005c12:	4604      	mov	r4, r0
 8005c14:	4608      	mov	r0, r1
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	f7fb f97b 	bl	8000f12 <_close>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_close_r+0x1a>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_close_r+0x1a>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	200001f8 	.word	0x200001f8

08005c2c <_fstat_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d07      	ldr	r5, [pc, #28]	; (8005c4c <_fstat_r+0x20>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	f7fb f976 	bl	8000f2a <_fstat>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d102      	bne.n	8005c48 <_fstat_r+0x1c>
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	b103      	cbz	r3, 8005c48 <_fstat_r+0x1c>
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200001f8 	.word	0x200001f8

08005c50 <_isatty_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d06      	ldr	r5, [pc, #24]	; (8005c6c <_isatty_r+0x1c>)
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fb f975 	bl	8000f4a <_isatty>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_isatty_r+0x1a>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_isatty_r+0x1a>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	200001f8 	.word	0x200001f8

08005c70 <_lseek_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4d07      	ldr	r5, [pc, #28]	; (8005c90 <_lseek_r+0x20>)
 8005c74:	4604      	mov	r4, r0
 8005c76:	4608      	mov	r0, r1
 8005c78:	4611      	mov	r1, r2
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	602a      	str	r2, [r5, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f7fb f96e 	bl	8000f60 <_lseek>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_lseek_r+0x1e>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_lseek_r+0x1e>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	200001f8 	.word	0x200001f8

08005c94 <__malloc_lock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__malloc_lock+0x8>)
 8005c96:	f7ff bb1d 	b.w	80052d4 <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	200001ec 	.word	0x200001ec

08005ca0 <__malloc_unlock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__malloc_unlock+0x8>)
 8005ca2:	f7ff bb18 	b.w	80052d6 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200001ec 	.word	0x200001ec

08005cac <_read_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	; (8005ccc <_read_r+0x20>)
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fb f8f0 	bl	8000ea0 <_read>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_read_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_read_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200001f8 	.word	0x200001f8

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
