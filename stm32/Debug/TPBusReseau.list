
TPBusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800bcf0  0800bcf0  0001bcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c370  0800c370  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c370  0800c370  0001c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c378  0800c378  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c378  0800c378  0001c378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c37c  0800c37c  0001c37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e0  0800c560  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800c560  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f55a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d1  00000000  00000000  0002f76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00031b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000327b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f3b  00000000  00000000  00033360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010476  00000000  00000000  0005629b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf73c  00000000  00000000  00066711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135e4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d48  00000000  00000000  00135ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bcd4 	.word	0x0800bcd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bcd4 	.word	0x0800bcd4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d06:	f000 b9f5 	b.w	80010f4 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d9c:	f000 b9aa 	b.w	80010f4 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	468e      	mov	lr, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d14d      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e32:	428a      	cmp	r2, r1
 8000e34:	4694      	mov	ip, r2
 8000e36:	d969      	bls.n	8000f0c <__udivmoddi4+0xe8>
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b152      	cbz	r2, 8000e54 <__udivmoddi4+0x30>
 8000e3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e42:	f1c2 0120 	rsb	r1, r2, #32
 8000e46:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e52:	4094      	lsls	r4, r2
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	0c21      	lsrs	r1, r4, #16
 8000e5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e5e:	fa1f f78c 	uxth.w	r7, ip
 8000e62:	fb08 e316 	mls	r3, r8, r6, lr
 8000e66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e6a:	fb06 f107 	mul.w	r1, r6, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e7a:	f080 811f 	bcs.w	80010bc <__udivmoddi4+0x298>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 811c 	bls.w	80010bc <__udivmoddi4+0x298>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb00 f707 	mul.w	r7, r0, r7
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	d90a      	bls.n	8000eb6 <__udivmoddi4+0x92>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	f080 810a 	bcs.w	80010c0 <__udivmoddi4+0x29c>
 8000eac:	42a7      	cmp	r7, r4
 8000eae:	f240 8107 	bls.w	80010c0 <__udivmoddi4+0x29c>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eba:	1be4      	subs	r4, r4, r7
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	b11d      	cbz	r5, 8000ec8 <__udivmoddi4+0xa4>
 8000ec0:	40d4      	lsrs	r4, r2
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d909      	bls.n	8000ee6 <__udivmoddi4+0xc2>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	f000 80ef 	beq.w	80010b6 <__udivmoddi4+0x292>
 8000ed8:	2600      	movs	r6, #0
 8000eda:	e9c5 0100 	strd	r0, r1, [r5]
 8000ede:	4630      	mov	r0, r6
 8000ee0:	4631      	mov	r1, r6
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	fab3 f683 	clz	r6, r3
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d14a      	bne.n	8000f84 <__udivmoddi4+0x160>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d302      	bcc.n	8000ef8 <__udivmoddi4+0xd4>
 8000ef2:	4282      	cmp	r2, r0
 8000ef4:	f200 80f9 	bhi.w	80010ea <__udivmoddi4+0x2c6>
 8000ef8:	1a84      	subs	r4, r0, r2
 8000efa:	eb61 0303 	sbc.w	r3, r1, r3
 8000efe:	2001      	movs	r0, #1
 8000f00:	469e      	mov	lr, r3
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d0e0      	beq.n	8000ec8 <__udivmoddi4+0xa4>
 8000f06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f0a:	e7dd      	b.n	8000ec8 <__udivmoddi4+0xa4>
 8000f0c:	b902      	cbnz	r2, 8000f10 <__udivmoddi4+0xec>
 8000f0e:	deff      	udf	#255	; 0xff
 8000f10:	fab2 f282 	clz	r2, r2
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	f040 8092 	bne.w	800103e <__udivmoddi4+0x21a>
 8000f1a:	eba1 010c 	sub.w	r1, r1, ip
 8000f1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f22:	fa1f fe8c 	uxth.w	lr, ip
 8000f26:	2601      	movs	r6, #1
 8000f28:	0c20      	lsrs	r0, r4, #16
 8000f2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f36:	fb0e f003 	mul.w	r0, lr, r3
 8000f3a:	4288      	cmp	r0, r1
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x12c>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f46:	d202      	bcs.n	8000f4e <__udivmoddi4+0x12a>
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	f200 80cb 	bhi.w	80010e4 <__udivmoddi4+0x2c0>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	1a09      	subs	r1, r1, r0
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1110 	mls	r1, r7, r0, r1
 8000f5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f60:	fb0e fe00 	mul.w	lr, lr, r0
 8000f64:	45a6      	cmp	lr, r4
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x156>
 8000f68:	eb1c 0404 	adds.w	r4, ip, r4
 8000f6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f70:	d202      	bcs.n	8000f78 <__udivmoddi4+0x154>
 8000f72:	45a6      	cmp	lr, r4
 8000f74:	f200 80bb 	bhi.w	80010ee <__udivmoddi4+0x2ca>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f82:	e79c      	b.n	8000ebe <__udivmoddi4+0x9a>
 8000f84:	f1c6 0720 	rsb	r7, r6, #32
 8000f88:	40b3      	lsls	r3, r6
 8000f8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f92:	fa20 f407 	lsr.w	r4, r0, r7
 8000f96:	fa01 f306 	lsl.w	r3, r1, r6
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	40f9      	lsrs	r1, r7
 8000f9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fa2:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000faa:	0c20      	lsrs	r0, r4, #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fbc:	4288      	cmp	r0, r1
 8000fbe:	fa02 f206 	lsl.w	r2, r2, r6
 8000fc2:	d90b      	bls.n	8000fdc <__udivmoddi4+0x1b8>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fcc:	f080 8088 	bcs.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd0:	4288      	cmp	r0, r1
 8000fd2:	f240 8085 	bls.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fe4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fe8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ff0:	458e      	cmp	lr, r1
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x1e2>
 8000ff4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ffc:	d26c      	bcs.n	80010d8 <__udivmoddi4+0x2b4>
 8000ffe:	458e      	cmp	lr, r1
 8001000:	d96a      	bls.n	80010d8 <__udivmoddi4+0x2b4>
 8001002:	3802      	subs	r0, #2
 8001004:	4461      	add	r1, ip
 8001006:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800100a:	fba0 9402 	umull	r9, r4, r0, r2
 800100e:	eba1 010e 	sub.w	r1, r1, lr
 8001012:	42a1      	cmp	r1, r4
 8001014:	46c8      	mov	r8, r9
 8001016:	46a6      	mov	lr, r4
 8001018:	d356      	bcc.n	80010c8 <__udivmoddi4+0x2a4>
 800101a:	d053      	beq.n	80010c4 <__udivmoddi4+0x2a0>
 800101c:	b15d      	cbz	r5, 8001036 <__udivmoddi4+0x212>
 800101e:	ebb3 0208 	subs.w	r2, r3, r8
 8001022:	eb61 010e 	sbc.w	r1, r1, lr
 8001026:	fa01 f707 	lsl.w	r7, r1, r7
 800102a:	fa22 f306 	lsr.w	r3, r2, r6
 800102e:	40f1      	lsrs	r1, r6
 8001030:	431f      	orrs	r7, r3
 8001032:	e9c5 7100 	strd	r7, r1, [r5]
 8001036:	2600      	movs	r6, #0
 8001038:	4631      	mov	r1, r6
 800103a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103e:	f1c2 0320 	rsb	r3, r2, #32
 8001042:	40d8      	lsrs	r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	fa21 f303 	lsr.w	r3, r1, r3
 800104c:	4091      	lsls	r1, r2
 800104e:	4301      	orrs	r1, r0
 8001050:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001054:	fa1f fe8c 	uxth.w	lr, ip
 8001058:	fbb3 f0f7 	udiv	r0, r3, r7
 800105c:	fb07 3610 	mls	r6, r7, r0, r3
 8001060:	0c0b      	lsrs	r3, r1, #16
 8001062:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001066:	fb00 f60e 	mul.w	r6, r0, lr
 800106a:	429e      	cmp	r6, r3
 800106c:	fa04 f402 	lsl.w	r4, r4, r2
 8001070:	d908      	bls.n	8001084 <__udivmoddi4+0x260>
 8001072:	eb1c 0303 	adds.w	r3, ip, r3
 8001076:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800107a:	d22f      	bcs.n	80010dc <__udivmoddi4+0x2b8>
 800107c:	429e      	cmp	r6, r3
 800107e:	d92d      	bls.n	80010dc <__udivmoddi4+0x2b8>
 8001080:	3802      	subs	r0, #2
 8001082:	4463      	add	r3, ip
 8001084:	1b9b      	subs	r3, r3, r6
 8001086:	b289      	uxth	r1, r1
 8001088:	fbb3 f6f7 	udiv	r6, r3, r7
 800108c:	fb07 3316 	mls	r3, r7, r6, r3
 8001090:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001094:	fb06 f30e 	mul.w	r3, r6, lr
 8001098:	428b      	cmp	r3, r1
 800109a:	d908      	bls.n	80010ae <__udivmoddi4+0x28a>
 800109c:	eb1c 0101 	adds.w	r1, ip, r1
 80010a0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80010a4:	d216      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d914      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 80010aa:	3e02      	subs	r6, #2
 80010ac:	4461      	add	r1, ip
 80010ae:	1ac9      	subs	r1, r1, r3
 80010b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010b4:	e738      	b.n	8000f28 <__udivmoddi4+0x104>
 80010b6:	462e      	mov	r6, r5
 80010b8:	4628      	mov	r0, r5
 80010ba:	e705      	b.n	8000ec8 <__udivmoddi4+0xa4>
 80010bc:	4606      	mov	r6, r0
 80010be:	e6e3      	b.n	8000e88 <__udivmoddi4+0x64>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6f8      	b.n	8000eb6 <__udivmoddi4+0x92>
 80010c4:	454b      	cmp	r3, r9
 80010c6:	d2a9      	bcs.n	800101c <__udivmoddi4+0x1f8>
 80010c8:	ebb9 0802 	subs.w	r8, r9, r2
 80010cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7a3      	b.n	800101c <__udivmoddi4+0x1f8>
 80010d4:	4646      	mov	r6, r8
 80010d6:	e7ea      	b.n	80010ae <__udivmoddi4+0x28a>
 80010d8:	4620      	mov	r0, r4
 80010da:	e794      	b.n	8001006 <__udivmoddi4+0x1e2>
 80010dc:	4640      	mov	r0, r8
 80010de:	e7d1      	b.n	8001084 <__udivmoddi4+0x260>
 80010e0:	46d0      	mov	r8, sl
 80010e2:	e77b      	b.n	8000fdc <__udivmoddi4+0x1b8>
 80010e4:	3b02      	subs	r3, #2
 80010e6:	4461      	add	r1, ip
 80010e8:	e732      	b.n	8000f50 <__udivmoddi4+0x12c>
 80010ea:	4630      	mov	r0, r6
 80010ec:	e709      	b.n	8000f02 <__udivmoddi4+0xde>
 80010ee:	4464      	add	r4, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e742      	b.n	8000f7a <__udivmoddi4+0x156>

080010f4 <__aeabi_idiv0>:
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <bmp280_compensate_T_int32>:
static signed short dig_P9;

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	10da      	asrs	r2, r3, #3
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <bmp280_compensate_T_int32+0x74>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a18      	ldr	r2, [pc, #96]	; (8001170 <bmp280_compensate_T_int32+0x78>)
 800110e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	12db      	asrs	r3, r3, #11
 8001118:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) -((int32_t)dig_T1)) * ((adc_T>>4) - \
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	111b      	asrs	r3, r3, #4
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <bmp280_compensate_T_int32+0x74>)
 8001120:	8812      	ldrh	r2, [r2, #0]
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	1112      	asrs	r2, r2, #4
			((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8001128:	4910      	ldr	r1, [pc, #64]	; (800116c <bmp280_compensate_T_int32+0x74>)
 800112a:	8809      	ldrh	r1, [r1, #0]
	var2 = (((((adc_T>>4) -((int32_t)dig_T1)) * ((adc_T>>4) - \
 800112c:	1a52      	subs	r2, r2, r1
 800112e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8001132:	131b      	asrs	r3, r3, #12
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <bmp280_compensate_T_int32+0x7c>)
 8001136:	f9b2 2000 	ldrsh.w	r2, [r2]
 800113a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T>>4) -((int32_t)dig_T1)) * ((adc_T>>4) - \
 800113e:	139b      	asrs	r3, r3, #14
 8001140:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <bmp280_compensate_T_int32+0x80>)
 800114a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <bmp280_compensate_T_int32+0x80>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	3380      	adds	r3, #128	; 0x80
 8001158:	121b      	asrs	r3, r3, #8
 800115a:	60fb      	str	r3, [r7, #12]
	return T;
 800115c:	68fb      	ldr	r3, [r7, #12]
}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000204 	.word	0x20000204
 8001170:	20000206 	.word	0x20000206
 8001174:	20000208 	.word	0x20000208
 8001178:	200001fc 	.word	0x200001fc

0800117c <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t bmp280_compensate_P_int64(int32_t adc_P)
{
 800117c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001180:	b0ca      	sub	sp, #296	; 0x128
 8001182:	af00      	add	r7, sp, #0
 8001184:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001188:	4baf      	ldr	r3, [pc, #700]	; (8001448 <bmp280_compensate_P_int64+0x2cc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	17da      	asrs	r2, r3, #31
 800118e:	461c      	mov	r4, r3
 8001190:	4615      	mov	r5, r2
 8001192:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001196:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800119a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800119e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80011a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011a6:	fb03 f102 	mul.w	r1, r3, r2
 80011aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80011ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
 80011b6:	18ca      	adds	r2, r1, r3
 80011b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011bc:	fba3 8903 	umull	r8, r9, r3, r3
 80011c0:	eb02 0309 	add.w	r3, r2, r9
 80011c4:	4699      	mov	r9, r3
 80011c6:	4ba1      	ldr	r3, [pc, #644]	; (800144c <bmp280_compensate_P_int64+0x2d0>)
 80011c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	17da      	asrs	r2, r3, #31
 80011d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80011d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80011d8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80011dc:	4603      	mov	r3, r0
 80011de:	fb03 f209 	mul.w	r2, r3, r9
 80011e2:	460b      	mov	r3, r1
 80011e4:	fb08 f303 	mul.w	r3, r8, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	4602      	mov	r2, r0
 80011ec:	fba8 1202 	umull	r1, r2, r8, r2
 80011f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80011f4:	460a      	mov	r2, r1
 80011f6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80011fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80011fe:	4413      	add	r3, r2
 8001200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001204:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001208:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800120c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001210:	4b8f      	ldr	r3, [pc, #572]	; (8001450 <bmp280_compensate_P_int64+0x2d4>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	b21b      	sxth	r3, r3
 8001218:	17da      	asrs	r2, r3, #31
 800121a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800121e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001222:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001226:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800122a:	462a      	mov	r2, r5
 800122c:	fb02 f203 	mul.w	r2, r2, r3
 8001230:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001234:	4621      	mov	r1, r4
 8001236:	fb01 f303 	mul.w	r3, r1, r3
 800123a:	441a      	add	r2, r3
 800123c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001240:	4621      	mov	r1, r4
 8001242:	fba3 1301 	umull	r1, r3, r3, r1
 8001246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800124a:	460b      	mov	r3, r1
 800124c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	f04f 0100 	mov.w	r1, #0
 8001262:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001266:	462b      	mov	r3, r5
 8001268:	0459      	lsls	r1, r3, #17
 800126a:	4623      	mov	r3, r4
 800126c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001270:	4623      	mov	r3, r4
 8001272:	0458      	lsls	r0, r3, #17
 8001274:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001278:	1814      	adds	r4, r2, r0
 800127a:	643c      	str	r4, [r7, #64]	; 0x40
 800127c:	414b      	adcs	r3, r1
 800127e:	647b      	str	r3, [r7, #68]	; 0x44
 8001280:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001284:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001288:	4b72      	ldr	r3, [pc, #456]	; (8001454 <bmp280_compensate_P_int64+0x2d8>)
 800128a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128e:	b21b      	sxth	r3, r3
 8001290:	17da      	asrs	r2, r3, #31
 8001292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001296:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800129a:	f04f 0000 	mov.w	r0, #0
 800129e:	f04f 0100 	mov.w	r1, #0
 80012a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012a6:	00d9      	lsls	r1, r3, #3
 80012a8:	2000      	movs	r0, #0
 80012aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80012ae:	1814      	adds	r4, r2, r0
 80012b0:	63bc      	str	r4, [r7, #56]	; 0x38
 80012b2:	414b      	adcs	r3, r1
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80012ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80012be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012c6:	fb03 f102 	mul.w	r1, r3, r2
 80012ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	18ca      	adds	r2, r1, r3
 80012d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012dc:	fba3 1303 	umull	r1, r3, r3, r3
 80012e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80012e4:	460b      	mov	r3, r1
 80012e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80012ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012ee:	18d3      	adds	r3, r2, r3
 80012f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80012f4:	4b58      	ldr	r3, [pc, #352]	; (8001458 <bmp280_compensate_P_int64+0x2dc>)
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	17da      	asrs	r2, r3, #31
 80012fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001306:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800130a:	462b      	mov	r3, r5
 800130c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001310:	4642      	mov	r2, r8
 8001312:	fb02 f203 	mul.w	r2, r2, r3
 8001316:	464b      	mov	r3, r9
 8001318:	4621      	mov	r1, r4
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	4413      	add	r3, r2
 8001320:	4622      	mov	r2, r4
 8001322:	4641      	mov	r1, r8
 8001324:	fba2 1201 	umull	r1, r2, r2, r1
 8001328:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800132c:	460a      	mov	r2, r1
 800132e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001332:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001336:	4413      	add	r3, r2
 8001338:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800133c:	f04f 0000 	mov.w	r0, #0
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001348:	4623      	mov	r3, r4
 800134a:	0a18      	lsrs	r0, r3, #8
 800134c:	462b      	mov	r3, r5
 800134e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001352:	462b      	mov	r3, r5
 8001354:	1219      	asrs	r1, r3, #8
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <bmp280_compensate_P_int64+0x2e0>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	b21b      	sxth	r3, r3
 800135e:	17da      	asrs	r2, r3, #31
 8001360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001364:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800136c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001370:	464a      	mov	r2, r9
 8001372:	fb02 f203 	mul.w	r2, r2, r3
 8001376:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800137a:	4644      	mov	r4, r8
 800137c:	fb04 f303 	mul.w	r3, r4, r3
 8001380:	441a      	add	r2, r3
 8001382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001386:	4644      	mov	r4, r8
 8001388:	fba3 4304 	umull	r4, r3, r3, r4
 800138c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001390:	4623      	mov	r3, r4
 8001392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001396:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800139a:	18d3      	adds	r3, r2, r3
 800139c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80013ac:	464c      	mov	r4, r9
 80013ae:	0323      	lsls	r3, r4, #12
 80013b0:	4644      	mov	r4, r8
 80013b2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80013b6:	4644      	mov	r4, r8
 80013b8:	0322      	lsls	r2, r4, #12
 80013ba:	1884      	adds	r4, r0, r2
 80013bc:	633c      	str	r4, [r7, #48]	; 0x30
 80013be:	eb41 0303 	adc.w	r3, r1, r3
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
 80013c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80013c8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80013cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80013d0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80013d4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80013d8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <bmp280_compensate_P_int64+0x2e4>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013ec:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80013f0:	462b      	mov	r3, r5
 80013f2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80013f6:	4642      	mov	r2, r8
 80013f8:	fb02 f203 	mul.w	r2, r2, r3
 80013fc:	464b      	mov	r3, r9
 80013fe:	4621      	mov	r1, r4
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	4622      	mov	r2, r4
 8001408:	4641      	mov	r1, r8
 800140a:	fba2 1201 	umull	r1, r2, r2, r1
 800140e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001412:	460a      	mov	r2, r1
 8001414:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001418:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800141c:	4413      	add	r3, r2
 800141e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800142e:	4629      	mov	r1, r5
 8001430:	104a      	asrs	r2, r1, #1
 8001432:	4629      	mov	r1, r5
 8001434:	17cb      	asrs	r3, r1, #31
 8001436:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0){
 800143a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800143e:	4313      	orrs	r3, r2
 8001440:	d110      	bne.n	8001464 <bmp280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 8001442:	2300      	movs	r3, #0
 8001444:	e155      	b.n	80016f2 <bmp280_compensate_P_int64+0x576>
 8001446:	bf00      	nop
 8001448:	200001fc 	.word	0x200001fc
 800144c:	20000214 	.word	0x20000214
 8001450:	20000212 	.word	0x20000212
 8001454:	20000210 	.word	0x20000210
 8001458:	2000020e 	.word	0x2000020e
 800145c:	2000020c 	.word	0x2000020c
 8001460:	2000020a 	.word	0x2000020a
	}
	p = 1048576-adc_P;
 8001464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001468:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800146c:	17da      	asrs	r2, r3, #31
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001470:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001472:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001476:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800147a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800147e:	105b      	asrs	r3, r3, #1
 8001480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001484:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001488:	07db      	lsls	r3, r3, #31
 800148a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800148e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001492:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001496:	4621      	mov	r1, r4
 8001498:	1a89      	subs	r1, r1, r2
 800149a:	67b9      	str	r1, [r7, #120]	; 0x78
 800149c:	4629      	mov	r1, r5
 800149e:	eb61 0303 	sbc.w	r3, r1, r3
 80014a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014a4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80014a8:	4622      	mov	r2, r4
 80014aa:	462b      	mov	r3, r5
 80014ac:	1891      	adds	r1, r2, r2
 80014ae:	6239      	str	r1, [r7, #32]
 80014b0:	415b      	adcs	r3, r3
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
 80014b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014b8:	4621      	mov	r1, r4
 80014ba:	1851      	adds	r1, r2, r1
 80014bc:	61b9      	str	r1, [r7, #24]
 80014be:	4629      	mov	r1, r5
 80014c0:	414b      	adcs	r3, r1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80014d0:	4649      	mov	r1, r9
 80014d2:	018b      	lsls	r3, r1, #6
 80014d4:	4641      	mov	r1, r8
 80014d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014da:	4641      	mov	r1, r8
 80014dc:	018a      	lsls	r2, r1, #6
 80014de:	4641      	mov	r1, r8
 80014e0:	1889      	adds	r1, r1, r2
 80014e2:	6139      	str	r1, [r7, #16]
 80014e4:	4649      	mov	r1, r9
 80014e6:	eb43 0101 	adc.w	r1, r3, r1
 80014ea:	6179      	str	r1, [r7, #20]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80014f8:	4649      	mov	r1, r9
 80014fa:	008b      	lsls	r3, r1, #2
 80014fc:	4641      	mov	r1, r8
 80014fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001502:	4641      	mov	r1, r8
 8001504:	008a      	lsls	r2, r1, #2
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	4603      	mov	r3, r0
 800150c:	4622      	mov	r2, r4
 800150e:	189b      	adds	r3, r3, r2
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	460b      	mov	r3, r1
 8001514:	462a      	mov	r2, r5
 8001516:	eb42 0303 	adc.w	r3, r2, r3
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001528:	4649      	mov	r1, r9
 800152a:	008b      	lsls	r3, r1, #2
 800152c:	4641      	mov	r1, r8
 800152e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001532:	4641      	mov	r1, r8
 8001534:	008a      	lsls	r2, r1, #2
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	4603      	mov	r3, r0
 800153c:	4622      	mov	r2, r4
 800153e:	189b      	adds	r3, r3, r2
 8001540:	673b      	str	r3, [r7, #112]	; 0x70
 8001542:	462b      	mov	r3, r5
 8001544:	460a      	mov	r2, r1
 8001546:	eb42 0303 	adc.w	r3, r2, r3
 800154a:	677b      	str	r3, [r7, #116]	; 0x74
 800154c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001550:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001554:	f7ff fbc8 	bl	8000ce8 <__aeabi_ldivmod>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001560:	4b67      	ldr	r3, [pc, #412]	; (8001700 <bmp280_compensate_P_int64+0x584>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	b21b      	sxth	r3, r3
 8001568:	17da      	asrs	r2, r3, #31
 800156a:	66bb      	str	r3, [r7, #104]	; 0x68
 800156c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800156e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	0b50      	lsrs	r0, r2, #13
 800157c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001580:	1359      	asrs	r1, r3, #13
 8001582:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001586:	462b      	mov	r3, r5
 8001588:	fb00 f203 	mul.w	r2, r0, r3
 800158c:	4623      	mov	r3, r4
 800158e:	fb03 f301 	mul.w	r3, r3, r1
 8001592:	4413      	add	r3, r2
 8001594:	4622      	mov	r2, r4
 8001596:	fba2 1200 	umull	r1, r2, r2, r0
 800159a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800159e:	460a      	mov	r2, r1
 80015a0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80015a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80015a8:	4413      	add	r3, r2
 80015aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80015ae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	0b50      	lsrs	r0, r2, #13
 80015bc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015c0:	1359      	asrs	r1, r3, #13
 80015c2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80015c6:	462b      	mov	r3, r5
 80015c8:	fb00 f203 	mul.w	r2, r0, r3
 80015cc:	4623      	mov	r3, r4
 80015ce:	fb03 f301 	mul.w	r3, r3, r1
 80015d2:	4413      	add	r3, r2
 80015d4:	4622      	mov	r2, r4
 80015d6:	fba2 1200 	umull	r1, r2, r2, r0
 80015da:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80015de:	460a      	mov	r2, r1
 80015e0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80015e4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80015e8:	4413      	add	r3, r2
 80015ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80015fa:	4621      	mov	r1, r4
 80015fc:	0e4a      	lsrs	r2, r1, #25
 80015fe:	4629      	mov	r1, r5
 8001600:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001604:	4629      	mov	r1, r5
 8001606:	164b      	asrs	r3, r1, #25
 8001608:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <bmp280_compensate_P_int64+0x588>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	b21b      	sxth	r3, r3
 8001614:	17da      	asrs	r2, r3, #31
 8001616:	663b      	str	r3, [r7, #96]	; 0x60
 8001618:	667a      	str	r2, [r7, #100]	; 0x64
 800161a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800161e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001622:	462a      	mov	r2, r5
 8001624:	fb02 f203 	mul.w	r2, r2, r3
 8001628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800162c:	4621      	mov	r1, r4
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001638:	4621      	mov	r1, r4
 800163a:	fba2 1201 	umull	r1, r2, r2, r1
 800163e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001642:	460a      	mov	r2, r1
 8001644:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001648:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800164c:	4413      	add	r3, r2
 800164e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800165e:	4621      	mov	r1, r4
 8001660:	0cca      	lsrs	r2, r1, #19
 8001662:	4629      	mov	r1, r5
 8001664:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001668:	4629      	mov	r1, r5
 800166a:	14cb      	asrs	r3, r1, #19
 800166c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001670:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001674:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001678:	1884      	adds	r4, r0, r2
 800167a:	65bc      	str	r4, [r7, #88]	; 0x58
 800167c:	eb41 0303 	adc.w	r3, r1, r3
 8001680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001682:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001686:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800168a:	4621      	mov	r1, r4
 800168c:	1889      	adds	r1, r1, r2
 800168e:	6539      	str	r1, [r7, #80]	; 0x50
 8001690:	4629      	mov	r1, r5
 8001692:	eb43 0101 	adc.w	r1, r3, r1
 8001696:	6579      	str	r1, [r7, #84]	; 0x54
 8001698:	f04f 0000 	mov.w	r0, #0
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016a4:	4623      	mov	r3, r4
 80016a6:	0a18      	lsrs	r0, r3, #8
 80016a8:	462b      	mov	r3, r5
 80016aa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016ae:	462b      	mov	r3, r5
 80016b0:	1219      	asrs	r1, r3, #8
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <bmp280_compensate_P_int64+0x58c>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	17da      	asrs	r2, r3, #31
 80016bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80016be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80016cc:	464c      	mov	r4, r9
 80016ce:	0123      	lsls	r3, r4, #4
 80016d0:	4644      	mov	r4, r8
 80016d2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80016d6:	4644      	mov	r4, r8
 80016d8:	0122      	lsls	r2, r4, #4
 80016da:	1884      	adds	r4, r0, r2
 80016dc:	603c      	str	r4, [r7, #0]
 80016de:	eb41 0303 	adc.w	r3, r1, r3
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016e8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return ((uint32_t)p/256);
 80016ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016f0:	0a1b      	lsrs	r3, r3, #8
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fe:	bf00      	nop
 8001700:	2000021a 	.word	0x2000021a
 8001704:	20000218 	.word	0x20000218
 8001708:	20000216 	.word	0x20000216

0800170c <capt_ping>:

// Check if peripheral is online and working
void capt_ping(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af02      	add	r7, sp, #8
	uint8_t id_get_snd = BMP280_ID_REG;
 8001712:	23d0      	movs	r3, #208	; 0xd0
 8001714:	71fb      	strb	r3, [r7, #7]
	uint8_t id_get_rcv = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_SLV_ADD, &id_get_snd, BMP280_ID_SND_SIZE, HAL_MAX_DELAY);
 800171a:	1dfa      	adds	r2, r7, #7
 800171c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	21ee      	movs	r1, #238	; 0xee
 8001726:	480f      	ldr	r0, [pc, #60]	; (8001764 <capt_ping+0x58>)
 8001728:	f001 feb0 	bl	800348c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_SLV_ADD, &id_get_rcv, BMP280_ID_RCV_SIZE, HAL_MAX_DELAY);
 800172c:	1dba      	adds	r2, r7, #6
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	21ee      	movs	r1, #238	; 0xee
 8001738:	480a      	ldr	r0, [pc, #40]	; (8001764 <capt_ping+0x58>)
 800173a:	f001 ffa5 	bl	8003688 <HAL_I2C_Master_Receive>
	if (id_get_rcv == BMP280_ID_EXP){
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	2b58      	cmp	r3, #88	; 0x58
 8001742:	d105      	bne.n	8001750 <capt_ping+0x44>
	  printf("Slave ID is 0x%x : Correct\r\n", id_get_rcv);
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <capt_ping+0x5c>)
 800174a:	f005 fd25 	bl	8007198 <iprintf>
	}
	else {
	  printf("ERROR : Slave ID is 0x%x : Incorrect\r\n", id_get_rcv);
	}
}
 800174e:	e004      	b.n	800175a <capt_ping+0x4e>
	  printf("ERROR : Slave ID is 0x%x : Incorrect\r\n", id_get_rcv);
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <capt_ping+0x60>)
 8001756:	f005 fd1f 	bl	8007198 <iprintf>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000244 	.word	0x20000244
 8001768:	0800bcf0 	.word	0x0800bcf0
 800176c:	0800bd10 	.word	0x0800bd10

08001770 <capt_param>:

// Sets configuration for the peripheral and gets its calibration data
// Sets the calibration data to the needed factors for Temp and Pres conversion
// This function HAS to be called at launch
void capt_param(void){
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af04      	add	r7, sp, #16
	uint8_t conf_set_snd[2] = {BMP280_CONF_REG, BMP280_CONF_SET};
 8001776:	f245 73f4 	movw	r3, #22516	; 0x57f4
 800177a:	83bb      	strh	r3, [r7, #28]
	uint8_t conf_set_rcv = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	76fb      	strb	r3, [r7, #27]
	uint8_t etal_rcv[26];

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_SLV_ADD, conf_set_snd, BMP280_CONF_SND_SIZE, HAL_MAX_DELAY);
 8001780:	f107 021c 	add.w	r2, r7, #28
 8001784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2302      	movs	r3, #2
 800178c:	21ee      	movs	r1, #238	; 0xee
 800178e:	4855      	ldr	r0, [pc, #340]	; (80018e4 <capt_param+0x174>)
 8001790:	f001 fe7c 	bl	800348c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_SLV_ADD, &conf_set_rcv, BMP280_CONF_RCV_SIZE, HAL_MAX_DELAY);
 8001794:	f107 021b 	add.w	r2, r7, #27
 8001798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	21ee      	movs	r1, #238	; 0xee
 80017a2:	4850      	ldr	r0, [pc, #320]	; (80018e4 <capt_param+0x174>)
 80017a4:	f001 ff70 	bl	8003688 <HAL_I2C_Master_Receive>
	if (conf_set_rcv == BMP280_CONF_SET){
 80017a8:	7efb      	ldrb	r3, [r7, #27]
 80017aa:	2b57      	cmp	r3, #87	; 0x57
 80017ac:	d103      	bne.n	80017b6 <capt_param+0x46>
	  printf("Slave configuration set to desired parameters\r\n");
 80017ae:	484e      	ldr	r0, [pc, #312]	; (80018e8 <capt_param+0x178>)
 80017b0:	f005 fd78 	bl	80072a4 <puts>
 80017b4:	e002      	b.n	80017bc <capt_param+0x4c>
	}
	else {
	  printf("ERROR : Slave configuration failed\r\n");
 80017b6:	484d      	ldr	r0, [pc, #308]	; (80018ec <capt_param+0x17c>)
 80017b8:	f005 fd74 	bl	80072a4 <puts>
	}
	HAL_I2C_Mem_Read(&hi2c1, BMP280_SLV_ADD, BMP280_ETAL_REG, 1,
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	231a      	movs	r3, #26
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	463b      	mov	r3, r7
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	2288      	movs	r2, #136	; 0x88
 80017ce:	21ee      	movs	r1, #238	; 0xee
 80017d0:	4844      	ldr	r0, [pc, #272]	; (80018e4 <capt_param+0x174>)
 80017d2:	f002 f97f 	bl	8003ad4 <HAL_I2C_Mem_Read>
			etal_rcv, BMP280_ETAL_RCV_SIZE, HAL_MAX_DELAY);

	dig_T1 = (etal_rcv[1]<<8) + etal_rcv[0];
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b29a      	uxth	r2, r3
 80017de:	783b      	ldrb	r3, [r7, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <capt_param+0x180>)
 80017e8:	801a      	strh	r2, [r3, #0]
	dig_T2 = (etal_rcv[3]<<8) + etal_rcv[2];
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <capt_param+0x184>)
 80017fe:	801a      	strh	r2, [r3, #0]
	dig_T3 = (etal_rcv[5]<<8) + etal_rcv[4];
 8001800:	797b      	ldrb	r3, [r7, #5]
 8001802:	b29b      	uxth	r3, r3
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b29a      	uxth	r2, r3
 8001808:	793b      	ldrb	r3, [r7, #4]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4413      	add	r3, r2
 800180e:	b29b      	uxth	r3, r3
 8001810:	b21a      	sxth	r2, r3
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <capt_param+0x188>)
 8001814:	801a      	strh	r2, [r3, #0]
	dig_P1 = (etal_rcv[7]<<8) + etal_rcv[6];
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	b29b      	uxth	r3, r3
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b29a      	uxth	r2, r3
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <capt_param+0x18c>)
 8001828:	801a      	strh	r2, [r3, #0]
	dig_P2 = (etal_rcv[9]<<8) + etal_rcv[8];
 800182a:	7a7b      	ldrb	r3, [r7, #9]
 800182c:	b29b      	uxth	r3, r3
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b29a      	uxth	r2, r3
 8001832:	7a3b      	ldrb	r3, [r7, #8]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	b21a      	sxth	r2, r3
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <capt_param+0x190>)
 800183e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (etal_rcv[11]<<8) + etal_rcv[10];
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	b29b      	uxth	r3, r3
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b29a      	uxth	r2, r3
 8001848:	7abb      	ldrb	r3, [r7, #10]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	b21a      	sxth	r2, r3
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <capt_param+0x194>)
 8001854:	801a      	strh	r2, [r3, #0]
	dig_P4 = (etal_rcv[13]<<8) + etal_rcv[12];
 8001856:	7b7b      	ldrb	r3, [r7, #13]
 8001858:	b29b      	uxth	r3, r3
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b29a      	uxth	r2, r3
 800185e:	7b3b      	ldrb	r3, [r7, #12]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <capt_param+0x198>)
 800186a:	801a      	strh	r2, [r3, #0]
	dig_P5 = (etal_rcv[15]<<8) + etal_rcv[14];
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	b29b      	uxth	r3, r3
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b29a      	uxth	r2, r3
 8001874:	7bbb      	ldrb	r3, [r7, #14]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	b21a      	sxth	r2, r3
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <capt_param+0x19c>)
 8001880:	801a      	strh	r2, [r3, #0]
	dig_P6 = (etal_rcv[16]<<8) + etal_rcv[16];
 8001882:	7c3b      	ldrb	r3, [r7, #16]
 8001884:	b29b      	uxth	r3, r3
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b29a      	uxth	r2, r3
 800188a:	7c3b      	ldrb	r3, [r7, #16]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4413      	add	r3, r2
 8001890:	b29b      	uxth	r3, r3
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <capt_param+0x1a0>)
 8001896:	801a      	strh	r2, [r3, #0]
	dig_P7 = (etal_rcv[19]<<8) + etal_rcv[18];
 8001898:	7cfb      	ldrb	r3, [r7, #19]
 800189a:	b29b      	uxth	r3, r3
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b29a      	uxth	r2, r3
 80018a0:	7cbb      	ldrb	r3, [r7, #18]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <capt_param+0x1a4>)
 80018ac:	801a      	strh	r2, [r3, #0]
	dig_P8 = (etal_rcv[21]<<8) + etal_rcv[20];
 80018ae:	7d7b      	ldrb	r3, [r7, #21]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	7d3b      	ldrb	r3, [r7, #20]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b21a      	sxth	r2, r3
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <capt_param+0x1a8>)
 80018c2:	801a      	strh	r2, [r3, #0]
	dig_P9 = (etal_rcv[23]<<8) + etal_rcv[22];
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	7dbb      	ldrb	r3, [r7, #22]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <capt_param+0x1ac>)
 80018d8:	801a      	strh	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000244 	.word	0x20000244
 80018e8:	0800bd38 	.word	0x0800bd38
 80018ec:	0800bd68 	.word	0x0800bd68
 80018f0:	20000204 	.word	0x20000204
 80018f4:	20000206 	.word	0x20000206
 80018f8:	20000208 	.word	0x20000208
 80018fc:	2000020a 	.word	0x2000020a
 8001900:	2000020c 	.word	0x2000020c
 8001904:	2000020e 	.word	0x2000020e
 8001908:	20000210 	.word	0x20000210
 800190c:	20000212 	.word	0x20000212
 8001910:	20000214 	.word	0x20000214
 8001914:	20000216 	.word	0x20000216
 8001918:	20000218 	.word	0x20000218
 800191c:	2000021a 	.word	0x2000021a

08001920 <capt_temp>:

// API to get temperature, always has to be called at least once before any pres call
float capt_temp(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af04      	add	r7, sp, #16
	float temp_comp;
	uint8_t temp_hex[3];
	int32_t temp;

	HAL_I2C_Mem_Read(&hi2c1, BMP280_SLV_ADD, BMP280_TEMP_REG, 1,
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	2303      	movs	r3, #3
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2301      	movs	r3, #1
 8001936:	22fa      	movs	r2, #250	; 0xfa
 8001938:	21ee      	movs	r1, #238	; 0xee
 800193a:	4816      	ldr	r0, [pc, #88]	; (8001994 <capt_temp+0x74>)
 800193c:	f002 f8ca 	bl	8003ad4 <HAL_I2C_Mem_Read>
		  temp_hex, BMP280_TEMP_RCV_SIZE, HAL_MAX_DELAY),
	temp = (temp_hex[0]<<12) + (temp_hex[1]<<4) + (temp_hex[0]>>4);
 8001940:	793b      	ldrb	r3, [r7, #4]
 8001942:	031a      	lsls	r2, r3, #12
 8001944:	797b      	ldrb	r3, [r7, #5]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	793a      	ldrb	r2, [r7, #4]
 800194c:	0912      	lsrs	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4413      	add	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
	temp_comp = (float)bmp280_compensate_T_int32(temp)/100;
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fbcf 	bl	80010f8 <bmp280_compensate_T_int32>
 800195a:	ee07 0a90 	vmov	s15, r0
 800195e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001962:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001998 <capt_temp+0x78>
 8001966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196a:	edc7 7a02 	vstr	s15, [r7, #8]
	printf("%f°C\r\n", temp_comp);
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	f7fe fe1a 	bl	80005a8 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4808      	ldr	r0, [pc, #32]	; (800199c <capt_temp+0x7c>)
 800197a:	f005 fc0d 	bl	8007198 <iprintf>
	temp_flag = 1;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <capt_temp+0x80>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]
	return(temp_comp);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	ee07 3a90 	vmov	s15, r3
}
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000244 	.word	0x20000244
 8001998:	42c80000 	.word	0x42c80000
 800199c:	0800bd8c 	.word	0x0800bd8c
 80019a0:	20000200 	.word	0x20000200

080019a4 <capt_pres>:

// API to get pressure, t_fine needs to hvae been set
float capt_pres(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af04      	add	r7, sp, #16
	float pres_comp;
	uint8_t pres_hex[3];
	int32_t pres;

	HAL_I2C_Mem_Read(&hi2c1, BMP280_SLV_ADD, BMP280_PRES_REG, 1,
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2303      	movs	r3, #3
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	22f7      	movs	r2, #247	; 0xf7
 80019bc:	21ee      	movs	r1, #238	; 0xee
 80019be:	4815      	ldr	r0, [pc, #84]	; (8001a14 <capt_pres+0x70>)
 80019c0:	f002 f888 	bl	8003ad4 <HAL_I2C_Mem_Read>
		  pres_hex, BMP280_PRES_RCV_SIZE, HAL_MAX_DELAY),
	pres = (pres_hex[0]<<12) + (pres_hex[1]<<4) + (pres_hex[0]>>4);
 80019c4:	793b      	ldrb	r3, [r7, #4]
 80019c6:	031a      	lsls	r2, r3, #12
 80019c8:	797b      	ldrb	r3, [r7, #5]
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	4413      	add	r3, r2
 80019ce:	793a      	ldrb	r2, [r7, #4]
 80019d0:	0912      	lsrs	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
	pres_comp = (float)bmp280_compensate_P_int64(pres)/3600;
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fbcf 	bl	800117c <bmp280_compensate_P_int64>
 80019de:	ee07 0a90 	vmov	s15, r0
 80019e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019e6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001a18 <capt_pres+0x74>
 80019ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ee:	edc7 7a02 	vstr	s15, [r7, #8]
	printf("%fhPa\r\n", pres_comp);
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fdd8 	bl	80005a8 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <capt_pres+0x78>)
 80019fe:	f005 fbcb 	bl	8007198 <iprintf>
	return(pres_comp);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	ee07 3a90 	vmov	s15, r3
}
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000244 	.word	0x20000244
 8001a18:	45610000 	.word	0x45610000
 8001a1c:	0800bd94 	.word	0x0800bd94

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b092      	sub	sp, #72	; 0x48
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int ret = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
	int size = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
	char sprintf_buff[32];

	float K = 0;
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44

	float temp = 0;
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	643b      	str	r3, [r7, #64]	; 0x40
	float pres = 0;
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t angle = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a46:	f000 fdff 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4a:	f000 f96b 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4e:	f000 fa91 	bl	8001f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a52:	f000 fa65 	bl	8001f20 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001a56:	f000 f9d3 	bl	8001e00 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001a5a:	f000 fa09 	bl	8001e70 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001a5e:	f000 fa35 	bl	8001ecc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001a62:	4897      	ldr	r0, [pc, #604]	; (8001cc0 <main+0x2a0>)
 8001a64:	f000 ff5d 	bl	8002922 <HAL_CAN_Start>

  capt_ping();
 8001a68:	f7ff fe50 	bl	800170c <capt_ping>
  capt_param();
 8001a6c:	f7ff fe80 	bl	8001770 <capt_param>

  mot_reset(&hcan1);
 8001a70:	4893      	ldr	r0, [pc, #588]	; (8001cc0 <main+0x2a0>)
 8001a72:	f000 fb15 	bl	80020a0 <mot_reset>

  HAL_UART_Receive_IT(&huart1, &uart1_buff, 1);
 8001a76:	2201      	movs	r2, #1
 8001a78:	4992      	ldr	r1, [pc, #584]	; (8001cc4 <main+0x2a4>)
 8001a7a:	4893      	ldr	r0, [pc, #588]	; (8001cc8 <main+0x2a8>)
 8001a7c:	f003 fd2d 	bl	80054da <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uart1_flag == 1)
 8001a80:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <main+0x2ac>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	f040 80e4 	bne.w	8001c52 <main+0x232>
	  {
		  if (uart1_buff == 0x0D)
 8001a8a:	4b8e      	ldr	r3, [pc, #568]	; (8001cc4 <main+0x2a4>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b0d      	cmp	r3, #13
 8001a90:	f040 80dc 	bne.w	8001c4c <main+0x22c>
		  {
			  uart1_word[uart1_index-1] = 0;
 8001a94:	4b8e      	ldr	r3, [pc, #568]	; (8001cd0 <main+0x2b0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	4a8e      	ldr	r2, [pc, #568]	; (8001cd4 <main+0x2b4>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	54d1      	strb	r1, [r2, r3]
			  printf("%s\r\n", uart1_word);
 8001aa0:	498c      	ldr	r1, [pc, #560]	; (8001cd4 <main+0x2b4>)
 8001aa2:	488d      	ldr	r0, [pc, #564]	; (8001cd8 <main+0x2b8>)
 8001aa4:	f005 fb78 	bl	8007198 <iprintf>

			  // Get temp
			  if (strcmp(uart1_word, "GET_T") == 0) {
 8001aa8:	498c      	ldr	r1, [pc, #560]	; (8001cdc <main+0x2bc>)
 8001aaa:	488a      	ldr	r0, [pc, #552]	; (8001cd4 <main+0x2b4>)
 8001aac:	f7fe fbb0 	bl	8000210 <strcmp>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <main+0xc8>
				  temp = capt_temp();
 8001ab6:	f7ff ff33 	bl	8001920 <capt_temp>
 8001aba:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
				  size = sprintf(sprintf_buff, "%f", temp);
 8001abe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ac0:	f7fe fd72 	bl	80005a8 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	f107 000c 	add.w	r0, r7, #12
 8001acc:	4984      	ldr	r1, [pc, #528]	; (8001ce0 <main+0x2c0>)
 8001ace:	f005 fbf7 	bl	80072c0 <siprintf>
 8001ad2:	6378      	str	r0, [r7, #52]	; 0x34
				  HAL_UART_Transmit(&huart1, sprintf_buff, size, HAL_MAX_DELAY);
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	f107 010c 	add.w	r1, r7, #12
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae0:	4879      	ldr	r0, [pc, #484]	; (8001cc8 <main+0x2a8>)
 8001ae2:	f003 fc68 	bl	80053b6 <HAL_UART_Transmit>
 8001ae6:	e0ab      	b.n	8001c40 <main+0x220>
			  }

			  // Get pres
			  else if (strcmp(uart1_word, "GET_P") == 0) {
 8001ae8:	497e      	ldr	r1, [pc, #504]	; (8001ce4 <main+0x2c4>)
 8001aea:	487a      	ldr	r0, [pc, #488]	; (8001cd4 <main+0x2b4>)
 8001aec:	f7fe fb90 	bl	8000210 <strcmp>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10b      	bne.n	8001b0e <main+0xee>
				  pres = capt_pres();
 8001af6:	f7ff ff55 	bl	80019a4 <capt_pres>
 8001afa:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
				  HAL_UART_Transmit(&huart2, "\n1Bar\r\n", 7, HAL_MAX_DELAY);
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b02:	2207      	movs	r2, #7
 8001b04:	4978      	ldr	r1, [pc, #480]	; (8001ce8 <main+0x2c8>)
 8001b06:	4879      	ldr	r0, [pc, #484]	; (8001cec <main+0x2cc>)
 8001b08:	f003 fc55 	bl	80053b6 <HAL_UART_Transmit>
 8001b0c:	e098      	b.n	8001c40 <main+0x220>
			  }

			  // Set K
			  else if (memcmp(uart1_word, "SET_K=", 6) == 0) {
 8001b0e:	2206      	movs	r2, #6
 8001b10:	4977      	ldr	r1, [pc, #476]	; (8001cf0 <main+0x2d0>)
 8001b12:	4870      	ldr	r0, [pc, #448]	; (8001cd4 <main+0x2b4>)
 8001b14:	f004 fcae 	bl	8006474 <memcmp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d15a      	bne.n	8001bd4 <main+0x1b4>
				  if (uart1_word[13] != 0) {
 8001b1e:	4b6d      	ldr	r3, [pc, #436]	; (8001cd4 <main+0x2b4>)
 8001b20:	7b5b      	ldrb	r3, [r3, #13]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <main+0x116>
					  HAL_UART_Transmit(&huart2, "\nInvalid number\r\n", 17, HAL_MAX_DELAY);
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2a:	2211      	movs	r2, #17
 8001b2c:	4971      	ldr	r1, [pc, #452]	; (8001cf4 <main+0x2d4>)
 8001b2e:	486f      	ldr	r0, [pc, #444]	; (8001cec <main+0x2cc>)
 8001b30:	f003 fc41 	bl	80053b6 <HAL_UART_Transmit>
 8001b34:	e046      	b.n	8001bc4 <main+0x1a4>
				  }
				  else {
					  for (int i = 0; i < 7; i++) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3a:	e039      	b.n	8001bb0 <main+0x190>
						  K += (float)uart1_word[i+6] * pow(10, 1-i);
 8001b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3e:	3306      	adds	r3, #6
 8001b40:	4a64      	ldr	r2, [pc, #400]	; (8001cd4 <main+0x2b4>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b4c:	ee17 0a90 	vmov	r0, s15
 8001b50:	f7fe fd2a 	bl	80005a8 <__aeabi_f2d>
 8001b54:	4604      	mov	r4, r0
 8001b56:	460d      	mov	r5, r1
 8001b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5a:	f1c3 0301 	rsb	r3, r3, #1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd10 	bl	8000584 <__aeabi_i2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	ec43 2b11 	vmov	d1, r2, r3
 8001b6c:	ed9f 0b52 	vldr	d0, [pc, #328]	; 8001cb8 <main+0x298>
 8001b70:	f009 f994 	bl	800ae9c <pow>
 8001b74:	ec53 2b10 	vmov	r2, r3, d0
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fd6c 	bl	8000658 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b8a:	f7fe fd0d 	bl	80005a8 <__aeabi_f2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7fe fba9 	bl	80002ec <__adddf3>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff f851 	bl	8000c48 <__aeabi_d2f>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
					  for (int i = 0; i < 7; i++) {
 8001baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bac:	3301      	adds	r3, #1
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	ddc2      	ble.n	8001b3c <main+0x11c>
					  }
					  HAL_UART_Transmit(&huart2, "\nK set\r\n", 8, HAL_MAX_DELAY);
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bba:	2208      	movs	r2, #8
 8001bbc:	494e      	ldr	r1, [pc, #312]	; (8001cf8 <main+0x2d8>)
 8001bbe:	484b      	ldr	r0, [pc, #300]	; (8001cec <main+0x2cc>)
 8001bc0:	f003 fbf9 	bl	80053b6 <HAL_UART_Transmit>
				  }
				  HAL_UART_Transmit(&huart2, "\nOui\r\n", 6, HAL_MAX_DELAY);
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc8:	2206      	movs	r2, #6
 8001bca:	494c      	ldr	r1, [pc, #304]	; (8001cfc <main+0x2dc>)
 8001bcc:	4847      	ldr	r0, [pc, #284]	; (8001cec <main+0x2cc>)
 8001bce:	f003 fbf2 	bl	80053b6 <HAL_UART_Transmit>
 8001bd2:	e035      	b.n	8001c40 <main+0x220>
			  }

			  // Get K
			  else if (strcmp(uart1_word, "GET_K") == 0) {
 8001bd4:	494a      	ldr	r1, [pc, #296]	; (8001d00 <main+0x2e0>)
 8001bd6:	483f      	ldr	r0, [pc, #252]	; (8001cd4 <main+0x2b4>)
 8001bd8:	f7fe fb1a 	bl	8000210 <strcmp>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <main+0x1d2>
			  	  HAL_UART_Transmit(&huart2, "\nK\r\n", 4, HAL_MAX_DELAY);
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be6:	2204      	movs	r2, #4
 8001be8:	4946      	ldr	r1, [pc, #280]	; (8001d04 <main+0x2e4>)
 8001bea:	4840      	ldr	r0, [pc, #256]	; (8001cec <main+0x2cc>)
 8001bec:	f003 fbe3 	bl	80053b6 <HAL_UART_Transmit>
 8001bf0:	e026      	b.n	8001c40 <main+0x220>
			  }

			  // Get angle
			  else if (strcmp(uart1_word, "GET_A") == 0) {
 8001bf2:	4945      	ldr	r1, [pc, #276]	; (8001d08 <main+0x2e8>)
 8001bf4:	4837      	ldr	r0, [pc, #220]	; (8001cd4 <main+0x2b4>)
 8001bf6:	f7fe fb0b 	bl	8000210 <strcmp>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d118      	bne.n	8001c32 <main+0x212>
				  angle = (int)(K * temp/100);
 8001c00:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001c04:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001d0c <main+0x2ec>
 8001c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c18:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c1c:	793b      	ldrb	r3, [r7, #4]
 8001c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				  HAL_UART_Transmit(&huart2, "\nA\r\n", 4, HAL_MAX_DELAY);
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c26:	2204      	movs	r2, #4
 8001c28:	4939      	ldr	r1, [pc, #228]	; (8001d10 <main+0x2f0>)
 8001c2a:	4830      	ldr	r0, [pc, #192]	; (8001cec <main+0x2cc>)
 8001c2c:	f003 fbc3 	bl	80053b6 <HAL_UART_Transmit>
 8001c30:	e006      	b.n	8001c40 <main+0x220>
			  }

			  // Command undefined
			  else {
				  HAL_UART_Transmit(&huart2, "\nUnknown\r\n", 10, HAL_MAX_DELAY);
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c36:	220a      	movs	r2, #10
 8001c38:	4936      	ldr	r1, [pc, #216]	; (8001d14 <main+0x2f4>)
 8001c3a:	482c      	ldr	r0, [pc, #176]	; (8001cec <main+0x2cc>)
 8001c3c:	f003 fbbb 	bl	80053b6 <HAL_UART_Transmit>
			  }

		  uart1_word[0] = 0;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <main+0x2b4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
		  uart1_index = 0;
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <main+0x2b0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
		  }
	  uart1_flag = 0;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <main+0x2ac>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	  }

	  if (temp_flag == 1)
 8001c52:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <main+0x2f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f47f af12 	bne.w	8001a80 <main+0x60>
	  {
		  if (K == 0) {
 8001c5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d103      	bne.n	8001c72 <main+0x252>
			  printf("Coeff is equal to 0, set it to get and angle\r\n");
 8001c6a:	482c      	ldr	r0, [pc, #176]	; (8001d1c <main+0x2fc>)
 8001c6c:	f005 fb1a 	bl	80072a4 <puts>
 8001c70:	e01e      	b.n	8001cb0 <main+0x290>
		  }
		  else {
			  angle = (int)(K * (temp/100));
 8001c72:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c76:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001d0c <main+0x2ec>
 8001c7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c8e:	793b      	ldrb	r3, [r7, #4]
 8001c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  if (angle >= 0) {
				  if (mot_angle(&hcan1, angle, MOT_ROT_CLK) != 0){
 8001c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <main+0x2a0>)
 8001c9e:	f000 f9dd 	bl	800205c <mot_angle>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <main+0x290>
					  printf("mot_angle command failed, error code %d\r\n", ret);
 8001ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001caa:	481d      	ldr	r0, [pc, #116]	; (8001d20 <main+0x300>)
 8001cac:	f005 fa74 	bl	8007198 <iprintf>
				  if (mot_angle(&hcan1, -angle, MOT_ROT_ACLK) != 0){
					  printf("mot_angle command failed, error code %d\r\n", ret);
				  }
			  }
		  }
		  temp_flag = 0;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <main+0x2f8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
	  if (uart1_flag == 1)
 8001cb6:	e6e3      	b.n	8001a80 <main+0x60>
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	40240000 	.word	0x40240000
 8001cc0:	2000021c 	.word	0x2000021c
 8001cc4:	20000324 	.word	0x20000324
 8001cc8:	20000298 	.word	0x20000298
 8001ccc:	20000320 	.word	0x20000320
 8001cd0:	20000328 	.word	0x20000328
 8001cd4:	2000032c 	.word	0x2000032c
 8001cd8:	0800bd9c 	.word	0x0800bd9c
 8001cdc:	0800bda4 	.word	0x0800bda4
 8001ce0:	0800bdac 	.word	0x0800bdac
 8001ce4:	0800bdb0 	.word	0x0800bdb0
 8001ce8:	0800bdb8 	.word	0x0800bdb8
 8001cec:	200002dc 	.word	0x200002dc
 8001cf0:	0800bdc0 	.word	0x0800bdc0
 8001cf4:	0800bdc8 	.word	0x0800bdc8
 8001cf8:	0800bddc 	.word	0x0800bddc
 8001cfc:	0800bde8 	.word	0x0800bde8
 8001d00:	0800bdf0 	.word	0x0800bdf0
 8001d04:	0800bdf8 	.word	0x0800bdf8
 8001d08:	0800be00 	.word	0x0800be00
 8001d0c:	42c80000 	.word	0x42c80000
 8001d10:	0800be08 	.word	0x0800be08
 8001d14:	0800be10 	.word	0x0800be10
 8001d18:	20000200 	.word	0x20000200
 8001d1c:	0800be1c 	.word	0x0800be1c
 8001d20:	0800be4c 	.word	0x0800be4c

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	; 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2234      	movs	r2, #52	; 0x34
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fbae 	bl	8006494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <SystemClock_Config+0xd4>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <SystemClock_Config+0xd4>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <SystemClock_Config+0xd4>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d64:	2300      	movs	r3, #0
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <SystemClock_Config+0xd8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d70:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <SystemClock_Config+0xd8>)
 8001d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <SystemClock_Config+0xd8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d90:	2302      	movs	r3, #2
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d98:	2310      	movs	r3, #16
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001da0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001da2:	2304      	movs	r3, #4
 8001da4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001daa:	2302      	movs	r3, #2
 8001dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f814 	bl	8004de0 <HAL_RCC_OscConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001dbe:	f000 f947 	bl	8002050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	2102      	movs	r1, #2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fcb4 	bl	800474c <HAL_RCC_ClockConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001dea:	f000 f931 	bl	8002050 <Error_Handler>
  }
}
 8001dee:	bf00      	nop
 8001df0:	3750      	adds	r7, #80	; 0x50
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000

08001e00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e06:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <MX_CAN1_Init+0x6c>)
 8001e08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e0c:	220e      	movs	r2, #14
 8001e0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e1c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_CAN1_Init+0x68>)
 8001e54:	f000 fc6a 	bl	800272c <HAL_CAN_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001e5e:	f000 f8f7 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000021c 	.word	0x2000021c
 8001e6c:	40006400 	.word	0x40006400

08001e70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <MX_I2C1_Init+0x54>)
 8001e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e7c:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_I2C1_Init+0x58>)
 8001e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001eae:	f001 f9a9 	bl	8003204 <HAL_I2C_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb8:	f000 f8ca 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000244 	.word	0x20000244
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	000186a0 	.word	0x000186a0

08001ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART1_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f003 fa0a 	bl	800531c <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f000 f89f 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000298 	.word	0x20000298
 8001f1c:	40011000 	.word	0x40011000

08001f20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <MX_USART2_UART_Init+0x50>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f58:	f003 f9e0 	bl	800531c <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f62:	f000 f875 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200002dc 	.word	0x200002dc
 8001f70:	40004400 	.word	0x40004400

08001f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a2c      	ldr	r2, [pc, #176]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a25      	ldr	r2, [pc, #148]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	4812      	ldr	r0, [pc, #72]	; (8002048 <MX_GPIO_Init+0xd4>)
 8002000:	f001 f8e6 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800200a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800200e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <MX_GPIO_Init+0xd8>)
 800201c:	f000 ff44 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002020:	2320      	movs	r3, #32
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002024:	2301      	movs	r3, #1
 8002026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_GPIO_Init+0xd4>)
 8002038:	f000 ff36 	bl	8002ea8 <HAL_GPIO_Init>

}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	40020800 	.word	0x40020800

08002050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002054:	b672      	cpsid	i
}
 8002056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002058:	e7fe      	b.n	8002058 <Error_Handler+0x8>
	...

0800205c <mot_angle>:
	header.DLC = MOT_MAN_SIZE;

	return HAL_CAN_AddTxMessage(hcan, &header, data, &pTxMailbox);
}

int mot_angle(CAN_HandleTypeDef *hcan, uint8_t angle, uint8_t rot){
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
 8002068:	4613      	mov	r3, r2
 800206a:	70bb      	strb	r3, [r7, #2]
	uint8_t data[MOT_ANG_SIZE] = {angle, rot};
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	733b      	strb	r3, [r7, #12]
 8002070:	78bb      	ldrb	r3, [r7, #2]
 8002072:	737b      	strb	r3, [r7, #13]
	header.StdId = MOT_ANG_ID;
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <mot_angle+0x3c>)
 8002076:	2261      	movs	r2, #97	; 0x61
 8002078:	601a      	str	r2, [r3, #0]
	header.DLC = MOT_ANG_SIZE;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <mot_angle+0x3c>)
 800207c:	2202      	movs	r2, #2
 800207e:	611a      	str	r2, [r3, #16]

	return HAL_CAN_AddTxMessage(hcan, &header, data, &pTxMailbox);
 8002080:	f107 020c 	add.w	r2, r7, #12
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <mot_angle+0x40>)
 8002086:	4904      	ldr	r1, [pc, #16]	; (8002098 <mot_angle+0x3c>)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fc8e 	bl	80029aa <HAL_CAN_AddTxMessage>
 800208e:	4603      	mov	r3, r0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000034c 	.word	0x2000034c
 800209c:	20000364 	.word	0x20000364

080020a0 <mot_reset>:

int mot_reset(CAN_HandleTypeDef *hcan){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	header.StdId = MOT_RES_ID;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <mot_reset+0x2c>)
 80020aa:	2262      	movs	r2, #98	; 0x62
 80020ac:	601a      	str	r2, [r3, #0]
	header.DLC = MOT_RES_SIZE;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <mot_reset+0x2c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]

	return HAL_CAN_AddTxMessage(hcan, &header, 0, &pTxMailbox);
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <mot_reset+0x30>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	4904      	ldr	r1, [pc, #16]	; (80020cc <mot_reset+0x2c>)
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fc75 	bl	80029aa <HAL_CAN_AddTxMessage>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000034c 	.word	0x2000034c
 80020d0:	20000364 	.word	0x20000364

080020d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_MspInit+0x4c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_MspInit+0x4c>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_MspInit+0x4c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_MspInit+0x4c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002112:	2007      	movs	r0, #7
 8002114:	f000 fdf4 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_CAN_MspInit+0x84>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12c      	bne.n	80021a0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_CAN_MspInit+0x88>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_CAN_MspInit+0x88>)
 8002150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_CAN_MspInit+0x88>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_CAN_MspInit+0x88>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_CAN_MspInit+0x88>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_CAN_MspInit+0x88>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800217e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002190:	2309      	movs	r3, #9
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	4805      	ldr	r0, [pc, #20]	; (80021b0 <HAL_CAN_MspInit+0x8c>)
 800219c:	f000 fe84 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40006400 	.word	0x40006400
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020400 	.word	0x40020400

080021b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_I2C_MspInit+0x84>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12b      	bne.n	800222e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_I2C_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_I2C_MspInit+0x88>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_I2C_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f6:	2312      	movs	r3, #18
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002202:	2304      	movs	r3, #4
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <HAL_I2C_MspInit+0x8c>)
 800220e:	f000 fe4b 	bl	8002ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_I2C_MspInit+0x88>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_I2C_MspInit+0x88>)
 800221c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_I2C_MspInit+0x88>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800222e:	bf00      	nop
 8002230:	3728      	adds	r7, #40	; 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40005400 	.word	0x40005400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020400 	.word	0x40020400

08002244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	; 0x30
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3a      	ldr	r2, [pc, #232]	; (800234c <HAL_UART_MspInit+0x108>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d135      	bne.n	80022d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_UART_MspInit+0x10c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a38      	ldr	r2, [pc, #224]	; (8002350 <HAL_UART_MspInit+0x10c>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_UART_MspInit+0x10c>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_UART_MspInit+0x10c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a31      	ldr	r2, [pc, #196]	; (8002350 <HAL_UART_MspInit+0x10c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_UART_MspInit+0x10c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800229e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b0:	2307      	movs	r3, #7
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	4826      	ldr	r0, [pc, #152]	; (8002354 <HAL_UART_MspInit+0x110>)
 80022bc:	f000 fdf4 	bl	8002ea8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2025      	movs	r0, #37	; 0x25
 80022c6:	f000 fd26 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ca:	2025      	movs	r0, #37	; 0x25
 80022cc:	f000 fd3f 	bl	8002d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022d0:	e038      	b.n	8002344 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a20      	ldr	r2, [pc, #128]	; (8002358 <HAL_UART_MspInit+0x114>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d133      	bne.n	8002344 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_UART_MspInit+0x10c>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <HAL_UART_MspInit+0x10c>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_UART_MspInit+0x10c>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_UART_MspInit+0x10c>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_UART_MspInit+0x10c>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_UART_MspInit+0x10c>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002314:	230c      	movs	r3, #12
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002324:	2307      	movs	r3, #7
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <HAL_UART_MspInit+0x110>)
 8002330:	f000 fdba 	bl	8002ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2026      	movs	r0, #38	; 0x26
 800233a:	f000 fcec 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800233e:	2026      	movs	r0, #38	; 0x26
 8002340:	f000 fd05 	bl	8002d4e <HAL_NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3730      	adds	r7, #48	; 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40011000 	.word	0x40011000
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000
 8002358:	40004400 	.word	0x40004400

0800235c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002364:	1d39      	adds	r1, r7, #4
 8002366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236a:	2201      	movs	r2, #1
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <__io_putchar+0x20>)
 800236e:	f003 f822 	bl	80053b6 <HAL_UART_Transmit>

  return ch;
 8002372:	687b      	ldr	r3, [r7, #4]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200002dc 	.word	0x200002dc

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f000 f98e 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart1_flag = 1;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <USART1_IRQHandler+0x44>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023de:	480f      	ldr	r0, [pc, #60]	; (800241c <USART1_IRQHandler+0x48>)
 80023e0:	f003 f8ac 	bl	800553c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Transmit(&huart2, &uart1_buff, 1, HAL_MAX_DELAY);
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e8:	2201      	movs	r2, #1
 80023ea:	490d      	ldr	r1, [pc, #52]	; (8002420 <USART1_IRQHandler+0x4c>)
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <USART1_IRQHandler+0x50>)
 80023ee:	f002 ffe2 	bl	80053b6 <HAL_UART_Transmit>
  uart1_word[uart1_index] = uart1_buff;
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <USART1_IRQHandler+0x54>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <USART1_IRQHandler+0x4c>)
 80023f8:	7811      	ldrb	r1, [r2, #0]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <USART1_IRQHandler+0x58>)
 80023fc:	54d1      	strb	r1, [r2, r3]
  uart1_index++;
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <USART1_IRQHandler+0x54>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <USART1_IRQHandler+0x54>)
 8002406:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(&huart1, &uart1_buff, 1);
 8002408:	2201      	movs	r2, #1
 800240a:	4905      	ldr	r1, [pc, #20]	; (8002420 <USART1_IRQHandler+0x4c>)
 800240c:	4803      	ldr	r0, [pc, #12]	; (800241c <USART1_IRQHandler+0x48>)
 800240e:	f003 f864 	bl	80054da <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000320 	.word	0x20000320
 800241c:	20000298 	.word	0x20000298
 8002420:	20000324 	.word	0x20000324
 8002424:	200002dc 	.word	0x200002dc
 8002428:	20000328 	.word	0x20000328
 800242c:	2000032c 	.word	0x2000032c

08002430 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <USART2_IRQHandler+0x10>)
 8002436:	f003 f881 	bl	800553c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002dc 	.word	0x200002dc

08002444 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
	return 1;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_kill>:

int _kill(int pid, int sig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800245e:	f003 ffdf 	bl	8006420 <__errno>
 8002462:	4603      	mov	r3, r0
 8002464:	2216      	movs	r2, #22
 8002466:	601a      	str	r2, [r3, #0]
	return -1;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_exit>:

void _exit (int status)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800247c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ffe7 	bl	8002454 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002486:	e7fe      	b.n	8002486 <_exit+0x12>

08002488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00a      	b.n	80024b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800249a:	f3af 8000 	nop.w
 800249e:	4601      	mov	r1, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbf0      	blt.n	800249a <_read+0x12>
	}

return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e009      	b.n	80024e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff3d 	bl	800235c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf1      	blt.n	80024d4 <_write+0x12>
	}
	return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_close>:

int _close(int file)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
	return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002522:	605a      	str	r2, [r3, #4]
	return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_isatty>:

int _isatty(int file)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	return 1;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
	return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <_sbrk+0x5c>)
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <_sbrk+0x60>)
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <_sbrk+0x64>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <_sbrk+0x68>)
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002594:	f003 ff44 	bl	8006420 <__errno>
 8002598:	4603      	mov	r3, r0
 800259a:	220c      	movs	r2, #12
 800259c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a2:	e009      	b.n	80025b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <_sbrk+0x64>)
 80025b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20020000 	.word	0x20020000
 80025c4:	00000400 	.word	0x00000400
 80025c8:	20000368 	.word	0x20000368
 80025cc:	20000380 	.word	0x20000380

080025d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <SystemInit+0x20>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <SystemInit+0x20>)
 80025dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800262c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f8:	480d      	ldr	r0, [pc, #52]	; (8002630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025fa:	490e      	ldr	r1, [pc, #56]	; (8002634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002600:	e002      	b.n	8002608 <LoopCopyDataInit>

08002602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002606:	3304      	adds	r3, #4

08002608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800260c:	d3f9      	bcc.n	8002602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002610:	4c0b      	ldr	r4, [pc, #44]	; (8002640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002614:	e001      	b.n	800261a <LoopFillZerobss>

08002616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002618:	3204      	adds	r2, #4

0800261a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800261c:	d3fb      	bcc.n	8002616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800261e:	f7ff ffd7 	bl	80025d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002622:	f003 ff03 	bl	800642c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002626:	f7ff f9fb 	bl	8001a20 <main>
  bx  lr    
 800262a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800262c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002638:	0800c380 	.word	0x0800c380
  ldr r2, =_sbss
 800263c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002640:	20000380 	.word	0x20000380

08002644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC_IRQHandler>
	...

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_Init+0x40>)
 8002652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_Init+0x40>)
 800265e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_Init+0x40>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f000 fb45 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002676:	2000      	movs	r0, #0
 8002678:	f000 f808 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267c:	f7ff fd2a 	bl	80020d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x54>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x58>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fb5d 	bl	8002d6a <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c8:	f000 fb25 	bl	8002d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_InitTick+0x5c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000008 	.word	0x20000008
 8002710:	2000036c 	.word	0x2000036c

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	2000036c 	.word	0x2000036c

0800272c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0ed      	b.n	800291a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fcea 	bl	8002124 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002760:	f7ff ffd8 	bl	8002714 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002766:	e012      	b.n	800278e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002768:	f7ff ffd4 	bl	8002714 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b0a      	cmp	r3, #10
 8002774:	d90b      	bls.n	800278e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2205      	movs	r2, #5
 8002786:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0c5      	b.n	800291a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0e5      	beq.n	8002768 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0202 	bic.w	r2, r2, #2
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ac:	f7ff ffb2 	bl	8002714 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027b2:	e012      	b.n	80027da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027b4:	f7ff ffae 	bl	8002714 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b0a      	cmp	r3, #10
 80027c0:	d90b      	bls.n	80027da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e09f      	b.n	800291a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e5      	bne.n	80027b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7e1b      	ldrb	r3, [r3, #24]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e007      	b.n	8002812 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7e5b      	ldrb	r3, [r3, #25]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d108      	bne.n	800282c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e007      	b.n	800283c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e9b      	ldrb	r3, [r3, #26]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d108      	bne.n	8002856 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e007      	b.n	8002866 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0220 	bic.w	r2, r2, #32
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7edb      	ldrb	r3, [r3, #27]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d108      	bne.n	8002880 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0210 	bic.w	r2, r2, #16
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e007      	b.n	8002890 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0210 	orr.w	r2, r2, #16
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7f1b      	ldrb	r3, [r3, #28]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e007      	b.n	80028ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0208 	bic.w	r2, r2, #8
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7f5b      	ldrb	r3, [r3, #29]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0204 	orr.w	r2, r2, #4
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e007      	b.n	80028e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d12e      	bne.n	8002994 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800294e:	f7ff fee1 	bl	8002714 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002954:	e012      	b.n	800297c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002956:	f7ff fedd 	bl	8002714 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b0a      	cmp	r3, #10
 8002962:	d90b      	bls.n	800297c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2205      	movs	r2, #5
 8002974:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e012      	b.n	80029a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e5      	bne.n	8002956 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e006      	b.n	80029a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b089      	sub	sp, #36	; 0x24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029be:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d003      	beq.n	80029d6 <HAL_CAN_AddTxMessage+0x2c>
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	f040 80b8 	bne.w	8002b46 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a0 	beq.w	8002b36 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	0e1b      	lsrs	r3, r3, #24
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d907      	bls.n	8002a16 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e09e      	b.n	8002b54 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a16:	2201      	movs	r2, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	6809      	ldr	r1, [r1, #0]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	440b      	add	r3, r1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e00f      	b.n	8002a64 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3318      	adds	r3, #24
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	440b      	add	r3, r1
 8002a62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3318      	adds	r3, #24
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	440b      	add	r3, r1
 8002a74:	3304      	adds	r3, #4
 8002a76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	7d1b      	ldrb	r3, [r3, #20]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d111      	bne.n	8002aa4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3318      	adds	r3, #24
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	6811      	ldr	r1, [r2, #0]
 8002a94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3307      	adds	r3, #7
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	061a      	lsls	r2, r3, #24
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3306      	adds	r3, #6
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3305      	adds	r3, #5
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	3204      	adds	r2, #4
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	6811      	ldr	r1, [r2, #0]
 8002acc:	ea43 0200 	orr.w	r2, r3, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ada:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3303      	adds	r3, #3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	061a      	lsls	r2, r3, #24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3301      	adds	r3, #1
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	4313      	orrs	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	4610      	mov	r0, r2
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6811      	ldr	r1, [r2, #0]
 8002b02:	ea43 0200 	orr.w	r2, r3, r0
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3318      	adds	r3, #24
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	6811      	ldr	r1, [r2, #0]
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3318      	adds	r3, #24
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	440b      	add	r3, r1
 8002b30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e00e      	b.n	8002b54 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e006      	b.n	8002b54 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3724      	adds	r7, #36	; 0x24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60d3      	str	r3, [r2, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f003 0307 	and.w	r3, r3, #7
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db0b      	blt.n	8002bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <__NVIC_EnableIRQ+0x38>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d301      	bcc.n	8002cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00f      	b.n	8002cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <SysTick_Config+0x40>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cda:	210f      	movs	r1, #15
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce0:	f7ff ff8e 	bl	8002c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <SysTick_Config+0x40>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <SysTick_Config+0x40>)
 8002cec:	2207      	movs	r2, #7
 8002cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	e000e010 	.word	0xe000e010

08002d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff29 	bl	8002b60 <__NVIC_SetPriorityGrouping>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d28:	f7ff ff3e 	bl	8002ba8 <__NVIC_GetPriorityGrouping>
 8002d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff8e 	bl	8002c54 <NVIC_EncodePriority>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff5d 	bl	8002c00 <__NVIC_SetPriority>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff31 	bl	8002bc4 <__NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffa2 	bl	8002cbc <SysTick_Config>
 8002d78:	4603      	mov	r3, r0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fcc0 	bl	8002714 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d008      	beq.n	8002db4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e052      	b.n	8002e5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0216 	bic.w	r2, r2, #22
 8002dc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <HAL_DMA_Abort+0x62>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0208 	bic.w	r2, r2, #8
 8002df2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e04:	e013      	b.n	8002e2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e06:	f7ff fc85 	bl	8002714 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d90c      	bls.n	8002e2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e015      	b.n	8002e5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e4      	bne.n	8002e06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	223f      	movs	r2, #63	; 0x3f
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e00c      	b.n	8002e9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2205      	movs	r2, #5
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e165      	b.n	8003190 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 8154 	bne.w	800318a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d005      	beq.n	8002efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d130      	bne.n	8002f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 0201 	and.w	r2, r3, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d017      	beq.n	8002f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d123      	bne.n	8002fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	220f      	movs	r2, #15
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	08da      	lsrs	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3208      	adds	r2, #8
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0203 	and.w	r2, r3, #3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80ae 	beq.w	800318a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_GPIO_Init+0x300>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_GPIO_Init+0x300>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303c:	6453      	str	r3, [r2, #68]	; 0x44
 800303e:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_GPIO_Init+0x300>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800304a:	4a58      	ldr	r2, [pc, #352]	; (80031ac <HAL_GPIO_Init+0x304>)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4f      	ldr	r2, [pc, #316]	; (80031b0 <HAL_GPIO_Init+0x308>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d025      	beq.n	80030c2 <HAL_GPIO_Init+0x21a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4e      	ldr	r2, [pc, #312]	; (80031b4 <HAL_GPIO_Init+0x30c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01f      	beq.n	80030be <HAL_GPIO_Init+0x216>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <HAL_GPIO_Init+0x310>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d019      	beq.n	80030ba <HAL_GPIO_Init+0x212>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4c      	ldr	r2, [pc, #304]	; (80031bc <HAL_GPIO_Init+0x314>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_GPIO_Init+0x20e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4b      	ldr	r2, [pc, #300]	; (80031c0 <HAL_GPIO_Init+0x318>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00d      	beq.n	80030b2 <HAL_GPIO_Init+0x20a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4a      	ldr	r2, [pc, #296]	; (80031c4 <HAL_GPIO_Init+0x31c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_Init+0x206>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a49      	ldr	r2, [pc, #292]	; (80031c8 <HAL_GPIO_Init+0x320>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_GPIO_Init+0x202>
 80030a6:	2306      	movs	r3, #6
 80030a8:	e00c      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00a      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e008      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030b2:	2304      	movs	r3, #4
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030b6:	2303      	movs	r3, #3
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030c2:	2300      	movs	r3, #0
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f002 0203 	and.w	r2, r2, #3
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	4093      	lsls	r3, r2
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d4:	4935      	ldr	r1, [pc, #212]	; (80031ac <HAL_GPIO_Init+0x304>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3302      	adds	r3, #2
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e2:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <HAL_GPIO_Init+0x324>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003106:	4a31      	ldr	r2, [pc, #196]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800310c:	4b2f      	ldr	r3, [pc, #188]	; (80031cc <HAL_GPIO_Init+0x324>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003130:	4a26      	ldr	r2, [pc, #152]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_GPIO_Init+0x324>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003184:	4a11      	ldr	r2, [pc, #68]	; (80031cc <HAL_GPIO_Init+0x324>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	f67f ae96 	bls.w	8002ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40021400 	.word	0x40021400
 80031c8:	40021800 	.word	0x40021800
 80031cc:	40013c00 	.word	0x40013c00

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031ec:	e003      	b.n	80031f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	619a      	str	r2, [r3, #24]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e12b      	b.n	800346e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe ffc2 	bl	80021b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	; 0x24
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003268:	f001 fb62 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 800326c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4a81      	ldr	r2, [pc, #516]	; (8003478 <HAL_I2C_Init+0x274>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d807      	bhi.n	8003288 <HAL_I2C_Init+0x84>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a80      	ldr	r2, [pc, #512]	; (800347c <HAL_I2C_Init+0x278>)
 800327c:	4293      	cmp	r3, r2
 800327e:	bf94      	ite	ls
 8003280:	2301      	movls	r3, #1
 8003282:	2300      	movhi	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e006      	b.n	8003296 <HAL_I2C_Init+0x92>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a7d      	ldr	r2, [pc, #500]	; (8003480 <HAL_I2C_Init+0x27c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	bf94      	ite	ls
 8003290:	2301      	movls	r3, #1
 8003292:	2300      	movhi	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0e7      	b.n	800346e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a78      	ldr	r2, [pc, #480]	; (8003484 <HAL_I2C_Init+0x280>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9b      	lsrs	r3, r3, #18
 80032a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a6a      	ldr	r2, [pc, #424]	; (8003478 <HAL_I2C_Init+0x274>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d802      	bhi.n	80032d8 <HAL_I2C_Init+0xd4>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3301      	adds	r3, #1
 80032d6:	e009      	b.n	80032ec <HAL_I2C_Init+0xe8>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	4a69      	ldr	r2, [pc, #420]	; (8003488 <HAL_I2C_Init+0x284>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	3301      	adds	r3, #1
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	495c      	ldr	r1, [pc, #368]	; (8003478 <HAL_I2C_Init+0x274>)
 8003308:	428b      	cmp	r3, r1
 800330a:	d819      	bhi.n	8003340 <HAL_I2C_Init+0x13c>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e59      	subs	r1, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fbb1 f3f3 	udiv	r3, r1, r3
 800331a:	1c59      	adds	r1, r3, #1
 800331c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003320:	400b      	ands	r3, r1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_I2C_Init+0x138>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1e59      	subs	r1, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fbb1 f3f3 	udiv	r3, r1, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333a:	e051      	b.n	80033e0 <HAL_I2C_Init+0x1dc>
 800333c:	2304      	movs	r3, #4
 800333e:	e04f      	b.n	80033e0 <HAL_I2C_Init+0x1dc>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d111      	bne.n	800336c <HAL_I2C_Init+0x168>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e58      	subs	r0, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	440b      	add	r3, r1
 8003356:	fbb0 f3f3 	udiv	r3, r0, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e012      	b.n	8003392 <HAL_I2C_Init+0x18e>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	0099      	lsls	r1, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Init+0x196>
 8003396:	2301      	movs	r3, #1
 8003398:	e022      	b.n	80033e0 <HAL_I2C_Init+0x1dc>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10e      	bne.n	80033c0 <HAL_I2C_Init+0x1bc>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1e58      	subs	r0, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	440b      	add	r3, r1
 80033b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033be:	e00f      	b.n	80033e0 <HAL_I2C_Init+0x1dc>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e58      	subs	r0, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	0099      	lsls	r1, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	6809      	ldr	r1, [r1, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800340e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6911      	ldr	r1, [r2, #16]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68d2      	ldr	r2, [r2, #12]
 800341a:	4311      	orrs	r1, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	430b      	orrs	r3, r1
 8003422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	000186a0 	.word	0x000186a0
 800347c:	001e847f 	.word	0x001e847f
 8003480:	003d08ff 	.word	0x003d08ff
 8003484:	431bde83 	.word	0x431bde83
 8003488:	10624dd3 	.word	0x10624dd3

0800348c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	461a      	mov	r2, r3
 8003498:	460b      	mov	r3, r1
 800349a:	817b      	strh	r3, [r7, #10]
 800349c:	4613      	mov	r3, r2
 800349e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a0:	f7ff f938 	bl	8002714 <HAL_GetTick>
 80034a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	f040 80e0 	bne.w	8003674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	2319      	movs	r3, #25
 80034ba:	2201      	movs	r2, #1
 80034bc:	4970      	ldr	r1, [pc, #448]	; (8003680 <HAL_I2C_Master_Transmit+0x1f4>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 ff66 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0d3      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_I2C_Master_Transmit+0x50>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0cc      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1ea>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d007      	beq.n	8003502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2221      	movs	r2, #33	; 0x21
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2210      	movs	r2, #16
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	893a      	ldrh	r2, [r7, #8]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a50      	ldr	r2, [pc, #320]	; (8003684 <HAL_I2C_Master_Transmit+0x1f8>)
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	6a3a      	ldr	r2, [r7, #32]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fce8 	bl	8003f20 <I2C_MasterRequestWrite>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e08d      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003570:	e066      	b.n	8003640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	6a39      	ldr	r1, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 ffe0 	bl	800453c <I2C_WaitOnTXEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06b      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11b      	bne.n	8003614 <HAL_I2C_Master_Transmit+0x188>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d017      	beq.n	8003614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	6a39      	ldr	r1, [r7, #32]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 ffd0 	bl	80045be <I2C_WaitOnBTFFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b04      	cmp	r3, #4
 800362a:	d107      	bne.n	800363c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e01a      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	d194      	bne.n	8003572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	00100002 	.word	0x00100002
 8003684:	ffff0000 	.word	0xffff0000

08003688 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	461a      	mov	r2, r3
 8003694:	460b      	mov	r3, r1
 8003696:	817b      	strh	r3, [r7, #10]
 8003698:	4613      	mov	r3, r2
 800369a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff f83a 	bl	8002714 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	f040 820b 	bne.w	8003ac6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2319      	movs	r3, #25
 80036b6:	2201      	movs	r2, #1
 80036b8:	497c      	ldr	r1, [pc, #496]	; (80038ac <HAL_I2C_Master_Receive+0x224>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fe68 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
 80036c8:	e1fe      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_I2C_Master_Receive+0x50>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e1f7      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d007      	beq.n	80036fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2222      	movs	r2, #34	; 0x22
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2210      	movs	r2, #16
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	893a      	ldrh	r2, [r7, #8]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <HAL_I2C_Master_Receive+0x228>)
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003740:	8979      	ldrh	r1, [r7, #10]
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fc6c 	bl	8004024 <I2C_MasterRequestRead>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1b8      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d113      	bne.n	8003786 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	623b      	str	r3, [r7, #32]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e18c      	b.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	2b01      	cmp	r3, #1
 800378c:	d11b      	bne.n	80037c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e16c      	b.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d11b      	bne.n	8003806 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	e14c      	b.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800382c:	e138      	b.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b03      	cmp	r3, #3
 8003834:	f200 80f1 	bhi.w	8003a1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b01      	cmp	r3, #1
 800383e:	d123      	bne.n	8003888 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fefb 	bl	8004640 <I2C_WaitOnRXNEFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e139      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003886:	e10b      	b.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	2b02      	cmp	r3, #2
 800388e:	d14e      	bne.n	800392e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	2200      	movs	r2, #0
 8003898:	4906      	ldr	r1, [pc, #24]	; (80038b4 <HAL_I2C_Master_Receive+0x22c>)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fd78 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e10e      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
 80038aa:	bf00      	nop
 80038ac:	00100002 	.word	0x00100002
 80038b0:	ffff0000 	.word	0xffff0000
 80038b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392c:	e0b8      	b.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2200      	movs	r2, #0
 8003936:	4966      	ldr	r1, [pc, #408]	; (8003ad0 <HAL_I2C_Master_Receive+0x448>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fd29 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0bf      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2200      	movs	r2, #0
 8003992:	494f      	ldr	r1, [pc, #316]	; (8003ad0 <HAL_I2C_Master_Receive+0x448>)
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fcfb 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e091      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a18:	e042      	b.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fe0e 	bl	8004640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e04c      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d118      	bne.n	8003aa0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f aec2 	bne.w	800382e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
  }
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	00010004 	.word	0x00010004

08003ad4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	; 0x30
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	4608      	mov	r0, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	817b      	strh	r3, [r7, #10]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	813b      	strh	r3, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aee:	f7fe fe11 	bl	8002714 <HAL_GetTick>
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	f040 8208 	bne.w	8003f12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2319      	movs	r3, #25
 8003b08:	2201      	movs	r2, #1
 8003b0a:	497b      	ldr	r1, [pc, #492]	; (8003cf8 <HAL_I2C_Mem_Read+0x224>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fc3f 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e1fb      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_I2C_Mem_Read+0x56>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e1f4      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d007      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2222      	movs	r2, #34	; 0x22
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a5b      	ldr	r2, [pc, #364]	; (8003cfc <HAL_I2C_Mem_Read+0x228>)
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b92:	88f8      	ldrh	r0, [r7, #6]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fb0c 	bl	80041c0 <I2C_RequestMemoryRead>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e1b0      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d113      	bne.n	8003be2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e184      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d11b      	bne.n	8003c22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e164      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d11b      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	e144      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c78:	e138      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	f200 80f1 	bhi.w	8003e66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d123      	bne.n	8003cd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fcd5 	bl	8004640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e139      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd2:	e10b      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d14e      	bne.n	8003d7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4906      	ldr	r1, [pc, #24]	; (8003d00 <HAL_I2C_Mem_Read+0x22c>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb52 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e10e      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
 8003cf6:	bf00      	nop
 8003cf8:	00100002 	.word	0x00100002
 8003cfc:	ffff0000 	.word	0xffff0000
 8003d00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d78:	e0b8      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	2200      	movs	r2, #0
 8003d82:	4966      	ldr	r1, [pc, #408]	; (8003f1c <HAL_I2C_Mem_Read+0x448>)
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fb03 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0bf      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2200      	movs	r2, #0
 8003dde:	494f      	ldr	r1, [pc, #316]	; (8003f1c <HAL_I2C_Mem_Read+0x448>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fad5 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e091      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e64:	e042      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fbe8 	bl	8004640 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e04c      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d118      	bne.n	8003eec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f47f aec2 	bne.w	8003c7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3728      	adds	r7, #40	; 0x28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	00010004 	.word	0x00010004

08003f20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d006      	beq.n	8003f4a <I2C_MasterRequestWrite+0x2a>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d003      	beq.n	8003f4a <I2C_MasterRequestWrite+0x2a>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f48:	d108      	bne.n	8003f5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e00b      	b.n	8003f74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	2b12      	cmp	r3, #18
 8003f62:	d107      	bne.n	8003f74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fa05 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9a:	d103      	bne.n	8003fa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e035      	b.n	8004014 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb0:	d108      	bne.n	8003fc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fc0:	611a      	str	r2, [r3, #16]
 8003fc2:	e01b      	b.n	8003ffc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	11db      	asrs	r3, r3, #7
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0306 	and.w	r3, r3, #6
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f063 030f 	orn	r3, r3, #15
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	490e      	ldr	r1, [pc, #56]	; (800401c <I2C_MasterRequestWrite+0xfc>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa2b 	bl	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e010      	b.n	8004014 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4907      	ldr	r1, [pc, #28]	; (8004020 <I2C_MasterRequestWrite+0x100>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fa1b 	bl	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	00010008 	.word	0x00010008
 8004020:	00010002 	.word	0x00010002

08004024 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	460b      	mov	r3, r1
 8004032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d006      	beq.n	800405e <I2C_MasterRequestRead+0x3a>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d003      	beq.n	800405e <I2C_MasterRequestRead+0x3a>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405c:	d108      	bne.n	8004070 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e00b      	b.n	8004088 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	2b11      	cmp	r3, #17
 8004076:	d107      	bne.n	8004088 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f97b 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ae:	d103      	bne.n	80040b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e079      	b.n	80041b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c4:	d108      	bne.n	80040d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]
 80040d6:	e05f      	b.n	8004198 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040d8:	897b      	ldrh	r3, [r7, #10]
 80040da:	11db      	asrs	r3, r3, #7
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f003 0306 	and.w	r3, r3, #6
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f063 030f 	orn	r3, r3, #15
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4930      	ldr	r1, [pc, #192]	; (80041b8 <I2C_MasterRequestRead+0x194>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f9a1 	bl	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e054      	b.n	80041b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4929      	ldr	r1, [pc, #164]	; (80041bc <I2C_MasterRequestRead+0x198>)
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f991 	bl	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e044      	b.n	80041b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800414a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f919 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004172:	d103      	bne.n	800417c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e017      	b.n	80041b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	11db      	asrs	r3, r3, #7
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0306 	and.w	r3, r3, #6
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f063 030e 	orn	r3, r3, #14
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4907      	ldr	r1, [pc, #28]	; (80041bc <I2C_MasterRequestRead+0x198>)
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f94d 	bl	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	00010008 	.word	0x00010008
 80041bc:	00010002 	.word	0x00010002

080041c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	4608      	mov	r0, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	817b      	strh	r3, [r7, #10]
 80041d2:	460b      	mov	r3, r1
 80041d4:	813b      	strh	r3, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	2200      	movs	r2, #0
 8004202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f8c2 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004220:	d103      	bne.n	800422a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e0aa      	b.n	8004384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422e:	897b      	ldrh	r3, [r7, #10]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800423c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	4952      	ldr	r1, [pc, #328]	; (800438c <I2C_RequestMemoryRead+0x1cc>)
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f8fa 	bl	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e097      	b.n	8004384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426c:	6a39      	ldr	r1, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f964 	bl	800453c <I2C_WaitOnTXEFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b04      	cmp	r3, #4
 8004280:	d107      	bne.n	8004292 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e076      	b.n	8004384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800429c:	893b      	ldrh	r3, [r7, #8]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	611a      	str	r2, [r3, #16]
 80042a6:	e021      	b.n	80042ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	6a39      	ldr	r1, [r7, #32]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f93e 	bl	800453c <I2C_WaitOnTXEFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d107      	bne.n	80042de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e050      	b.n	8004384 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042e2:	893b      	ldrh	r3, [r7, #8]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ee:	6a39      	ldr	r1, [r7, #32]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f923 	bl	800453c <I2C_WaitOnTXEFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00d      	beq.n	8004318 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b04      	cmp	r3, #4
 8004302:	d107      	bne.n	8004314 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004312:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e035      	b.n	8004384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004326:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2200      	movs	r2, #0
 8004330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f82b 	bl	8004390 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00d      	beq.n	800435c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434e:	d103      	bne.n	8004358 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e013      	b.n	8004384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800435c:	897b      	ldrh	r3, [r7, #10]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	4906      	ldr	r1, [pc, #24]	; (800438c <I2C_RequestMemoryRead+0x1cc>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f863 	bl	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	00010002 	.word	0x00010002

08004390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a0:	e025      	b.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a8:	d021      	beq.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fe f9b3 	bl	8002714 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d116      	bne.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e023      	b.n	8004436 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10d      	bne.n	8004414 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	43da      	mvns	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	e00c      	b.n	800442e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	429a      	cmp	r2, r3
 8004432:	d0b6      	beq.n	80043a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800444c:	e051      	b.n	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d123      	bne.n	80044a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004476:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e046      	b.n	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ac:	d021      	beq.n	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7fe f931 	bl	8002714 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d116      	bne.n	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e020      	b.n	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10c      	bne.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4013      	ands	r3, r2
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e00b      	b.n	800452e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	43da      	mvns	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4013      	ands	r3, r2
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf14      	ite	ne
 8004528:	2301      	movne	r3, #1
 800452a:	2300      	moveq	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d18d      	bne.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004548:	e02d      	b.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f8ce 	bl	80046ec <I2C_IsAcknowledgeFailed>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e02d      	b.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004560:	d021      	beq.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004562:	f7fe f8d7 	bl	8002714 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d116      	bne.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e007      	b.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d1ca      	bne.n	800454a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ca:	e02d      	b.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f88d 	bl	80046ec <I2C_IsAcknowledgeFailed>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e02d      	b.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e2:	d021      	beq.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7fe f896 	bl	8002714 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e007      	b.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b04      	cmp	r3, #4
 8004634:	d1ca      	bne.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800464c:	e042      	b.n	80046d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d119      	bne.n	8004690 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0210 	mvn.w	r2, #16
 8004664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e029      	b.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004690:	f7fe f840 	bl	8002714 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e007      	b.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d1b5      	bne.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004702:	d11b      	bne.n	800473c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800470c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	f043 0204 	orr.w	r2, r3, #4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0cc      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b68      	ldr	r3, [pc, #416]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90c      	bls.n	8004788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b65      	ldr	r3, [pc, #404]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b63      	ldr	r3, [pc, #396]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0b8      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a0:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a58      	ldr	r2, [pc, #352]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b8:	4b53      	ldr	r3, [pc, #332]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a52      	ldr	r2, [pc, #328]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b50      	ldr	r3, [pc, #320]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	494d      	ldr	r1, [pc, #308]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d044      	beq.n	800486c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b47      	ldr	r3, [pc, #284]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d119      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07f      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d003      	beq.n	800480a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06f      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e067      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4934      	ldr	r1, [pc, #208]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800483c:	f7fd ff6a 	bl	8002714 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fd ff66 	bl	8002714 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e04f      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d20c      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b22      	ldr	r3, [pc, #136]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e032      	b.n	80048fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4916      	ldr	r1, [pc, #88]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	490e      	ldr	r1, [pc, #56]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048d2:	f000 f855 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 80048d6:	4602      	mov	r2, r0
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	490a      	ldr	r1, [pc, #40]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	5ccb      	ldrb	r3, [r1, r3]
 80048e6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ea:	4a09      	ldr	r2, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ee:	4b09      	ldr	r3, [pc, #36]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd feca 	bl	800268c <HAL_InitTick>

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023c00 	.word	0x40023c00
 8004908:	40023800 	.word	0x40023800
 800490c:	0800be78 	.word	0x0800be78
 8004910:	20000000 	.word	0x20000000
 8004914:	20000004 	.word	0x20000004

08004918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_GetHCLKFreq+0x14>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000000 	.word	0x20000000

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff0 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0a9b      	lsrs	r3, r3, #10
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40023800 	.word	0x40023800
 8004954:	0800be88 	.word	0x0800be88

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800495c:	f7ff ffdc 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0b5b      	lsrs	r3, r3, #13
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	0800be88 	.word	0x0800be88

08004980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b0ae      	sub	sp, #184	; 0xb8
 8004986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049a6:	4bcb      	ldr	r3, [pc, #812]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	f200 8206 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x440>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	08004dc1 	.word	0x08004dc1
 80049c4:	08004dc1 	.word	0x08004dc1
 80049c8:	08004dc1 	.word	0x08004dc1
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	08004dc1 	.word	0x08004dc1
 80049d4:	08004dc1 	.word	0x08004dc1
 80049d8:	08004dc1 	.word	0x08004dc1
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004dc1 	.word	0x08004dc1
 80049e4:	08004dc1 	.word	0x08004dc1
 80049e8:	08004dc1 	.word	0x08004dc1
 80049ec:	08004bf1 	.word	0x08004bf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4bb9      	ldr	r3, [pc, #740]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x358>)
 80049f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80049f6:	e1e7      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049f8:	4bb8      	ldr	r3, [pc, #736]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x35c>)
 80049fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049fe:	e1e3      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a00:	4bb4      	ldr	r3, [pc, #720]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0c:	4bb1      	ldr	r3, [pc, #708]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d071      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a18:	4bae      	ldr	r3, [pc, #696]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	099b      	lsrs	r3, r3, #6
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a3e:	4622      	mov	r2, r4
 8004a40:	462b      	mov	r3, r5
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	0159      	lsls	r1, r3, #5
 8004a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a50:	0150      	lsls	r0, r2, #5
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4621      	mov	r1, r4
 8004a58:	1a51      	subs	r1, r2, r1
 8004a5a:	6439      	str	r1, [r7, #64]	; 0x40
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a62:	647b      	str	r3, [r7, #68]	; 0x44
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004a70:	4649      	mov	r1, r9
 8004a72:	018b      	lsls	r3, r1, #6
 8004a74:	4641      	mov	r1, r8
 8004a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a7a:	4641      	mov	r1, r8
 8004a7c:	018a      	lsls	r2, r1, #6
 8004a7e:	4641      	mov	r1, r8
 8004a80:	1a51      	subs	r1, r2, r1
 8004a82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a84:	4649      	mov	r1, r9
 8004a86:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004a98:	4649      	mov	r1, r9
 8004a9a:	00cb      	lsls	r3, r1, #3
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	00ca      	lsls	r2, r1, #3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4622      	mov	r2, r4
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	eb42 0303 	adc.w	r3, r2, r3
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ac8:	4629      	mov	r1, r5
 8004aca:	024b      	lsls	r3, r1, #9
 8004acc:	4621      	mov	r1, r4
 8004ace:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	024a      	lsls	r2, r1, #9
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ae8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004aec:	f7fc f94c 	bl	8000d88 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4613      	mov	r3, r2
 8004af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004afa:	e067      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afc:	4b75      	ldr	r3, [pc, #468]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b08:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b16:	2300      	movs	r3, #0
 8004b18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	0159      	lsls	r1, r3, #5
 8004b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b30:	0150      	lsls	r0, r2, #5
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4621      	mov	r1, r4
 8004b38:	1a51      	subs	r1, r2, r1
 8004b3a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004b50:	4649      	mov	r1, r9
 8004b52:	018b      	lsls	r3, r1, #6
 8004b54:	4641      	mov	r1, r8
 8004b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	018a      	lsls	r2, r1, #6
 8004b5e:	4641      	mov	r1, r8
 8004b60:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b64:	4649      	mov	r1, r9
 8004b66:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b7e:	4692      	mov	sl, r2
 8004b80:	469b      	mov	fp, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	eb1a 0303 	adds.w	r3, sl, r3
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	028b      	lsls	r3, r1, #10
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba8:	4621      	mov	r1, r4
 8004baa:	028a      	lsls	r2, r1, #10
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bb8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004bbe:	f7fc f8e3 	bl	8000d88 <__aeabi_uldivmod>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bcc:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bee:	e0eb      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf0:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bfc:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d06b      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c08:	4b32      	ldr	r3, [pc, #200]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	2200      	movs	r2, #0
 8004c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	667b      	str	r3, [r7, #100]	; 0x64
 8004c20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c24:	4622      	mov	r2, r4
 8004c26:	462b      	mov	r3, r5
 8004c28:	f04f 0000 	mov.w	r0, #0
 8004c2c:	f04f 0100 	mov.w	r1, #0
 8004c30:	0159      	lsls	r1, r3, #5
 8004c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c36:	0150      	lsls	r0, r2, #5
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	1a51      	subs	r1, r2, r1
 8004c40:	61b9      	str	r1, [r7, #24]
 8004c42:	4629      	mov	r1, r5
 8004c44:	eb63 0301 	sbc.w	r3, r3, r1
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c56:	4659      	mov	r1, fp
 8004c58:	018b      	lsls	r3, r1, #6
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c60:	4651      	mov	r1, sl
 8004c62:	018a      	lsls	r2, r1, #6
 8004c64:	4651      	mov	r1, sl
 8004c66:	ebb2 0801 	subs.w	r8, r2, r1
 8004c6a:	4659      	mov	r1, fp
 8004c6c:	eb63 0901 	sbc.w	r9, r3, r1
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c84:	4690      	mov	r8, r2
 8004c86:	4699      	mov	r9, r3
 8004c88:	4623      	mov	r3, r4
 8004c8a:	eb18 0303 	adds.w	r3, r8, r3
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	462b      	mov	r3, r5
 8004c92:	eb49 0303 	adc.w	r3, r9, r3
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	024b      	lsls	r3, r1, #9
 8004ca8:	4621      	mov	r1, r4
 8004caa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cae:	4621      	mov	r1, r4
 8004cb0:	024a      	lsls	r2, r1, #9
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cba:	2200      	movs	r2, #0
 8004cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cbe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cc4:	f7fc f860 	bl	8000d88 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cd2:	e065      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x420>
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	00f42400 	.word	0x00f42400
 8004cdc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce0:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	4611      	mov	r1, r2
 8004cec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8004cf6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	f04f 0000 	mov.w	r0, #0
 8004d02:	f04f 0100 	mov.w	r1, #0
 8004d06:	0159      	lsls	r1, r3, #5
 8004d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d0c:	0150      	lsls	r0, r2, #5
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4641      	mov	r1, r8
 8004d14:	1a51      	subs	r1, r2, r1
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	4649      	mov	r1, r9
 8004d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	018b      	lsls	r3, r1, #6
 8004d30:	4651      	mov	r1, sl
 8004d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d36:	4651      	mov	r1, sl
 8004d38:	018a      	lsls	r2, r1, #6
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	1a54      	subs	r4, r2, r1
 8004d3e:	4659      	mov	r1, fp
 8004d40:	eb63 0501 	sbc.w	r5, r3, r1
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	00eb      	lsls	r3, r5, #3
 8004d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d52:	00e2      	lsls	r2, r4, #3
 8004d54:	4614      	mov	r4, r2
 8004d56:	461d      	mov	r5, r3
 8004d58:	4643      	mov	r3, r8
 8004d5a:	18e3      	adds	r3, r4, r3
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	464b      	mov	r3, r9
 8004d60:	eb45 0303 	adc.w	r3, r5, r3
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d72:	4629      	mov	r1, r5
 8004d74:	028b      	lsls	r3, r1, #10
 8004d76:	4621      	mov	r1, r4
 8004d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	028a      	lsls	r2, r1, #10
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d88:	2200      	movs	r2, #0
 8004d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d92:	f7fb fff9 	bl	8000d88 <__aeabi_uldivmod>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0f1b      	lsrs	r3, r3, #28
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x45c>)
 8004dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	37b8      	adds	r7, #184	; 0xb8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	00f42400 	.word	0x00f42400

08004de0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e28d      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8083 	beq.w	8004f06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e00:	4b94      	ldr	r3, [pc, #592]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d019      	beq.n	8004e40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e0c:	4b91      	ldr	r3, [pc, #580]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e18:	4b8e      	ldr	r3, [pc, #568]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e24:	d00c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e26:	4b8b      	ldr	r3, [pc, #556]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d112      	bne.n	8004e58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b88      	ldr	r3, [pc, #544]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	4b84      	ldr	r3, [pc, #528]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d05b      	beq.n	8004f04 <HAL_RCC_OscConfig+0x124>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d157      	bne.n	8004f04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e25a      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d106      	bne.n	8004e70 <HAL_RCC_OscConfig+0x90>
 8004e62:	4b7c      	ldr	r3, [pc, #496]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a7b      	ldr	r2, [pc, #492]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e01d      	b.n	8004eac <HAL_RCC_OscConfig+0xcc>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0xb4>
 8004e7a:	4b76      	ldr	r3, [pc, #472]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a75      	ldr	r2, [pc, #468]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a72      	ldr	r2, [pc, #456]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0xcc>
 8004e94:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a6e      	ldr	r2, [pc, #440]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4b6c      	ldr	r3, [pc, #432]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a6b      	ldr	r2, [pc, #428]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d013      	beq.n	8004edc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd fc2e 	bl	8002714 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fd fc2a 	bl	8002714 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e21f      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b61      	ldr	r3, [pc, #388]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0xdc>
 8004eda:	e014      	b.n	8004f06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fd fc1a 	bl	8002714 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee4:	f7fd fc16 	bl	8002714 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b64      	cmp	r3, #100	; 0x64
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e20b      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	4b57      	ldr	r3, [pc, #348]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f0      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x104>
 8004f02:	e000      	b.n	8004f06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d06f      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f12:	4b50      	ldr	r3, [pc, #320]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f1e:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d105      	bne.n	8004f36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f2a:	4b4a      	ldr	r3, [pc, #296]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f36:	4b47      	ldr	r3, [pc, #284]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d11c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b44      	ldr	r3, [pc, #272]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d116      	bne.n	8004f7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	4b41      	ldr	r3, [pc, #260]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x186>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e1d3      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4937      	ldr	r1, [pc, #220]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	e03a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f84:	4b34      	ldr	r3, [pc, #208]	; (8005058 <HAL_RCC_OscConfig+0x278>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fd fbc3 	bl	8002714 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fd fbbf 	bl	8002714 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e1b4      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4925      	ldr	r1, [pc, #148]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]
 8004fc4:	e015      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCC_OscConfig+0x278>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fba2 	bl	8002714 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fd fb9e 	bl	8002714 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e193      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d036      	beq.n	800506c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fd fb82 	bl	8002714 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005014:	f7fd fb7e 	bl	8002714 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e173      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x274>)
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x234>
 8005032:	e01b      	b.n	800506c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_RCC_OscConfig+0x27c>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503a:	f7fd fb6b 	bl	8002714 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005040:	e00e      	b.n	8005060 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005042:	f7fd fb67 	bl	8002714 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d907      	bls.n	8005060 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e15c      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
 8005054:	40023800 	.word	0x40023800
 8005058:	42470000 	.word	0x42470000
 800505c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	4b8a      	ldr	r3, [pc, #552]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ea      	bne.n	8005042 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8097 	beq.w	80051a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b83      	ldr	r3, [pc, #524]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	4b7f      	ldr	r3, [pc, #508]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	4a7e      	ldr	r2, [pc, #504]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6413      	str	r3, [r2, #64]	; 0x40
 800509a:	4b7c      	ldr	r3, [pc, #496]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050aa:	4b79      	ldr	r3, [pc, #484]	; (8005290 <HAL_RCC_OscConfig+0x4b0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d118      	bne.n	80050e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b6:	4b76      	ldr	r3, [pc, #472]	; (8005290 <HAL_RCC_OscConfig+0x4b0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a75      	ldr	r2, [pc, #468]	; (8005290 <HAL_RCC_OscConfig+0x4b0>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c2:	f7fd fb27 	bl	8002714 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fd fb23 	bl	8002714 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e118      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	4b6c      	ldr	r3, [pc, #432]	; (8005290 <HAL_RCC_OscConfig+0x4b0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x31e>
 80050f0:	4b66      	ldr	r3, [pc, #408]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a65      	ldr	r2, [pc, #404]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	e01c      	b.n	8005138 <HAL_RCC_OscConfig+0x358>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b05      	cmp	r3, #5
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x340>
 8005106:	4b61      	ldr	r3, [pc, #388]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a60      	ldr	r2, [pc, #384]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
 8005112:	4b5e      	ldr	r3, [pc, #376]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5d      	ldr	r2, [pc, #372]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	e00b      	b.n	8005138 <HAL_RCC_OscConfig+0x358>
 8005120:	4b5a      	ldr	r3, [pc, #360]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a59      	ldr	r2, [pc, #356]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	4b57      	ldr	r3, [pc, #348]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a56      	ldr	r2, [pc, #344]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005132:	f023 0304 	bic.w	r3, r3, #4
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005140:	f7fd fae8 	bl	8002714 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fd fae4 	bl	8002714 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0d7      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515e:	4b4b      	ldr	r3, [pc, #300]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ee      	beq.n	8005148 <HAL_RCC_OscConfig+0x368>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fd fad2 	bl	8002714 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fd face 	bl	8002714 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0c1      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518a:	4b40      	ldr	r3, [pc, #256]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ee      	bne.n	8005174 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519c:	4b3b      	ldr	r3, [pc, #236]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	4a3a      	ldr	r2, [pc, #232]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 80051a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80ad 	beq.w	800530c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d060      	beq.n	8005280 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d145      	bne.n	8005252 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b33      	ldr	r3, [pc, #204]	; (8005294 <HAL_RCC_OscConfig+0x4b4>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fd faa2 	bl	8002714 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fd fa9e 	bl	8002714 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e093      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	4b29      	ldr	r3, [pc, #164]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	3b01      	subs	r3, #1
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	071b      	lsls	r3, r3, #28
 800521e:	491b      	ldr	r1, [pc, #108]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x4b4>)
 8005226:	2201      	movs	r2, #1
 8005228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fd fa73 	bl	8002714 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005232:	f7fd fa6f 	bl	8002714 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e064      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005244:	4b11      	ldr	r3, [pc, #68]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x452>
 8005250:	e05c      	b.n	800530c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <HAL_RCC_OscConfig+0x4b4>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fd fa5c 	bl	8002714 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005260:	f7fd fa58 	bl	8002714 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e04d      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCC_OscConfig+0x4ac>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x480>
 800527e:	e045      	b.n	800530c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d107      	bne.n	8005298 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e040      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
 800528c:	40023800 	.word	0x40023800
 8005290:	40007000 	.word	0x40007000
 8005294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005298:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <HAL_RCC_OscConfig+0x538>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d030      	beq.n	8005308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d129      	bne.n	8005308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d122      	bne.n	8005308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052c8:	4013      	ands	r3, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d119      	bne.n	8005308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	3b01      	subs	r3, #1
 80052e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d10f      	bne.n	8005308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40023800 	.word	0x40023800

0800531c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e03f      	b.n	80053ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc ff7e 	bl	8002244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	; 0x24
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fde9 	bl	8005f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	; 0x28
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d17c      	bne.n	80054d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_UART_Transmit+0x2c>
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e075      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x3e>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e06e      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2221      	movs	r2, #33	; 0x21
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540a:	f7fd f983 	bl	8002714 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005424:	d108      	bne.n	8005438 <HAL_UART_Transmit+0x82>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e003      	b.n	8005440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005448:	e02a      	b.n	80054a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fb29 	bl	8005aac <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e036      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3302      	adds	r3, #2
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e007      	b.n	8005492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	781a      	ldrb	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1cf      	bne.n	800544a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2140      	movs	r1, #64	; 0x40
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 faf9 	bl	8005aac <UART_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e006      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	4613      	mov	r3, r2
 80054e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d11d      	bne.n	8005530 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_UART_Receive_IT+0x26>
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e016      	b.n	8005532 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_UART_Receive_IT+0x38>
 800550e:	2302      	movs	r3, #2
 8005510:	e00f      	b.n	8005532 <HAL_UART_Receive_IT+0x58>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	461a      	mov	r2, r3
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fb2e 	bl	8005b88 <UART_Start_Receive_IT>
 800552c:	4603      	mov	r3, r0
 800552e:	e000      	b.n	8005532 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b0ba      	sub	sp, #232	; 0xe8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005562:	2300      	movs	r3, #0
 8005564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800557a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10f      	bne.n	80055a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <HAL_UART_IRQHandler+0x66>
 800558e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fc11 	bl	8005dc2 <UART_Receive_IT>
      return;
 80055a0:	e256      	b.n	8005a50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80de 	beq.w	8005768 <HAL_UART_IRQHandler+0x22c>
 80055ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d106      	bne.n	80055c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80d1 	beq.w	8005768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_UART_IRQHandler+0xae>
 80055d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_UART_IRQHandler+0xd2>
 80055f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <HAL_UART_IRQHandler+0xf6>
 800561a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0204 	orr.w	r2, r3, #4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d011      	beq.n	8005662 <HAL_UART_IRQHandler+0x126>
 800563e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d105      	bne.n	8005656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800564a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0208 	orr.w	r2, r3, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 81ed 	beq.w	8005a46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800566c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_UART_IRQHandler+0x14e>
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fb9c 	bl	8005dc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005694:	2b40      	cmp	r3, #64	; 0x40
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <HAL_UART_IRQHandler+0x17a>
 80056ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d04f      	beq.n	8005756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 faa4 	bl	8005c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d141      	bne.n	800574e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3314      	adds	r3, #20
 80056d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800570e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1d9      	bne.n	80056ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	2b00      	cmp	r3, #0
 800571c:	d013      	beq.n	8005746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	4a7d      	ldr	r2, [pc, #500]	; (8005918 <HAL_UART_IRQHandler+0x3dc>)
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd fb99 	bl	8002e62 <HAL_DMA_Abort_IT>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005740:	4610      	mov	r0, r2
 8005742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	e00e      	b.n	8005764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f99a 	bl	8005a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	e00a      	b.n	8005764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f996 	bl	8005a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	e006      	b.n	8005764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f992 	bl	8005a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005762:	e170      	b.n	8005a46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	bf00      	nop
    return;
 8005766:	e16e      	b.n	8005a46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	2b01      	cmp	r3, #1
 800576e:	f040 814a 	bne.w	8005a06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8143 	beq.w	8005a06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 813c 	beq.w	8005a06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	60bb      	str	r3, [r7, #8]
 80057a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	f040 80b4 	bne.w	800591c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8140 	beq.w	8005a4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057d2:	429a      	cmp	r2, r3
 80057d4:	f080 8139 	bcs.w	8005a4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ea:	f000 8088 	beq.w	80058fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800581a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800581e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1d9      	bne.n	80057ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800584a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800584c:	f023 0301 	bic.w	r3, r3, #1
 8005850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3314      	adds	r3, #20
 800585a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800585e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e1      	bne.n	800583a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3314      	adds	r3, #20
 800587c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800589a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800589c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e3      	bne.n	8005876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ce:	f023 0310 	bic.w	r3, r3, #16
 80058d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80058e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e3      	bne.n	80058bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fd fa42 	bl	8002d82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005906:	b29b      	uxth	r3, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	b29b      	uxth	r3, r3
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8c0 	bl	8005a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005914:	e099      	b.n	8005a4a <HAL_UART_IRQHandler+0x50e>
 8005916:	bf00      	nop
 8005918:	08005ccb 	.word	0x08005ccb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005924:	b29b      	uxth	r3, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 808b 	beq.w	8005a4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8086 	beq.w	8005a4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005966:	647a      	str	r2, [r7, #68]	; 0x44
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800596c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e3      	bne.n	8005942 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	623b      	str	r3, [r7, #32]
   return(result);
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3314      	adds	r3, #20
 800599a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800599e:	633a      	str	r2, [r7, #48]	; 0x30
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e3      	bne.n	800597a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059e4:	61fa      	str	r2, [r7, #28]
 80059e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	617b      	str	r3, [r7, #20]
   return(result);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e3      	bne.n	80059c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f848 	bl	8005a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a04:	e023      	b.n	8005a4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <HAL_UART_IRQHandler+0x4ea>
 8005a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f967 	bl	8005cf2 <UART_Transmit_IT>
    return;
 8005a24:	e014      	b.n	8005a50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <HAL_UART_IRQHandler+0x514>
 8005a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9a7 	bl	8005d92 <UART_EndTransmit_IT>
    return;
 8005a44:	e004      	b.n	8005a50 <HAL_UART_IRQHandler+0x514>
    return;
 8005a46:	bf00      	nop
 8005a48:	e002      	b.n	8005a50 <HAL_UART_IRQHandler+0x514>
      return;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_IRQHandler+0x514>
      return;
 8005a4e:	bf00      	nop
  }
}
 8005a50:	37e8      	adds	r7, #232	; 0xe8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop

08005a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b090      	sub	sp, #64	; 0x40
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abc:	e050      	b.n	8005b60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac4:	d04c      	beq.n	8005b60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <UART_WaitOnFlagUntilTimeout+0x30>
 8005acc:	f7fc fe22 	bl	8002714 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d241      	bcs.n	8005b60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005afc:	637a      	str	r2, [r7, #52]	; 0x34
 8005afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3314      	adds	r3, #20
 8005b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b30:	623a      	str	r2, [r7, #32]
 8005b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	69f9      	ldr	r1, [r7, #28]
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e00f      	b.n	8005b80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d09f      	beq.n	8005abe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3740      	adds	r7, #64	; 0x40
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	88fa      	ldrh	r2, [r7, #6]
 8005ba6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2222      	movs	r2, #34	; 0x22
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0220 	orr.w	r2, r2, #32
 8005bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b095      	sub	sp, #84	; 0x54
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c2c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d119      	bne.n	8005cb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f023 0310 	bic.w	r3, r3, #16
 8005c92:	647b      	str	r3, [r7, #68]	; 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9c:	61ba      	str	r2, [r7, #24]
 8005c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6979      	ldr	r1, [r7, #20]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cbe:	bf00      	nop
 8005cc0:	3754      	adds	r7, #84	; 0x54
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fecb 	bl	8005a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b21      	cmp	r3, #33	; 0x21
 8005d04:	d13e      	bne.n	8005d84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0e:	d114      	bne.n	8005d3a <UART_Transmit_IT+0x48>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d110      	bne.n	8005d3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	1c9a      	adds	r2, r3, #2
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]
 8005d38:	e008      	b.n	8005d4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6211      	str	r1, [r2, #32]
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fe50 	bl	8005a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b08c      	sub	sp, #48	; 0x30
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b22      	cmp	r3, #34	; 0x22
 8005dd4:	f040 80ab 	bne.w	8005f2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de0:	d117      	bne.n	8005e12 <UART_Receive_IT+0x50>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d113      	bne.n	8005e12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e10:	e026      	b.n	8005e60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e24:	d007      	beq.n	8005e36 <UART_Receive_IT+0x74>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <UART_Receive_IT+0x82>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	e008      	b.n	8005e56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d15a      	bne.n	8005f2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0220 	bic.w	r2, r2, #32
 8005e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d135      	bne.n	8005f20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f023 0310 	bic.w	r3, r3, #16
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eda:	623a      	str	r2, [r7, #32]
 8005edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d10a      	bne.n	8005f12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff fdbb 	bl	8005a94 <HAL_UARTEx_RxEventCallback>
 8005f1e:	e002      	b.n	8005f26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff fda3 	bl	8005a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e002      	b.n	8005f30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
  }
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3730      	adds	r7, #48	; 0x30
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f3c:	b0c0      	sub	sp, #256	; 0x100
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	68d9      	ldr	r1, [r3, #12]
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	ea40 0301 	orr.w	r3, r0, r1
 8005f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f90:	f021 010c 	bic.w	r1, r1, #12
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb2:	6999      	ldr	r1, [r3, #24]
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	ea40 0301 	orr.w	r3, r0, r1
 8005fbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b8f      	ldr	r3, [pc, #572]	; (8006204 <UART_SetConfig+0x2cc>)
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d005      	beq.n	8005fd8 <UART_SetConfig+0xa0>
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b8d      	ldr	r3, [pc, #564]	; (8006208 <UART_SetConfig+0x2d0>)
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d104      	bne.n	8005fe2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fd8:	f7fe fcbe 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 8005fdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fe0:	e003      	b.n	8005fea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fe2:	f7fe fca5 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8005fe6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff4:	f040 810c 	bne.w	8006210 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006002:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006006:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	1891      	adds	r1, r2, r2
 8006010:	65b9      	str	r1, [r7, #88]	; 0x58
 8006012:	415b      	adcs	r3, r3
 8006014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006016:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800601a:	4621      	mov	r1, r4
 800601c:	eb12 0801 	adds.w	r8, r2, r1
 8006020:	4629      	mov	r1, r5
 8006022:	eb43 0901 	adc.w	r9, r3, r1
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800603a:	4690      	mov	r8, r2
 800603c:	4699      	mov	r9, r3
 800603e:	4623      	mov	r3, r4
 8006040:	eb18 0303 	adds.w	r3, r8, r3
 8006044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006048:	462b      	mov	r3, r5
 800604a:	eb49 0303 	adc.w	r3, r9, r3
 800604e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800605e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006062:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006066:	460b      	mov	r3, r1
 8006068:	18db      	adds	r3, r3, r3
 800606a:	653b      	str	r3, [r7, #80]	; 0x50
 800606c:	4613      	mov	r3, r2
 800606e:	eb42 0303 	adc.w	r3, r2, r3
 8006072:	657b      	str	r3, [r7, #84]	; 0x54
 8006074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800607c:	f7fa fe84 	bl	8000d88 <__aeabi_uldivmod>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4b61      	ldr	r3, [pc, #388]	; (800620c <UART_SetConfig+0x2d4>)
 8006086:	fba3 2302 	umull	r2, r3, r3, r2
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	011c      	lsls	r4, r3, #4
 800608e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006092:	2200      	movs	r2, #0
 8006094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006098:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800609c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060a0:	4642      	mov	r2, r8
 80060a2:	464b      	mov	r3, r9
 80060a4:	1891      	adds	r1, r2, r2
 80060a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80060a8:	415b      	adcs	r3, r3
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060b0:	4641      	mov	r1, r8
 80060b2:	eb12 0a01 	adds.w	sl, r2, r1
 80060b6:	4649      	mov	r1, r9
 80060b8:	eb43 0b01 	adc.w	fp, r3, r1
 80060bc:	f04f 0200 	mov.w	r2, #0
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d0:	4692      	mov	sl, r2
 80060d2:	469b      	mov	fp, r3
 80060d4:	4643      	mov	r3, r8
 80060d6:	eb1a 0303 	adds.w	r3, sl, r3
 80060da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060de:	464b      	mov	r3, r9
 80060e0:	eb4b 0303 	adc.w	r3, fp, r3
 80060e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060fc:	460b      	mov	r3, r1
 80060fe:	18db      	adds	r3, r3, r3
 8006100:	643b      	str	r3, [r7, #64]	; 0x40
 8006102:	4613      	mov	r3, r2
 8006104:	eb42 0303 	adc.w	r3, r2, r3
 8006108:	647b      	str	r3, [r7, #68]	; 0x44
 800610a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800610e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006112:	f7fa fe39 	bl	8000d88 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4611      	mov	r1, r2
 800611c:	4b3b      	ldr	r3, [pc, #236]	; (800620c <UART_SetConfig+0x2d4>)
 800611e:	fba3 2301 	umull	r2, r3, r3, r1
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2264      	movs	r2, #100	; 0x64
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	1acb      	subs	r3, r1, r3
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006132:	4b36      	ldr	r3, [pc, #216]	; (800620c <UART_SetConfig+0x2d4>)
 8006134:	fba3 2302 	umull	r2, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006140:	441c      	add	r4, r3
 8006142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800614c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006150:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	1891      	adds	r1, r2, r2
 800615a:	63b9      	str	r1, [r7, #56]	; 0x38
 800615c:	415b      	adcs	r3, r3
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006164:	4641      	mov	r1, r8
 8006166:	1851      	adds	r1, r2, r1
 8006168:	6339      	str	r1, [r7, #48]	; 0x30
 800616a:	4649      	mov	r1, r9
 800616c:	414b      	adcs	r3, r1
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800617c:	4659      	mov	r1, fp
 800617e:	00cb      	lsls	r3, r1, #3
 8006180:	4651      	mov	r1, sl
 8006182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006186:	4651      	mov	r1, sl
 8006188:	00ca      	lsls	r2, r1, #3
 800618a:	4610      	mov	r0, r2
 800618c:	4619      	mov	r1, r3
 800618e:	4603      	mov	r3, r0
 8006190:	4642      	mov	r2, r8
 8006192:	189b      	adds	r3, r3, r2
 8006194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006198:	464b      	mov	r3, r9
 800619a:	460a      	mov	r2, r1
 800619c:	eb42 0303 	adc.w	r3, r2, r3
 80061a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061b8:	460b      	mov	r3, r1
 80061ba:	18db      	adds	r3, r3, r3
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061be:	4613      	mov	r3, r2
 80061c0:	eb42 0303 	adc.w	r3, r2, r3
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061ce:	f7fa fddb 	bl	8000d88 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4b0d      	ldr	r3, [pc, #52]	; (800620c <UART_SetConfig+0x2d4>)
 80061d8:	fba3 1302 	umull	r1, r3, r3, r2
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	2164      	movs	r1, #100	; 0x64
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	3332      	adds	r3, #50	; 0x32
 80061ea:	4a08      	ldr	r2, [pc, #32]	; (800620c <UART_SetConfig+0x2d4>)
 80061ec:	fba2 2303 	umull	r2, r3, r2, r3
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	f003 0207 	and.w	r2, r3, #7
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4422      	add	r2, r4
 80061fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006200:	e105      	b.n	800640e <UART_SetConfig+0x4d6>
 8006202:	bf00      	nop
 8006204:	40011000 	.word	0x40011000
 8006208:	40011400 	.word	0x40011400
 800620c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006214:	2200      	movs	r2, #0
 8006216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800621a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800621e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006222:	4642      	mov	r2, r8
 8006224:	464b      	mov	r3, r9
 8006226:	1891      	adds	r1, r2, r2
 8006228:	6239      	str	r1, [r7, #32]
 800622a:	415b      	adcs	r3, r3
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006232:	4641      	mov	r1, r8
 8006234:	1854      	adds	r4, r2, r1
 8006236:	4649      	mov	r1, r9
 8006238:	eb43 0501 	adc.w	r5, r3, r1
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	00eb      	lsls	r3, r5, #3
 8006246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800624a:	00e2      	lsls	r2, r4, #3
 800624c:	4614      	mov	r4, r2
 800624e:	461d      	mov	r5, r3
 8006250:	4643      	mov	r3, r8
 8006252:	18e3      	adds	r3, r4, r3
 8006254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006258:	464b      	mov	r3, r9
 800625a:	eb45 0303 	adc.w	r3, r5, r3
 800625e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800626e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800627e:	4629      	mov	r1, r5
 8006280:	008b      	lsls	r3, r1, #2
 8006282:	4621      	mov	r1, r4
 8006284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006288:	4621      	mov	r1, r4
 800628a:	008a      	lsls	r2, r1, #2
 800628c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006290:	f7fa fd7a 	bl	8000d88 <__aeabi_uldivmod>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4b60      	ldr	r3, [pc, #384]	; (800641c <UART_SetConfig+0x4e4>)
 800629a:	fba3 2302 	umull	r2, r3, r3, r2
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	011c      	lsls	r4, r3, #4
 80062a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062b4:	4642      	mov	r2, r8
 80062b6:	464b      	mov	r3, r9
 80062b8:	1891      	adds	r1, r2, r2
 80062ba:	61b9      	str	r1, [r7, #24]
 80062bc:	415b      	adcs	r3, r3
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062c4:	4641      	mov	r1, r8
 80062c6:	1851      	adds	r1, r2, r1
 80062c8:	6139      	str	r1, [r7, #16]
 80062ca:	4649      	mov	r1, r9
 80062cc:	414b      	adcs	r3, r1
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062dc:	4659      	mov	r1, fp
 80062de:	00cb      	lsls	r3, r1, #3
 80062e0:	4651      	mov	r1, sl
 80062e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e6:	4651      	mov	r1, sl
 80062e8:	00ca      	lsls	r2, r1, #3
 80062ea:	4610      	mov	r0, r2
 80062ec:	4619      	mov	r1, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	4642      	mov	r2, r8
 80062f2:	189b      	adds	r3, r3, r2
 80062f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062f8:	464b      	mov	r3, r9
 80062fa:	460a      	mov	r2, r1
 80062fc:	eb42 0303 	adc.w	r3, r2, r3
 8006300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	67bb      	str	r3, [r7, #120]	; 0x78
 800630e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800631c:	4649      	mov	r1, r9
 800631e:	008b      	lsls	r3, r1, #2
 8006320:	4641      	mov	r1, r8
 8006322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006326:	4641      	mov	r1, r8
 8006328:	008a      	lsls	r2, r1, #2
 800632a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800632e:	f7fa fd2b 	bl	8000d88 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4b39      	ldr	r3, [pc, #228]	; (800641c <UART_SetConfig+0x4e4>)
 8006338:	fba3 1302 	umull	r1, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	2164      	movs	r1, #100	; 0x64
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	3332      	adds	r3, #50	; 0x32
 800634a:	4a34      	ldr	r2, [pc, #208]	; (800641c <UART_SetConfig+0x4e4>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006356:	441c      	add	r4, r3
 8006358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800635c:	2200      	movs	r2, #0
 800635e:	673b      	str	r3, [r7, #112]	; 0x70
 8006360:	677a      	str	r2, [r7, #116]	; 0x74
 8006362:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006366:	4642      	mov	r2, r8
 8006368:	464b      	mov	r3, r9
 800636a:	1891      	adds	r1, r2, r2
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	415b      	adcs	r3, r3
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006376:	4641      	mov	r1, r8
 8006378:	1851      	adds	r1, r2, r1
 800637a:	6039      	str	r1, [r7, #0]
 800637c:	4649      	mov	r1, r9
 800637e:	414b      	adcs	r3, r1
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800638e:	4659      	mov	r1, fp
 8006390:	00cb      	lsls	r3, r1, #3
 8006392:	4651      	mov	r1, sl
 8006394:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006398:	4651      	mov	r1, sl
 800639a:	00ca      	lsls	r2, r1, #3
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	4603      	mov	r3, r0
 80063a2:	4642      	mov	r2, r8
 80063a4:	189b      	adds	r3, r3, r2
 80063a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a8:	464b      	mov	r3, r9
 80063aa:	460a      	mov	r2, r1
 80063ac:	eb42 0303 	adc.w	r3, r2, r3
 80063b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	663b      	str	r3, [r7, #96]	; 0x60
 80063bc:	667a      	str	r2, [r7, #100]	; 0x64
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063ca:	4649      	mov	r1, r9
 80063cc:	008b      	lsls	r3, r1, #2
 80063ce:	4641      	mov	r1, r8
 80063d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d4:	4641      	mov	r1, r8
 80063d6:	008a      	lsls	r2, r1, #2
 80063d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063dc:	f7fa fcd4 	bl	8000d88 <__aeabi_uldivmod>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4b0d      	ldr	r3, [pc, #52]	; (800641c <UART_SetConfig+0x4e4>)
 80063e6:	fba3 1302 	umull	r1, r3, r3, r2
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	2164      	movs	r1, #100	; 0x64
 80063ee:	fb01 f303 	mul.w	r3, r1, r3
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	3332      	adds	r3, #50	; 0x32
 80063f8:	4a08      	ldr	r2, [pc, #32]	; (800641c <UART_SetConfig+0x4e4>)
 80063fa:	fba2 2303 	umull	r2, r3, r2, r3
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	f003 020f 	and.w	r2, r3, #15
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4422      	add	r2, r4
 800640c:	609a      	str	r2, [r3, #8]
}
 800640e:	bf00      	nop
 8006410:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006414:	46bd      	mov	sp, r7
 8006416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800641a:	bf00      	nop
 800641c:	51eb851f 	.word	0x51eb851f

08006420 <__errno>:
 8006420:	4b01      	ldr	r3, [pc, #4]	; (8006428 <__errno+0x8>)
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	2000000c 	.word	0x2000000c

0800642c <__libc_init_array>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	4d0d      	ldr	r5, [pc, #52]	; (8006464 <__libc_init_array+0x38>)
 8006430:	4c0d      	ldr	r4, [pc, #52]	; (8006468 <__libc_init_array+0x3c>)
 8006432:	1b64      	subs	r4, r4, r5
 8006434:	10a4      	asrs	r4, r4, #2
 8006436:	2600      	movs	r6, #0
 8006438:	42a6      	cmp	r6, r4
 800643a:	d109      	bne.n	8006450 <__libc_init_array+0x24>
 800643c:	4d0b      	ldr	r5, [pc, #44]	; (800646c <__libc_init_array+0x40>)
 800643e:	4c0c      	ldr	r4, [pc, #48]	; (8006470 <__libc_init_array+0x44>)
 8006440:	f005 fc48 	bl	800bcd4 <_init>
 8006444:	1b64      	subs	r4, r4, r5
 8006446:	10a4      	asrs	r4, r4, #2
 8006448:	2600      	movs	r6, #0
 800644a:	42a6      	cmp	r6, r4
 800644c:	d105      	bne.n	800645a <__libc_init_array+0x2e>
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	f855 3b04 	ldr.w	r3, [r5], #4
 8006454:	4798      	blx	r3
 8006456:	3601      	adds	r6, #1
 8006458:	e7ee      	b.n	8006438 <__libc_init_array+0xc>
 800645a:	f855 3b04 	ldr.w	r3, [r5], #4
 800645e:	4798      	blx	r3
 8006460:	3601      	adds	r6, #1
 8006462:	e7f2      	b.n	800644a <__libc_init_array+0x1e>
 8006464:	0800c378 	.word	0x0800c378
 8006468:	0800c378 	.word	0x0800c378
 800646c:	0800c378 	.word	0x0800c378
 8006470:	0800c37c 	.word	0x0800c37c

08006474 <memcmp>:
 8006474:	b510      	push	{r4, lr}
 8006476:	3901      	subs	r1, #1
 8006478:	4402      	add	r2, r0
 800647a:	4290      	cmp	r0, r2
 800647c:	d101      	bne.n	8006482 <memcmp+0xe>
 800647e:	2000      	movs	r0, #0
 8006480:	e005      	b.n	800648e <memcmp+0x1a>
 8006482:	7803      	ldrb	r3, [r0, #0]
 8006484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006488:	42a3      	cmp	r3, r4
 800648a:	d001      	beq.n	8006490 <memcmp+0x1c>
 800648c:	1b18      	subs	r0, r3, r4
 800648e:	bd10      	pop	{r4, pc}
 8006490:	3001      	adds	r0, #1
 8006492:	e7f2      	b.n	800647a <memcmp+0x6>

08006494 <memset>:
 8006494:	4402      	add	r2, r0
 8006496:	4603      	mov	r3, r0
 8006498:	4293      	cmp	r3, r2
 800649a:	d100      	bne.n	800649e <memset+0xa>
 800649c:	4770      	bx	lr
 800649e:	f803 1b01 	strb.w	r1, [r3], #1
 80064a2:	e7f9      	b.n	8006498 <memset+0x4>

080064a4 <__cvt>:
 80064a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	ec55 4b10 	vmov	r4, r5, d0
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	460e      	mov	r6, r1
 80064b0:	4619      	mov	r1, r3
 80064b2:	462b      	mov	r3, r5
 80064b4:	bfbb      	ittet	lt
 80064b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064ba:	461d      	movlt	r5, r3
 80064bc:	2300      	movge	r3, #0
 80064be:	232d      	movlt	r3, #45	; 0x2d
 80064c0:	700b      	strb	r3, [r1, #0]
 80064c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064c8:	4691      	mov	r9, r2
 80064ca:	f023 0820 	bic.w	r8, r3, #32
 80064ce:	bfbc      	itt	lt
 80064d0:	4622      	movlt	r2, r4
 80064d2:	4614      	movlt	r4, r2
 80064d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064d8:	d005      	beq.n	80064e6 <__cvt+0x42>
 80064da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064de:	d100      	bne.n	80064e2 <__cvt+0x3e>
 80064e0:	3601      	adds	r6, #1
 80064e2:	2102      	movs	r1, #2
 80064e4:	e000      	b.n	80064e8 <__cvt+0x44>
 80064e6:	2103      	movs	r1, #3
 80064e8:	ab03      	add	r3, sp, #12
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	ab02      	add	r3, sp, #8
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	ec45 4b10 	vmov	d0, r4, r5
 80064f4:	4653      	mov	r3, sl
 80064f6:	4632      	mov	r2, r6
 80064f8:	f001 fefa 	bl	80082f0 <_dtoa_r>
 80064fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006500:	4607      	mov	r7, r0
 8006502:	d102      	bne.n	800650a <__cvt+0x66>
 8006504:	f019 0f01 	tst.w	r9, #1
 8006508:	d022      	beq.n	8006550 <__cvt+0xac>
 800650a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800650e:	eb07 0906 	add.w	r9, r7, r6
 8006512:	d110      	bne.n	8006536 <__cvt+0x92>
 8006514:	783b      	ldrb	r3, [r7, #0]
 8006516:	2b30      	cmp	r3, #48	; 0x30
 8006518:	d10a      	bne.n	8006530 <__cvt+0x8c>
 800651a:	2200      	movs	r2, #0
 800651c:	2300      	movs	r3, #0
 800651e:	4620      	mov	r0, r4
 8006520:	4629      	mov	r1, r5
 8006522:	f7fa fb01 	bl	8000b28 <__aeabi_dcmpeq>
 8006526:	b918      	cbnz	r0, 8006530 <__cvt+0x8c>
 8006528:	f1c6 0601 	rsb	r6, r6, #1
 800652c:	f8ca 6000 	str.w	r6, [sl]
 8006530:	f8da 3000 	ldr.w	r3, [sl]
 8006534:	4499      	add	r9, r3
 8006536:	2200      	movs	r2, #0
 8006538:	2300      	movs	r3, #0
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7fa faf3 	bl	8000b28 <__aeabi_dcmpeq>
 8006542:	b108      	cbz	r0, 8006548 <__cvt+0xa4>
 8006544:	f8cd 900c 	str.w	r9, [sp, #12]
 8006548:	2230      	movs	r2, #48	; 0x30
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	454b      	cmp	r3, r9
 800654e:	d307      	bcc.n	8006560 <__cvt+0xbc>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006554:	1bdb      	subs	r3, r3, r7
 8006556:	4638      	mov	r0, r7
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	b004      	add	sp, #16
 800655c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006560:	1c59      	adds	r1, r3, #1
 8006562:	9103      	str	r1, [sp, #12]
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e7f0      	b.n	800654a <__cvt+0xa6>

08006568 <__exponent>:
 8006568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800656a:	4603      	mov	r3, r0
 800656c:	2900      	cmp	r1, #0
 800656e:	bfb8      	it	lt
 8006570:	4249      	neglt	r1, r1
 8006572:	f803 2b02 	strb.w	r2, [r3], #2
 8006576:	bfb4      	ite	lt
 8006578:	222d      	movlt	r2, #45	; 0x2d
 800657a:	222b      	movge	r2, #43	; 0x2b
 800657c:	2909      	cmp	r1, #9
 800657e:	7042      	strb	r2, [r0, #1]
 8006580:	dd2a      	ble.n	80065d8 <__exponent+0x70>
 8006582:	f10d 0407 	add.w	r4, sp, #7
 8006586:	46a4      	mov	ip, r4
 8006588:	270a      	movs	r7, #10
 800658a:	46a6      	mov	lr, r4
 800658c:	460a      	mov	r2, r1
 800658e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006592:	fb07 1516 	mls	r5, r7, r6, r1
 8006596:	3530      	adds	r5, #48	; 0x30
 8006598:	2a63      	cmp	r2, #99	; 0x63
 800659a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800659e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065a2:	4631      	mov	r1, r6
 80065a4:	dcf1      	bgt.n	800658a <__exponent+0x22>
 80065a6:	3130      	adds	r1, #48	; 0x30
 80065a8:	f1ae 0502 	sub.w	r5, lr, #2
 80065ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065b0:	1c44      	adds	r4, r0, #1
 80065b2:	4629      	mov	r1, r5
 80065b4:	4561      	cmp	r1, ip
 80065b6:	d30a      	bcc.n	80065ce <__exponent+0x66>
 80065b8:	f10d 0209 	add.w	r2, sp, #9
 80065bc:	eba2 020e 	sub.w	r2, r2, lr
 80065c0:	4565      	cmp	r5, ip
 80065c2:	bf88      	it	hi
 80065c4:	2200      	movhi	r2, #0
 80065c6:	4413      	add	r3, r2
 80065c8:	1a18      	subs	r0, r3, r0
 80065ca:	b003      	add	sp, #12
 80065cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065d6:	e7ed      	b.n	80065b4 <__exponent+0x4c>
 80065d8:	2330      	movs	r3, #48	; 0x30
 80065da:	3130      	adds	r1, #48	; 0x30
 80065dc:	7083      	strb	r3, [r0, #2]
 80065de:	70c1      	strb	r1, [r0, #3]
 80065e0:	1d03      	adds	r3, r0, #4
 80065e2:	e7f1      	b.n	80065c8 <__exponent+0x60>

080065e4 <_printf_float>:
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	ed2d 8b02 	vpush	{d8}
 80065ec:	b08d      	sub	sp, #52	; 0x34
 80065ee:	460c      	mov	r4, r1
 80065f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065f4:	4616      	mov	r6, r2
 80065f6:	461f      	mov	r7, r3
 80065f8:	4605      	mov	r5, r0
 80065fa:	f003 f98d 	bl	8009918 <_localeconv_r>
 80065fe:	f8d0 a000 	ldr.w	sl, [r0]
 8006602:	4650      	mov	r0, sl
 8006604:	f7f9 fe0e 	bl	8000224 <strlen>
 8006608:	2300      	movs	r3, #0
 800660a:	930a      	str	r3, [sp, #40]	; 0x28
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	9305      	str	r3, [sp, #20]
 8006610:	f8d8 3000 	ldr.w	r3, [r8]
 8006614:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006618:	3307      	adds	r3, #7
 800661a:	f023 0307 	bic.w	r3, r3, #7
 800661e:	f103 0208 	add.w	r2, r3, #8
 8006622:	f8c8 2000 	str.w	r2, [r8]
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800662e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006632:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006636:	9307      	str	r3, [sp, #28]
 8006638:	f8cd 8018 	str.w	r8, [sp, #24]
 800663c:	ee08 0a10 	vmov	s16, r0
 8006640:	4b9f      	ldr	r3, [pc, #636]	; (80068c0 <_printf_float+0x2dc>)
 8006642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800664a:	f7fa fa9f 	bl	8000b8c <__aeabi_dcmpun>
 800664e:	bb88      	cbnz	r0, 80066b4 <_printf_float+0xd0>
 8006650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006654:	4b9a      	ldr	r3, [pc, #616]	; (80068c0 <_printf_float+0x2dc>)
 8006656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800665a:	f7fa fa79 	bl	8000b50 <__aeabi_dcmple>
 800665e:	bb48      	cbnz	r0, 80066b4 <_printf_float+0xd0>
 8006660:	2200      	movs	r2, #0
 8006662:	2300      	movs	r3, #0
 8006664:	4640      	mov	r0, r8
 8006666:	4649      	mov	r1, r9
 8006668:	f7fa fa68 	bl	8000b3c <__aeabi_dcmplt>
 800666c:	b110      	cbz	r0, 8006674 <_printf_float+0x90>
 800666e:	232d      	movs	r3, #45	; 0x2d
 8006670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006674:	4b93      	ldr	r3, [pc, #588]	; (80068c4 <_printf_float+0x2e0>)
 8006676:	4894      	ldr	r0, [pc, #592]	; (80068c8 <_printf_float+0x2e4>)
 8006678:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800667c:	bf94      	ite	ls
 800667e:	4698      	movls	r8, r3
 8006680:	4680      	movhi	r8, r0
 8006682:	2303      	movs	r3, #3
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	9b05      	ldr	r3, [sp, #20]
 8006688:	f023 0204 	bic.w	r2, r3, #4
 800668c:	6022      	str	r2, [r4, #0]
 800668e:	f04f 0900 	mov.w	r9, #0
 8006692:	9700      	str	r7, [sp, #0]
 8006694:	4633      	mov	r3, r6
 8006696:	aa0b      	add	r2, sp, #44	; 0x2c
 8006698:	4621      	mov	r1, r4
 800669a:	4628      	mov	r0, r5
 800669c:	f000 f9d8 	bl	8006a50 <_printf_common>
 80066a0:	3001      	adds	r0, #1
 80066a2:	f040 8090 	bne.w	80067c6 <_printf_float+0x1e2>
 80066a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066aa:	b00d      	add	sp, #52	; 0x34
 80066ac:	ecbd 8b02 	vpop	{d8}
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b4:	4642      	mov	r2, r8
 80066b6:	464b      	mov	r3, r9
 80066b8:	4640      	mov	r0, r8
 80066ba:	4649      	mov	r1, r9
 80066bc:	f7fa fa66 	bl	8000b8c <__aeabi_dcmpun>
 80066c0:	b140      	cbz	r0, 80066d4 <_printf_float+0xf0>
 80066c2:	464b      	mov	r3, r9
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bfbc      	itt	lt
 80066c8:	232d      	movlt	r3, #45	; 0x2d
 80066ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066ce:	487f      	ldr	r0, [pc, #508]	; (80068cc <_printf_float+0x2e8>)
 80066d0:	4b7f      	ldr	r3, [pc, #508]	; (80068d0 <_printf_float+0x2ec>)
 80066d2:	e7d1      	b.n	8006678 <_printf_float+0x94>
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066da:	9206      	str	r2, [sp, #24]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	d13f      	bne.n	8006760 <_printf_float+0x17c>
 80066e0:	2306      	movs	r3, #6
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	9b05      	ldr	r3, [sp, #20]
 80066e6:	6861      	ldr	r1, [r4, #4]
 80066e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066ec:	2300      	movs	r3, #0
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	ab0a      	add	r3, sp, #40	; 0x28
 80066f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066f6:	ab09      	add	r3, sp, #36	; 0x24
 80066f8:	ec49 8b10 	vmov	d0, r8, r9
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006704:	4628      	mov	r0, r5
 8006706:	f7ff fecd 	bl	80064a4 <__cvt>
 800670a:	9b06      	ldr	r3, [sp, #24]
 800670c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800670e:	2b47      	cmp	r3, #71	; 0x47
 8006710:	4680      	mov	r8, r0
 8006712:	d108      	bne.n	8006726 <_printf_float+0x142>
 8006714:	1cc8      	adds	r0, r1, #3
 8006716:	db02      	blt.n	800671e <_printf_float+0x13a>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	4299      	cmp	r1, r3
 800671c:	dd41      	ble.n	80067a2 <_printf_float+0x1be>
 800671e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006722:	fa5f fb8b 	uxtb.w	fp, fp
 8006726:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800672a:	d820      	bhi.n	800676e <_printf_float+0x18a>
 800672c:	3901      	subs	r1, #1
 800672e:	465a      	mov	r2, fp
 8006730:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006734:	9109      	str	r1, [sp, #36]	; 0x24
 8006736:	f7ff ff17 	bl	8006568 <__exponent>
 800673a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800673c:	1813      	adds	r3, r2, r0
 800673e:	2a01      	cmp	r2, #1
 8006740:	4681      	mov	r9, r0
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	dc02      	bgt.n	800674c <_printf_float+0x168>
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	07d2      	lsls	r2, r2, #31
 800674a:	d501      	bpl.n	8006750 <_printf_float+0x16c>
 800674c:	3301      	adds	r3, #1
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006754:	2b00      	cmp	r3, #0
 8006756:	d09c      	beq.n	8006692 <_printf_float+0xae>
 8006758:	232d      	movs	r3, #45	; 0x2d
 800675a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675e:	e798      	b.n	8006692 <_printf_float+0xae>
 8006760:	9a06      	ldr	r2, [sp, #24]
 8006762:	2a47      	cmp	r2, #71	; 0x47
 8006764:	d1be      	bne.n	80066e4 <_printf_float+0x100>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1bc      	bne.n	80066e4 <_printf_float+0x100>
 800676a:	2301      	movs	r3, #1
 800676c:	e7b9      	b.n	80066e2 <_printf_float+0xfe>
 800676e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006772:	d118      	bne.n	80067a6 <_printf_float+0x1c2>
 8006774:	2900      	cmp	r1, #0
 8006776:	6863      	ldr	r3, [r4, #4]
 8006778:	dd0b      	ble.n	8006792 <_printf_float+0x1ae>
 800677a:	6121      	str	r1, [r4, #16]
 800677c:	b913      	cbnz	r3, 8006784 <_printf_float+0x1a0>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d502      	bpl.n	800678a <_printf_float+0x1a6>
 8006784:	3301      	adds	r3, #1
 8006786:	440b      	add	r3, r1
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	65a1      	str	r1, [r4, #88]	; 0x58
 800678c:	f04f 0900 	mov.w	r9, #0
 8006790:	e7de      	b.n	8006750 <_printf_float+0x16c>
 8006792:	b913      	cbnz	r3, 800679a <_printf_float+0x1b6>
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	07d2      	lsls	r2, r2, #31
 8006798:	d501      	bpl.n	800679e <_printf_float+0x1ba>
 800679a:	3302      	adds	r3, #2
 800679c:	e7f4      	b.n	8006788 <_printf_float+0x1a4>
 800679e:	2301      	movs	r3, #1
 80067a0:	e7f2      	b.n	8006788 <_printf_float+0x1a4>
 80067a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a8:	4299      	cmp	r1, r3
 80067aa:	db05      	blt.n	80067b8 <_printf_float+0x1d4>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	6121      	str	r1, [r4, #16]
 80067b0:	07d8      	lsls	r0, r3, #31
 80067b2:	d5ea      	bpl.n	800678a <_printf_float+0x1a6>
 80067b4:	1c4b      	adds	r3, r1, #1
 80067b6:	e7e7      	b.n	8006788 <_printf_float+0x1a4>
 80067b8:	2900      	cmp	r1, #0
 80067ba:	bfd4      	ite	le
 80067bc:	f1c1 0202 	rsble	r2, r1, #2
 80067c0:	2201      	movgt	r2, #1
 80067c2:	4413      	add	r3, r2
 80067c4:	e7e0      	b.n	8006788 <_printf_float+0x1a4>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	055a      	lsls	r2, r3, #21
 80067ca:	d407      	bmi.n	80067dc <_printf_float+0x1f8>
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	4642      	mov	r2, r8
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	d12c      	bne.n	8006834 <_printf_float+0x250>
 80067da:	e764      	b.n	80066a6 <_printf_float+0xc2>
 80067dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067e0:	f240 80e0 	bls.w	80069a4 <_printf_float+0x3c0>
 80067e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067e8:	2200      	movs	r2, #0
 80067ea:	2300      	movs	r3, #0
 80067ec:	f7fa f99c 	bl	8000b28 <__aeabi_dcmpeq>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d034      	beq.n	800685e <_printf_float+0x27a>
 80067f4:	4a37      	ldr	r2, [pc, #220]	; (80068d4 <_printf_float+0x2f0>)
 80067f6:	2301      	movs	r3, #1
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af51 	beq.w	80066a6 <_printf_float+0xc2>
 8006804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006808:	429a      	cmp	r2, r3
 800680a:	db02      	blt.n	8006812 <_printf_float+0x22e>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	07d8      	lsls	r0, r3, #31
 8006810:	d510      	bpl.n	8006834 <_printf_float+0x250>
 8006812:	ee18 3a10 	vmov	r3, s16
 8006816:	4652      	mov	r2, sl
 8006818:	4631      	mov	r1, r6
 800681a:	4628      	mov	r0, r5
 800681c:	47b8      	blx	r7
 800681e:	3001      	adds	r0, #1
 8006820:	f43f af41 	beq.w	80066a6 <_printf_float+0xc2>
 8006824:	f04f 0800 	mov.w	r8, #0
 8006828:	f104 091a 	add.w	r9, r4, #26
 800682c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682e:	3b01      	subs	r3, #1
 8006830:	4543      	cmp	r3, r8
 8006832:	dc09      	bgt.n	8006848 <_printf_float+0x264>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	079b      	lsls	r3, r3, #30
 8006838:	f100 8105 	bmi.w	8006a46 <_printf_float+0x462>
 800683c:	68e0      	ldr	r0, [r4, #12]
 800683e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006840:	4298      	cmp	r0, r3
 8006842:	bfb8      	it	lt
 8006844:	4618      	movlt	r0, r3
 8006846:	e730      	b.n	80066aa <_printf_float+0xc6>
 8006848:	2301      	movs	r3, #1
 800684a:	464a      	mov	r2, r9
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f af27 	beq.w	80066a6 <_printf_float+0xc2>
 8006858:	f108 0801 	add.w	r8, r8, #1
 800685c:	e7e6      	b.n	800682c <_printf_float+0x248>
 800685e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	dc39      	bgt.n	80068d8 <_printf_float+0x2f4>
 8006864:	4a1b      	ldr	r2, [pc, #108]	; (80068d4 <_printf_float+0x2f0>)
 8006866:	2301      	movs	r3, #1
 8006868:	4631      	mov	r1, r6
 800686a:	4628      	mov	r0, r5
 800686c:	47b8      	blx	r7
 800686e:	3001      	adds	r0, #1
 8006870:	f43f af19 	beq.w	80066a6 <_printf_float+0xc2>
 8006874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006878:	4313      	orrs	r3, r2
 800687a:	d102      	bne.n	8006882 <_printf_float+0x29e>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	07d9      	lsls	r1, r3, #31
 8006880:	d5d8      	bpl.n	8006834 <_printf_float+0x250>
 8006882:	ee18 3a10 	vmov	r3, s16
 8006886:	4652      	mov	r2, sl
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f af09 	beq.w	80066a6 <_printf_float+0xc2>
 8006894:	f04f 0900 	mov.w	r9, #0
 8006898:	f104 0a1a 	add.w	sl, r4, #26
 800689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689e:	425b      	negs	r3, r3
 80068a0:	454b      	cmp	r3, r9
 80068a2:	dc01      	bgt.n	80068a8 <_printf_float+0x2c4>
 80068a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a6:	e792      	b.n	80067ce <_printf_float+0x1ea>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4652      	mov	r2, sl
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f aef7 	beq.w	80066a6 <_printf_float+0xc2>
 80068b8:	f109 0901 	add.w	r9, r9, #1
 80068bc:	e7ee      	b.n	800689c <_printf_float+0x2b8>
 80068be:	bf00      	nop
 80068c0:	7fefffff 	.word	0x7fefffff
 80068c4:	0800be94 	.word	0x0800be94
 80068c8:	0800be98 	.word	0x0800be98
 80068cc:	0800bea0 	.word	0x0800bea0
 80068d0:	0800be9c 	.word	0x0800be9c
 80068d4:	0800bea4 	.word	0x0800bea4
 80068d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068dc:	429a      	cmp	r2, r3
 80068de:	bfa8      	it	ge
 80068e0:	461a      	movge	r2, r3
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	4691      	mov	r9, r2
 80068e6:	dc37      	bgt.n	8006958 <_printf_float+0x374>
 80068e8:	f04f 0b00 	mov.w	fp, #0
 80068ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068f0:	f104 021a 	add.w	r2, r4, #26
 80068f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068f6:	9305      	str	r3, [sp, #20]
 80068f8:	eba3 0309 	sub.w	r3, r3, r9
 80068fc:	455b      	cmp	r3, fp
 80068fe:	dc33      	bgt.n	8006968 <_printf_float+0x384>
 8006900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006904:	429a      	cmp	r2, r3
 8006906:	db3b      	blt.n	8006980 <_printf_float+0x39c>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	07da      	lsls	r2, r3, #31
 800690c:	d438      	bmi.n	8006980 <_printf_float+0x39c>
 800690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006910:	9a05      	ldr	r2, [sp, #20]
 8006912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006914:	1a9a      	subs	r2, r3, r2
 8006916:	eba3 0901 	sub.w	r9, r3, r1
 800691a:	4591      	cmp	r9, r2
 800691c:	bfa8      	it	ge
 800691e:	4691      	movge	r9, r2
 8006920:	f1b9 0f00 	cmp.w	r9, #0
 8006924:	dc35      	bgt.n	8006992 <_printf_float+0x3ae>
 8006926:	f04f 0800 	mov.w	r8, #0
 800692a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800692e:	f104 0a1a 	add.w	sl, r4, #26
 8006932:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	eba3 0309 	sub.w	r3, r3, r9
 800693c:	4543      	cmp	r3, r8
 800693e:	f77f af79 	ble.w	8006834 <_printf_float+0x250>
 8006942:	2301      	movs	r3, #1
 8006944:	4652      	mov	r2, sl
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f aeaa 	beq.w	80066a6 <_printf_float+0xc2>
 8006952:	f108 0801 	add.w	r8, r8, #1
 8006956:	e7ec      	b.n	8006932 <_printf_float+0x34e>
 8006958:	4613      	mov	r3, r2
 800695a:	4631      	mov	r1, r6
 800695c:	4642      	mov	r2, r8
 800695e:	4628      	mov	r0, r5
 8006960:	47b8      	blx	r7
 8006962:	3001      	adds	r0, #1
 8006964:	d1c0      	bne.n	80068e8 <_printf_float+0x304>
 8006966:	e69e      	b.n	80066a6 <_printf_float+0xc2>
 8006968:	2301      	movs	r3, #1
 800696a:	4631      	mov	r1, r6
 800696c:	4628      	mov	r0, r5
 800696e:	9205      	str	r2, [sp, #20]
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f ae97 	beq.w	80066a6 <_printf_float+0xc2>
 8006978:	9a05      	ldr	r2, [sp, #20]
 800697a:	f10b 0b01 	add.w	fp, fp, #1
 800697e:	e7b9      	b.n	80068f4 <_printf_float+0x310>
 8006980:	ee18 3a10 	vmov	r3, s16
 8006984:	4652      	mov	r2, sl
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	d1be      	bne.n	800690e <_printf_float+0x32a>
 8006990:	e689      	b.n	80066a6 <_printf_float+0xc2>
 8006992:	9a05      	ldr	r2, [sp, #20]
 8006994:	464b      	mov	r3, r9
 8006996:	4442      	add	r2, r8
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	d1c1      	bne.n	8006926 <_printf_float+0x342>
 80069a2:	e680      	b.n	80066a6 <_printf_float+0xc2>
 80069a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a6:	2a01      	cmp	r2, #1
 80069a8:	dc01      	bgt.n	80069ae <_printf_float+0x3ca>
 80069aa:	07db      	lsls	r3, r3, #31
 80069ac:	d538      	bpl.n	8006a20 <_printf_float+0x43c>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4642      	mov	r2, r8
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae74 	beq.w	80066a6 <_printf_float+0xc2>
 80069be:	ee18 3a10 	vmov	r3, s16
 80069c2:	4652      	mov	r2, sl
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f ae6b 	beq.w	80066a6 <_printf_float+0xc2>
 80069d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	f7fa f8a6 	bl	8000b28 <__aeabi_dcmpeq>
 80069dc:	b9d8      	cbnz	r0, 8006a16 <_printf_float+0x432>
 80069de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e0:	f108 0201 	add.w	r2, r8, #1
 80069e4:	3b01      	subs	r3, #1
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	d10e      	bne.n	8006a0e <_printf_float+0x42a>
 80069f0:	e659      	b.n	80066a6 <_printf_float+0xc2>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4652      	mov	r2, sl
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae52 	beq.w	80066a6 <_printf_float+0xc2>
 8006a02:	f108 0801 	add.w	r8, r8, #1
 8006a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	4543      	cmp	r3, r8
 8006a0c:	dcf1      	bgt.n	80069f2 <_printf_float+0x40e>
 8006a0e:	464b      	mov	r3, r9
 8006a10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a14:	e6dc      	b.n	80067d0 <_printf_float+0x1ec>
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	f104 0a1a 	add.w	sl, r4, #26
 8006a1e:	e7f2      	b.n	8006a06 <_printf_float+0x422>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4642      	mov	r2, r8
 8006a24:	e7df      	b.n	80069e6 <_printf_float+0x402>
 8006a26:	2301      	movs	r3, #1
 8006a28:	464a      	mov	r2, r9
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f ae38 	beq.w	80066a6 <_printf_float+0xc2>
 8006a36:	f108 0801 	add.w	r8, r8, #1
 8006a3a:	68e3      	ldr	r3, [r4, #12]
 8006a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a3e:	1a5b      	subs	r3, r3, r1
 8006a40:	4543      	cmp	r3, r8
 8006a42:	dcf0      	bgt.n	8006a26 <_printf_float+0x442>
 8006a44:	e6fa      	b.n	800683c <_printf_float+0x258>
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	f104 0919 	add.w	r9, r4, #25
 8006a4e:	e7f4      	b.n	8006a3a <_printf_float+0x456>

08006a50 <_printf_common>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	4616      	mov	r6, r2
 8006a56:	4699      	mov	r9, r3
 8006a58:	688a      	ldr	r2, [r1, #8]
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bfb8      	it	lt
 8006a64:	4613      	movlt	r3, r2
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	b10a      	cbz	r2, 8006a76 <_printf_common+0x26>
 8006a72:	3301      	adds	r3, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	0699      	lsls	r1, r3, #26
 8006a7a:	bf42      	ittt	mi
 8006a7c:	6833      	ldrmi	r3, [r6, #0]
 8006a7e:	3302      	addmi	r3, #2
 8006a80:	6033      	strmi	r3, [r6, #0]
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	f015 0506 	ands.w	r5, r5, #6
 8006a88:	d106      	bne.n	8006a98 <_printf_common+0x48>
 8006a8a:	f104 0a19 	add.w	sl, r4, #25
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	6832      	ldr	r2, [r6, #0]
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dc26      	bgt.n	8006ae6 <_printf_common+0x96>
 8006a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a9c:	1e13      	subs	r3, r2, #0
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	bf18      	it	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	0692      	lsls	r2, r2, #26
 8006aa6:	d42b      	bmi.n	8006b00 <_printf_common+0xb0>
 8006aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aac:	4649      	mov	r1, r9
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d01e      	beq.n	8006af4 <_printf_common+0xa4>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	68e5      	ldr	r5, [r4, #12]
 8006aba:	6832      	ldr	r2, [r6, #0]
 8006abc:	f003 0306 	and.w	r3, r3, #6
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	bf08      	it	eq
 8006ac4:	1aad      	subeq	r5, r5, r2
 8006ac6:	68a3      	ldr	r3, [r4, #8]
 8006ac8:	6922      	ldr	r2, [r4, #16]
 8006aca:	bf0c      	ite	eq
 8006acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad0:	2500      	movne	r5, #0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfc4      	itt	gt
 8006ad6:	1a9b      	subgt	r3, r3, r2
 8006ad8:	18ed      	addgt	r5, r5, r3
 8006ada:	2600      	movs	r6, #0
 8006adc:	341a      	adds	r4, #26
 8006ade:	42b5      	cmp	r5, r6
 8006ae0:	d11a      	bne.n	8006b18 <_printf_common+0xc8>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e008      	b.n	8006af8 <_printf_common+0xa8>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4652      	mov	r2, sl
 8006aea:	4649      	mov	r1, r9
 8006aec:	4638      	mov	r0, r7
 8006aee:	47c0      	blx	r8
 8006af0:	3001      	adds	r0, #1
 8006af2:	d103      	bne.n	8006afc <_printf_common+0xac>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	3501      	adds	r5, #1
 8006afe:	e7c6      	b.n	8006a8e <_printf_common+0x3e>
 8006b00:	18e1      	adds	r1, r4, r3
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	2030      	movs	r0, #48	; 0x30
 8006b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0a:	4422      	add	r2, r4
 8006b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b14:	3302      	adds	r3, #2
 8006b16:	e7c7      	b.n	8006aa8 <_printf_common+0x58>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c0      	blx	r8
 8006b22:	3001      	adds	r0, #1
 8006b24:	d0e6      	beq.n	8006af4 <_printf_common+0xa4>
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7d9      	b.n	8006ade <_printf_common+0x8e>
	...

08006b2c <_printf_i>:
 8006b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	7e0f      	ldrb	r7, [r1, #24]
 8006b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b34:	2f78      	cmp	r7, #120	; 0x78
 8006b36:	4691      	mov	r9, r2
 8006b38:	4680      	mov	r8, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	469a      	mov	sl, r3
 8006b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b42:	d807      	bhi.n	8006b54 <_printf_i+0x28>
 8006b44:	2f62      	cmp	r7, #98	; 0x62
 8006b46:	d80a      	bhi.n	8006b5e <_printf_i+0x32>
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	f000 80d8 	beq.w	8006cfe <_printf_i+0x1d2>
 8006b4e:	2f58      	cmp	r7, #88	; 0x58
 8006b50:	f000 80a3 	beq.w	8006c9a <_printf_i+0x16e>
 8006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b5c:	e03a      	b.n	8006bd4 <_printf_i+0xa8>
 8006b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b62:	2b15      	cmp	r3, #21
 8006b64:	d8f6      	bhi.n	8006b54 <_printf_i+0x28>
 8006b66:	a101      	add	r1, pc, #4	; (adr r1, 8006b6c <_printf_i+0x40>)
 8006b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006bd9 	.word	0x08006bd9
 8006b74:	08006b55 	.word	0x08006b55
 8006b78:	08006b55 	.word	0x08006b55
 8006b7c:	08006b55 	.word	0x08006b55
 8006b80:	08006b55 	.word	0x08006b55
 8006b84:	08006bd9 	.word	0x08006bd9
 8006b88:	08006b55 	.word	0x08006b55
 8006b8c:	08006b55 	.word	0x08006b55
 8006b90:	08006b55 	.word	0x08006b55
 8006b94:	08006b55 	.word	0x08006b55
 8006b98:	08006ce5 	.word	0x08006ce5
 8006b9c:	08006c09 	.word	0x08006c09
 8006ba0:	08006cc7 	.word	0x08006cc7
 8006ba4:	08006b55 	.word	0x08006b55
 8006ba8:	08006b55 	.word	0x08006b55
 8006bac:	08006d07 	.word	0x08006d07
 8006bb0:	08006b55 	.word	0x08006b55
 8006bb4:	08006c09 	.word	0x08006c09
 8006bb8:	08006b55 	.word	0x08006b55
 8006bbc:	08006b55 	.word	0x08006b55
 8006bc0:	08006ccf 	.word	0x08006ccf
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0a3      	b.n	8006d20 <_printf_i+0x1f4>
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	6829      	ldr	r1, [r5, #0]
 8006bdc:	0606      	lsls	r6, r0, #24
 8006bde:	f101 0304 	add.w	r3, r1, #4
 8006be2:	d50a      	bpl.n	8006bfa <_printf_i+0xce>
 8006be4:	680e      	ldr	r6, [r1, #0]
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	2e00      	cmp	r6, #0
 8006bea:	da03      	bge.n	8006bf4 <_printf_i+0xc8>
 8006bec:	232d      	movs	r3, #45	; 0x2d
 8006bee:	4276      	negs	r6, r6
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	485e      	ldr	r0, [pc, #376]	; (8006d70 <_printf_i+0x244>)
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	e019      	b.n	8006c2e <_printf_i+0x102>
 8006bfa:	680e      	ldr	r6, [r1, #0]
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c02:	bf18      	it	ne
 8006c04:	b236      	sxthne	r6, r6
 8006c06:	e7ef      	b.n	8006be8 <_printf_i+0xbc>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	1d19      	adds	r1, r3, #4
 8006c0e:	6029      	str	r1, [r5, #0]
 8006c10:	0601      	lsls	r1, r0, #24
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0xec>
 8006c14:	681e      	ldr	r6, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <_printf_i+0xf2>
 8006c18:	0646      	lsls	r6, r0, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0xe8>
 8006c1c:	881e      	ldrh	r6, [r3, #0]
 8006c1e:	4854      	ldr	r0, [pc, #336]	; (8006d70 <_printf_i+0x244>)
 8006c20:	2f6f      	cmp	r7, #111	; 0x6f
 8006c22:	bf0c      	ite	eq
 8006c24:	2308      	moveq	r3, #8
 8006c26:	230a      	movne	r3, #10
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c2e:	6865      	ldr	r5, [r4, #4]
 8006c30:	60a5      	str	r5, [r4, #8]
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	bfa2      	ittt	ge
 8006c36:	6821      	ldrge	r1, [r4, #0]
 8006c38:	f021 0104 	bicge.w	r1, r1, #4
 8006c3c:	6021      	strge	r1, [r4, #0]
 8006c3e:	b90e      	cbnz	r6, 8006c44 <_printf_i+0x118>
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	d04d      	beq.n	8006ce0 <_printf_i+0x1b4>
 8006c44:	4615      	mov	r5, r2
 8006c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c4e:	5dc7      	ldrb	r7, [r0, r7]
 8006c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c54:	4637      	mov	r7, r6
 8006c56:	42bb      	cmp	r3, r7
 8006c58:	460e      	mov	r6, r1
 8006c5a:	d9f4      	bls.n	8006c46 <_printf_i+0x11a>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d10b      	bne.n	8006c78 <_printf_i+0x14c>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	07de      	lsls	r6, r3, #31
 8006c64:	d508      	bpl.n	8006c78 <_printf_i+0x14c>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	6861      	ldr	r1, [r4, #4]
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	bfde      	ittt	le
 8006c6e:	2330      	movle	r3, #48	; 0x30
 8006c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c78:	1b52      	subs	r2, r2, r5
 8006c7a:	6122      	str	r2, [r4, #16]
 8006c7c:	f8cd a000 	str.w	sl, [sp]
 8006c80:	464b      	mov	r3, r9
 8006c82:	aa03      	add	r2, sp, #12
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fee2 	bl	8006a50 <_printf_common>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d14c      	bne.n	8006d2a <_printf_i+0x1fe>
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c94:	b004      	add	sp, #16
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	4835      	ldr	r0, [pc, #212]	; (8006d70 <_printf_i+0x244>)
 8006c9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ca0:	6829      	ldr	r1, [r5, #0]
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ca8:	6029      	str	r1, [r5, #0]
 8006caa:	061d      	lsls	r5, r3, #24
 8006cac:	d514      	bpl.n	8006cd8 <_printf_i+0x1ac>
 8006cae:	07df      	lsls	r7, r3, #31
 8006cb0:	bf44      	itt	mi
 8006cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cb6:	6023      	strmi	r3, [r4, #0]
 8006cb8:	b91e      	cbnz	r6, 8006cc2 <_printf_i+0x196>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	f023 0320 	bic.w	r3, r3, #32
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	e7b0      	b.n	8006c28 <_printf_i+0xfc>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f043 0320 	orr.w	r3, r3, #32
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	2378      	movs	r3, #120	; 0x78
 8006cd0:	4828      	ldr	r0, [pc, #160]	; (8006d74 <_printf_i+0x248>)
 8006cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cd6:	e7e3      	b.n	8006ca0 <_printf_i+0x174>
 8006cd8:	0659      	lsls	r1, r3, #25
 8006cda:	bf48      	it	mi
 8006cdc:	b2b6      	uxthmi	r6, r6
 8006cde:	e7e6      	b.n	8006cae <_printf_i+0x182>
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	e7bb      	b.n	8006c5c <_printf_i+0x130>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	6826      	ldr	r6, [r4, #0]
 8006ce8:	6961      	ldr	r1, [r4, #20]
 8006cea:	1d18      	adds	r0, r3, #4
 8006cec:	6028      	str	r0, [r5, #0]
 8006cee:	0635      	lsls	r5, r6, #24
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	d501      	bpl.n	8006cf8 <_printf_i+0x1cc>
 8006cf4:	6019      	str	r1, [r3, #0]
 8006cf6:	e002      	b.n	8006cfe <_printf_i+0x1d2>
 8006cf8:	0670      	lsls	r0, r6, #25
 8006cfa:	d5fb      	bpl.n	8006cf4 <_printf_i+0x1c8>
 8006cfc:	8019      	strh	r1, [r3, #0]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6123      	str	r3, [r4, #16]
 8006d02:	4615      	mov	r5, r2
 8006d04:	e7ba      	b.n	8006c7c <_printf_i+0x150>
 8006d06:	682b      	ldr	r3, [r5, #0]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	602a      	str	r2, [r5, #0]
 8006d0c:	681d      	ldr	r5, [r3, #0]
 8006d0e:	6862      	ldr	r2, [r4, #4]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4628      	mov	r0, r5
 8006d14:	f7f9 fa94 	bl	8000240 <memchr>
 8006d18:	b108      	cbz	r0, 8006d1e <_printf_i+0x1f2>
 8006d1a:	1b40      	subs	r0, r0, r5
 8006d1c:	6060      	str	r0, [r4, #4]
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	2300      	movs	r3, #0
 8006d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d28:	e7a8      	b.n	8006c7c <_printf_i+0x150>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4640      	mov	r0, r8
 8006d32:	47d0      	blx	sl
 8006d34:	3001      	adds	r0, #1
 8006d36:	d0ab      	beq.n	8006c90 <_printf_i+0x164>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	079b      	lsls	r3, r3, #30
 8006d3c:	d413      	bmi.n	8006d66 <_printf_i+0x23a>
 8006d3e:	68e0      	ldr	r0, [r4, #12]
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	4298      	cmp	r0, r3
 8006d44:	bfb8      	it	lt
 8006d46:	4618      	movlt	r0, r3
 8006d48:	e7a4      	b.n	8006c94 <_printf_i+0x168>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	47d0      	blx	sl
 8006d54:	3001      	adds	r0, #1
 8006d56:	d09b      	beq.n	8006c90 <_printf_i+0x164>
 8006d58:	3501      	adds	r5, #1
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	9903      	ldr	r1, [sp, #12]
 8006d5e:	1a5b      	subs	r3, r3, r1
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dcf2      	bgt.n	8006d4a <_printf_i+0x21e>
 8006d64:	e7eb      	b.n	8006d3e <_printf_i+0x212>
 8006d66:	2500      	movs	r5, #0
 8006d68:	f104 0619 	add.w	r6, r4, #25
 8006d6c:	e7f5      	b.n	8006d5a <_printf_i+0x22e>
 8006d6e:	bf00      	nop
 8006d70:	0800bea6 	.word	0x0800bea6
 8006d74:	0800beb7 	.word	0x0800beb7

08006d78 <_scanf_float>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	b087      	sub	sp, #28
 8006d7e:	4617      	mov	r7, r2
 8006d80:	9303      	str	r3, [sp, #12]
 8006d82:	688b      	ldr	r3, [r1, #8]
 8006d84:	1e5a      	subs	r2, r3, #1
 8006d86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006d8a:	bf83      	ittte	hi
 8006d8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006d90:	195b      	addhi	r3, r3, r5
 8006d92:	9302      	strhi	r3, [sp, #8]
 8006d94:	2300      	movls	r3, #0
 8006d96:	bf86      	itte	hi
 8006d98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006d9c:	608b      	strhi	r3, [r1, #8]
 8006d9e:	9302      	strls	r3, [sp, #8]
 8006da0:	680b      	ldr	r3, [r1, #0]
 8006da2:	468b      	mov	fp, r1
 8006da4:	2500      	movs	r5, #0
 8006da6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006daa:	f84b 3b1c 	str.w	r3, [fp], #28
 8006dae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006db2:	4680      	mov	r8, r0
 8006db4:	460c      	mov	r4, r1
 8006db6:	465e      	mov	r6, fp
 8006db8:	46aa      	mov	sl, r5
 8006dba:	46a9      	mov	r9, r5
 8006dbc:	9501      	str	r5, [sp, #4]
 8006dbe:	68a2      	ldr	r2, [r4, #8]
 8006dc0:	b152      	cbz	r2, 8006dd8 <_scanf_float+0x60>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b4e      	cmp	r3, #78	; 0x4e
 8006dc8:	d864      	bhi.n	8006e94 <_scanf_float+0x11c>
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d83c      	bhi.n	8006e48 <_scanf_float+0xd0>
 8006dce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006dd2:	b2c8      	uxtb	r0, r1
 8006dd4:	280e      	cmp	r0, #14
 8006dd6:	d93a      	bls.n	8006e4e <_scanf_float+0xd6>
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	d003      	beq.n	8006de6 <_scanf_float+0x6e>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006dea:	f1ba 0f01 	cmp.w	sl, #1
 8006dee:	f200 8113 	bhi.w	8007018 <_scanf_float+0x2a0>
 8006df2:	455e      	cmp	r6, fp
 8006df4:	f200 8105 	bhi.w	8007002 <_scanf_float+0x28a>
 8006df8:	2501      	movs	r5, #1
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	b007      	add	sp, #28
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e06:	2a0d      	cmp	r2, #13
 8006e08:	d8e6      	bhi.n	8006dd8 <_scanf_float+0x60>
 8006e0a:	a101      	add	r1, pc, #4	; (adr r1, 8006e10 <_scanf_float+0x98>)
 8006e0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e10:	08006f4f 	.word	0x08006f4f
 8006e14:	08006dd9 	.word	0x08006dd9
 8006e18:	08006dd9 	.word	0x08006dd9
 8006e1c:	08006dd9 	.word	0x08006dd9
 8006e20:	08006faf 	.word	0x08006faf
 8006e24:	08006f87 	.word	0x08006f87
 8006e28:	08006dd9 	.word	0x08006dd9
 8006e2c:	08006dd9 	.word	0x08006dd9
 8006e30:	08006f5d 	.word	0x08006f5d
 8006e34:	08006dd9 	.word	0x08006dd9
 8006e38:	08006dd9 	.word	0x08006dd9
 8006e3c:	08006dd9 	.word	0x08006dd9
 8006e40:	08006dd9 	.word	0x08006dd9
 8006e44:	08006f15 	.word	0x08006f15
 8006e48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e4c:	e7db      	b.n	8006e06 <_scanf_float+0x8e>
 8006e4e:	290e      	cmp	r1, #14
 8006e50:	d8c2      	bhi.n	8006dd8 <_scanf_float+0x60>
 8006e52:	a001      	add	r0, pc, #4	; (adr r0, 8006e58 <_scanf_float+0xe0>)
 8006e54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e58:	08006f07 	.word	0x08006f07
 8006e5c:	08006dd9 	.word	0x08006dd9
 8006e60:	08006f07 	.word	0x08006f07
 8006e64:	08006f9b 	.word	0x08006f9b
 8006e68:	08006dd9 	.word	0x08006dd9
 8006e6c:	08006eb5 	.word	0x08006eb5
 8006e70:	08006ef1 	.word	0x08006ef1
 8006e74:	08006ef1 	.word	0x08006ef1
 8006e78:	08006ef1 	.word	0x08006ef1
 8006e7c:	08006ef1 	.word	0x08006ef1
 8006e80:	08006ef1 	.word	0x08006ef1
 8006e84:	08006ef1 	.word	0x08006ef1
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006ef1 	.word	0x08006ef1
 8006e90:	08006ef1 	.word	0x08006ef1
 8006e94:	2b6e      	cmp	r3, #110	; 0x6e
 8006e96:	d809      	bhi.n	8006eac <_scanf_float+0x134>
 8006e98:	2b60      	cmp	r3, #96	; 0x60
 8006e9a:	d8b2      	bhi.n	8006e02 <_scanf_float+0x8a>
 8006e9c:	2b54      	cmp	r3, #84	; 0x54
 8006e9e:	d077      	beq.n	8006f90 <_scanf_float+0x218>
 8006ea0:	2b59      	cmp	r3, #89	; 0x59
 8006ea2:	d199      	bne.n	8006dd8 <_scanf_float+0x60>
 8006ea4:	2d07      	cmp	r5, #7
 8006ea6:	d197      	bne.n	8006dd8 <_scanf_float+0x60>
 8006ea8:	2508      	movs	r5, #8
 8006eaa:	e029      	b.n	8006f00 <_scanf_float+0x188>
 8006eac:	2b74      	cmp	r3, #116	; 0x74
 8006eae:	d06f      	beq.n	8006f90 <_scanf_float+0x218>
 8006eb0:	2b79      	cmp	r3, #121	; 0x79
 8006eb2:	e7f6      	b.n	8006ea2 <_scanf_float+0x12a>
 8006eb4:	6821      	ldr	r1, [r4, #0]
 8006eb6:	05c8      	lsls	r0, r1, #23
 8006eb8:	d51a      	bpl.n	8006ef0 <_scanf_float+0x178>
 8006eba:	9b02      	ldr	r3, [sp, #8]
 8006ebc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ec0:	6021      	str	r1, [r4, #0]
 8006ec2:	f109 0901 	add.w	r9, r9, #1
 8006ec6:	b11b      	cbz	r3, 8006ed0 <_scanf_float+0x158>
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	3201      	adds	r2, #1
 8006ecc:	9302      	str	r3, [sp, #8]
 8006ece:	60a2      	str	r2, [r4, #8]
 8006ed0:	68a3      	ldr	r3, [r4, #8]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	6923      	ldr	r3, [r4, #16]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	f340 8084 	ble.w	8006ff0 <_scanf_float+0x278>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	e766      	b.n	8006dbe <_scanf_float+0x46>
 8006ef0:	eb1a 0f05 	cmn.w	sl, r5
 8006ef4:	f47f af70 	bne.w	8006dd8 <_scanf_float+0x60>
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	f806 3b01 	strb.w	r3, [r6], #1
 8006f04:	e7e4      	b.n	8006ed0 <_scanf_float+0x158>
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	0610      	lsls	r0, r2, #24
 8006f0a:	f57f af65 	bpl.w	8006dd8 <_scanf_float+0x60>
 8006f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f12:	e7f4      	b.n	8006efe <_scanf_float+0x186>
 8006f14:	f1ba 0f00 	cmp.w	sl, #0
 8006f18:	d10e      	bne.n	8006f38 <_scanf_float+0x1c0>
 8006f1a:	f1b9 0f00 	cmp.w	r9, #0
 8006f1e:	d10e      	bne.n	8006f3e <_scanf_float+0x1c6>
 8006f20:	6822      	ldr	r2, [r4, #0]
 8006f22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f2a:	d108      	bne.n	8006f3e <_scanf_float+0x1c6>
 8006f2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f30:	6022      	str	r2, [r4, #0]
 8006f32:	f04f 0a01 	mov.w	sl, #1
 8006f36:	e7e3      	b.n	8006f00 <_scanf_float+0x188>
 8006f38:	f1ba 0f02 	cmp.w	sl, #2
 8006f3c:	d055      	beq.n	8006fea <_scanf_float+0x272>
 8006f3e:	2d01      	cmp	r5, #1
 8006f40:	d002      	beq.n	8006f48 <_scanf_float+0x1d0>
 8006f42:	2d04      	cmp	r5, #4
 8006f44:	f47f af48 	bne.w	8006dd8 <_scanf_float+0x60>
 8006f48:	3501      	adds	r5, #1
 8006f4a:	b2ed      	uxtb	r5, r5
 8006f4c:	e7d8      	b.n	8006f00 <_scanf_float+0x188>
 8006f4e:	f1ba 0f01 	cmp.w	sl, #1
 8006f52:	f47f af41 	bne.w	8006dd8 <_scanf_float+0x60>
 8006f56:	f04f 0a02 	mov.w	sl, #2
 8006f5a:	e7d1      	b.n	8006f00 <_scanf_float+0x188>
 8006f5c:	b97d      	cbnz	r5, 8006f7e <_scanf_float+0x206>
 8006f5e:	f1b9 0f00 	cmp.w	r9, #0
 8006f62:	f47f af3c 	bne.w	8006dde <_scanf_float+0x66>
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f70:	f47f af39 	bne.w	8006de6 <_scanf_float+0x6e>
 8006f74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f78:	6022      	str	r2, [r4, #0]
 8006f7a:	2501      	movs	r5, #1
 8006f7c:	e7c0      	b.n	8006f00 <_scanf_float+0x188>
 8006f7e:	2d03      	cmp	r5, #3
 8006f80:	d0e2      	beq.n	8006f48 <_scanf_float+0x1d0>
 8006f82:	2d05      	cmp	r5, #5
 8006f84:	e7de      	b.n	8006f44 <_scanf_float+0x1cc>
 8006f86:	2d02      	cmp	r5, #2
 8006f88:	f47f af26 	bne.w	8006dd8 <_scanf_float+0x60>
 8006f8c:	2503      	movs	r5, #3
 8006f8e:	e7b7      	b.n	8006f00 <_scanf_float+0x188>
 8006f90:	2d06      	cmp	r5, #6
 8006f92:	f47f af21 	bne.w	8006dd8 <_scanf_float+0x60>
 8006f96:	2507      	movs	r5, #7
 8006f98:	e7b2      	b.n	8006f00 <_scanf_float+0x188>
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	0591      	lsls	r1, r2, #22
 8006f9e:	f57f af1b 	bpl.w	8006dd8 <_scanf_float+0x60>
 8006fa2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006fa6:	6022      	str	r2, [r4, #0]
 8006fa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fac:	e7a8      	b.n	8006f00 <_scanf_float+0x188>
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006fb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006fb8:	d006      	beq.n	8006fc8 <_scanf_float+0x250>
 8006fba:	0550      	lsls	r0, r2, #21
 8006fbc:	f57f af0c 	bpl.w	8006dd8 <_scanf_float+0x60>
 8006fc0:	f1b9 0f00 	cmp.w	r9, #0
 8006fc4:	f43f af0f 	beq.w	8006de6 <_scanf_float+0x6e>
 8006fc8:	0591      	lsls	r1, r2, #22
 8006fca:	bf58      	it	pl
 8006fcc:	9901      	ldrpl	r1, [sp, #4]
 8006fce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fd2:	bf58      	it	pl
 8006fd4:	eba9 0101 	subpl.w	r1, r9, r1
 8006fd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006fdc:	bf58      	it	pl
 8006fde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fe2:	6022      	str	r2, [r4, #0]
 8006fe4:	f04f 0900 	mov.w	r9, #0
 8006fe8:	e78a      	b.n	8006f00 <_scanf_float+0x188>
 8006fea:	f04f 0a03 	mov.w	sl, #3
 8006fee:	e787      	b.n	8006f00 <_scanf_float+0x188>
 8006ff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4798      	blx	r3
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f43f aedf 	beq.w	8006dbe <_scanf_float+0x46>
 8007000:	e6ea      	b.n	8006dd8 <_scanf_float+0x60>
 8007002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800700a:	463a      	mov	r2, r7
 800700c:	4640      	mov	r0, r8
 800700e:	4798      	blx	r3
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	3b01      	subs	r3, #1
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	e6ec      	b.n	8006df2 <_scanf_float+0x7a>
 8007018:	1e6b      	subs	r3, r5, #1
 800701a:	2b06      	cmp	r3, #6
 800701c:	d825      	bhi.n	800706a <_scanf_float+0x2f2>
 800701e:	2d02      	cmp	r5, #2
 8007020:	d836      	bhi.n	8007090 <_scanf_float+0x318>
 8007022:	455e      	cmp	r6, fp
 8007024:	f67f aee8 	bls.w	8006df8 <_scanf_float+0x80>
 8007028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800702c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007030:	463a      	mov	r2, r7
 8007032:	4640      	mov	r0, r8
 8007034:	4798      	blx	r3
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	3b01      	subs	r3, #1
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	e7f1      	b.n	8007022 <_scanf_float+0x2aa>
 800703e:	9802      	ldr	r0, [sp, #8]
 8007040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007044:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	463a      	mov	r2, r7
 800704c:	4640      	mov	r0, r8
 800704e:	4798      	blx	r3
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	3b01      	subs	r3, #1
 8007054:	6123      	str	r3, [r4, #16]
 8007056:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800705a:	fa5f fa8a 	uxtb.w	sl, sl
 800705e:	f1ba 0f02 	cmp.w	sl, #2
 8007062:	d1ec      	bne.n	800703e <_scanf_float+0x2c6>
 8007064:	3d03      	subs	r5, #3
 8007066:	b2ed      	uxtb	r5, r5
 8007068:	1b76      	subs	r6, r6, r5
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	05da      	lsls	r2, r3, #23
 800706e:	d52f      	bpl.n	80070d0 <_scanf_float+0x358>
 8007070:	055b      	lsls	r3, r3, #21
 8007072:	d510      	bpl.n	8007096 <_scanf_float+0x31e>
 8007074:	455e      	cmp	r6, fp
 8007076:	f67f aebf 	bls.w	8006df8 <_scanf_float+0x80>
 800707a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800707e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007082:	463a      	mov	r2, r7
 8007084:	4640      	mov	r0, r8
 8007086:	4798      	blx	r3
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	3b01      	subs	r3, #1
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	e7f1      	b.n	8007074 <_scanf_float+0x2fc>
 8007090:	46aa      	mov	sl, r5
 8007092:	9602      	str	r6, [sp, #8]
 8007094:	e7df      	b.n	8007056 <_scanf_float+0x2de>
 8007096:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	2965      	cmp	r1, #101	; 0x65
 800709e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80070a2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	d00c      	beq.n	80070c4 <_scanf_float+0x34c>
 80070aa:	2945      	cmp	r1, #69	; 0x45
 80070ac:	d00a      	beq.n	80070c4 <_scanf_float+0x34c>
 80070ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070b2:	463a      	mov	r2, r7
 80070b4:	4640      	mov	r0, r8
 80070b6:	4798      	blx	r3
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80070be:	3b01      	subs	r3, #1
 80070c0:	1eb5      	subs	r5, r6, #2
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070c8:	463a      	mov	r2, r7
 80070ca:	4640      	mov	r0, r8
 80070cc:	4798      	blx	r3
 80070ce:	462e      	mov	r6, r5
 80070d0:	6825      	ldr	r5, [r4, #0]
 80070d2:	f015 0510 	ands.w	r5, r5, #16
 80070d6:	d159      	bne.n	800718c <_scanf_float+0x414>
 80070d8:	7035      	strb	r5, [r6, #0]
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e4:	d11b      	bne.n	800711e <_scanf_float+0x3a6>
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	454b      	cmp	r3, r9
 80070ea:	eba3 0209 	sub.w	r2, r3, r9
 80070ee:	d123      	bne.n	8007138 <_scanf_float+0x3c0>
 80070f0:	2200      	movs	r2, #0
 80070f2:	4659      	mov	r1, fp
 80070f4:	4640      	mov	r0, r8
 80070f6:	f000 ff25 	bl	8007f44 <_strtod_r>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	f012 0f02 	tst.w	r2, #2
 8007102:	ec57 6b10 	vmov	r6, r7, d0
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	d021      	beq.n	800714e <_scanf_float+0x3d6>
 800710a:	9903      	ldr	r1, [sp, #12]
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	600a      	str	r2, [r1, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	e9c3 6700 	strd	r6, r7, [r3]
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	60e3      	str	r3, [r4, #12]
 800711c:	e66d      	b.n	8006dfa <_scanf_float+0x82>
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0e5      	beq.n	80070f0 <_scanf_float+0x378>
 8007124:	9905      	ldr	r1, [sp, #20]
 8007126:	230a      	movs	r3, #10
 8007128:	462a      	mov	r2, r5
 800712a:	3101      	adds	r1, #1
 800712c:	4640      	mov	r0, r8
 800712e:	f000 ff91 	bl	8008054 <_strtol_r>
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	9e05      	ldr	r6, [sp, #20]
 8007136:	1ac2      	subs	r2, r0, r3
 8007138:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800713c:	429e      	cmp	r6, r3
 800713e:	bf28      	it	cs
 8007140:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007144:	4912      	ldr	r1, [pc, #72]	; (8007190 <_scanf_float+0x418>)
 8007146:	4630      	mov	r0, r6
 8007148:	f000 f8ba 	bl	80072c0 <siprintf>
 800714c:	e7d0      	b.n	80070f0 <_scanf_float+0x378>
 800714e:	9903      	ldr	r1, [sp, #12]
 8007150:	f012 0f04 	tst.w	r2, #4
 8007154:	f103 0204 	add.w	r2, r3, #4
 8007158:	600a      	str	r2, [r1, #0]
 800715a:	d1d9      	bne.n	8007110 <_scanf_float+0x398>
 800715c:	f8d3 8000 	ldr.w	r8, [r3]
 8007160:	ee10 2a10 	vmov	r2, s0
 8007164:	ee10 0a10 	vmov	r0, s0
 8007168:	463b      	mov	r3, r7
 800716a:	4639      	mov	r1, r7
 800716c:	f7f9 fd0e 	bl	8000b8c <__aeabi_dcmpun>
 8007170:	b128      	cbz	r0, 800717e <_scanf_float+0x406>
 8007172:	4808      	ldr	r0, [pc, #32]	; (8007194 <_scanf_float+0x41c>)
 8007174:	f000 f89e 	bl	80072b4 <nanf>
 8007178:	ed88 0a00 	vstr	s0, [r8]
 800717c:	e7cb      	b.n	8007116 <_scanf_float+0x39e>
 800717e:	4630      	mov	r0, r6
 8007180:	4639      	mov	r1, r7
 8007182:	f7f9 fd61 	bl	8000c48 <__aeabi_d2f>
 8007186:	f8c8 0000 	str.w	r0, [r8]
 800718a:	e7c4      	b.n	8007116 <_scanf_float+0x39e>
 800718c:	2500      	movs	r5, #0
 800718e:	e634      	b.n	8006dfa <_scanf_float+0x82>
 8007190:	0800bec8 	.word	0x0800bec8
 8007194:	0800c338 	.word	0x0800c338

08007198 <iprintf>:
 8007198:	b40f      	push	{r0, r1, r2, r3}
 800719a:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <iprintf+0x2c>)
 800719c:	b513      	push	{r0, r1, r4, lr}
 800719e:	681c      	ldr	r4, [r3, #0]
 80071a0:	b124      	cbz	r4, 80071ac <iprintf+0x14>
 80071a2:	69a3      	ldr	r3, [r4, #24]
 80071a4:	b913      	cbnz	r3, 80071ac <iprintf+0x14>
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 ffaa 	bl	8009100 <__sinit>
 80071ac:	ab05      	add	r3, sp, #20
 80071ae:	9a04      	ldr	r2, [sp, #16]
 80071b0:	68a1      	ldr	r1, [r4, #8]
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	4620      	mov	r0, r4
 80071b6:	f003 fb81 	bl	800a8bc <_vfiprintf_r>
 80071ba:	b002      	add	sp, #8
 80071bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c0:	b004      	add	sp, #16
 80071c2:	4770      	bx	lr
 80071c4:	2000000c 	.word	0x2000000c

080071c8 <_puts_r>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	460e      	mov	r6, r1
 80071cc:	4605      	mov	r5, r0
 80071ce:	b118      	cbz	r0, 80071d8 <_puts_r+0x10>
 80071d0:	6983      	ldr	r3, [r0, #24]
 80071d2:	b90b      	cbnz	r3, 80071d8 <_puts_r+0x10>
 80071d4:	f001 ff94 	bl	8009100 <__sinit>
 80071d8:	69ab      	ldr	r3, [r5, #24]
 80071da:	68ac      	ldr	r4, [r5, #8]
 80071dc:	b913      	cbnz	r3, 80071e4 <_puts_r+0x1c>
 80071de:	4628      	mov	r0, r5
 80071e0:	f001 ff8e 	bl	8009100 <__sinit>
 80071e4:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <_puts_r+0xd0>)
 80071e6:	429c      	cmp	r4, r3
 80071e8:	d120      	bne.n	800722c <_puts_r+0x64>
 80071ea:	686c      	ldr	r4, [r5, #4]
 80071ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ee:	07db      	lsls	r3, r3, #31
 80071f0:	d405      	bmi.n	80071fe <_puts_r+0x36>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	0598      	lsls	r0, r3, #22
 80071f6:	d402      	bmi.n	80071fe <_puts_r+0x36>
 80071f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fa:	f002 fb92 	bl	8009922 <__retarget_lock_acquire_recursive>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	0719      	lsls	r1, r3, #28
 8007202:	d51d      	bpl.n	8007240 <_puts_r+0x78>
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	b1db      	cbz	r3, 8007240 <_puts_r+0x78>
 8007208:	3e01      	subs	r6, #1
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007210:	3b01      	subs	r3, #1
 8007212:	60a3      	str	r3, [r4, #8]
 8007214:	bb39      	cbnz	r1, 8007266 <_puts_r+0x9e>
 8007216:	2b00      	cmp	r3, #0
 8007218:	da38      	bge.n	800728c <_puts_r+0xc4>
 800721a:	4622      	mov	r2, r4
 800721c:	210a      	movs	r1, #10
 800721e:	4628      	mov	r0, r5
 8007220:	f000 ff1a 	bl	8008058 <__swbuf_r>
 8007224:	3001      	adds	r0, #1
 8007226:	d011      	beq.n	800724c <_puts_r+0x84>
 8007228:	250a      	movs	r5, #10
 800722a:	e011      	b.n	8007250 <_puts_r+0x88>
 800722c:	4b1b      	ldr	r3, [pc, #108]	; (800729c <_puts_r+0xd4>)
 800722e:	429c      	cmp	r4, r3
 8007230:	d101      	bne.n	8007236 <_puts_r+0x6e>
 8007232:	68ac      	ldr	r4, [r5, #8]
 8007234:	e7da      	b.n	80071ec <_puts_r+0x24>
 8007236:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <_puts_r+0xd8>)
 8007238:	429c      	cmp	r4, r3
 800723a:	bf08      	it	eq
 800723c:	68ec      	ldreq	r4, [r5, #12]
 800723e:	e7d5      	b.n	80071ec <_puts_r+0x24>
 8007240:	4621      	mov	r1, r4
 8007242:	4628      	mov	r0, r5
 8007244:	f000 ff5a 	bl	80080fc <__swsetup_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	d0dd      	beq.n	8007208 <_puts_r+0x40>
 800724c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007252:	07da      	lsls	r2, r3, #31
 8007254:	d405      	bmi.n	8007262 <_puts_r+0x9a>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	059b      	lsls	r3, r3, #22
 800725a:	d402      	bmi.n	8007262 <_puts_r+0x9a>
 800725c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800725e:	f002 fb61 	bl	8009924 <__retarget_lock_release_recursive>
 8007262:	4628      	mov	r0, r5
 8007264:	bd70      	pop	{r4, r5, r6, pc}
 8007266:	2b00      	cmp	r3, #0
 8007268:	da04      	bge.n	8007274 <_puts_r+0xac>
 800726a:	69a2      	ldr	r2, [r4, #24]
 800726c:	429a      	cmp	r2, r3
 800726e:	dc06      	bgt.n	800727e <_puts_r+0xb6>
 8007270:	290a      	cmp	r1, #10
 8007272:	d004      	beq.n	800727e <_puts_r+0xb6>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	6022      	str	r2, [r4, #0]
 800727a:	7019      	strb	r1, [r3, #0]
 800727c:	e7c5      	b.n	800720a <_puts_r+0x42>
 800727e:	4622      	mov	r2, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 fee9 	bl	8008058 <__swbuf_r>
 8007286:	3001      	adds	r0, #1
 8007288:	d1bf      	bne.n	800720a <_puts_r+0x42>
 800728a:	e7df      	b.n	800724c <_puts_r+0x84>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	250a      	movs	r5, #10
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	701d      	strb	r5, [r3, #0]
 8007296:	e7db      	b.n	8007250 <_puts_r+0x88>
 8007298:	0800c0d4 	.word	0x0800c0d4
 800729c:	0800c0f4 	.word	0x0800c0f4
 80072a0:	0800c0b4 	.word	0x0800c0b4

080072a4 <puts>:
 80072a4:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <puts+0xc>)
 80072a6:	4601      	mov	r1, r0
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	f7ff bf8d 	b.w	80071c8 <_puts_r>
 80072ae:	bf00      	nop
 80072b0:	2000000c 	.word	0x2000000c

080072b4 <nanf>:
 80072b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072bc <nanf+0x8>
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	7fc00000 	.word	0x7fc00000

080072c0 <siprintf>:
 80072c0:	b40e      	push	{r1, r2, r3}
 80072c2:	b500      	push	{lr}
 80072c4:	b09c      	sub	sp, #112	; 0x70
 80072c6:	ab1d      	add	r3, sp, #116	; 0x74
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	9006      	str	r0, [sp, #24]
 80072cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072d0:	4809      	ldr	r0, [pc, #36]	; (80072f8 <siprintf+0x38>)
 80072d2:	9107      	str	r1, [sp, #28]
 80072d4:	9104      	str	r1, [sp, #16]
 80072d6:	4909      	ldr	r1, [pc, #36]	; (80072fc <siprintf+0x3c>)
 80072d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072dc:	9105      	str	r1, [sp, #20]
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	a902      	add	r1, sp, #8
 80072e4:	f003 f9c0 	bl	800a668 <_svfiprintf_r>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	b01c      	add	sp, #112	; 0x70
 80072f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f4:	b003      	add	sp, #12
 80072f6:	4770      	bx	lr
 80072f8:	2000000c 	.word	0x2000000c
 80072fc:	ffff0208 	.word	0xffff0208

08007300 <sulp>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	4604      	mov	r4, r0
 8007304:	460d      	mov	r5, r1
 8007306:	ec45 4b10 	vmov	d0, r4, r5
 800730a:	4616      	mov	r6, r2
 800730c:	f002 ff0a 	bl	800a124 <__ulp>
 8007310:	ec51 0b10 	vmov	r0, r1, d0
 8007314:	b17e      	cbz	r6, 8007336 <sulp+0x36>
 8007316:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800731a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd09      	ble.n	8007336 <sulp+0x36>
 8007322:	051b      	lsls	r3, r3, #20
 8007324:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007328:	2400      	movs	r4, #0
 800732a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800732e:	4622      	mov	r2, r4
 8007330:	462b      	mov	r3, r5
 8007332:	f7f9 f991 	bl	8000658 <__aeabi_dmul>
 8007336:	bd70      	pop	{r4, r5, r6, pc}

08007338 <_strtod_l>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	ed2d 8b02 	vpush	{d8}
 8007340:	b09d      	sub	sp, #116	; 0x74
 8007342:	461f      	mov	r7, r3
 8007344:	2300      	movs	r3, #0
 8007346:	9318      	str	r3, [sp, #96]	; 0x60
 8007348:	4ba2      	ldr	r3, [pc, #648]	; (80075d4 <_strtod_l+0x29c>)
 800734a:	9213      	str	r2, [sp, #76]	; 0x4c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	4604      	mov	r4, r0
 8007352:	4618      	mov	r0, r3
 8007354:	4688      	mov	r8, r1
 8007356:	f7f8 ff65 	bl	8000224 <strlen>
 800735a:	f04f 0a00 	mov.w	sl, #0
 800735e:	4605      	mov	r5, r0
 8007360:	f04f 0b00 	mov.w	fp, #0
 8007364:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800736a:	781a      	ldrb	r2, [r3, #0]
 800736c:	2a2b      	cmp	r2, #43	; 0x2b
 800736e:	d04e      	beq.n	800740e <_strtod_l+0xd6>
 8007370:	d83b      	bhi.n	80073ea <_strtod_l+0xb2>
 8007372:	2a0d      	cmp	r2, #13
 8007374:	d834      	bhi.n	80073e0 <_strtod_l+0xa8>
 8007376:	2a08      	cmp	r2, #8
 8007378:	d834      	bhi.n	80073e4 <_strtod_l+0xac>
 800737a:	2a00      	cmp	r2, #0
 800737c:	d03e      	beq.n	80073fc <_strtod_l+0xc4>
 800737e:	2300      	movs	r3, #0
 8007380:	930a      	str	r3, [sp, #40]	; 0x28
 8007382:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007384:	7833      	ldrb	r3, [r6, #0]
 8007386:	2b30      	cmp	r3, #48	; 0x30
 8007388:	f040 80b0 	bne.w	80074ec <_strtod_l+0x1b4>
 800738c:	7873      	ldrb	r3, [r6, #1]
 800738e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007392:	2b58      	cmp	r3, #88	; 0x58
 8007394:	d168      	bne.n	8007468 <_strtod_l+0x130>
 8007396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	ab18      	add	r3, sp, #96	; 0x60
 800739c:	9702      	str	r7, [sp, #8]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4a8d      	ldr	r2, [pc, #564]	; (80075d8 <_strtod_l+0x2a0>)
 80073a2:	ab19      	add	r3, sp, #100	; 0x64
 80073a4:	a917      	add	r1, sp, #92	; 0x5c
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 ffae 	bl	8009308 <__gethex>
 80073ac:	f010 0707 	ands.w	r7, r0, #7
 80073b0:	4605      	mov	r5, r0
 80073b2:	d005      	beq.n	80073c0 <_strtod_l+0x88>
 80073b4:	2f06      	cmp	r7, #6
 80073b6:	d12c      	bne.n	8007412 <_strtod_l+0xda>
 80073b8:	3601      	adds	r6, #1
 80073ba:	2300      	movs	r3, #0
 80073bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80073be:	930a      	str	r3, [sp, #40]	; 0x28
 80073c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 8590 	bne.w	8007ee8 <_strtod_l+0xbb0>
 80073c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ca:	b1eb      	cbz	r3, 8007408 <_strtod_l+0xd0>
 80073cc:	4652      	mov	r2, sl
 80073ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073d2:	ec43 2b10 	vmov	d0, r2, r3
 80073d6:	b01d      	add	sp, #116	; 0x74
 80073d8:	ecbd 8b02 	vpop	{d8}
 80073dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e0:	2a20      	cmp	r2, #32
 80073e2:	d1cc      	bne.n	800737e <_strtod_l+0x46>
 80073e4:	3301      	adds	r3, #1
 80073e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80073e8:	e7be      	b.n	8007368 <_strtod_l+0x30>
 80073ea:	2a2d      	cmp	r2, #45	; 0x2d
 80073ec:	d1c7      	bne.n	800737e <_strtod_l+0x46>
 80073ee:	2201      	movs	r2, #1
 80073f0:	920a      	str	r2, [sp, #40]	; 0x28
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1c2      	bne.n	8007382 <_strtod_l+0x4a>
 80073fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 856e 	bne.w	8007ee4 <_strtod_l+0xbac>
 8007408:	4652      	mov	r2, sl
 800740a:	465b      	mov	r3, fp
 800740c:	e7e1      	b.n	80073d2 <_strtod_l+0x9a>
 800740e:	2200      	movs	r2, #0
 8007410:	e7ee      	b.n	80073f0 <_strtod_l+0xb8>
 8007412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007414:	b13a      	cbz	r2, 8007426 <_strtod_l+0xee>
 8007416:	2135      	movs	r1, #53	; 0x35
 8007418:	a81a      	add	r0, sp, #104	; 0x68
 800741a:	f002 ff8e 	bl	800a33a <__copybits>
 800741e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007420:	4620      	mov	r0, r4
 8007422:	f002 fb4d 	bl	8009ac0 <_Bfree>
 8007426:	3f01      	subs	r7, #1
 8007428:	2f04      	cmp	r7, #4
 800742a:	d806      	bhi.n	800743a <_strtod_l+0x102>
 800742c:	e8df f007 	tbb	[pc, r7]
 8007430:	1714030a 	.word	0x1714030a
 8007434:	0a          	.byte	0x0a
 8007435:	00          	.byte	0x00
 8007436:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800743a:	0728      	lsls	r0, r5, #28
 800743c:	d5c0      	bpl.n	80073c0 <_strtod_l+0x88>
 800743e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007442:	e7bd      	b.n	80073c0 <_strtod_l+0x88>
 8007444:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007448:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800744a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800744e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007452:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007456:	e7f0      	b.n	800743a <_strtod_l+0x102>
 8007458:	f8df b180 	ldr.w	fp, [pc, #384]	; 80075dc <_strtod_l+0x2a4>
 800745c:	e7ed      	b.n	800743a <_strtod_l+0x102>
 800745e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007462:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007466:	e7e8      	b.n	800743a <_strtod_l+0x102>
 8007468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	9217      	str	r2, [sp, #92]	; 0x5c
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	2b30      	cmp	r3, #48	; 0x30
 8007472:	d0f9      	beq.n	8007468 <_strtod_l+0x130>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0a3      	beq.n	80073c0 <_strtod_l+0x88>
 8007478:	2301      	movs	r3, #1
 800747a:	f04f 0900 	mov.w	r9, #0
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007482:	9308      	str	r3, [sp, #32]
 8007484:	f8cd 901c 	str.w	r9, [sp, #28]
 8007488:	464f      	mov	r7, r9
 800748a:	220a      	movs	r2, #10
 800748c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800748e:	7806      	ldrb	r6, [r0, #0]
 8007490:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007494:	b2d9      	uxtb	r1, r3
 8007496:	2909      	cmp	r1, #9
 8007498:	d92a      	bls.n	80074f0 <_strtod_l+0x1b8>
 800749a:	9905      	ldr	r1, [sp, #20]
 800749c:	462a      	mov	r2, r5
 800749e:	f003 fb9a 	bl	800abd6 <strncmp>
 80074a2:	b398      	cbz	r0, 800750c <_strtod_l+0x1d4>
 80074a4:	2000      	movs	r0, #0
 80074a6:	4632      	mov	r2, r6
 80074a8:	463d      	mov	r5, r7
 80074aa:	9005      	str	r0, [sp, #20]
 80074ac:	4603      	mov	r3, r0
 80074ae:	2a65      	cmp	r2, #101	; 0x65
 80074b0:	d001      	beq.n	80074b6 <_strtod_l+0x17e>
 80074b2:	2a45      	cmp	r2, #69	; 0x45
 80074b4:	d118      	bne.n	80074e8 <_strtod_l+0x1b0>
 80074b6:	b91d      	cbnz	r5, 80074c0 <_strtod_l+0x188>
 80074b8:	9a04      	ldr	r2, [sp, #16]
 80074ba:	4302      	orrs	r2, r0
 80074bc:	d09e      	beq.n	80073fc <_strtod_l+0xc4>
 80074be:	2500      	movs	r5, #0
 80074c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80074c4:	f108 0201 	add.w	r2, r8, #1
 80074c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80074ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 80074ce:	2a2b      	cmp	r2, #43	; 0x2b
 80074d0:	d075      	beq.n	80075be <_strtod_l+0x286>
 80074d2:	2a2d      	cmp	r2, #45	; 0x2d
 80074d4:	d07b      	beq.n	80075ce <_strtod_l+0x296>
 80074d6:	f04f 0c00 	mov.w	ip, #0
 80074da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074de:	2909      	cmp	r1, #9
 80074e0:	f240 8082 	bls.w	80075e8 <_strtod_l+0x2b0>
 80074e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074e8:	2600      	movs	r6, #0
 80074ea:	e09d      	b.n	8007628 <_strtod_l+0x2f0>
 80074ec:	2300      	movs	r3, #0
 80074ee:	e7c4      	b.n	800747a <_strtod_l+0x142>
 80074f0:	2f08      	cmp	r7, #8
 80074f2:	bfd8      	it	le
 80074f4:	9907      	ldrle	r1, [sp, #28]
 80074f6:	f100 0001 	add.w	r0, r0, #1
 80074fa:	bfda      	itte	le
 80074fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007500:	9307      	strle	r3, [sp, #28]
 8007502:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007506:	3701      	adds	r7, #1
 8007508:	9017      	str	r0, [sp, #92]	; 0x5c
 800750a:	e7bf      	b.n	800748c <_strtod_l+0x154>
 800750c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800750e:	195a      	adds	r2, r3, r5
 8007510:	9217      	str	r2, [sp, #92]	; 0x5c
 8007512:	5d5a      	ldrb	r2, [r3, r5]
 8007514:	2f00      	cmp	r7, #0
 8007516:	d037      	beq.n	8007588 <_strtod_l+0x250>
 8007518:	9005      	str	r0, [sp, #20]
 800751a:	463d      	mov	r5, r7
 800751c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007520:	2b09      	cmp	r3, #9
 8007522:	d912      	bls.n	800754a <_strtod_l+0x212>
 8007524:	2301      	movs	r3, #1
 8007526:	e7c2      	b.n	80074ae <_strtod_l+0x176>
 8007528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	9217      	str	r2, [sp, #92]	; 0x5c
 800752e:	785a      	ldrb	r2, [r3, #1]
 8007530:	3001      	adds	r0, #1
 8007532:	2a30      	cmp	r2, #48	; 0x30
 8007534:	d0f8      	beq.n	8007528 <_strtod_l+0x1f0>
 8007536:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800753a:	2b08      	cmp	r3, #8
 800753c:	f200 84d9 	bhi.w	8007ef2 <_strtod_l+0xbba>
 8007540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007542:	9005      	str	r0, [sp, #20]
 8007544:	2000      	movs	r0, #0
 8007546:	9308      	str	r3, [sp, #32]
 8007548:	4605      	mov	r5, r0
 800754a:	3a30      	subs	r2, #48	; 0x30
 800754c:	f100 0301 	add.w	r3, r0, #1
 8007550:	d014      	beq.n	800757c <_strtod_l+0x244>
 8007552:	9905      	ldr	r1, [sp, #20]
 8007554:	4419      	add	r1, r3
 8007556:	9105      	str	r1, [sp, #20]
 8007558:	462b      	mov	r3, r5
 800755a:	eb00 0e05 	add.w	lr, r0, r5
 800755e:	210a      	movs	r1, #10
 8007560:	4573      	cmp	r3, lr
 8007562:	d113      	bne.n	800758c <_strtod_l+0x254>
 8007564:	182b      	adds	r3, r5, r0
 8007566:	2b08      	cmp	r3, #8
 8007568:	f105 0501 	add.w	r5, r5, #1
 800756c:	4405      	add	r5, r0
 800756e:	dc1c      	bgt.n	80075aa <_strtod_l+0x272>
 8007570:	9907      	ldr	r1, [sp, #28]
 8007572:	230a      	movs	r3, #10
 8007574:	fb03 2301 	mla	r3, r3, r1, r2
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	2300      	movs	r3, #0
 800757c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800757e:	1c51      	adds	r1, r2, #1
 8007580:	9117      	str	r1, [sp, #92]	; 0x5c
 8007582:	7852      	ldrb	r2, [r2, #1]
 8007584:	4618      	mov	r0, r3
 8007586:	e7c9      	b.n	800751c <_strtod_l+0x1e4>
 8007588:	4638      	mov	r0, r7
 800758a:	e7d2      	b.n	8007532 <_strtod_l+0x1fa>
 800758c:	2b08      	cmp	r3, #8
 800758e:	dc04      	bgt.n	800759a <_strtod_l+0x262>
 8007590:	9e07      	ldr	r6, [sp, #28]
 8007592:	434e      	muls	r6, r1
 8007594:	9607      	str	r6, [sp, #28]
 8007596:	3301      	adds	r3, #1
 8007598:	e7e2      	b.n	8007560 <_strtod_l+0x228>
 800759a:	f103 0c01 	add.w	ip, r3, #1
 800759e:	f1bc 0f10 	cmp.w	ip, #16
 80075a2:	bfd8      	it	le
 80075a4:	fb01 f909 	mulle.w	r9, r1, r9
 80075a8:	e7f5      	b.n	8007596 <_strtod_l+0x25e>
 80075aa:	2d10      	cmp	r5, #16
 80075ac:	bfdc      	itt	le
 80075ae:	230a      	movle	r3, #10
 80075b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80075b4:	e7e1      	b.n	800757a <_strtod_l+0x242>
 80075b6:	2300      	movs	r3, #0
 80075b8:	9305      	str	r3, [sp, #20]
 80075ba:	2301      	movs	r3, #1
 80075bc:	e77c      	b.n	80074b8 <_strtod_l+0x180>
 80075be:	f04f 0c00 	mov.w	ip, #0
 80075c2:	f108 0202 	add.w	r2, r8, #2
 80075c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80075c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80075cc:	e785      	b.n	80074da <_strtod_l+0x1a2>
 80075ce:	f04f 0c01 	mov.w	ip, #1
 80075d2:	e7f6      	b.n	80075c2 <_strtod_l+0x28a>
 80075d4:	0800c17c 	.word	0x0800c17c
 80075d8:	0800bed0 	.word	0x0800bed0
 80075dc:	7ff00000 	.word	0x7ff00000
 80075e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075e2:	1c51      	adds	r1, r2, #1
 80075e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80075e6:	7852      	ldrb	r2, [r2, #1]
 80075e8:	2a30      	cmp	r2, #48	; 0x30
 80075ea:	d0f9      	beq.n	80075e0 <_strtod_l+0x2a8>
 80075ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80075f0:	2908      	cmp	r1, #8
 80075f2:	f63f af79 	bhi.w	80074e8 <_strtod_l+0x1b0>
 80075f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80075fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075fc:	9206      	str	r2, [sp, #24]
 80075fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007600:	1c51      	adds	r1, r2, #1
 8007602:	9117      	str	r1, [sp, #92]	; 0x5c
 8007604:	7852      	ldrb	r2, [r2, #1]
 8007606:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800760a:	2e09      	cmp	r6, #9
 800760c:	d937      	bls.n	800767e <_strtod_l+0x346>
 800760e:	9e06      	ldr	r6, [sp, #24]
 8007610:	1b89      	subs	r1, r1, r6
 8007612:	2908      	cmp	r1, #8
 8007614:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007618:	dc02      	bgt.n	8007620 <_strtod_l+0x2e8>
 800761a:	4576      	cmp	r6, lr
 800761c:	bfa8      	it	ge
 800761e:	4676      	movge	r6, lr
 8007620:	f1bc 0f00 	cmp.w	ip, #0
 8007624:	d000      	beq.n	8007628 <_strtod_l+0x2f0>
 8007626:	4276      	negs	r6, r6
 8007628:	2d00      	cmp	r5, #0
 800762a:	d14d      	bne.n	80076c8 <_strtod_l+0x390>
 800762c:	9904      	ldr	r1, [sp, #16]
 800762e:	4301      	orrs	r1, r0
 8007630:	f47f aec6 	bne.w	80073c0 <_strtod_l+0x88>
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f aee1 	bne.w	80073fc <_strtod_l+0xc4>
 800763a:	2a69      	cmp	r2, #105	; 0x69
 800763c:	d027      	beq.n	800768e <_strtod_l+0x356>
 800763e:	dc24      	bgt.n	800768a <_strtod_l+0x352>
 8007640:	2a49      	cmp	r2, #73	; 0x49
 8007642:	d024      	beq.n	800768e <_strtod_l+0x356>
 8007644:	2a4e      	cmp	r2, #78	; 0x4e
 8007646:	f47f aed9 	bne.w	80073fc <_strtod_l+0xc4>
 800764a:	499f      	ldr	r1, [pc, #636]	; (80078c8 <_strtod_l+0x590>)
 800764c:	a817      	add	r0, sp, #92	; 0x5c
 800764e:	f002 f8b3 	bl	80097b8 <__match>
 8007652:	2800      	cmp	r0, #0
 8007654:	f43f aed2 	beq.w	80073fc <_strtod_l+0xc4>
 8007658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b28      	cmp	r3, #40	; 0x28
 800765e:	d12d      	bne.n	80076bc <_strtod_l+0x384>
 8007660:	499a      	ldr	r1, [pc, #616]	; (80078cc <_strtod_l+0x594>)
 8007662:	aa1a      	add	r2, sp, #104	; 0x68
 8007664:	a817      	add	r0, sp, #92	; 0x5c
 8007666:	f002 f8bb 	bl	80097e0 <__hexnan>
 800766a:	2805      	cmp	r0, #5
 800766c:	d126      	bne.n	80076bc <_strtod_l+0x384>
 800766e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007670:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007674:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007678:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800767c:	e6a0      	b.n	80073c0 <_strtod_l+0x88>
 800767e:	210a      	movs	r1, #10
 8007680:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007684:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007688:	e7b9      	b.n	80075fe <_strtod_l+0x2c6>
 800768a:	2a6e      	cmp	r2, #110	; 0x6e
 800768c:	e7db      	b.n	8007646 <_strtod_l+0x30e>
 800768e:	4990      	ldr	r1, [pc, #576]	; (80078d0 <_strtod_l+0x598>)
 8007690:	a817      	add	r0, sp, #92	; 0x5c
 8007692:	f002 f891 	bl	80097b8 <__match>
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f aeb0 	beq.w	80073fc <_strtod_l+0xc4>
 800769c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800769e:	498d      	ldr	r1, [pc, #564]	; (80078d4 <_strtod_l+0x59c>)
 80076a0:	3b01      	subs	r3, #1
 80076a2:	a817      	add	r0, sp, #92	; 0x5c
 80076a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80076a6:	f002 f887 	bl	80097b8 <__match>
 80076aa:	b910      	cbnz	r0, 80076b2 <_strtod_l+0x37a>
 80076ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076ae:	3301      	adds	r3, #1
 80076b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80076b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80078e4 <_strtod_l+0x5ac>
 80076b6:	f04f 0a00 	mov.w	sl, #0
 80076ba:	e681      	b.n	80073c0 <_strtod_l+0x88>
 80076bc:	4886      	ldr	r0, [pc, #536]	; (80078d8 <_strtod_l+0x5a0>)
 80076be:	f003 fa2f 	bl	800ab20 <nan>
 80076c2:	ec5b ab10 	vmov	sl, fp, d0
 80076c6:	e67b      	b.n	80073c0 <_strtod_l+0x88>
 80076c8:	9b05      	ldr	r3, [sp, #20]
 80076ca:	9807      	ldr	r0, [sp, #28]
 80076cc:	1af3      	subs	r3, r6, r3
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	bf08      	it	eq
 80076d2:	462f      	moveq	r7, r5
 80076d4:	2d10      	cmp	r5, #16
 80076d6:	9306      	str	r3, [sp, #24]
 80076d8:	46a8      	mov	r8, r5
 80076da:	bfa8      	it	ge
 80076dc:	f04f 0810 	movge.w	r8, #16
 80076e0:	f7f8 ff40 	bl	8000564 <__aeabi_ui2d>
 80076e4:	2d09      	cmp	r5, #9
 80076e6:	4682      	mov	sl, r0
 80076e8:	468b      	mov	fp, r1
 80076ea:	dd13      	ble.n	8007714 <_strtod_l+0x3dc>
 80076ec:	4b7b      	ldr	r3, [pc, #492]	; (80078dc <_strtod_l+0x5a4>)
 80076ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80076f6:	f7f8 ffaf 	bl	8000658 <__aeabi_dmul>
 80076fa:	4682      	mov	sl, r0
 80076fc:	4648      	mov	r0, r9
 80076fe:	468b      	mov	fp, r1
 8007700:	f7f8 ff30 	bl	8000564 <__aeabi_ui2d>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	f7f8 fdee 	bl	80002ec <__adddf3>
 8007710:	4682      	mov	sl, r0
 8007712:	468b      	mov	fp, r1
 8007714:	2d0f      	cmp	r5, #15
 8007716:	dc38      	bgt.n	800778a <_strtod_l+0x452>
 8007718:	9b06      	ldr	r3, [sp, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f43f ae50 	beq.w	80073c0 <_strtod_l+0x88>
 8007720:	dd24      	ble.n	800776c <_strtod_l+0x434>
 8007722:	2b16      	cmp	r3, #22
 8007724:	dc0b      	bgt.n	800773e <_strtod_l+0x406>
 8007726:	496d      	ldr	r1, [pc, #436]	; (80078dc <_strtod_l+0x5a4>)
 8007728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800772c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007730:	4652      	mov	r2, sl
 8007732:	465b      	mov	r3, fp
 8007734:	f7f8 ff90 	bl	8000658 <__aeabi_dmul>
 8007738:	4682      	mov	sl, r0
 800773a:	468b      	mov	fp, r1
 800773c:	e640      	b.n	80073c0 <_strtod_l+0x88>
 800773e:	9a06      	ldr	r2, [sp, #24]
 8007740:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007744:	4293      	cmp	r3, r2
 8007746:	db20      	blt.n	800778a <_strtod_l+0x452>
 8007748:	4c64      	ldr	r4, [pc, #400]	; (80078dc <_strtod_l+0x5a4>)
 800774a:	f1c5 050f 	rsb	r5, r5, #15
 800774e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007752:	4652      	mov	r2, sl
 8007754:	465b      	mov	r3, fp
 8007756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800775a:	f7f8 ff7d 	bl	8000658 <__aeabi_dmul>
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	1b5d      	subs	r5, r3, r5
 8007762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007766:	e9d4 2300 	ldrd	r2, r3, [r4]
 800776a:	e7e3      	b.n	8007734 <_strtod_l+0x3fc>
 800776c:	9b06      	ldr	r3, [sp, #24]
 800776e:	3316      	adds	r3, #22
 8007770:	db0b      	blt.n	800778a <_strtod_l+0x452>
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	1b9e      	subs	r6, r3, r6
 8007776:	4b59      	ldr	r3, [pc, #356]	; (80078dc <_strtod_l+0x5a4>)
 8007778:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800777c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007780:	4650      	mov	r0, sl
 8007782:	4659      	mov	r1, fp
 8007784:	f7f9 f892 	bl	80008ac <__aeabi_ddiv>
 8007788:	e7d6      	b.n	8007738 <_strtod_l+0x400>
 800778a:	9b06      	ldr	r3, [sp, #24]
 800778c:	eba5 0808 	sub.w	r8, r5, r8
 8007790:	4498      	add	r8, r3
 8007792:	f1b8 0f00 	cmp.w	r8, #0
 8007796:	dd74      	ble.n	8007882 <_strtod_l+0x54a>
 8007798:	f018 030f 	ands.w	r3, r8, #15
 800779c:	d00a      	beq.n	80077b4 <_strtod_l+0x47c>
 800779e:	494f      	ldr	r1, [pc, #316]	; (80078dc <_strtod_l+0x5a4>)
 80077a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077a4:	4652      	mov	r2, sl
 80077a6:	465b      	mov	r3, fp
 80077a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ac:	f7f8 ff54 	bl	8000658 <__aeabi_dmul>
 80077b0:	4682      	mov	sl, r0
 80077b2:	468b      	mov	fp, r1
 80077b4:	f038 080f 	bics.w	r8, r8, #15
 80077b8:	d04f      	beq.n	800785a <_strtod_l+0x522>
 80077ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80077be:	dd22      	ble.n	8007806 <_strtod_l+0x4ce>
 80077c0:	2500      	movs	r5, #0
 80077c2:	462e      	mov	r6, r5
 80077c4:	9507      	str	r5, [sp, #28]
 80077c6:	9505      	str	r5, [sp, #20]
 80077c8:	2322      	movs	r3, #34	; 0x22
 80077ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80078e4 <_strtod_l+0x5ac>
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	f04f 0a00 	mov.w	sl, #0
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f43f adf2 	beq.w	80073c0 <_strtod_l+0x88>
 80077dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077de:	4620      	mov	r0, r4
 80077e0:	f002 f96e 	bl	8009ac0 <_Bfree>
 80077e4:	9905      	ldr	r1, [sp, #20]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f002 f96a 	bl	8009ac0 <_Bfree>
 80077ec:	4631      	mov	r1, r6
 80077ee:	4620      	mov	r0, r4
 80077f0:	f002 f966 	bl	8009ac0 <_Bfree>
 80077f4:	9907      	ldr	r1, [sp, #28]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f002 f962 	bl	8009ac0 <_Bfree>
 80077fc:	4629      	mov	r1, r5
 80077fe:	4620      	mov	r0, r4
 8007800:	f002 f95e 	bl	8009ac0 <_Bfree>
 8007804:	e5dc      	b.n	80073c0 <_strtod_l+0x88>
 8007806:	4b36      	ldr	r3, [pc, #216]	; (80078e0 <_strtod_l+0x5a8>)
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	2300      	movs	r3, #0
 800780c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007810:	4650      	mov	r0, sl
 8007812:	4659      	mov	r1, fp
 8007814:	4699      	mov	r9, r3
 8007816:	f1b8 0f01 	cmp.w	r8, #1
 800781a:	dc21      	bgt.n	8007860 <_strtod_l+0x528>
 800781c:	b10b      	cbz	r3, 8007822 <_strtod_l+0x4ea>
 800781e:	4682      	mov	sl, r0
 8007820:	468b      	mov	fp, r1
 8007822:	4b2f      	ldr	r3, [pc, #188]	; (80078e0 <_strtod_l+0x5a8>)
 8007824:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007828:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800782c:	4652      	mov	r2, sl
 800782e:	465b      	mov	r3, fp
 8007830:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007834:	f7f8 ff10 	bl	8000658 <__aeabi_dmul>
 8007838:	4b2a      	ldr	r3, [pc, #168]	; (80078e4 <_strtod_l+0x5ac>)
 800783a:	460a      	mov	r2, r1
 800783c:	400b      	ands	r3, r1
 800783e:	492a      	ldr	r1, [pc, #168]	; (80078e8 <_strtod_l+0x5b0>)
 8007840:	428b      	cmp	r3, r1
 8007842:	4682      	mov	sl, r0
 8007844:	d8bc      	bhi.n	80077c0 <_strtod_l+0x488>
 8007846:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800784a:	428b      	cmp	r3, r1
 800784c:	bf86      	itte	hi
 800784e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80078ec <_strtod_l+0x5b4>
 8007852:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007856:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800785a:	2300      	movs	r3, #0
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	e084      	b.n	800796a <_strtod_l+0x632>
 8007860:	f018 0f01 	tst.w	r8, #1
 8007864:	d005      	beq.n	8007872 <_strtod_l+0x53a>
 8007866:	9b04      	ldr	r3, [sp, #16]
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f7f8 fef4 	bl	8000658 <__aeabi_dmul>
 8007870:	2301      	movs	r3, #1
 8007872:	9a04      	ldr	r2, [sp, #16]
 8007874:	3208      	adds	r2, #8
 8007876:	f109 0901 	add.w	r9, r9, #1
 800787a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800787e:	9204      	str	r2, [sp, #16]
 8007880:	e7c9      	b.n	8007816 <_strtod_l+0x4de>
 8007882:	d0ea      	beq.n	800785a <_strtod_l+0x522>
 8007884:	f1c8 0800 	rsb	r8, r8, #0
 8007888:	f018 020f 	ands.w	r2, r8, #15
 800788c:	d00a      	beq.n	80078a4 <_strtod_l+0x56c>
 800788e:	4b13      	ldr	r3, [pc, #76]	; (80078dc <_strtod_l+0x5a4>)
 8007890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007894:	4650      	mov	r0, sl
 8007896:	4659      	mov	r1, fp
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f9 f806 	bl	80008ac <__aeabi_ddiv>
 80078a0:	4682      	mov	sl, r0
 80078a2:	468b      	mov	fp, r1
 80078a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80078a8:	d0d7      	beq.n	800785a <_strtod_l+0x522>
 80078aa:	f1b8 0f1f 	cmp.w	r8, #31
 80078ae:	dd1f      	ble.n	80078f0 <_strtod_l+0x5b8>
 80078b0:	2500      	movs	r5, #0
 80078b2:	462e      	mov	r6, r5
 80078b4:	9507      	str	r5, [sp, #28]
 80078b6:	9505      	str	r5, [sp, #20]
 80078b8:	2322      	movs	r3, #34	; 0x22
 80078ba:	f04f 0a00 	mov.w	sl, #0
 80078be:	f04f 0b00 	mov.w	fp, #0
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	e786      	b.n	80077d4 <_strtod_l+0x49c>
 80078c6:	bf00      	nop
 80078c8:	0800bea1 	.word	0x0800bea1
 80078cc:	0800bee4 	.word	0x0800bee4
 80078d0:	0800be99 	.word	0x0800be99
 80078d4:	0800c024 	.word	0x0800c024
 80078d8:	0800c338 	.word	0x0800c338
 80078dc:	0800c218 	.word	0x0800c218
 80078e0:	0800c1f0 	.word	0x0800c1f0
 80078e4:	7ff00000 	.word	0x7ff00000
 80078e8:	7ca00000 	.word	0x7ca00000
 80078ec:	7fefffff 	.word	0x7fefffff
 80078f0:	f018 0310 	ands.w	r3, r8, #16
 80078f4:	bf18      	it	ne
 80078f6:	236a      	movne	r3, #106	; 0x6a
 80078f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ca8 <_strtod_l+0x970>
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	4650      	mov	r0, sl
 8007900:	4659      	mov	r1, fp
 8007902:	2300      	movs	r3, #0
 8007904:	f018 0f01 	tst.w	r8, #1
 8007908:	d004      	beq.n	8007914 <_strtod_l+0x5dc>
 800790a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800790e:	f7f8 fea3 	bl	8000658 <__aeabi_dmul>
 8007912:	2301      	movs	r3, #1
 8007914:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007918:	f109 0908 	add.w	r9, r9, #8
 800791c:	d1f2      	bne.n	8007904 <_strtod_l+0x5cc>
 800791e:	b10b      	cbz	r3, 8007924 <_strtod_l+0x5ec>
 8007920:	4682      	mov	sl, r0
 8007922:	468b      	mov	fp, r1
 8007924:	9b04      	ldr	r3, [sp, #16]
 8007926:	b1c3      	cbz	r3, 800795a <_strtod_l+0x622>
 8007928:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800792c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007930:	2b00      	cmp	r3, #0
 8007932:	4659      	mov	r1, fp
 8007934:	dd11      	ble.n	800795a <_strtod_l+0x622>
 8007936:	2b1f      	cmp	r3, #31
 8007938:	f340 8124 	ble.w	8007b84 <_strtod_l+0x84c>
 800793c:	2b34      	cmp	r3, #52	; 0x34
 800793e:	bfde      	ittt	le
 8007940:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007944:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007948:	fa03 f202 	lslle.w	r2, r3, r2
 800794c:	f04f 0a00 	mov.w	sl, #0
 8007950:	bfcc      	ite	gt
 8007952:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007956:	ea02 0b01 	andle.w	fp, r2, r1
 800795a:	2200      	movs	r2, #0
 800795c:	2300      	movs	r3, #0
 800795e:	4650      	mov	r0, sl
 8007960:	4659      	mov	r1, fp
 8007962:	f7f9 f8e1 	bl	8000b28 <__aeabi_dcmpeq>
 8007966:	2800      	cmp	r0, #0
 8007968:	d1a2      	bne.n	80078b0 <_strtod_l+0x578>
 800796a:	9b07      	ldr	r3, [sp, #28]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	9908      	ldr	r1, [sp, #32]
 8007970:	462b      	mov	r3, r5
 8007972:	463a      	mov	r2, r7
 8007974:	4620      	mov	r0, r4
 8007976:	f002 f90b 	bl	8009b90 <__s2b>
 800797a:	9007      	str	r0, [sp, #28]
 800797c:	2800      	cmp	r0, #0
 800797e:	f43f af1f 	beq.w	80077c0 <_strtod_l+0x488>
 8007982:	9b05      	ldr	r3, [sp, #20]
 8007984:	1b9e      	subs	r6, r3, r6
 8007986:	9b06      	ldr	r3, [sp, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bfb4      	ite	lt
 800798c:	4633      	movlt	r3, r6
 800798e:	2300      	movge	r3, #0
 8007990:	930c      	str	r3, [sp, #48]	; 0x30
 8007992:	9b06      	ldr	r3, [sp, #24]
 8007994:	2500      	movs	r5, #0
 8007996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800799a:	9312      	str	r3, [sp, #72]	; 0x48
 800799c:	462e      	mov	r6, r5
 800799e:	9b07      	ldr	r3, [sp, #28]
 80079a0:	4620      	mov	r0, r4
 80079a2:	6859      	ldr	r1, [r3, #4]
 80079a4:	f002 f84c 	bl	8009a40 <_Balloc>
 80079a8:	9005      	str	r0, [sp, #20]
 80079aa:	2800      	cmp	r0, #0
 80079ac:	f43f af0c 	beq.w	80077c8 <_strtod_l+0x490>
 80079b0:	9b07      	ldr	r3, [sp, #28]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	3202      	adds	r2, #2
 80079b6:	f103 010c 	add.w	r1, r3, #12
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	300c      	adds	r0, #12
 80079be:	f002 f831 	bl	8009a24 <memcpy>
 80079c2:	ec4b ab10 	vmov	d0, sl, fp
 80079c6:	aa1a      	add	r2, sp, #104	; 0x68
 80079c8:	a919      	add	r1, sp, #100	; 0x64
 80079ca:	4620      	mov	r0, r4
 80079cc:	f002 fc26 	bl	800a21c <__d2b>
 80079d0:	ec4b ab18 	vmov	d8, sl, fp
 80079d4:	9018      	str	r0, [sp, #96]	; 0x60
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f43f aef6 	beq.w	80077c8 <_strtod_l+0x490>
 80079dc:	2101      	movs	r1, #1
 80079de:	4620      	mov	r0, r4
 80079e0:	f002 f970 	bl	8009cc4 <__i2b>
 80079e4:	4606      	mov	r6, r0
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f43f aeee 	beq.w	80077c8 <_strtod_l+0x490>
 80079ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079ee:	9904      	ldr	r1, [sp, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bfab      	itete	ge
 80079f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80079f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80079f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80079fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80079fe:	bfac      	ite	ge
 8007a00:	eb03 0902 	addge.w	r9, r3, r2
 8007a04:	1ad7      	sublt	r7, r2, r3
 8007a06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a08:	eba3 0801 	sub.w	r8, r3, r1
 8007a0c:	4490      	add	r8, r2
 8007a0e:	4ba1      	ldr	r3, [pc, #644]	; (8007c94 <_strtod_l+0x95c>)
 8007a10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007a14:	4598      	cmp	r8, r3
 8007a16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a1a:	f280 80c7 	bge.w	8007bac <_strtod_l+0x874>
 8007a1e:	eba3 0308 	sub.w	r3, r3, r8
 8007a22:	2b1f      	cmp	r3, #31
 8007a24:	eba2 0203 	sub.w	r2, r2, r3
 8007a28:	f04f 0101 	mov.w	r1, #1
 8007a2c:	f300 80b1 	bgt.w	8007b92 <_strtod_l+0x85a>
 8007a30:	fa01 f303 	lsl.w	r3, r1, r3
 8007a34:	930d      	str	r3, [sp, #52]	; 0x34
 8007a36:	2300      	movs	r3, #0
 8007a38:	9308      	str	r3, [sp, #32]
 8007a3a:	eb09 0802 	add.w	r8, r9, r2
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	45c1      	cmp	r9, r8
 8007a42:	4417      	add	r7, r2
 8007a44:	441f      	add	r7, r3
 8007a46:	464b      	mov	r3, r9
 8007a48:	bfa8      	it	ge
 8007a4a:	4643      	movge	r3, r8
 8007a4c:	42bb      	cmp	r3, r7
 8007a4e:	bfa8      	it	ge
 8007a50:	463b      	movge	r3, r7
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bfc2      	ittt	gt
 8007a56:	eba8 0803 	subgt.w	r8, r8, r3
 8007a5a:	1aff      	subgt	r7, r7, r3
 8007a5c:	eba9 0903 	subgt.w	r9, r9, r3
 8007a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dd17      	ble.n	8007a96 <_strtod_l+0x75e>
 8007a66:	4631      	mov	r1, r6
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f002 f9ea 	bl	8009e44 <__pow5mult>
 8007a70:	4606      	mov	r6, r0
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f43f aea8 	beq.w	80077c8 <_strtod_l+0x490>
 8007a78:	4601      	mov	r1, r0
 8007a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f002 f937 	bl	8009cf0 <__multiply>
 8007a82:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f ae9f 	beq.w	80077c8 <_strtod_l+0x490>
 8007a8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f002 f817 	bl	8009ac0 <_Bfree>
 8007a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a94:	9318      	str	r3, [sp, #96]	; 0x60
 8007a96:	f1b8 0f00 	cmp.w	r8, #0
 8007a9a:	f300 808c 	bgt.w	8007bb6 <_strtod_l+0x87e>
 8007a9e:	9b06      	ldr	r3, [sp, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dd08      	ble.n	8007ab6 <_strtod_l+0x77e>
 8007aa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007aa6:	9905      	ldr	r1, [sp, #20]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f002 f9cb 	bl	8009e44 <__pow5mult>
 8007aae:	9005      	str	r0, [sp, #20]
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	f43f ae89 	beq.w	80077c8 <_strtod_l+0x490>
 8007ab6:	2f00      	cmp	r7, #0
 8007ab8:	dd08      	ble.n	8007acc <_strtod_l+0x794>
 8007aba:	9905      	ldr	r1, [sp, #20]
 8007abc:	463a      	mov	r2, r7
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f002 fa1a 	bl	8009ef8 <__lshift>
 8007ac4:	9005      	str	r0, [sp, #20]
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f43f ae7e 	beq.w	80077c8 <_strtod_l+0x490>
 8007acc:	f1b9 0f00 	cmp.w	r9, #0
 8007ad0:	dd08      	ble.n	8007ae4 <_strtod_l+0x7ac>
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	464a      	mov	r2, r9
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f002 fa0e 	bl	8009ef8 <__lshift>
 8007adc:	4606      	mov	r6, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f ae72 	beq.w	80077c8 <_strtod_l+0x490>
 8007ae4:	9a05      	ldr	r2, [sp, #20]
 8007ae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f002 fa91 	bl	800a010 <__mdiff>
 8007aee:	4605      	mov	r5, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f43f ae69 	beq.w	80077c8 <_strtod_l+0x490>
 8007af6:	68c3      	ldr	r3, [r0, #12]
 8007af8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007afa:	2300      	movs	r3, #0
 8007afc:	60c3      	str	r3, [r0, #12]
 8007afe:	4631      	mov	r1, r6
 8007b00:	f002 fa6a 	bl	8009fd8 <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	da60      	bge.n	8007bca <_strtod_l+0x892>
 8007b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b0e:	f040 8082 	bne.w	8007c16 <_strtod_l+0x8de>
 8007b12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d17d      	bne.n	8007c16 <_strtod_l+0x8de>
 8007b1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b1e:	0d1b      	lsrs	r3, r3, #20
 8007b20:	051b      	lsls	r3, r3, #20
 8007b22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b26:	d976      	bls.n	8007c16 <_strtod_l+0x8de>
 8007b28:	696b      	ldr	r3, [r5, #20]
 8007b2a:	b913      	cbnz	r3, 8007b32 <_strtod_l+0x7fa>
 8007b2c:	692b      	ldr	r3, [r5, #16]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	dd71      	ble.n	8007c16 <_strtod_l+0x8de>
 8007b32:	4629      	mov	r1, r5
 8007b34:	2201      	movs	r2, #1
 8007b36:	4620      	mov	r0, r4
 8007b38:	f002 f9de 	bl	8009ef8 <__lshift>
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4605      	mov	r5, r0
 8007b40:	f002 fa4a 	bl	8009fd8 <__mcmp>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dd66      	ble.n	8007c16 <_strtod_l+0x8de>
 8007b48:	9904      	ldr	r1, [sp, #16]
 8007b4a:	4a53      	ldr	r2, [pc, #332]	; (8007c98 <_strtod_l+0x960>)
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	f000 8081 	beq.w	8007c56 <_strtod_l+0x91e>
 8007b54:	ea02 010b 	and.w	r1, r2, fp
 8007b58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b5c:	dc7b      	bgt.n	8007c56 <_strtod_l+0x91e>
 8007b5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b62:	f77f aea9 	ble.w	80078b8 <_strtod_l+0x580>
 8007b66:	4b4d      	ldr	r3, [pc, #308]	; (8007c9c <_strtod_l+0x964>)
 8007b68:	4650      	mov	r0, sl
 8007b6a:	4659      	mov	r1, fp
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f7f8 fd73 	bl	8000658 <__aeabi_dmul>
 8007b72:	460b      	mov	r3, r1
 8007b74:	4303      	orrs	r3, r0
 8007b76:	bf08      	it	eq
 8007b78:	2322      	moveq	r3, #34	; 0x22
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	468b      	mov	fp, r1
 8007b7e:	bf08      	it	eq
 8007b80:	6023      	streq	r3, [r4, #0]
 8007b82:	e62b      	b.n	80077dc <_strtod_l+0x4a4>
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	ea03 0a0a 	and.w	sl, r3, sl
 8007b90:	e6e3      	b.n	800795a <_strtod_l+0x622>
 8007b92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007ba2:	fa01 f308 	lsl.w	r3, r1, r8
 8007ba6:	9308      	str	r3, [sp, #32]
 8007ba8:	910d      	str	r1, [sp, #52]	; 0x34
 8007baa:	e746      	b.n	8007a3a <_strtod_l+0x702>
 8007bac:	2300      	movs	r3, #0
 8007bae:	9308      	str	r3, [sp, #32]
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8007bb4:	e741      	b.n	8007a3a <_strtod_l+0x702>
 8007bb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bb8:	4642      	mov	r2, r8
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f002 f99c 	bl	8009ef8 <__lshift>
 8007bc0:	9018      	str	r0, [sp, #96]	; 0x60
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f47f af6b 	bne.w	8007a9e <_strtod_l+0x766>
 8007bc8:	e5fe      	b.n	80077c8 <_strtod_l+0x490>
 8007bca:	465f      	mov	r7, fp
 8007bcc:	d16e      	bne.n	8007cac <_strtod_l+0x974>
 8007bce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bd4:	b342      	cbz	r2, 8007c28 <_strtod_l+0x8f0>
 8007bd6:	4a32      	ldr	r2, [pc, #200]	; (8007ca0 <_strtod_l+0x968>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d128      	bne.n	8007c2e <_strtod_l+0x8f6>
 8007bdc:	9b04      	ldr	r3, [sp, #16]
 8007bde:	4651      	mov	r1, sl
 8007be0:	b1eb      	cbz	r3, 8007c1e <_strtod_l+0x8e6>
 8007be2:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <_strtod_l+0x960>)
 8007be4:	403b      	ands	r3, r7
 8007be6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bee:	d819      	bhi.n	8007c24 <_strtod_l+0x8ec>
 8007bf0:	0d1b      	lsrs	r3, r3, #20
 8007bf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	4299      	cmp	r1, r3
 8007bfc:	d117      	bne.n	8007c2e <_strtod_l+0x8f6>
 8007bfe:	4b29      	ldr	r3, [pc, #164]	; (8007ca4 <_strtod_l+0x96c>)
 8007c00:	429f      	cmp	r7, r3
 8007c02:	d102      	bne.n	8007c0a <_strtod_l+0x8d2>
 8007c04:	3101      	adds	r1, #1
 8007c06:	f43f addf 	beq.w	80077c8 <_strtod_l+0x490>
 8007c0a:	4b23      	ldr	r3, [pc, #140]	; (8007c98 <_strtod_l+0x960>)
 8007c0c:	403b      	ands	r3, r7
 8007c0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c12:	f04f 0a00 	mov.w	sl, #0
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1a4      	bne.n	8007b66 <_strtod_l+0x82e>
 8007c1c:	e5de      	b.n	80077dc <_strtod_l+0x4a4>
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c22:	e7ea      	b.n	8007bfa <_strtod_l+0x8c2>
 8007c24:	4613      	mov	r3, r2
 8007c26:	e7e8      	b.n	8007bfa <_strtod_l+0x8c2>
 8007c28:	ea53 030a 	orrs.w	r3, r3, sl
 8007c2c:	d08c      	beq.n	8007b48 <_strtod_l+0x810>
 8007c2e:	9b08      	ldr	r3, [sp, #32]
 8007c30:	b1db      	cbz	r3, 8007c6a <_strtod_l+0x932>
 8007c32:	423b      	tst	r3, r7
 8007c34:	d0ef      	beq.n	8007c16 <_strtod_l+0x8de>
 8007c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c38:	9a04      	ldr	r2, [sp, #16]
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	4659      	mov	r1, fp
 8007c3e:	b1c3      	cbz	r3, 8007c72 <_strtod_l+0x93a>
 8007c40:	f7ff fb5e 	bl	8007300 <sulp>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	ec51 0b18 	vmov	r0, r1, d8
 8007c4c:	f7f8 fb4e 	bl	80002ec <__adddf3>
 8007c50:	4682      	mov	sl, r0
 8007c52:	468b      	mov	fp, r1
 8007c54:	e7df      	b.n	8007c16 <_strtod_l+0x8de>
 8007c56:	4013      	ands	r3, r2
 8007c58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c68:	e7d5      	b.n	8007c16 <_strtod_l+0x8de>
 8007c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c6c:	ea13 0f0a 	tst.w	r3, sl
 8007c70:	e7e0      	b.n	8007c34 <_strtod_l+0x8fc>
 8007c72:	f7ff fb45 	bl	8007300 <sulp>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	ec51 0b18 	vmov	r0, r1, d8
 8007c7e:	f7f8 fb33 	bl	80002e8 <__aeabi_dsub>
 8007c82:	2200      	movs	r2, #0
 8007c84:	2300      	movs	r3, #0
 8007c86:	4682      	mov	sl, r0
 8007c88:	468b      	mov	fp, r1
 8007c8a:	f7f8 ff4d 	bl	8000b28 <__aeabi_dcmpeq>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d0c1      	beq.n	8007c16 <_strtod_l+0x8de>
 8007c92:	e611      	b.n	80078b8 <_strtod_l+0x580>
 8007c94:	fffffc02 	.word	0xfffffc02
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	39500000 	.word	0x39500000
 8007ca0:	000fffff 	.word	0x000fffff
 8007ca4:	7fefffff 	.word	0x7fefffff
 8007ca8:	0800bef8 	.word	0x0800bef8
 8007cac:	4631      	mov	r1, r6
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f002 fb10 	bl	800a2d4 <__ratio>
 8007cb4:	ec59 8b10 	vmov	r8, r9, d0
 8007cb8:	ee10 0a10 	vmov	r0, s0
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	f7f8 ff44 	bl	8000b50 <__aeabi_dcmple>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d07a      	beq.n	8007dc2 <_strtod_l+0xa8a>
 8007ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d04a      	beq.n	8007d68 <_strtod_l+0xa30>
 8007cd2:	4b95      	ldr	r3, [pc, #596]	; (8007f28 <_strtod_l+0xbf0>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f28 <_strtod_l+0xbf0>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	4b92      	ldr	r3, [pc, #584]	; (8007f2c <_strtod_l+0xbf4>)
 8007ce4:	403b      	ands	r3, r7
 8007ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cea:	4b91      	ldr	r3, [pc, #580]	; (8007f30 <_strtod_l+0xbf8>)
 8007cec:	429a      	cmp	r2, r3
 8007cee:	f040 80b0 	bne.w	8007e52 <_strtod_l+0xb1a>
 8007cf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007cfa:	ec4b ab10 	vmov	d0, sl, fp
 8007cfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d02:	f002 fa0f 	bl	800a124 <__ulp>
 8007d06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d0a:	ec53 2b10 	vmov	r2, r3, d0
 8007d0e:	f7f8 fca3 	bl	8000658 <__aeabi_dmul>
 8007d12:	4652      	mov	r2, sl
 8007d14:	465b      	mov	r3, fp
 8007d16:	f7f8 fae9 	bl	80002ec <__adddf3>
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4983      	ldr	r1, [pc, #524]	; (8007f2c <_strtod_l+0xbf4>)
 8007d1e:	4a85      	ldr	r2, [pc, #532]	; (8007f34 <_strtod_l+0xbfc>)
 8007d20:	4019      	ands	r1, r3
 8007d22:	4291      	cmp	r1, r2
 8007d24:	4682      	mov	sl, r0
 8007d26:	d960      	bls.n	8007dea <_strtod_l+0xab2>
 8007d28:	ee18 3a90 	vmov	r3, s17
 8007d2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d104      	bne.n	8007d3e <_strtod_l+0xa06>
 8007d34:	ee18 3a10 	vmov	r3, s16
 8007d38:	3301      	adds	r3, #1
 8007d3a:	f43f ad45 	beq.w	80077c8 <_strtod_l+0x490>
 8007d3e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007f40 <_strtod_l+0xc08>
 8007d42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f001 feb9 	bl	8009ac0 <_Bfree>
 8007d4e:	9905      	ldr	r1, [sp, #20]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f001 feb5 	bl	8009ac0 <_Bfree>
 8007d56:	4631      	mov	r1, r6
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f001 feb1 	bl	8009ac0 <_Bfree>
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4620      	mov	r0, r4
 8007d62:	f001 fead 	bl	8009ac0 <_Bfree>
 8007d66:	e61a      	b.n	800799e <_strtod_l+0x666>
 8007d68:	f1ba 0f00 	cmp.w	sl, #0
 8007d6c:	d11b      	bne.n	8007da6 <_strtod_l+0xa6e>
 8007d6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d72:	b9f3      	cbnz	r3, 8007db2 <_strtod_l+0xa7a>
 8007d74:	4b6c      	ldr	r3, [pc, #432]	; (8007f28 <_strtod_l+0xbf0>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	f7f8 fede 	bl	8000b3c <__aeabi_dcmplt>
 8007d80:	b9d0      	cbnz	r0, 8007db8 <_strtod_l+0xa80>
 8007d82:	4640      	mov	r0, r8
 8007d84:	4649      	mov	r1, r9
 8007d86:	4b6c      	ldr	r3, [pc, #432]	; (8007f38 <_strtod_l+0xc00>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f7f8 fc65 	bl	8000658 <__aeabi_dmul>
 8007d8e:	4680      	mov	r8, r0
 8007d90:	4689      	mov	r9, r1
 8007d92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007d9a:	9315      	str	r3, [sp, #84]	; 0x54
 8007d9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007da0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007da4:	e79d      	b.n	8007ce2 <_strtod_l+0x9aa>
 8007da6:	f1ba 0f01 	cmp.w	sl, #1
 8007daa:	d102      	bne.n	8007db2 <_strtod_l+0xa7a>
 8007dac:	2f00      	cmp	r7, #0
 8007dae:	f43f ad83 	beq.w	80078b8 <_strtod_l+0x580>
 8007db2:	4b62      	ldr	r3, [pc, #392]	; (8007f3c <_strtod_l+0xc04>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	e78e      	b.n	8007cd6 <_strtod_l+0x99e>
 8007db8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007f38 <_strtod_l+0xc00>
 8007dbc:	f04f 0800 	mov.w	r8, #0
 8007dc0:	e7e7      	b.n	8007d92 <_strtod_l+0xa5a>
 8007dc2:	4b5d      	ldr	r3, [pc, #372]	; (8007f38 <_strtod_l+0xc00>)
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f7f8 fc45 	bl	8000658 <__aeabi_dmul>
 8007dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	4689      	mov	r9, r1
 8007dd4:	b933      	cbnz	r3, 8007de4 <_strtod_l+0xaac>
 8007dd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dda:	900e      	str	r0, [sp, #56]	; 0x38
 8007ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007de2:	e7dd      	b.n	8007da0 <_strtod_l+0xa68>
 8007de4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007de8:	e7f9      	b.n	8007dde <_strtod_l+0xaa6>
 8007dea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1a8      	bne.n	8007d46 <_strtod_l+0xa0e>
 8007df4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dfa:	0d1b      	lsrs	r3, r3, #20
 8007dfc:	051b      	lsls	r3, r3, #20
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d1a1      	bne.n	8007d46 <_strtod_l+0xa0e>
 8007e02:	4640      	mov	r0, r8
 8007e04:	4649      	mov	r1, r9
 8007e06:	f7f8 ffd7 	bl	8000db8 <__aeabi_d2lz>
 8007e0a:	f7f8 fbf7 	bl	80005fc <__aeabi_l2d>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f7f8 fa67 	bl	80002e8 <__aeabi_dsub>
 8007e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e20:	ea43 030a 	orr.w	r3, r3, sl
 8007e24:	4313      	orrs	r3, r2
 8007e26:	4680      	mov	r8, r0
 8007e28:	4689      	mov	r9, r1
 8007e2a:	d055      	beq.n	8007ed8 <_strtod_l+0xba0>
 8007e2c:	a336      	add	r3, pc, #216	; (adr r3, 8007f08 <_strtod_l+0xbd0>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fe83 	bl	8000b3c <__aeabi_dcmplt>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f47f acd0 	bne.w	80077dc <_strtod_l+0x4a4>
 8007e3c:	a334      	add	r3, pc, #208	; (adr r3, 8007f10 <_strtod_l+0xbd8>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	4640      	mov	r0, r8
 8007e44:	4649      	mov	r1, r9
 8007e46:	f7f8 fe97 	bl	8000b78 <__aeabi_dcmpgt>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f43f af7b 	beq.w	8007d46 <_strtod_l+0xa0e>
 8007e50:	e4c4      	b.n	80077dc <_strtod_l+0x4a4>
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	b333      	cbz	r3, 8007ea4 <_strtod_l+0xb6c>
 8007e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e5c:	d822      	bhi.n	8007ea4 <_strtod_l+0xb6c>
 8007e5e:	a32e      	add	r3, pc, #184	; (adr r3, 8007f18 <_strtod_l+0xbe0>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	4640      	mov	r0, r8
 8007e66:	4649      	mov	r1, r9
 8007e68:	f7f8 fe72 	bl	8000b50 <__aeabi_dcmple>
 8007e6c:	b1a0      	cbz	r0, 8007e98 <_strtod_l+0xb60>
 8007e6e:	4649      	mov	r1, r9
 8007e70:	4640      	mov	r0, r8
 8007e72:	f7f8 fec9 	bl	8000c08 <__aeabi_d2uiz>
 8007e76:	2801      	cmp	r0, #1
 8007e78:	bf38      	it	cc
 8007e7a:	2001      	movcc	r0, #1
 8007e7c:	f7f8 fb72 	bl	8000564 <__aeabi_ui2d>
 8007e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e82:	4680      	mov	r8, r0
 8007e84:	4689      	mov	r9, r1
 8007e86:	bb23      	cbnz	r3, 8007ed2 <_strtod_l+0xb9a>
 8007e88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e8c:	9010      	str	r0, [sp, #64]	; 0x40
 8007e8e:	9311      	str	r3, [sp, #68]	; 0x44
 8007e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8007eac:	eef0 0a68 	vmov.f32	s1, s17
 8007eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eb4:	f002 f936 	bl	800a124 <__ulp>
 8007eb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ebc:	ec53 2b10 	vmov	r2, r3, d0
 8007ec0:	f7f8 fbca 	bl	8000658 <__aeabi_dmul>
 8007ec4:	ec53 2b18 	vmov	r2, r3, d8
 8007ec8:	f7f8 fa10 	bl	80002ec <__adddf3>
 8007ecc:	4682      	mov	sl, r0
 8007ece:	468b      	mov	fp, r1
 8007ed0:	e78d      	b.n	8007dee <_strtod_l+0xab6>
 8007ed2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007ed6:	e7db      	b.n	8007e90 <_strtod_l+0xb58>
 8007ed8:	a311      	add	r3, pc, #68	; (adr r3, 8007f20 <_strtod_l+0xbe8>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fe2d 	bl	8000b3c <__aeabi_dcmplt>
 8007ee2:	e7b2      	b.n	8007e4a <_strtod_l+0xb12>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007eea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	f7ff ba6b 	b.w	80073c8 <_strtod_l+0x90>
 8007ef2:	2a65      	cmp	r2, #101	; 0x65
 8007ef4:	f43f ab5f 	beq.w	80075b6 <_strtod_l+0x27e>
 8007ef8:	2a45      	cmp	r2, #69	; 0x45
 8007efa:	f43f ab5c 	beq.w	80075b6 <_strtod_l+0x27e>
 8007efe:	2301      	movs	r3, #1
 8007f00:	f7ff bb94 	b.w	800762c <_strtod_l+0x2f4>
 8007f04:	f3af 8000 	nop.w
 8007f08:	94a03595 	.word	0x94a03595
 8007f0c:	3fdfffff 	.word	0x3fdfffff
 8007f10:	35afe535 	.word	0x35afe535
 8007f14:	3fe00000 	.word	0x3fe00000
 8007f18:	ffc00000 	.word	0xffc00000
 8007f1c:	41dfffff 	.word	0x41dfffff
 8007f20:	94a03595 	.word	0x94a03595
 8007f24:	3fcfffff 	.word	0x3fcfffff
 8007f28:	3ff00000 	.word	0x3ff00000
 8007f2c:	7ff00000 	.word	0x7ff00000
 8007f30:	7fe00000 	.word	0x7fe00000
 8007f34:	7c9fffff 	.word	0x7c9fffff
 8007f38:	3fe00000 	.word	0x3fe00000
 8007f3c:	bff00000 	.word	0xbff00000
 8007f40:	7fefffff 	.word	0x7fefffff

08007f44 <_strtod_r>:
 8007f44:	4b01      	ldr	r3, [pc, #4]	; (8007f4c <_strtod_r+0x8>)
 8007f46:	f7ff b9f7 	b.w	8007338 <_strtod_l>
 8007f4a:	bf00      	nop
 8007f4c:	20000074 	.word	0x20000074

08007f50 <_strtol_l.constprop.0>:
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f56:	d001      	beq.n	8007f5c <_strtol_l.constprop.0+0xc>
 8007f58:	2b24      	cmp	r3, #36	; 0x24
 8007f5a:	d906      	bls.n	8007f6a <_strtol_l.constprop.0+0x1a>
 8007f5c:	f7fe fa60 	bl	8006420 <__errno>
 8007f60:	2316      	movs	r3, #22
 8007f62:	6003      	str	r3, [r0, #0]
 8007f64:	2000      	movs	r0, #0
 8007f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008050 <_strtol_l.constprop.0+0x100>
 8007f6e:	460d      	mov	r5, r1
 8007f70:	462e      	mov	r6, r5
 8007f72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f76:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f7a:	f017 0708 	ands.w	r7, r7, #8
 8007f7e:	d1f7      	bne.n	8007f70 <_strtol_l.constprop.0+0x20>
 8007f80:	2c2d      	cmp	r4, #45	; 0x2d
 8007f82:	d132      	bne.n	8007fea <_strtol_l.constprop.0+0x9a>
 8007f84:	782c      	ldrb	r4, [r5, #0]
 8007f86:	2701      	movs	r7, #1
 8007f88:	1cb5      	adds	r5, r6, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d05b      	beq.n	8008046 <_strtol_l.constprop.0+0xf6>
 8007f8e:	2b10      	cmp	r3, #16
 8007f90:	d109      	bne.n	8007fa6 <_strtol_l.constprop.0+0x56>
 8007f92:	2c30      	cmp	r4, #48	; 0x30
 8007f94:	d107      	bne.n	8007fa6 <_strtol_l.constprop.0+0x56>
 8007f96:	782c      	ldrb	r4, [r5, #0]
 8007f98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f9c:	2c58      	cmp	r4, #88	; 0x58
 8007f9e:	d14d      	bne.n	800803c <_strtol_l.constprop.0+0xec>
 8007fa0:	786c      	ldrb	r4, [r5, #1]
 8007fa2:	2310      	movs	r3, #16
 8007fa4:	3502      	adds	r5, #2
 8007fa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007faa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007fae:	f04f 0c00 	mov.w	ip, #0
 8007fb2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007fb6:	4666      	mov	r6, ip
 8007fb8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007fbc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007fc0:	f1be 0f09 	cmp.w	lr, #9
 8007fc4:	d816      	bhi.n	8007ff4 <_strtol_l.constprop.0+0xa4>
 8007fc6:	4674      	mov	r4, lr
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	dd24      	ble.n	8008016 <_strtol_l.constprop.0+0xc6>
 8007fcc:	f1bc 0f00 	cmp.w	ip, #0
 8007fd0:	db1e      	blt.n	8008010 <_strtol_l.constprop.0+0xc0>
 8007fd2:	45b1      	cmp	r9, r6
 8007fd4:	d31c      	bcc.n	8008010 <_strtol_l.constprop.0+0xc0>
 8007fd6:	d101      	bne.n	8007fdc <_strtol_l.constprop.0+0x8c>
 8007fd8:	45a2      	cmp	sl, r4
 8007fda:	db19      	blt.n	8008010 <_strtol_l.constprop.0+0xc0>
 8007fdc:	fb06 4603 	mla	r6, r6, r3, r4
 8007fe0:	f04f 0c01 	mov.w	ip, #1
 8007fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fe8:	e7e8      	b.n	8007fbc <_strtol_l.constprop.0+0x6c>
 8007fea:	2c2b      	cmp	r4, #43	; 0x2b
 8007fec:	bf04      	itt	eq
 8007fee:	782c      	ldrbeq	r4, [r5, #0]
 8007ff0:	1cb5      	addeq	r5, r6, #2
 8007ff2:	e7ca      	b.n	8007f8a <_strtol_l.constprop.0+0x3a>
 8007ff4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007ff8:	f1be 0f19 	cmp.w	lr, #25
 8007ffc:	d801      	bhi.n	8008002 <_strtol_l.constprop.0+0xb2>
 8007ffe:	3c37      	subs	r4, #55	; 0x37
 8008000:	e7e2      	b.n	8007fc8 <_strtol_l.constprop.0+0x78>
 8008002:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008006:	f1be 0f19 	cmp.w	lr, #25
 800800a:	d804      	bhi.n	8008016 <_strtol_l.constprop.0+0xc6>
 800800c:	3c57      	subs	r4, #87	; 0x57
 800800e:	e7db      	b.n	8007fc8 <_strtol_l.constprop.0+0x78>
 8008010:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008014:	e7e6      	b.n	8007fe4 <_strtol_l.constprop.0+0x94>
 8008016:	f1bc 0f00 	cmp.w	ip, #0
 800801a:	da05      	bge.n	8008028 <_strtol_l.constprop.0+0xd8>
 800801c:	2322      	movs	r3, #34	; 0x22
 800801e:	6003      	str	r3, [r0, #0]
 8008020:	4646      	mov	r6, r8
 8008022:	b942      	cbnz	r2, 8008036 <_strtol_l.constprop.0+0xe6>
 8008024:	4630      	mov	r0, r6
 8008026:	e79e      	b.n	8007f66 <_strtol_l.constprop.0+0x16>
 8008028:	b107      	cbz	r7, 800802c <_strtol_l.constprop.0+0xdc>
 800802a:	4276      	negs	r6, r6
 800802c:	2a00      	cmp	r2, #0
 800802e:	d0f9      	beq.n	8008024 <_strtol_l.constprop.0+0xd4>
 8008030:	f1bc 0f00 	cmp.w	ip, #0
 8008034:	d000      	beq.n	8008038 <_strtol_l.constprop.0+0xe8>
 8008036:	1e69      	subs	r1, r5, #1
 8008038:	6011      	str	r1, [r2, #0]
 800803a:	e7f3      	b.n	8008024 <_strtol_l.constprop.0+0xd4>
 800803c:	2430      	movs	r4, #48	; 0x30
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1b1      	bne.n	8007fa6 <_strtol_l.constprop.0+0x56>
 8008042:	2308      	movs	r3, #8
 8008044:	e7af      	b.n	8007fa6 <_strtol_l.constprop.0+0x56>
 8008046:	2c30      	cmp	r4, #48	; 0x30
 8008048:	d0a5      	beq.n	8007f96 <_strtol_l.constprop.0+0x46>
 800804a:	230a      	movs	r3, #10
 800804c:	e7ab      	b.n	8007fa6 <_strtol_l.constprop.0+0x56>
 800804e:	bf00      	nop
 8008050:	0800bf21 	.word	0x0800bf21

08008054 <_strtol_r>:
 8008054:	f7ff bf7c 	b.w	8007f50 <_strtol_l.constprop.0>

08008058 <__swbuf_r>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	460e      	mov	r6, r1
 800805c:	4614      	mov	r4, r2
 800805e:	4605      	mov	r5, r0
 8008060:	b118      	cbz	r0, 800806a <__swbuf_r+0x12>
 8008062:	6983      	ldr	r3, [r0, #24]
 8008064:	b90b      	cbnz	r3, 800806a <__swbuf_r+0x12>
 8008066:	f001 f84b 	bl	8009100 <__sinit>
 800806a:	4b21      	ldr	r3, [pc, #132]	; (80080f0 <__swbuf_r+0x98>)
 800806c:	429c      	cmp	r4, r3
 800806e:	d12b      	bne.n	80080c8 <__swbuf_r+0x70>
 8008070:	686c      	ldr	r4, [r5, #4]
 8008072:	69a3      	ldr	r3, [r4, #24]
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	071a      	lsls	r2, r3, #28
 800807a:	d52f      	bpl.n	80080dc <__swbuf_r+0x84>
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	b36b      	cbz	r3, 80080dc <__swbuf_r+0x84>
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	6820      	ldr	r0, [r4, #0]
 8008084:	1ac0      	subs	r0, r0, r3
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	b2f6      	uxtb	r6, r6
 800808a:	4283      	cmp	r3, r0
 800808c:	4637      	mov	r7, r6
 800808e:	dc04      	bgt.n	800809a <__swbuf_r+0x42>
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f000 ffa0 	bl	8008fd8 <_fflush_r>
 8008098:	bb30      	cbnz	r0, 80080e8 <__swbuf_r+0x90>
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	3b01      	subs	r3, #1
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	6022      	str	r2, [r4, #0]
 80080a6:	701e      	strb	r6, [r3, #0]
 80080a8:	6963      	ldr	r3, [r4, #20]
 80080aa:	3001      	adds	r0, #1
 80080ac:	4283      	cmp	r3, r0
 80080ae:	d004      	beq.n	80080ba <__swbuf_r+0x62>
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	07db      	lsls	r3, r3, #31
 80080b4:	d506      	bpl.n	80080c4 <__swbuf_r+0x6c>
 80080b6:	2e0a      	cmp	r6, #10
 80080b8:	d104      	bne.n	80080c4 <__swbuf_r+0x6c>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4628      	mov	r0, r5
 80080be:	f000 ff8b 	bl	8008fd8 <_fflush_r>
 80080c2:	b988      	cbnz	r0, 80080e8 <__swbuf_r+0x90>
 80080c4:	4638      	mov	r0, r7
 80080c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <__swbuf_r+0x9c>)
 80080ca:	429c      	cmp	r4, r3
 80080cc:	d101      	bne.n	80080d2 <__swbuf_r+0x7a>
 80080ce:	68ac      	ldr	r4, [r5, #8]
 80080d0:	e7cf      	b.n	8008072 <__swbuf_r+0x1a>
 80080d2:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <__swbuf_r+0xa0>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	bf08      	it	eq
 80080d8:	68ec      	ldreq	r4, [r5, #12]
 80080da:	e7ca      	b.n	8008072 <__swbuf_r+0x1a>
 80080dc:	4621      	mov	r1, r4
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 f80c 	bl	80080fc <__swsetup_r>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d0cb      	beq.n	8008080 <__swbuf_r+0x28>
 80080e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80080ec:	e7ea      	b.n	80080c4 <__swbuf_r+0x6c>
 80080ee:	bf00      	nop
 80080f0:	0800c0d4 	.word	0x0800c0d4
 80080f4:	0800c0f4 	.word	0x0800c0f4
 80080f8:	0800c0b4 	.word	0x0800c0b4

080080fc <__swsetup_r>:
 80080fc:	4b32      	ldr	r3, [pc, #200]	; (80081c8 <__swsetup_r+0xcc>)
 80080fe:	b570      	push	{r4, r5, r6, lr}
 8008100:	681d      	ldr	r5, [r3, #0]
 8008102:	4606      	mov	r6, r0
 8008104:	460c      	mov	r4, r1
 8008106:	b125      	cbz	r5, 8008112 <__swsetup_r+0x16>
 8008108:	69ab      	ldr	r3, [r5, #24]
 800810a:	b913      	cbnz	r3, 8008112 <__swsetup_r+0x16>
 800810c:	4628      	mov	r0, r5
 800810e:	f000 fff7 	bl	8009100 <__sinit>
 8008112:	4b2e      	ldr	r3, [pc, #184]	; (80081cc <__swsetup_r+0xd0>)
 8008114:	429c      	cmp	r4, r3
 8008116:	d10f      	bne.n	8008138 <__swsetup_r+0x3c>
 8008118:	686c      	ldr	r4, [r5, #4]
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008120:	0719      	lsls	r1, r3, #28
 8008122:	d42c      	bmi.n	800817e <__swsetup_r+0x82>
 8008124:	06dd      	lsls	r5, r3, #27
 8008126:	d411      	bmi.n	800814c <__swsetup_r+0x50>
 8008128:	2309      	movs	r3, #9
 800812a:	6033      	str	r3, [r6, #0]
 800812c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008136:	e03e      	b.n	80081b6 <__swsetup_r+0xba>
 8008138:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <__swsetup_r+0xd4>)
 800813a:	429c      	cmp	r4, r3
 800813c:	d101      	bne.n	8008142 <__swsetup_r+0x46>
 800813e:	68ac      	ldr	r4, [r5, #8]
 8008140:	e7eb      	b.n	800811a <__swsetup_r+0x1e>
 8008142:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <__swsetup_r+0xd8>)
 8008144:	429c      	cmp	r4, r3
 8008146:	bf08      	it	eq
 8008148:	68ec      	ldreq	r4, [r5, #12]
 800814a:	e7e6      	b.n	800811a <__swsetup_r+0x1e>
 800814c:	0758      	lsls	r0, r3, #29
 800814e:	d512      	bpl.n	8008176 <__swsetup_r+0x7a>
 8008150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008152:	b141      	cbz	r1, 8008166 <__swsetup_r+0x6a>
 8008154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008158:	4299      	cmp	r1, r3
 800815a:	d002      	beq.n	8008162 <__swsetup_r+0x66>
 800815c:	4630      	mov	r0, r6
 800815e:	f002 f947 	bl	800a3f0 <_free_r>
 8008162:	2300      	movs	r3, #0
 8008164:	6363      	str	r3, [r4, #52]	; 0x34
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	2300      	movs	r3, #0
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	f043 0308 	orr.w	r3, r3, #8
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b94b      	cbnz	r3, 8008196 <__swsetup_r+0x9a>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818c:	d003      	beq.n	8008196 <__swsetup_r+0x9a>
 800818e:	4621      	mov	r1, r4
 8008190:	4630      	mov	r0, r6
 8008192:	f001 fbed 	bl	8009970 <__smakebuf_r>
 8008196:	89a0      	ldrh	r0, [r4, #12]
 8008198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800819c:	f010 0301 	ands.w	r3, r0, #1
 80081a0:	d00a      	beq.n	80081b8 <__swsetup_r+0xbc>
 80081a2:	2300      	movs	r3, #0
 80081a4:	60a3      	str	r3, [r4, #8]
 80081a6:	6963      	ldr	r3, [r4, #20]
 80081a8:	425b      	negs	r3, r3
 80081aa:	61a3      	str	r3, [r4, #24]
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	b943      	cbnz	r3, 80081c2 <__swsetup_r+0xc6>
 80081b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081b4:	d1ba      	bne.n	800812c <__swsetup_r+0x30>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	0781      	lsls	r1, r0, #30
 80081ba:	bf58      	it	pl
 80081bc:	6963      	ldrpl	r3, [r4, #20]
 80081be:	60a3      	str	r3, [r4, #8]
 80081c0:	e7f4      	b.n	80081ac <__swsetup_r+0xb0>
 80081c2:	2000      	movs	r0, #0
 80081c4:	e7f7      	b.n	80081b6 <__swsetup_r+0xba>
 80081c6:	bf00      	nop
 80081c8:	2000000c 	.word	0x2000000c
 80081cc:	0800c0d4 	.word	0x0800c0d4
 80081d0:	0800c0f4 	.word	0x0800c0f4
 80081d4:	0800c0b4 	.word	0x0800c0b4

080081d8 <quorem>:
 80081d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	6903      	ldr	r3, [r0, #16]
 80081de:	690c      	ldr	r4, [r1, #16]
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	4607      	mov	r7, r0
 80081e4:	f2c0 8081 	blt.w	80082ea <quorem+0x112>
 80081e8:	3c01      	subs	r4, #1
 80081ea:	f101 0814 	add.w	r8, r1, #20
 80081ee:	f100 0514 	add.w	r5, r0, #20
 80081f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008200:	3301      	adds	r3, #1
 8008202:	429a      	cmp	r2, r3
 8008204:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008208:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800820c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008210:	d331      	bcc.n	8008276 <quorem+0x9e>
 8008212:	f04f 0e00 	mov.w	lr, #0
 8008216:	4640      	mov	r0, r8
 8008218:	46ac      	mov	ip, r5
 800821a:	46f2      	mov	sl, lr
 800821c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008220:	b293      	uxth	r3, r2
 8008222:	fb06 e303 	mla	r3, r6, r3, lr
 8008226:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800822a:	b29b      	uxth	r3, r3
 800822c:	ebaa 0303 	sub.w	r3, sl, r3
 8008230:	f8dc a000 	ldr.w	sl, [ip]
 8008234:	0c12      	lsrs	r2, r2, #16
 8008236:	fa13 f38a 	uxtah	r3, r3, sl
 800823a:	fb06 e202 	mla	r2, r6, r2, lr
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	9b00      	ldr	r3, [sp, #0]
 8008242:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008246:	b292      	uxth	r2, r2
 8008248:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800824c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008250:	f8bd 3000 	ldrh.w	r3, [sp]
 8008254:	4581      	cmp	r9, r0
 8008256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800825a:	f84c 3b04 	str.w	r3, [ip], #4
 800825e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008262:	d2db      	bcs.n	800821c <quorem+0x44>
 8008264:	f855 300b 	ldr.w	r3, [r5, fp]
 8008268:	b92b      	cbnz	r3, 8008276 <quorem+0x9e>
 800826a:	9b01      	ldr	r3, [sp, #4]
 800826c:	3b04      	subs	r3, #4
 800826e:	429d      	cmp	r5, r3
 8008270:	461a      	mov	r2, r3
 8008272:	d32e      	bcc.n	80082d2 <quorem+0xfa>
 8008274:	613c      	str	r4, [r7, #16]
 8008276:	4638      	mov	r0, r7
 8008278:	f001 feae 	bl	8009fd8 <__mcmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	db24      	blt.n	80082ca <quorem+0xf2>
 8008280:	3601      	adds	r6, #1
 8008282:	4628      	mov	r0, r5
 8008284:	f04f 0c00 	mov.w	ip, #0
 8008288:	f858 2b04 	ldr.w	r2, [r8], #4
 800828c:	f8d0 e000 	ldr.w	lr, [r0]
 8008290:	b293      	uxth	r3, r2
 8008292:	ebac 0303 	sub.w	r3, ip, r3
 8008296:	0c12      	lsrs	r2, r2, #16
 8008298:	fa13 f38e 	uxtah	r3, r3, lr
 800829c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082aa:	45c1      	cmp	r9, r8
 80082ac:	f840 3b04 	str.w	r3, [r0], #4
 80082b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082b4:	d2e8      	bcs.n	8008288 <quorem+0xb0>
 80082b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082be:	b922      	cbnz	r2, 80082ca <quorem+0xf2>
 80082c0:	3b04      	subs	r3, #4
 80082c2:	429d      	cmp	r5, r3
 80082c4:	461a      	mov	r2, r3
 80082c6:	d30a      	bcc.n	80082de <quorem+0x106>
 80082c8:	613c      	str	r4, [r7, #16]
 80082ca:	4630      	mov	r0, r6
 80082cc:	b003      	add	sp, #12
 80082ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1cc      	bne.n	8008274 <quorem+0x9c>
 80082da:	3c01      	subs	r4, #1
 80082dc:	e7c7      	b.n	800826e <quorem+0x96>
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	3b04      	subs	r3, #4
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	d1f0      	bne.n	80082c8 <quorem+0xf0>
 80082e6:	3c01      	subs	r4, #1
 80082e8:	e7eb      	b.n	80082c2 <quorem+0xea>
 80082ea:	2000      	movs	r0, #0
 80082ec:	e7ee      	b.n	80082cc <quorem+0xf4>
	...

080082f0 <_dtoa_r>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	ed2d 8b04 	vpush	{d8-d9}
 80082f8:	ec57 6b10 	vmov	r6, r7, d0
 80082fc:	b093      	sub	sp, #76	; 0x4c
 80082fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008300:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008304:	9106      	str	r1, [sp, #24]
 8008306:	ee10 aa10 	vmov	sl, s0
 800830a:	4604      	mov	r4, r0
 800830c:	9209      	str	r2, [sp, #36]	; 0x24
 800830e:	930c      	str	r3, [sp, #48]	; 0x30
 8008310:	46bb      	mov	fp, r7
 8008312:	b975      	cbnz	r5, 8008332 <_dtoa_r+0x42>
 8008314:	2010      	movs	r0, #16
 8008316:	f001 fb6b 	bl	80099f0 <malloc>
 800831a:	4602      	mov	r2, r0
 800831c:	6260      	str	r0, [r4, #36]	; 0x24
 800831e:	b920      	cbnz	r0, 800832a <_dtoa_r+0x3a>
 8008320:	4ba7      	ldr	r3, [pc, #668]	; (80085c0 <_dtoa_r+0x2d0>)
 8008322:	21ea      	movs	r1, #234	; 0xea
 8008324:	48a7      	ldr	r0, [pc, #668]	; (80085c4 <_dtoa_r+0x2d4>)
 8008326:	f002 fc89 	bl	800ac3c <__assert_func>
 800832a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800832e:	6005      	str	r5, [r0, #0]
 8008330:	60c5      	str	r5, [r0, #12]
 8008332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008334:	6819      	ldr	r1, [r3, #0]
 8008336:	b151      	cbz	r1, 800834e <_dtoa_r+0x5e>
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	604a      	str	r2, [r1, #4]
 800833c:	2301      	movs	r3, #1
 800833e:	4093      	lsls	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
 8008342:	4620      	mov	r0, r4
 8008344:	f001 fbbc 	bl	8009ac0 <_Bfree>
 8008348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	1e3b      	subs	r3, r7, #0
 8008350:	bfaa      	itet	ge
 8008352:	2300      	movge	r3, #0
 8008354:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008358:	f8c8 3000 	strge.w	r3, [r8]
 800835c:	4b9a      	ldr	r3, [pc, #616]	; (80085c8 <_dtoa_r+0x2d8>)
 800835e:	bfbc      	itt	lt
 8008360:	2201      	movlt	r2, #1
 8008362:	f8c8 2000 	strlt.w	r2, [r8]
 8008366:	ea33 030b 	bics.w	r3, r3, fp
 800836a:	d11b      	bne.n	80083a4 <_dtoa_r+0xb4>
 800836c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800836e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008378:	4333      	orrs	r3, r6
 800837a:	f000 8592 	beq.w	8008ea2 <_dtoa_r+0xbb2>
 800837e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008380:	b963      	cbnz	r3, 800839c <_dtoa_r+0xac>
 8008382:	4b92      	ldr	r3, [pc, #584]	; (80085cc <_dtoa_r+0x2dc>)
 8008384:	e022      	b.n	80083cc <_dtoa_r+0xdc>
 8008386:	4b92      	ldr	r3, [pc, #584]	; (80085d0 <_dtoa_r+0x2e0>)
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	3308      	adds	r3, #8
 800838c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	9801      	ldr	r0, [sp, #4]
 8008392:	b013      	add	sp, #76	; 0x4c
 8008394:	ecbd 8b04 	vpop	{d8-d9}
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	4b8b      	ldr	r3, [pc, #556]	; (80085cc <_dtoa_r+0x2dc>)
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	3303      	adds	r3, #3
 80083a2:	e7f3      	b.n	800838c <_dtoa_r+0x9c>
 80083a4:	2200      	movs	r2, #0
 80083a6:	2300      	movs	r3, #0
 80083a8:	4650      	mov	r0, sl
 80083aa:	4659      	mov	r1, fp
 80083ac:	f7f8 fbbc 	bl	8000b28 <__aeabi_dcmpeq>
 80083b0:	ec4b ab19 	vmov	d9, sl, fp
 80083b4:	4680      	mov	r8, r0
 80083b6:	b158      	cbz	r0, 80083d0 <_dtoa_r+0xe0>
 80083b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ba:	2301      	movs	r3, #1
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 856b 	beq.w	8008e9c <_dtoa_r+0xbac>
 80083c6:	4883      	ldr	r0, [pc, #524]	; (80085d4 <_dtoa_r+0x2e4>)
 80083c8:	6018      	str	r0, [r3, #0]
 80083ca:	1e43      	subs	r3, r0, #1
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	e7df      	b.n	8008390 <_dtoa_r+0xa0>
 80083d0:	ec4b ab10 	vmov	d0, sl, fp
 80083d4:	aa10      	add	r2, sp, #64	; 0x40
 80083d6:	a911      	add	r1, sp, #68	; 0x44
 80083d8:	4620      	mov	r0, r4
 80083da:	f001 ff1f 	bl	800a21c <__d2b>
 80083de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083e2:	ee08 0a10 	vmov	s16, r0
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	f000 8084 	beq.w	80084f4 <_dtoa_r+0x204>
 80083ec:	ee19 3a90 	vmov	r3, s19
 80083f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083f8:	4656      	mov	r6, sl
 80083fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008402:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008406:	4b74      	ldr	r3, [pc, #464]	; (80085d8 <_dtoa_r+0x2e8>)
 8008408:	2200      	movs	r2, #0
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f7 ff6b 	bl	80002e8 <__aeabi_dsub>
 8008412:	a365      	add	r3, pc, #404	; (adr r3, 80085a8 <_dtoa_r+0x2b8>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	f7f8 f91e 	bl	8000658 <__aeabi_dmul>
 800841c:	a364      	add	r3, pc, #400	; (adr r3, 80085b0 <_dtoa_r+0x2c0>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 ff63 	bl	80002ec <__adddf3>
 8008426:	4606      	mov	r6, r0
 8008428:	4628      	mov	r0, r5
 800842a:	460f      	mov	r7, r1
 800842c:	f7f8 f8aa 	bl	8000584 <__aeabi_i2d>
 8008430:	a361      	add	r3, pc, #388	; (adr r3, 80085b8 <_dtoa_r+0x2c8>)
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	f7f8 f90f 	bl	8000658 <__aeabi_dmul>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f7 ff53 	bl	80002ec <__adddf3>
 8008446:	4606      	mov	r6, r0
 8008448:	460f      	mov	r7, r1
 800844a:	f7f8 fbb5 	bl	8000bb8 <__aeabi_d2iz>
 800844e:	2200      	movs	r2, #0
 8008450:	9000      	str	r0, [sp, #0]
 8008452:	2300      	movs	r3, #0
 8008454:	4630      	mov	r0, r6
 8008456:	4639      	mov	r1, r7
 8008458:	f7f8 fb70 	bl	8000b3c <__aeabi_dcmplt>
 800845c:	b150      	cbz	r0, 8008474 <_dtoa_r+0x184>
 800845e:	9800      	ldr	r0, [sp, #0]
 8008460:	f7f8 f890 	bl	8000584 <__aeabi_i2d>
 8008464:	4632      	mov	r2, r6
 8008466:	463b      	mov	r3, r7
 8008468:	f7f8 fb5e 	bl	8000b28 <__aeabi_dcmpeq>
 800846c:	b910      	cbnz	r0, 8008474 <_dtoa_r+0x184>
 800846e:	9b00      	ldr	r3, [sp, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	9b00      	ldr	r3, [sp, #0]
 8008476:	2b16      	cmp	r3, #22
 8008478:	d85a      	bhi.n	8008530 <_dtoa_r+0x240>
 800847a:	9a00      	ldr	r2, [sp, #0]
 800847c:	4b57      	ldr	r3, [pc, #348]	; (80085dc <_dtoa_r+0x2ec>)
 800847e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	ec51 0b19 	vmov	r0, r1, d9
 800848a:	f7f8 fb57 	bl	8000b3c <__aeabi_dcmplt>
 800848e:	2800      	cmp	r0, #0
 8008490:	d050      	beq.n	8008534 <_dtoa_r+0x244>
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	3b01      	subs	r3, #1
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	2300      	movs	r3, #0
 800849a:	930b      	str	r3, [sp, #44]	; 0x2c
 800849c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800849e:	1b5d      	subs	r5, r3, r5
 80084a0:	1e6b      	subs	r3, r5, #1
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	bf45      	ittet	mi
 80084a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80084aa:	9304      	strmi	r3, [sp, #16]
 80084ac:	2300      	movpl	r3, #0
 80084ae:	2300      	movmi	r3, #0
 80084b0:	bf4c      	ite	mi
 80084b2:	9305      	strmi	r3, [sp, #20]
 80084b4:	9304      	strpl	r3, [sp, #16]
 80084b6:	9b00      	ldr	r3, [sp, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	db3d      	blt.n	8008538 <_dtoa_r+0x248>
 80084bc:	9b05      	ldr	r3, [sp, #20]
 80084be:	9a00      	ldr	r2, [sp, #0]
 80084c0:	920a      	str	r2, [sp, #40]	; 0x28
 80084c2:	4413      	add	r3, r2
 80084c4:	9305      	str	r3, [sp, #20]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9307      	str	r3, [sp, #28]
 80084ca:	9b06      	ldr	r3, [sp, #24]
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	f200 8089 	bhi.w	80085e4 <_dtoa_r+0x2f4>
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	bfc4      	itt	gt
 80084d6:	3b04      	subgt	r3, #4
 80084d8:	9306      	strgt	r3, [sp, #24]
 80084da:	9b06      	ldr	r3, [sp, #24]
 80084dc:	f1a3 0302 	sub.w	r3, r3, #2
 80084e0:	bfcc      	ite	gt
 80084e2:	2500      	movgt	r5, #0
 80084e4:	2501      	movle	r5, #1
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	f200 8087 	bhi.w	80085fa <_dtoa_r+0x30a>
 80084ec:	e8df f003 	tbb	[pc, r3]
 80084f0:	59383a2d 	.word	0x59383a2d
 80084f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084f8:	441d      	add	r5, r3
 80084fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084fe:	2b20      	cmp	r3, #32
 8008500:	bfc1      	itttt	gt
 8008502:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008506:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800850a:	fa0b f303 	lslgt.w	r3, fp, r3
 800850e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008512:	bfda      	itte	le
 8008514:	f1c3 0320 	rsble	r3, r3, #32
 8008518:	fa06 f003 	lslle.w	r0, r6, r3
 800851c:	4318      	orrgt	r0, r3
 800851e:	f7f8 f821 	bl	8000564 <__aeabi_ui2d>
 8008522:	2301      	movs	r3, #1
 8008524:	4606      	mov	r6, r0
 8008526:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800852a:	3d01      	subs	r5, #1
 800852c:	930e      	str	r3, [sp, #56]	; 0x38
 800852e:	e76a      	b.n	8008406 <_dtoa_r+0x116>
 8008530:	2301      	movs	r3, #1
 8008532:	e7b2      	b.n	800849a <_dtoa_r+0x1aa>
 8008534:	900b      	str	r0, [sp, #44]	; 0x2c
 8008536:	e7b1      	b.n	800849c <_dtoa_r+0x1ac>
 8008538:	9b04      	ldr	r3, [sp, #16]
 800853a:	9a00      	ldr	r2, [sp, #0]
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	4253      	negs	r3, r2
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	2300      	movs	r3, #0
 8008546:	930a      	str	r3, [sp, #40]	; 0x28
 8008548:	e7bf      	b.n	80084ca <_dtoa_r+0x1da>
 800854a:	2300      	movs	r3, #0
 800854c:	9308      	str	r3, [sp, #32]
 800854e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc55      	bgt.n	8008600 <_dtoa_r+0x310>
 8008554:	2301      	movs	r3, #1
 8008556:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800855a:	461a      	mov	r2, r3
 800855c:	9209      	str	r2, [sp, #36]	; 0x24
 800855e:	e00c      	b.n	800857a <_dtoa_r+0x28a>
 8008560:	2301      	movs	r3, #1
 8008562:	e7f3      	b.n	800854c <_dtoa_r+0x25c>
 8008564:	2300      	movs	r3, #0
 8008566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	4413      	add	r3, r2
 800856e:	9302      	str	r3, [sp, #8]
 8008570:	3301      	adds	r3, #1
 8008572:	2b01      	cmp	r3, #1
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	bfb8      	it	lt
 8008578:	2301      	movlt	r3, #1
 800857a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800857c:	2200      	movs	r2, #0
 800857e:	6042      	str	r2, [r0, #4]
 8008580:	2204      	movs	r2, #4
 8008582:	f102 0614 	add.w	r6, r2, #20
 8008586:	429e      	cmp	r6, r3
 8008588:	6841      	ldr	r1, [r0, #4]
 800858a:	d93d      	bls.n	8008608 <_dtoa_r+0x318>
 800858c:	4620      	mov	r0, r4
 800858e:	f001 fa57 	bl	8009a40 <_Balloc>
 8008592:	9001      	str	r0, [sp, #4]
 8008594:	2800      	cmp	r0, #0
 8008596:	d13b      	bne.n	8008610 <_dtoa_r+0x320>
 8008598:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <_dtoa_r+0x2f0>)
 800859a:	4602      	mov	r2, r0
 800859c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085a0:	e6c0      	b.n	8008324 <_dtoa_r+0x34>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7df      	b.n	8008566 <_dtoa_r+0x276>
 80085a6:	bf00      	nop
 80085a8:	636f4361 	.word	0x636f4361
 80085ac:	3fd287a7 	.word	0x3fd287a7
 80085b0:	8b60c8b3 	.word	0x8b60c8b3
 80085b4:	3fc68a28 	.word	0x3fc68a28
 80085b8:	509f79fb 	.word	0x509f79fb
 80085bc:	3fd34413 	.word	0x3fd34413
 80085c0:	0800c02e 	.word	0x0800c02e
 80085c4:	0800c045 	.word	0x0800c045
 80085c8:	7ff00000 	.word	0x7ff00000
 80085cc:	0800c02a 	.word	0x0800c02a
 80085d0:	0800c021 	.word	0x0800c021
 80085d4:	0800bea5 	.word	0x0800bea5
 80085d8:	3ff80000 	.word	0x3ff80000
 80085dc:	0800c218 	.word	0x0800c218
 80085e0:	0800c0a0 	.word	0x0800c0a0
 80085e4:	2501      	movs	r5, #1
 80085e6:	2300      	movs	r3, #0
 80085e8:	9306      	str	r3, [sp, #24]
 80085ea:	9508      	str	r5, [sp, #32]
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2312      	movs	r3, #18
 80085f8:	e7b0      	b.n	800855c <_dtoa_r+0x26c>
 80085fa:	2301      	movs	r3, #1
 80085fc:	9308      	str	r3, [sp, #32]
 80085fe:	e7f5      	b.n	80085ec <_dtoa_r+0x2fc>
 8008600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008602:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008606:	e7b8      	b.n	800857a <_dtoa_r+0x28a>
 8008608:	3101      	adds	r1, #1
 800860a:	6041      	str	r1, [r0, #4]
 800860c:	0052      	lsls	r2, r2, #1
 800860e:	e7b8      	b.n	8008582 <_dtoa_r+0x292>
 8008610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008612:	9a01      	ldr	r2, [sp, #4]
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	2b0e      	cmp	r3, #14
 800861a:	f200 809d 	bhi.w	8008758 <_dtoa_r+0x468>
 800861e:	2d00      	cmp	r5, #0
 8008620:	f000 809a 	beq.w	8008758 <_dtoa_r+0x468>
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	dd32      	ble.n	8008690 <_dtoa_r+0x3a0>
 800862a:	4ab7      	ldr	r2, [pc, #732]	; (8008908 <_dtoa_r+0x618>)
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008634:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008638:	9b00      	ldr	r3, [sp, #0]
 800863a:	05d8      	lsls	r0, r3, #23
 800863c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008640:	d516      	bpl.n	8008670 <_dtoa_r+0x380>
 8008642:	4bb2      	ldr	r3, [pc, #712]	; (800890c <_dtoa_r+0x61c>)
 8008644:	ec51 0b19 	vmov	r0, r1, d9
 8008648:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800864c:	f7f8 f92e 	bl	80008ac <__aeabi_ddiv>
 8008650:	f007 070f 	and.w	r7, r7, #15
 8008654:	4682      	mov	sl, r0
 8008656:	468b      	mov	fp, r1
 8008658:	2503      	movs	r5, #3
 800865a:	4eac      	ldr	r6, [pc, #688]	; (800890c <_dtoa_r+0x61c>)
 800865c:	b957      	cbnz	r7, 8008674 <_dtoa_r+0x384>
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	4650      	mov	r0, sl
 8008664:	4659      	mov	r1, fp
 8008666:	f7f8 f921 	bl	80008ac <__aeabi_ddiv>
 800866a:	4682      	mov	sl, r0
 800866c:	468b      	mov	fp, r1
 800866e:	e028      	b.n	80086c2 <_dtoa_r+0x3d2>
 8008670:	2502      	movs	r5, #2
 8008672:	e7f2      	b.n	800865a <_dtoa_r+0x36a>
 8008674:	07f9      	lsls	r1, r7, #31
 8008676:	d508      	bpl.n	800868a <_dtoa_r+0x39a>
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008680:	f7f7 ffea 	bl	8000658 <__aeabi_dmul>
 8008684:	3501      	adds	r5, #1
 8008686:	4680      	mov	r8, r0
 8008688:	4689      	mov	r9, r1
 800868a:	107f      	asrs	r7, r7, #1
 800868c:	3608      	adds	r6, #8
 800868e:	e7e5      	b.n	800865c <_dtoa_r+0x36c>
 8008690:	f000 809b 	beq.w	80087ca <_dtoa_r+0x4da>
 8008694:	9b00      	ldr	r3, [sp, #0]
 8008696:	4f9d      	ldr	r7, [pc, #628]	; (800890c <_dtoa_r+0x61c>)
 8008698:	425e      	negs	r6, r3
 800869a:	4b9b      	ldr	r3, [pc, #620]	; (8008908 <_dtoa_r+0x618>)
 800869c:	f006 020f 	and.w	r2, r6, #15
 80086a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	ec51 0b19 	vmov	r0, r1, d9
 80086ac:	f7f7 ffd4 	bl	8000658 <__aeabi_dmul>
 80086b0:	1136      	asrs	r6, r6, #4
 80086b2:	4682      	mov	sl, r0
 80086b4:	468b      	mov	fp, r1
 80086b6:	2300      	movs	r3, #0
 80086b8:	2502      	movs	r5, #2
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d17a      	bne.n	80087b4 <_dtoa_r+0x4c4>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1d3      	bne.n	800866a <_dtoa_r+0x37a>
 80086c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 8082 	beq.w	80087ce <_dtoa_r+0x4de>
 80086ca:	4b91      	ldr	r3, [pc, #580]	; (8008910 <_dtoa_r+0x620>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	4650      	mov	r0, sl
 80086d0:	4659      	mov	r1, fp
 80086d2:	f7f8 fa33 	bl	8000b3c <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d079      	beq.n	80087ce <_dtoa_r+0x4de>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d076      	beq.n	80087ce <_dtoa_r+0x4de>
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	dd36      	ble.n	8008754 <_dtoa_r+0x464>
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	1e5f      	subs	r7, r3, #1
 80086ee:	2200      	movs	r2, #0
 80086f0:	4b88      	ldr	r3, [pc, #544]	; (8008914 <_dtoa_r+0x624>)
 80086f2:	f7f7 ffb1 	bl	8000658 <__aeabi_dmul>
 80086f6:	9e02      	ldr	r6, [sp, #8]
 80086f8:	4682      	mov	sl, r0
 80086fa:	468b      	mov	fp, r1
 80086fc:	3501      	adds	r5, #1
 80086fe:	4628      	mov	r0, r5
 8008700:	f7f7 ff40 	bl	8000584 <__aeabi_i2d>
 8008704:	4652      	mov	r2, sl
 8008706:	465b      	mov	r3, fp
 8008708:	f7f7 ffa6 	bl	8000658 <__aeabi_dmul>
 800870c:	4b82      	ldr	r3, [pc, #520]	; (8008918 <_dtoa_r+0x628>)
 800870e:	2200      	movs	r2, #0
 8008710:	f7f7 fdec 	bl	80002ec <__adddf3>
 8008714:	46d0      	mov	r8, sl
 8008716:	46d9      	mov	r9, fp
 8008718:	4682      	mov	sl, r0
 800871a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800871e:	2e00      	cmp	r6, #0
 8008720:	d158      	bne.n	80087d4 <_dtoa_r+0x4e4>
 8008722:	4b7e      	ldr	r3, [pc, #504]	; (800891c <_dtoa_r+0x62c>)
 8008724:	2200      	movs	r2, #0
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f7 fddd 	bl	80002e8 <__aeabi_dsub>
 800872e:	4652      	mov	r2, sl
 8008730:	465b      	mov	r3, fp
 8008732:	4680      	mov	r8, r0
 8008734:	4689      	mov	r9, r1
 8008736:	f7f8 fa1f 	bl	8000b78 <__aeabi_dcmpgt>
 800873a:	2800      	cmp	r0, #0
 800873c:	f040 8295 	bne.w	8008c6a <_dtoa_r+0x97a>
 8008740:	4652      	mov	r2, sl
 8008742:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f8 f9f7 	bl	8000b3c <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f040 8289 	bne.w	8008c66 <_dtoa_r+0x976>
 8008754:	ec5b ab19 	vmov	sl, fp, d9
 8008758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875a:	2b00      	cmp	r3, #0
 800875c:	f2c0 8148 	blt.w	80089f0 <_dtoa_r+0x700>
 8008760:	9a00      	ldr	r2, [sp, #0]
 8008762:	2a0e      	cmp	r2, #14
 8008764:	f300 8144 	bgt.w	80089f0 <_dtoa_r+0x700>
 8008768:	4b67      	ldr	r3, [pc, #412]	; (8008908 <_dtoa_r+0x618>)
 800876a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800876e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	f280 80d5 	bge.w	8008924 <_dtoa_r+0x634>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f300 80d1 	bgt.w	8008924 <_dtoa_r+0x634>
 8008782:	f040 826f 	bne.w	8008c64 <_dtoa_r+0x974>
 8008786:	4b65      	ldr	r3, [pc, #404]	; (800891c <_dtoa_r+0x62c>)
 8008788:	2200      	movs	r2, #0
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 ff63 	bl	8000658 <__aeabi_dmul>
 8008792:	4652      	mov	r2, sl
 8008794:	465b      	mov	r3, fp
 8008796:	f7f8 f9e5 	bl	8000b64 <__aeabi_dcmpge>
 800879a:	9e03      	ldr	r6, [sp, #12]
 800879c:	4637      	mov	r7, r6
 800879e:	2800      	cmp	r0, #0
 80087a0:	f040 8245 	bne.w	8008c2e <_dtoa_r+0x93e>
 80087a4:	9d01      	ldr	r5, [sp, #4]
 80087a6:	2331      	movs	r3, #49	; 0x31
 80087a8:	f805 3b01 	strb.w	r3, [r5], #1
 80087ac:	9b00      	ldr	r3, [sp, #0]
 80087ae:	3301      	adds	r3, #1
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	e240      	b.n	8008c36 <_dtoa_r+0x946>
 80087b4:	07f2      	lsls	r2, r6, #31
 80087b6:	d505      	bpl.n	80087c4 <_dtoa_r+0x4d4>
 80087b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087bc:	f7f7 ff4c 	bl	8000658 <__aeabi_dmul>
 80087c0:	3501      	adds	r5, #1
 80087c2:	2301      	movs	r3, #1
 80087c4:	1076      	asrs	r6, r6, #1
 80087c6:	3708      	adds	r7, #8
 80087c8:	e777      	b.n	80086ba <_dtoa_r+0x3ca>
 80087ca:	2502      	movs	r5, #2
 80087cc:	e779      	b.n	80086c2 <_dtoa_r+0x3d2>
 80087ce:	9f00      	ldr	r7, [sp, #0]
 80087d0:	9e03      	ldr	r6, [sp, #12]
 80087d2:	e794      	b.n	80086fe <_dtoa_r+0x40e>
 80087d4:	9901      	ldr	r1, [sp, #4]
 80087d6:	4b4c      	ldr	r3, [pc, #304]	; (8008908 <_dtoa_r+0x618>)
 80087d8:	4431      	add	r1, r6
 80087da:	910d      	str	r1, [sp, #52]	; 0x34
 80087dc:	9908      	ldr	r1, [sp, #32]
 80087de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087e6:	2900      	cmp	r1, #0
 80087e8:	d043      	beq.n	8008872 <_dtoa_r+0x582>
 80087ea:	494d      	ldr	r1, [pc, #308]	; (8008920 <_dtoa_r+0x630>)
 80087ec:	2000      	movs	r0, #0
 80087ee:	f7f8 f85d 	bl	80008ac <__aeabi_ddiv>
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	f7f7 fd77 	bl	80002e8 <__aeabi_dsub>
 80087fa:	9d01      	ldr	r5, [sp, #4]
 80087fc:	4682      	mov	sl, r0
 80087fe:	468b      	mov	fp, r1
 8008800:	4649      	mov	r1, r9
 8008802:	4640      	mov	r0, r8
 8008804:	f7f8 f9d8 	bl	8000bb8 <__aeabi_d2iz>
 8008808:	4606      	mov	r6, r0
 800880a:	f7f7 febb 	bl	8000584 <__aeabi_i2d>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	f7f7 fd67 	bl	80002e8 <__aeabi_dsub>
 800881a:	3630      	adds	r6, #48	; 0x30
 800881c:	f805 6b01 	strb.w	r6, [r5], #1
 8008820:	4652      	mov	r2, sl
 8008822:	465b      	mov	r3, fp
 8008824:	4680      	mov	r8, r0
 8008826:	4689      	mov	r9, r1
 8008828:	f7f8 f988 	bl	8000b3c <__aeabi_dcmplt>
 800882c:	2800      	cmp	r0, #0
 800882e:	d163      	bne.n	80088f8 <_dtoa_r+0x608>
 8008830:	4642      	mov	r2, r8
 8008832:	464b      	mov	r3, r9
 8008834:	4936      	ldr	r1, [pc, #216]	; (8008910 <_dtoa_r+0x620>)
 8008836:	2000      	movs	r0, #0
 8008838:	f7f7 fd56 	bl	80002e8 <__aeabi_dsub>
 800883c:	4652      	mov	r2, sl
 800883e:	465b      	mov	r3, fp
 8008840:	f7f8 f97c 	bl	8000b3c <__aeabi_dcmplt>
 8008844:	2800      	cmp	r0, #0
 8008846:	f040 80b5 	bne.w	80089b4 <_dtoa_r+0x6c4>
 800884a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800884c:	429d      	cmp	r5, r3
 800884e:	d081      	beq.n	8008754 <_dtoa_r+0x464>
 8008850:	4b30      	ldr	r3, [pc, #192]	; (8008914 <_dtoa_r+0x624>)
 8008852:	2200      	movs	r2, #0
 8008854:	4650      	mov	r0, sl
 8008856:	4659      	mov	r1, fp
 8008858:	f7f7 fefe 	bl	8000658 <__aeabi_dmul>
 800885c:	4b2d      	ldr	r3, [pc, #180]	; (8008914 <_dtoa_r+0x624>)
 800885e:	4682      	mov	sl, r0
 8008860:	468b      	mov	fp, r1
 8008862:	4640      	mov	r0, r8
 8008864:	4649      	mov	r1, r9
 8008866:	2200      	movs	r2, #0
 8008868:	f7f7 fef6 	bl	8000658 <__aeabi_dmul>
 800886c:	4680      	mov	r8, r0
 800886e:	4689      	mov	r9, r1
 8008870:	e7c6      	b.n	8008800 <_dtoa_r+0x510>
 8008872:	4650      	mov	r0, sl
 8008874:	4659      	mov	r1, fp
 8008876:	f7f7 feef 	bl	8000658 <__aeabi_dmul>
 800887a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887c:	9d01      	ldr	r5, [sp, #4]
 800887e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008880:	4682      	mov	sl, r0
 8008882:	468b      	mov	fp, r1
 8008884:	4649      	mov	r1, r9
 8008886:	4640      	mov	r0, r8
 8008888:	f7f8 f996 	bl	8000bb8 <__aeabi_d2iz>
 800888c:	4606      	mov	r6, r0
 800888e:	f7f7 fe79 	bl	8000584 <__aeabi_i2d>
 8008892:	3630      	adds	r6, #48	; 0x30
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f7 fd24 	bl	80002e8 <__aeabi_dsub>
 80088a0:	f805 6b01 	strb.w	r6, [r5], #1
 80088a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a6:	429d      	cmp	r5, r3
 80088a8:	4680      	mov	r8, r0
 80088aa:	4689      	mov	r9, r1
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	d124      	bne.n	80088fc <_dtoa_r+0x60c>
 80088b2:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <_dtoa_r+0x630>)
 80088b4:	4650      	mov	r0, sl
 80088b6:	4659      	mov	r1, fp
 80088b8:	f7f7 fd18 	bl	80002ec <__adddf3>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f8 f958 	bl	8000b78 <__aeabi_dcmpgt>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d173      	bne.n	80089b4 <_dtoa_r+0x6c4>
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	4913      	ldr	r1, [pc, #76]	; (8008920 <_dtoa_r+0x630>)
 80088d2:	2000      	movs	r0, #0
 80088d4:	f7f7 fd08 	bl	80002e8 <__aeabi_dsub>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4640      	mov	r0, r8
 80088de:	4649      	mov	r1, r9
 80088e0:	f7f8 f92c 	bl	8000b3c <__aeabi_dcmplt>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f43f af35 	beq.w	8008754 <_dtoa_r+0x464>
 80088ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088ec:	1e6b      	subs	r3, r5, #1
 80088ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d0f8      	beq.n	80088ea <_dtoa_r+0x5fa>
 80088f8:	9700      	str	r7, [sp, #0]
 80088fa:	e049      	b.n	8008990 <_dtoa_r+0x6a0>
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <_dtoa_r+0x624>)
 80088fe:	f7f7 feab 	bl	8000658 <__aeabi_dmul>
 8008902:	4680      	mov	r8, r0
 8008904:	4689      	mov	r9, r1
 8008906:	e7bd      	b.n	8008884 <_dtoa_r+0x594>
 8008908:	0800c218 	.word	0x0800c218
 800890c:	0800c1f0 	.word	0x0800c1f0
 8008910:	3ff00000 	.word	0x3ff00000
 8008914:	40240000 	.word	0x40240000
 8008918:	401c0000 	.word	0x401c0000
 800891c:	40140000 	.word	0x40140000
 8008920:	3fe00000 	.word	0x3fe00000
 8008924:	9d01      	ldr	r5, [sp, #4]
 8008926:	4656      	mov	r6, sl
 8008928:	465f      	mov	r7, fp
 800892a:	4642      	mov	r2, r8
 800892c:	464b      	mov	r3, r9
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	f7f7 ffbb 	bl	80008ac <__aeabi_ddiv>
 8008936:	f7f8 f93f 	bl	8000bb8 <__aeabi_d2iz>
 800893a:	4682      	mov	sl, r0
 800893c:	f7f7 fe22 	bl	8000584 <__aeabi_i2d>
 8008940:	4642      	mov	r2, r8
 8008942:	464b      	mov	r3, r9
 8008944:	f7f7 fe88 	bl	8000658 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008954:	f7f7 fcc8 	bl	80002e8 <__aeabi_dsub>
 8008958:	f805 6b01 	strb.w	r6, [r5], #1
 800895c:	9e01      	ldr	r6, [sp, #4]
 800895e:	9f03      	ldr	r7, [sp, #12]
 8008960:	1bae      	subs	r6, r5, r6
 8008962:	42b7      	cmp	r7, r6
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	d135      	bne.n	80089d6 <_dtoa_r+0x6e6>
 800896a:	f7f7 fcbf 	bl	80002ec <__adddf3>
 800896e:	4642      	mov	r2, r8
 8008970:	464b      	mov	r3, r9
 8008972:	4606      	mov	r6, r0
 8008974:	460f      	mov	r7, r1
 8008976:	f7f8 f8ff 	bl	8000b78 <__aeabi_dcmpgt>
 800897a:	b9d0      	cbnz	r0, 80089b2 <_dtoa_r+0x6c2>
 800897c:	4642      	mov	r2, r8
 800897e:	464b      	mov	r3, r9
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f8 f8d0 	bl	8000b28 <__aeabi_dcmpeq>
 8008988:	b110      	cbz	r0, 8008990 <_dtoa_r+0x6a0>
 800898a:	f01a 0f01 	tst.w	sl, #1
 800898e:	d110      	bne.n	80089b2 <_dtoa_r+0x6c2>
 8008990:	4620      	mov	r0, r4
 8008992:	ee18 1a10 	vmov	r1, s16
 8008996:	f001 f893 	bl	8009ac0 <_Bfree>
 800899a:	2300      	movs	r3, #0
 800899c:	9800      	ldr	r0, [sp, #0]
 800899e:	702b      	strb	r3, [r5, #0]
 80089a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a2:	3001      	adds	r0, #1
 80089a4:	6018      	str	r0, [r3, #0]
 80089a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f43f acf1 	beq.w	8008390 <_dtoa_r+0xa0>
 80089ae:	601d      	str	r5, [r3, #0]
 80089b0:	e4ee      	b.n	8008390 <_dtoa_r+0xa0>
 80089b2:	9f00      	ldr	r7, [sp, #0]
 80089b4:	462b      	mov	r3, r5
 80089b6:	461d      	mov	r5, r3
 80089b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089bc:	2a39      	cmp	r2, #57	; 0x39
 80089be:	d106      	bne.n	80089ce <_dtoa_r+0x6de>
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d1f7      	bne.n	80089b6 <_dtoa_r+0x6c6>
 80089c6:	9901      	ldr	r1, [sp, #4]
 80089c8:	2230      	movs	r2, #48	; 0x30
 80089ca:	3701      	adds	r7, #1
 80089cc:	700a      	strb	r2, [r1, #0]
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	3201      	adds	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	e790      	b.n	80088f8 <_dtoa_r+0x608>
 80089d6:	4ba6      	ldr	r3, [pc, #664]	; (8008c70 <_dtoa_r+0x980>)
 80089d8:	2200      	movs	r2, #0
 80089da:	f7f7 fe3d 	bl	8000658 <__aeabi_dmul>
 80089de:	2200      	movs	r2, #0
 80089e0:	2300      	movs	r3, #0
 80089e2:	4606      	mov	r6, r0
 80089e4:	460f      	mov	r7, r1
 80089e6:	f7f8 f89f 	bl	8000b28 <__aeabi_dcmpeq>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d09d      	beq.n	800892a <_dtoa_r+0x63a>
 80089ee:	e7cf      	b.n	8008990 <_dtoa_r+0x6a0>
 80089f0:	9a08      	ldr	r2, [sp, #32]
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	f000 80d7 	beq.w	8008ba6 <_dtoa_r+0x8b6>
 80089f8:	9a06      	ldr	r2, [sp, #24]
 80089fa:	2a01      	cmp	r2, #1
 80089fc:	f300 80ba 	bgt.w	8008b74 <_dtoa_r+0x884>
 8008a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	f000 80b2 	beq.w	8008b6c <_dtoa_r+0x87c>
 8008a08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a0c:	9e07      	ldr	r6, [sp, #28]
 8008a0e:	9d04      	ldr	r5, [sp, #16]
 8008a10:	9a04      	ldr	r2, [sp, #16]
 8008a12:	441a      	add	r2, r3
 8008a14:	9204      	str	r2, [sp, #16]
 8008a16:	9a05      	ldr	r2, [sp, #20]
 8008a18:	2101      	movs	r1, #1
 8008a1a:	441a      	add	r2, r3
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	9205      	str	r2, [sp, #20]
 8008a20:	f001 f950 	bl	8009cc4 <__i2b>
 8008a24:	4607      	mov	r7, r0
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	dd0c      	ble.n	8008a44 <_dtoa_r+0x754>
 8008a2a:	9b05      	ldr	r3, [sp, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd09      	ble.n	8008a44 <_dtoa_r+0x754>
 8008a30:	42ab      	cmp	r3, r5
 8008a32:	9a04      	ldr	r2, [sp, #16]
 8008a34:	bfa8      	it	ge
 8008a36:	462b      	movge	r3, r5
 8008a38:	1ad2      	subs	r2, r2, r3
 8008a3a:	9204      	str	r2, [sp, #16]
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	1aed      	subs	r5, r5, r3
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	b31b      	cbz	r3, 8008a90 <_dtoa_r+0x7a0>
 8008a48:	9b08      	ldr	r3, [sp, #32]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 80af 	beq.w	8008bae <_dtoa_r+0x8be>
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	dd13      	ble.n	8008a7c <_dtoa_r+0x78c>
 8008a54:	4639      	mov	r1, r7
 8008a56:	4632      	mov	r2, r6
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f001 f9f3 	bl	8009e44 <__pow5mult>
 8008a5e:	ee18 2a10 	vmov	r2, s16
 8008a62:	4601      	mov	r1, r0
 8008a64:	4607      	mov	r7, r0
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 f942 	bl	8009cf0 <__multiply>
 8008a6c:	ee18 1a10 	vmov	r1, s16
 8008a70:	4680      	mov	r8, r0
 8008a72:	4620      	mov	r0, r4
 8008a74:	f001 f824 	bl	8009ac0 <_Bfree>
 8008a78:	ee08 8a10 	vmov	s16, r8
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	1b9a      	subs	r2, r3, r6
 8008a80:	d006      	beq.n	8008a90 <_dtoa_r+0x7a0>
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 f9dc 	bl	8009e44 <__pow5mult>
 8008a8c:	ee08 0a10 	vmov	s16, r0
 8008a90:	2101      	movs	r1, #1
 8008a92:	4620      	mov	r0, r4
 8008a94:	f001 f916 	bl	8009cc4 <__i2b>
 8008a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	f340 8088 	ble.w	8008bb2 <_dtoa_r+0x8c2>
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f001 f9cc 	bl	8009e44 <__pow5mult>
 8008aac:	9b06      	ldr	r3, [sp, #24]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	f340 8081 	ble.w	8008bb8 <_dtoa_r+0x8c8>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	6933      	ldr	r3, [r6, #16]
 8008abc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ac0:	6918      	ldr	r0, [r3, #16]
 8008ac2:	f001 f8af 	bl	8009c24 <__hi0bits>
 8008ac6:	f1c0 0020 	rsb	r0, r0, #32
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	4418      	add	r0, r3
 8008ace:	f010 001f 	ands.w	r0, r0, #31
 8008ad2:	f000 8092 	beq.w	8008bfa <_dtoa_r+0x90a>
 8008ad6:	f1c0 0320 	rsb	r3, r0, #32
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	f340 808a 	ble.w	8008bf4 <_dtoa_r+0x904>
 8008ae0:	f1c0 001c 	rsb	r0, r0, #28
 8008ae4:	9b04      	ldr	r3, [sp, #16]
 8008ae6:	4403      	add	r3, r0
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	9b05      	ldr	r3, [sp, #20]
 8008aec:	4403      	add	r3, r0
 8008aee:	4405      	add	r5, r0
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd07      	ble.n	8008b08 <_dtoa_r+0x818>
 8008af8:	ee18 1a10 	vmov	r1, s16
 8008afc:	461a      	mov	r2, r3
 8008afe:	4620      	mov	r0, r4
 8008b00:	f001 f9fa 	bl	8009ef8 <__lshift>
 8008b04:	ee08 0a10 	vmov	s16, r0
 8008b08:	9b05      	ldr	r3, [sp, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	dd05      	ble.n	8008b1a <_dtoa_r+0x82a>
 8008b0e:	4631      	mov	r1, r6
 8008b10:	461a      	mov	r2, r3
 8008b12:	4620      	mov	r0, r4
 8008b14:	f001 f9f0 	bl	8009ef8 <__lshift>
 8008b18:	4606      	mov	r6, r0
 8008b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d06e      	beq.n	8008bfe <_dtoa_r+0x90e>
 8008b20:	ee18 0a10 	vmov	r0, s16
 8008b24:	4631      	mov	r1, r6
 8008b26:	f001 fa57 	bl	8009fd8 <__mcmp>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	da67      	bge.n	8008bfe <_dtoa_r+0x90e>
 8008b2e:	9b00      	ldr	r3, [sp, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	ee18 1a10 	vmov	r1, s16
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	220a      	movs	r2, #10
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 ffe1 	bl	8009b04 <__multadd>
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	ee08 0a10 	vmov	s16, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 81b1 	beq.w	8008eb0 <_dtoa_r+0xbc0>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4639      	mov	r1, r7
 8008b52:	220a      	movs	r2, #10
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 ffd5 	bl	8009b04 <__multadd>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	4607      	mov	r7, r0
 8008b60:	f300 808e 	bgt.w	8008c80 <_dtoa_r+0x990>
 8008b64:	9b06      	ldr	r3, [sp, #24]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	dc51      	bgt.n	8008c0e <_dtoa_r+0x91e>
 8008b6a:	e089      	b.n	8008c80 <_dtoa_r+0x990>
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b72:	e74b      	b.n	8008a0c <_dtoa_r+0x71c>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	1e5e      	subs	r6, r3, #1
 8008b78:	9b07      	ldr	r3, [sp, #28]
 8008b7a:	42b3      	cmp	r3, r6
 8008b7c:	bfbf      	itttt	lt
 8008b7e:	9b07      	ldrlt	r3, [sp, #28]
 8008b80:	9607      	strlt	r6, [sp, #28]
 8008b82:	1af2      	sublt	r2, r6, r3
 8008b84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b86:	bfb6      	itet	lt
 8008b88:	189b      	addlt	r3, r3, r2
 8008b8a:	1b9e      	subge	r6, r3, r6
 8008b8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	bfb8      	it	lt
 8008b92:	2600      	movlt	r6, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfb7      	itett	lt
 8008b98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ba0:	1a9d      	sublt	r5, r3, r2
 8008ba2:	2300      	movlt	r3, #0
 8008ba4:	e734      	b.n	8008a10 <_dtoa_r+0x720>
 8008ba6:	9e07      	ldr	r6, [sp, #28]
 8008ba8:	9d04      	ldr	r5, [sp, #16]
 8008baa:	9f08      	ldr	r7, [sp, #32]
 8008bac:	e73b      	b.n	8008a26 <_dtoa_r+0x736>
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	e767      	b.n	8008a82 <_dtoa_r+0x792>
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	dc18      	bgt.n	8008bea <_dtoa_r+0x8fa>
 8008bb8:	f1ba 0f00 	cmp.w	sl, #0
 8008bbc:	d115      	bne.n	8008bea <_dtoa_r+0x8fa>
 8008bbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bc2:	b993      	cbnz	r3, 8008bea <_dtoa_r+0x8fa>
 8008bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bc8:	0d1b      	lsrs	r3, r3, #20
 8008bca:	051b      	lsls	r3, r3, #20
 8008bcc:	b183      	cbz	r3, 8008bf0 <_dtoa_r+0x900>
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	9b05      	ldr	r3, [sp, #20]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	9305      	str	r3, [sp, #20]
 8008bda:	f04f 0801 	mov.w	r8, #1
 8008bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f47f af6a 	bne.w	8008aba <_dtoa_r+0x7ca>
 8008be6:	2001      	movs	r0, #1
 8008be8:	e76f      	b.n	8008aca <_dtoa_r+0x7da>
 8008bea:	f04f 0800 	mov.w	r8, #0
 8008bee:	e7f6      	b.n	8008bde <_dtoa_r+0x8ee>
 8008bf0:	4698      	mov	r8, r3
 8008bf2:	e7f4      	b.n	8008bde <_dtoa_r+0x8ee>
 8008bf4:	f43f af7d 	beq.w	8008af2 <_dtoa_r+0x802>
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	301c      	adds	r0, #28
 8008bfc:	e772      	b.n	8008ae4 <_dtoa_r+0x7f4>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dc37      	bgt.n	8008c74 <_dtoa_r+0x984>
 8008c04:	9b06      	ldr	r3, [sp, #24]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	dd34      	ble.n	8008c74 <_dtoa_r+0x984>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	b96b      	cbnz	r3, 8008c2e <_dtoa_r+0x93e>
 8008c12:	4631      	mov	r1, r6
 8008c14:	2205      	movs	r2, #5
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 ff74 	bl	8009b04 <__multadd>
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4606      	mov	r6, r0
 8008c20:	ee18 0a10 	vmov	r0, s16
 8008c24:	f001 f9d8 	bl	8009fd8 <__mcmp>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	f73f adbb 	bgt.w	80087a4 <_dtoa_r+0x4b4>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	9d01      	ldr	r5, [sp, #4]
 8008c32:	43db      	mvns	r3, r3
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	f04f 0800 	mov.w	r8, #0
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 ff3f 	bl	8009ac0 <_Bfree>
 8008c42:	2f00      	cmp	r7, #0
 8008c44:	f43f aea4 	beq.w	8008990 <_dtoa_r+0x6a0>
 8008c48:	f1b8 0f00 	cmp.w	r8, #0
 8008c4c:	d005      	beq.n	8008c5a <_dtoa_r+0x96a>
 8008c4e:	45b8      	cmp	r8, r7
 8008c50:	d003      	beq.n	8008c5a <_dtoa_r+0x96a>
 8008c52:	4641      	mov	r1, r8
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 ff33 	bl	8009ac0 <_Bfree>
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 ff2f 	bl	8009ac0 <_Bfree>
 8008c62:	e695      	b.n	8008990 <_dtoa_r+0x6a0>
 8008c64:	2600      	movs	r6, #0
 8008c66:	4637      	mov	r7, r6
 8008c68:	e7e1      	b.n	8008c2e <_dtoa_r+0x93e>
 8008c6a:	9700      	str	r7, [sp, #0]
 8008c6c:	4637      	mov	r7, r6
 8008c6e:	e599      	b.n	80087a4 <_dtoa_r+0x4b4>
 8008c70:	40240000 	.word	0x40240000
 8008c74:	9b08      	ldr	r3, [sp, #32]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 80ca 	beq.w	8008e10 <_dtoa_r+0xb20>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	2d00      	cmp	r5, #0
 8008c82:	dd05      	ble.n	8008c90 <_dtoa_r+0x9a0>
 8008c84:	4639      	mov	r1, r7
 8008c86:	462a      	mov	r2, r5
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f001 f935 	bl	8009ef8 <__lshift>
 8008c8e:	4607      	mov	r7, r0
 8008c90:	f1b8 0f00 	cmp.w	r8, #0
 8008c94:	d05b      	beq.n	8008d4e <_dtoa_r+0xa5e>
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fed1 	bl	8009a40 <_Balloc>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	b928      	cbnz	r0, 8008cae <_dtoa_r+0x9be>
 8008ca2:	4b87      	ldr	r3, [pc, #540]	; (8008ec0 <_dtoa_r+0xbd0>)
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008caa:	f7ff bb3b 	b.w	8008324 <_dtoa_r+0x34>
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	3202      	adds	r2, #2
 8008cb2:	0092      	lsls	r2, r2, #2
 8008cb4:	f107 010c 	add.w	r1, r7, #12
 8008cb8:	300c      	adds	r0, #12
 8008cba:	f000 feb3 	bl	8009a24 <memcpy>
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f001 f918 	bl	8009ef8 <__lshift>
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	f103 0901 	add.w	r9, r3, #1
 8008cce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	9305      	str	r3, [sp, #20]
 8008cd6:	f00a 0301 	and.w	r3, sl, #1
 8008cda:	46b8      	mov	r8, r7
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	4607      	mov	r7, r0
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	ee18 0a10 	vmov	r0, s16
 8008ce6:	f7ff fa77 	bl	80081d8 <quorem>
 8008cea:	4641      	mov	r1, r8
 8008cec:	9002      	str	r0, [sp, #8]
 8008cee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cf2:	ee18 0a10 	vmov	r0, s16
 8008cf6:	f001 f96f 	bl	8009fd8 <__mcmp>
 8008cfa:	463a      	mov	r2, r7
 8008cfc:	9003      	str	r0, [sp, #12]
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4620      	mov	r0, r4
 8008d02:	f001 f985 	bl	800a010 <__mdiff>
 8008d06:	68c2      	ldr	r2, [r0, #12]
 8008d08:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	bb02      	cbnz	r2, 8008d52 <_dtoa_r+0xa62>
 8008d10:	4601      	mov	r1, r0
 8008d12:	ee18 0a10 	vmov	r0, s16
 8008d16:	f001 f95f 	bl	8009fd8 <__mcmp>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4620      	mov	r0, r4
 8008d20:	9207      	str	r2, [sp, #28]
 8008d22:	f000 fecd 	bl	8009ac0 <_Bfree>
 8008d26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d2a:	ea43 0102 	orr.w	r1, r3, r2
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	430b      	orrs	r3, r1
 8008d32:	464d      	mov	r5, r9
 8008d34:	d10f      	bne.n	8008d56 <_dtoa_r+0xa66>
 8008d36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d3a:	d02a      	beq.n	8008d92 <_dtoa_r+0xaa2>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd02      	ble.n	8008d48 <_dtoa_r+0xa58>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d48:	f88b a000 	strb.w	sl, [fp]
 8008d4c:	e775      	b.n	8008c3a <_dtoa_r+0x94a>
 8008d4e:	4638      	mov	r0, r7
 8008d50:	e7ba      	b.n	8008cc8 <_dtoa_r+0x9d8>
 8008d52:	2201      	movs	r2, #1
 8008d54:	e7e2      	b.n	8008d1c <_dtoa_r+0xa2c>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	db04      	blt.n	8008d66 <_dtoa_r+0xa76>
 8008d5c:	9906      	ldr	r1, [sp, #24]
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	9904      	ldr	r1, [sp, #16]
 8008d62:	430b      	orrs	r3, r1
 8008d64:	d122      	bne.n	8008dac <_dtoa_r+0xabc>
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	ddee      	ble.n	8008d48 <_dtoa_r+0xa58>
 8008d6a:	ee18 1a10 	vmov	r1, s16
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4620      	mov	r0, r4
 8008d72:	f001 f8c1 	bl	8009ef8 <__lshift>
 8008d76:	4631      	mov	r1, r6
 8008d78:	ee08 0a10 	vmov	s16, r0
 8008d7c:	f001 f92c 	bl	8009fd8 <__mcmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	dc03      	bgt.n	8008d8c <_dtoa_r+0xa9c>
 8008d84:	d1e0      	bne.n	8008d48 <_dtoa_r+0xa58>
 8008d86:	f01a 0f01 	tst.w	sl, #1
 8008d8a:	d0dd      	beq.n	8008d48 <_dtoa_r+0xa58>
 8008d8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d90:	d1d7      	bne.n	8008d42 <_dtoa_r+0xa52>
 8008d92:	2339      	movs	r3, #57	; 0x39
 8008d94:	f88b 3000 	strb.w	r3, [fp]
 8008d98:	462b      	mov	r3, r5
 8008d9a:	461d      	mov	r5, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008da2:	2a39      	cmp	r2, #57	; 0x39
 8008da4:	d071      	beq.n	8008e8a <_dtoa_r+0xb9a>
 8008da6:	3201      	adds	r2, #1
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	e746      	b.n	8008c3a <_dtoa_r+0x94a>
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	dd07      	ble.n	8008dc0 <_dtoa_r+0xad0>
 8008db0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008db4:	d0ed      	beq.n	8008d92 <_dtoa_r+0xaa2>
 8008db6:	f10a 0301 	add.w	r3, sl, #1
 8008dba:	f88b 3000 	strb.w	r3, [fp]
 8008dbe:	e73c      	b.n	8008c3a <_dtoa_r+0x94a>
 8008dc0:	9b05      	ldr	r3, [sp, #20]
 8008dc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dc6:	4599      	cmp	r9, r3
 8008dc8:	d047      	beq.n	8008e5a <_dtoa_r+0xb6a>
 8008dca:	ee18 1a10 	vmov	r1, s16
 8008dce:	2300      	movs	r3, #0
 8008dd0:	220a      	movs	r2, #10
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fe96 	bl	8009b04 <__multadd>
 8008dd8:	45b8      	cmp	r8, r7
 8008dda:	ee08 0a10 	vmov	s16, r0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	f04f 020a 	mov.w	r2, #10
 8008de6:	4641      	mov	r1, r8
 8008de8:	4620      	mov	r0, r4
 8008dea:	d106      	bne.n	8008dfa <_dtoa_r+0xb0a>
 8008dec:	f000 fe8a 	bl	8009b04 <__multadd>
 8008df0:	4680      	mov	r8, r0
 8008df2:	4607      	mov	r7, r0
 8008df4:	f109 0901 	add.w	r9, r9, #1
 8008df8:	e772      	b.n	8008ce0 <_dtoa_r+0x9f0>
 8008dfa:	f000 fe83 	bl	8009b04 <__multadd>
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4680      	mov	r8, r0
 8008e02:	2300      	movs	r3, #0
 8008e04:	220a      	movs	r2, #10
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 fe7c 	bl	8009b04 <__multadd>
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	e7f1      	b.n	8008df4 <_dtoa_r+0xb04>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	9302      	str	r3, [sp, #8]
 8008e14:	9d01      	ldr	r5, [sp, #4]
 8008e16:	ee18 0a10 	vmov	r0, s16
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	f7ff f9dc 	bl	80081d8 <quorem>
 8008e20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e24:	9b01      	ldr	r3, [sp, #4]
 8008e26:	f805 ab01 	strb.w	sl, [r5], #1
 8008e2a:	1aea      	subs	r2, r5, r3
 8008e2c:	9b02      	ldr	r3, [sp, #8]
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	dd09      	ble.n	8008e46 <_dtoa_r+0xb56>
 8008e32:	ee18 1a10 	vmov	r1, s16
 8008e36:	2300      	movs	r3, #0
 8008e38:	220a      	movs	r2, #10
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fe62 	bl	8009b04 <__multadd>
 8008e40:	ee08 0a10 	vmov	s16, r0
 8008e44:	e7e7      	b.n	8008e16 <_dtoa_r+0xb26>
 8008e46:	9b02      	ldr	r3, [sp, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bfc8      	it	gt
 8008e4c:	461d      	movgt	r5, r3
 8008e4e:	9b01      	ldr	r3, [sp, #4]
 8008e50:	bfd8      	it	le
 8008e52:	2501      	movle	r5, #1
 8008e54:	441d      	add	r5, r3
 8008e56:	f04f 0800 	mov.w	r8, #0
 8008e5a:	ee18 1a10 	vmov	r1, s16
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4620      	mov	r0, r4
 8008e62:	f001 f849 	bl	8009ef8 <__lshift>
 8008e66:	4631      	mov	r1, r6
 8008e68:	ee08 0a10 	vmov	s16, r0
 8008e6c:	f001 f8b4 	bl	8009fd8 <__mcmp>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	dc91      	bgt.n	8008d98 <_dtoa_r+0xaa8>
 8008e74:	d102      	bne.n	8008e7c <_dtoa_r+0xb8c>
 8008e76:	f01a 0f01 	tst.w	sl, #1
 8008e7a:	d18d      	bne.n	8008d98 <_dtoa_r+0xaa8>
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	461d      	mov	r5, r3
 8008e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e84:	2a30      	cmp	r2, #48	; 0x30
 8008e86:	d0fa      	beq.n	8008e7e <_dtoa_r+0xb8e>
 8008e88:	e6d7      	b.n	8008c3a <_dtoa_r+0x94a>
 8008e8a:	9a01      	ldr	r2, [sp, #4]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d184      	bne.n	8008d9a <_dtoa_r+0xaaa>
 8008e90:	9b00      	ldr	r3, [sp, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2331      	movs	r3, #49	; 0x31
 8008e98:	7013      	strb	r3, [r2, #0]
 8008e9a:	e6ce      	b.n	8008c3a <_dtoa_r+0x94a>
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <_dtoa_r+0xbd4>)
 8008e9e:	f7ff ba95 	b.w	80083cc <_dtoa_r+0xdc>
 8008ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f47f aa6e 	bne.w	8008386 <_dtoa_r+0x96>
 8008eaa:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <_dtoa_r+0xbd8>)
 8008eac:	f7ff ba8e 	b.w	80083cc <_dtoa_r+0xdc>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	dcae      	bgt.n	8008e14 <_dtoa_r+0xb24>
 8008eb6:	9b06      	ldr	r3, [sp, #24]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	f73f aea8 	bgt.w	8008c0e <_dtoa_r+0x91e>
 8008ebe:	e7a9      	b.n	8008e14 <_dtoa_r+0xb24>
 8008ec0:	0800c0a0 	.word	0x0800c0a0
 8008ec4:	0800bea4 	.word	0x0800bea4
 8008ec8:	0800c021 	.word	0x0800c021

08008ecc <__sflush_r>:
 8008ecc:	898a      	ldrh	r2, [r1, #12]
 8008ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	0710      	lsls	r0, r2, #28
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	d458      	bmi.n	8008f8c <__sflush_r+0xc0>
 8008eda:	684b      	ldr	r3, [r1, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dc05      	bgt.n	8008eec <__sflush_r+0x20>
 8008ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dc02      	bgt.n	8008eec <__sflush_r+0x20>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eee:	2e00      	cmp	r6, #0
 8008ef0:	d0f9      	beq.n	8008ee6 <__sflush_r+0x1a>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ef8:	682f      	ldr	r7, [r5, #0]
 8008efa:	602b      	str	r3, [r5, #0]
 8008efc:	d032      	beq.n	8008f64 <__sflush_r+0x98>
 8008efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	075a      	lsls	r2, r3, #29
 8008f04:	d505      	bpl.n	8008f12 <__sflush_r+0x46>
 8008f06:	6863      	ldr	r3, [r4, #4]
 8008f08:	1ac0      	subs	r0, r0, r3
 8008f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f0c:	b10b      	cbz	r3, 8008f12 <__sflush_r+0x46>
 8008f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f10:	1ac0      	subs	r0, r0, r3
 8008f12:	2300      	movs	r3, #0
 8008f14:	4602      	mov	r2, r0
 8008f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f18:	6a21      	ldr	r1, [r4, #32]
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b0      	blx	r6
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	d106      	bne.n	8008f32 <__sflush_r+0x66>
 8008f24:	6829      	ldr	r1, [r5, #0]
 8008f26:	291d      	cmp	r1, #29
 8008f28:	d82c      	bhi.n	8008f84 <__sflush_r+0xb8>
 8008f2a:	4a2a      	ldr	r2, [pc, #168]	; (8008fd4 <__sflush_r+0x108>)
 8008f2c:	40ca      	lsrs	r2, r1
 8008f2e:	07d6      	lsls	r6, r2, #31
 8008f30:	d528      	bpl.n	8008f84 <__sflush_r+0xb8>
 8008f32:	2200      	movs	r2, #0
 8008f34:	6062      	str	r2, [r4, #4]
 8008f36:	04d9      	lsls	r1, r3, #19
 8008f38:	6922      	ldr	r2, [r4, #16]
 8008f3a:	6022      	str	r2, [r4, #0]
 8008f3c:	d504      	bpl.n	8008f48 <__sflush_r+0x7c>
 8008f3e:	1c42      	adds	r2, r0, #1
 8008f40:	d101      	bne.n	8008f46 <__sflush_r+0x7a>
 8008f42:	682b      	ldr	r3, [r5, #0]
 8008f44:	b903      	cbnz	r3, 8008f48 <__sflush_r+0x7c>
 8008f46:	6560      	str	r0, [r4, #84]	; 0x54
 8008f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f4a:	602f      	str	r7, [r5, #0]
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	d0ca      	beq.n	8008ee6 <__sflush_r+0x1a>
 8008f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f54:	4299      	cmp	r1, r3
 8008f56:	d002      	beq.n	8008f5e <__sflush_r+0x92>
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f001 fa49 	bl	800a3f0 <_free_r>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	6360      	str	r0, [r4, #52]	; 0x34
 8008f62:	e7c1      	b.n	8008ee8 <__sflush_r+0x1c>
 8008f64:	6a21      	ldr	r1, [r4, #32]
 8008f66:	2301      	movs	r3, #1
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b0      	blx	r6
 8008f6c:	1c41      	adds	r1, r0, #1
 8008f6e:	d1c7      	bne.n	8008f00 <__sflush_r+0x34>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0c4      	beq.n	8008f00 <__sflush_r+0x34>
 8008f76:	2b1d      	cmp	r3, #29
 8008f78:	d001      	beq.n	8008f7e <__sflush_r+0xb2>
 8008f7a:	2b16      	cmp	r3, #22
 8008f7c:	d101      	bne.n	8008f82 <__sflush_r+0xb6>
 8008f7e:	602f      	str	r7, [r5, #0]
 8008f80:	e7b1      	b.n	8008ee6 <__sflush_r+0x1a>
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	e7ad      	b.n	8008ee8 <__sflush_r+0x1c>
 8008f8c:	690f      	ldr	r7, [r1, #16]
 8008f8e:	2f00      	cmp	r7, #0
 8008f90:	d0a9      	beq.n	8008ee6 <__sflush_r+0x1a>
 8008f92:	0793      	lsls	r3, r2, #30
 8008f94:	680e      	ldr	r6, [r1, #0]
 8008f96:	bf08      	it	eq
 8008f98:	694b      	ldreq	r3, [r1, #20]
 8008f9a:	600f      	str	r7, [r1, #0]
 8008f9c:	bf18      	it	ne
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	eba6 0807 	sub.w	r8, r6, r7
 8008fa4:	608b      	str	r3, [r1, #8]
 8008fa6:	f1b8 0f00 	cmp.w	r8, #0
 8008faa:	dd9c      	ble.n	8008ee6 <__sflush_r+0x1a>
 8008fac:	6a21      	ldr	r1, [r4, #32]
 8008fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fb0:	4643      	mov	r3, r8
 8008fb2:	463a      	mov	r2, r7
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b0      	blx	r6
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	dc06      	bgt.n	8008fca <__sflush_r+0xfe>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc2:	81a3      	strh	r3, [r4, #12]
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fc8:	e78e      	b.n	8008ee8 <__sflush_r+0x1c>
 8008fca:	4407      	add	r7, r0
 8008fcc:	eba8 0800 	sub.w	r8, r8, r0
 8008fd0:	e7e9      	b.n	8008fa6 <__sflush_r+0xda>
 8008fd2:	bf00      	nop
 8008fd4:	20400001 	.word	0x20400001

08008fd8 <_fflush_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	690b      	ldr	r3, [r1, #16]
 8008fdc:	4605      	mov	r5, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	b913      	cbnz	r3, 8008fe8 <_fflush_r+0x10>
 8008fe2:	2500      	movs	r5, #0
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	b118      	cbz	r0, 8008ff2 <_fflush_r+0x1a>
 8008fea:	6983      	ldr	r3, [r0, #24]
 8008fec:	b90b      	cbnz	r3, 8008ff2 <_fflush_r+0x1a>
 8008fee:	f000 f887 	bl	8009100 <__sinit>
 8008ff2:	4b14      	ldr	r3, [pc, #80]	; (8009044 <_fflush_r+0x6c>)
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	d11b      	bne.n	8009030 <_fflush_r+0x58>
 8008ff8:	686c      	ldr	r4, [r5, #4]
 8008ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0ef      	beq.n	8008fe2 <_fflush_r+0xa>
 8009002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009004:	07d0      	lsls	r0, r2, #31
 8009006:	d404      	bmi.n	8009012 <_fflush_r+0x3a>
 8009008:	0599      	lsls	r1, r3, #22
 800900a:	d402      	bmi.n	8009012 <_fflush_r+0x3a>
 800900c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900e:	f000 fc88 	bl	8009922 <__retarget_lock_acquire_recursive>
 8009012:	4628      	mov	r0, r5
 8009014:	4621      	mov	r1, r4
 8009016:	f7ff ff59 	bl	8008ecc <__sflush_r>
 800901a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800901c:	07da      	lsls	r2, r3, #31
 800901e:	4605      	mov	r5, r0
 8009020:	d4e0      	bmi.n	8008fe4 <_fflush_r+0xc>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	059b      	lsls	r3, r3, #22
 8009026:	d4dd      	bmi.n	8008fe4 <_fflush_r+0xc>
 8009028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800902a:	f000 fc7b 	bl	8009924 <__retarget_lock_release_recursive>
 800902e:	e7d9      	b.n	8008fe4 <_fflush_r+0xc>
 8009030:	4b05      	ldr	r3, [pc, #20]	; (8009048 <_fflush_r+0x70>)
 8009032:	429c      	cmp	r4, r3
 8009034:	d101      	bne.n	800903a <_fflush_r+0x62>
 8009036:	68ac      	ldr	r4, [r5, #8]
 8009038:	e7df      	b.n	8008ffa <_fflush_r+0x22>
 800903a:	4b04      	ldr	r3, [pc, #16]	; (800904c <_fflush_r+0x74>)
 800903c:	429c      	cmp	r4, r3
 800903e:	bf08      	it	eq
 8009040:	68ec      	ldreq	r4, [r5, #12]
 8009042:	e7da      	b.n	8008ffa <_fflush_r+0x22>
 8009044:	0800c0d4 	.word	0x0800c0d4
 8009048:	0800c0f4 	.word	0x0800c0f4
 800904c:	0800c0b4 	.word	0x0800c0b4

08009050 <std>:
 8009050:	2300      	movs	r3, #0
 8009052:	b510      	push	{r4, lr}
 8009054:	4604      	mov	r4, r0
 8009056:	e9c0 3300 	strd	r3, r3, [r0]
 800905a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800905e:	6083      	str	r3, [r0, #8]
 8009060:	8181      	strh	r1, [r0, #12]
 8009062:	6643      	str	r3, [r0, #100]	; 0x64
 8009064:	81c2      	strh	r2, [r0, #14]
 8009066:	6183      	str	r3, [r0, #24]
 8009068:	4619      	mov	r1, r3
 800906a:	2208      	movs	r2, #8
 800906c:	305c      	adds	r0, #92	; 0x5c
 800906e:	f7fd fa11 	bl	8006494 <memset>
 8009072:	4b05      	ldr	r3, [pc, #20]	; (8009088 <std+0x38>)
 8009074:	6263      	str	r3, [r4, #36]	; 0x24
 8009076:	4b05      	ldr	r3, [pc, #20]	; (800908c <std+0x3c>)
 8009078:	62a3      	str	r3, [r4, #40]	; 0x28
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <std+0x40>)
 800907c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800907e:	4b05      	ldr	r3, [pc, #20]	; (8009094 <std+0x44>)
 8009080:	6224      	str	r4, [r4, #32]
 8009082:	6323      	str	r3, [r4, #48]	; 0x30
 8009084:	bd10      	pop	{r4, pc}
 8009086:	bf00      	nop
 8009088:	0800ab51 	.word	0x0800ab51
 800908c:	0800ab73 	.word	0x0800ab73
 8009090:	0800abab 	.word	0x0800abab
 8009094:	0800abcf 	.word	0x0800abcf

08009098 <_cleanup_r>:
 8009098:	4901      	ldr	r1, [pc, #4]	; (80090a0 <_cleanup_r+0x8>)
 800909a:	f000 b8af 	b.w	80091fc <_fwalk_reent>
 800909e:	bf00      	nop
 80090a0:	08008fd9 	.word	0x08008fd9

080090a4 <__sfmoreglue>:
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	2268      	movs	r2, #104	; 0x68
 80090a8:	1e4d      	subs	r5, r1, #1
 80090aa:	4355      	muls	r5, r2
 80090ac:	460e      	mov	r6, r1
 80090ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090b2:	f001 fa09 	bl	800a4c8 <_malloc_r>
 80090b6:	4604      	mov	r4, r0
 80090b8:	b140      	cbz	r0, 80090cc <__sfmoreglue+0x28>
 80090ba:	2100      	movs	r1, #0
 80090bc:	e9c0 1600 	strd	r1, r6, [r0]
 80090c0:	300c      	adds	r0, #12
 80090c2:	60a0      	str	r0, [r4, #8]
 80090c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090c8:	f7fd f9e4 	bl	8006494 <memset>
 80090cc:	4620      	mov	r0, r4
 80090ce:	bd70      	pop	{r4, r5, r6, pc}

080090d0 <__sfp_lock_acquire>:
 80090d0:	4801      	ldr	r0, [pc, #4]	; (80090d8 <__sfp_lock_acquire+0x8>)
 80090d2:	f000 bc26 	b.w	8009922 <__retarget_lock_acquire_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000371 	.word	0x20000371

080090dc <__sfp_lock_release>:
 80090dc:	4801      	ldr	r0, [pc, #4]	; (80090e4 <__sfp_lock_release+0x8>)
 80090de:	f000 bc21 	b.w	8009924 <__retarget_lock_release_recursive>
 80090e2:	bf00      	nop
 80090e4:	20000371 	.word	0x20000371

080090e8 <__sinit_lock_acquire>:
 80090e8:	4801      	ldr	r0, [pc, #4]	; (80090f0 <__sinit_lock_acquire+0x8>)
 80090ea:	f000 bc1a 	b.w	8009922 <__retarget_lock_acquire_recursive>
 80090ee:	bf00      	nop
 80090f0:	20000372 	.word	0x20000372

080090f4 <__sinit_lock_release>:
 80090f4:	4801      	ldr	r0, [pc, #4]	; (80090fc <__sinit_lock_release+0x8>)
 80090f6:	f000 bc15 	b.w	8009924 <__retarget_lock_release_recursive>
 80090fa:	bf00      	nop
 80090fc:	20000372 	.word	0x20000372

08009100 <__sinit>:
 8009100:	b510      	push	{r4, lr}
 8009102:	4604      	mov	r4, r0
 8009104:	f7ff fff0 	bl	80090e8 <__sinit_lock_acquire>
 8009108:	69a3      	ldr	r3, [r4, #24]
 800910a:	b11b      	cbz	r3, 8009114 <__sinit+0x14>
 800910c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009110:	f7ff bff0 	b.w	80090f4 <__sinit_lock_release>
 8009114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009118:	6523      	str	r3, [r4, #80]	; 0x50
 800911a:	4b13      	ldr	r3, [pc, #76]	; (8009168 <__sinit+0x68>)
 800911c:	4a13      	ldr	r2, [pc, #76]	; (800916c <__sinit+0x6c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	62a2      	str	r2, [r4, #40]	; 0x28
 8009122:	42a3      	cmp	r3, r4
 8009124:	bf04      	itt	eq
 8009126:	2301      	moveq	r3, #1
 8009128:	61a3      	streq	r3, [r4, #24]
 800912a:	4620      	mov	r0, r4
 800912c:	f000 f820 	bl	8009170 <__sfp>
 8009130:	6060      	str	r0, [r4, #4]
 8009132:	4620      	mov	r0, r4
 8009134:	f000 f81c 	bl	8009170 <__sfp>
 8009138:	60a0      	str	r0, [r4, #8]
 800913a:	4620      	mov	r0, r4
 800913c:	f000 f818 	bl	8009170 <__sfp>
 8009140:	2200      	movs	r2, #0
 8009142:	60e0      	str	r0, [r4, #12]
 8009144:	2104      	movs	r1, #4
 8009146:	6860      	ldr	r0, [r4, #4]
 8009148:	f7ff ff82 	bl	8009050 <std>
 800914c:	68a0      	ldr	r0, [r4, #8]
 800914e:	2201      	movs	r2, #1
 8009150:	2109      	movs	r1, #9
 8009152:	f7ff ff7d 	bl	8009050 <std>
 8009156:	68e0      	ldr	r0, [r4, #12]
 8009158:	2202      	movs	r2, #2
 800915a:	2112      	movs	r1, #18
 800915c:	f7ff ff78 	bl	8009050 <std>
 8009160:	2301      	movs	r3, #1
 8009162:	61a3      	str	r3, [r4, #24]
 8009164:	e7d2      	b.n	800910c <__sinit+0xc>
 8009166:	bf00      	nop
 8009168:	0800be90 	.word	0x0800be90
 800916c:	08009099 	.word	0x08009099

08009170 <__sfp>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	4607      	mov	r7, r0
 8009174:	f7ff ffac 	bl	80090d0 <__sfp_lock_acquire>
 8009178:	4b1e      	ldr	r3, [pc, #120]	; (80091f4 <__sfp+0x84>)
 800917a:	681e      	ldr	r6, [r3, #0]
 800917c:	69b3      	ldr	r3, [r6, #24]
 800917e:	b913      	cbnz	r3, 8009186 <__sfp+0x16>
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff ffbd 	bl	8009100 <__sinit>
 8009186:	3648      	adds	r6, #72	; 0x48
 8009188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800918c:	3b01      	subs	r3, #1
 800918e:	d503      	bpl.n	8009198 <__sfp+0x28>
 8009190:	6833      	ldr	r3, [r6, #0]
 8009192:	b30b      	cbz	r3, 80091d8 <__sfp+0x68>
 8009194:	6836      	ldr	r6, [r6, #0]
 8009196:	e7f7      	b.n	8009188 <__sfp+0x18>
 8009198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800919c:	b9d5      	cbnz	r5, 80091d4 <__sfp+0x64>
 800919e:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <__sfp+0x88>)
 80091a0:	60e3      	str	r3, [r4, #12]
 80091a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091a6:	6665      	str	r5, [r4, #100]	; 0x64
 80091a8:	f000 fbba 	bl	8009920 <__retarget_lock_init_recursive>
 80091ac:	f7ff ff96 	bl	80090dc <__sfp_lock_release>
 80091b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091b8:	6025      	str	r5, [r4, #0]
 80091ba:	61a5      	str	r5, [r4, #24]
 80091bc:	2208      	movs	r2, #8
 80091be:	4629      	mov	r1, r5
 80091c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091c4:	f7fd f966 	bl	8006494 <memset>
 80091c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091d0:	4620      	mov	r0, r4
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d4:	3468      	adds	r4, #104	; 0x68
 80091d6:	e7d9      	b.n	800918c <__sfp+0x1c>
 80091d8:	2104      	movs	r1, #4
 80091da:	4638      	mov	r0, r7
 80091dc:	f7ff ff62 	bl	80090a4 <__sfmoreglue>
 80091e0:	4604      	mov	r4, r0
 80091e2:	6030      	str	r0, [r6, #0]
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d1d5      	bne.n	8009194 <__sfp+0x24>
 80091e8:	f7ff ff78 	bl	80090dc <__sfp_lock_release>
 80091ec:	230c      	movs	r3, #12
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	e7ee      	b.n	80091d0 <__sfp+0x60>
 80091f2:	bf00      	nop
 80091f4:	0800be90 	.word	0x0800be90
 80091f8:	ffff0001 	.word	0xffff0001

080091fc <_fwalk_reent>:
 80091fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009200:	4606      	mov	r6, r0
 8009202:	4688      	mov	r8, r1
 8009204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009208:	2700      	movs	r7, #0
 800920a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800920e:	f1b9 0901 	subs.w	r9, r9, #1
 8009212:	d505      	bpl.n	8009220 <_fwalk_reent+0x24>
 8009214:	6824      	ldr	r4, [r4, #0]
 8009216:	2c00      	cmp	r4, #0
 8009218:	d1f7      	bne.n	800920a <_fwalk_reent+0xe>
 800921a:	4638      	mov	r0, r7
 800921c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009220:	89ab      	ldrh	r3, [r5, #12]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d907      	bls.n	8009236 <_fwalk_reent+0x3a>
 8009226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800922a:	3301      	adds	r3, #1
 800922c:	d003      	beq.n	8009236 <_fwalk_reent+0x3a>
 800922e:	4629      	mov	r1, r5
 8009230:	4630      	mov	r0, r6
 8009232:	47c0      	blx	r8
 8009234:	4307      	orrs	r7, r0
 8009236:	3568      	adds	r5, #104	; 0x68
 8009238:	e7e9      	b.n	800920e <_fwalk_reent+0x12>

0800923a <rshift>:
 800923a:	6903      	ldr	r3, [r0, #16]
 800923c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009244:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009248:	f100 0414 	add.w	r4, r0, #20
 800924c:	dd45      	ble.n	80092da <rshift+0xa0>
 800924e:	f011 011f 	ands.w	r1, r1, #31
 8009252:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009256:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800925a:	d10c      	bne.n	8009276 <rshift+0x3c>
 800925c:	f100 0710 	add.w	r7, r0, #16
 8009260:	4629      	mov	r1, r5
 8009262:	42b1      	cmp	r1, r6
 8009264:	d334      	bcc.n	80092d0 <rshift+0x96>
 8009266:	1a9b      	subs	r3, r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	1eea      	subs	r2, r5, #3
 800926c:	4296      	cmp	r6, r2
 800926e:	bf38      	it	cc
 8009270:	2300      	movcc	r3, #0
 8009272:	4423      	add	r3, r4
 8009274:	e015      	b.n	80092a2 <rshift+0x68>
 8009276:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800927a:	f1c1 0820 	rsb	r8, r1, #32
 800927e:	40cf      	lsrs	r7, r1
 8009280:	f105 0e04 	add.w	lr, r5, #4
 8009284:	46a1      	mov	r9, r4
 8009286:	4576      	cmp	r6, lr
 8009288:	46f4      	mov	ip, lr
 800928a:	d815      	bhi.n	80092b8 <rshift+0x7e>
 800928c:	1a9a      	subs	r2, r3, r2
 800928e:	0092      	lsls	r2, r2, #2
 8009290:	3a04      	subs	r2, #4
 8009292:	3501      	adds	r5, #1
 8009294:	42ae      	cmp	r6, r5
 8009296:	bf38      	it	cc
 8009298:	2200      	movcc	r2, #0
 800929a:	18a3      	adds	r3, r4, r2
 800929c:	50a7      	str	r7, [r4, r2]
 800929e:	b107      	cbz	r7, 80092a2 <rshift+0x68>
 80092a0:	3304      	adds	r3, #4
 80092a2:	1b1a      	subs	r2, r3, r4
 80092a4:	42a3      	cmp	r3, r4
 80092a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80092aa:	bf08      	it	eq
 80092ac:	2300      	moveq	r3, #0
 80092ae:	6102      	str	r2, [r0, #16]
 80092b0:	bf08      	it	eq
 80092b2:	6143      	streq	r3, [r0, #20]
 80092b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092b8:	f8dc c000 	ldr.w	ip, [ip]
 80092bc:	fa0c fc08 	lsl.w	ip, ip, r8
 80092c0:	ea4c 0707 	orr.w	r7, ip, r7
 80092c4:	f849 7b04 	str.w	r7, [r9], #4
 80092c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092cc:	40cf      	lsrs	r7, r1
 80092ce:	e7da      	b.n	8009286 <rshift+0x4c>
 80092d0:	f851 cb04 	ldr.w	ip, [r1], #4
 80092d4:	f847 cf04 	str.w	ip, [r7, #4]!
 80092d8:	e7c3      	b.n	8009262 <rshift+0x28>
 80092da:	4623      	mov	r3, r4
 80092dc:	e7e1      	b.n	80092a2 <rshift+0x68>

080092de <__hexdig_fun>:
 80092de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092e2:	2b09      	cmp	r3, #9
 80092e4:	d802      	bhi.n	80092ec <__hexdig_fun+0xe>
 80092e6:	3820      	subs	r0, #32
 80092e8:	b2c0      	uxtb	r0, r0
 80092ea:	4770      	bx	lr
 80092ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092f0:	2b05      	cmp	r3, #5
 80092f2:	d801      	bhi.n	80092f8 <__hexdig_fun+0x1a>
 80092f4:	3847      	subs	r0, #71	; 0x47
 80092f6:	e7f7      	b.n	80092e8 <__hexdig_fun+0xa>
 80092f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d801      	bhi.n	8009304 <__hexdig_fun+0x26>
 8009300:	3827      	subs	r0, #39	; 0x27
 8009302:	e7f1      	b.n	80092e8 <__hexdig_fun+0xa>
 8009304:	2000      	movs	r0, #0
 8009306:	4770      	bx	lr

08009308 <__gethex>:
 8009308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930c:	ed2d 8b02 	vpush	{d8}
 8009310:	b089      	sub	sp, #36	; 0x24
 8009312:	ee08 0a10 	vmov	s16, r0
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	4bb4      	ldr	r3, [pc, #720]	; (80095ec <__gethex+0x2e4>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	4618      	mov	r0, r3
 8009320:	468b      	mov	fp, r1
 8009322:	4690      	mov	r8, r2
 8009324:	f7f6 ff7e 	bl	8000224 <strlen>
 8009328:	9b01      	ldr	r3, [sp, #4]
 800932a:	f8db 2000 	ldr.w	r2, [fp]
 800932e:	4403      	add	r3, r0
 8009330:	4682      	mov	sl, r0
 8009332:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009336:	9305      	str	r3, [sp, #20]
 8009338:	1c93      	adds	r3, r2, #2
 800933a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800933e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009342:	32fe      	adds	r2, #254	; 0xfe
 8009344:	18d1      	adds	r1, r2, r3
 8009346:	461f      	mov	r7, r3
 8009348:	f813 0b01 	ldrb.w	r0, [r3], #1
 800934c:	9100      	str	r1, [sp, #0]
 800934e:	2830      	cmp	r0, #48	; 0x30
 8009350:	d0f8      	beq.n	8009344 <__gethex+0x3c>
 8009352:	f7ff ffc4 	bl	80092de <__hexdig_fun>
 8009356:	4604      	mov	r4, r0
 8009358:	2800      	cmp	r0, #0
 800935a:	d13a      	bne.n	80093d2 <__gethex+0xca>
 800935c:	9901      	ldr	r1, [sp, #4]
 800935e:	4652      	mov	r2, sl
 8009360:	4638      	mov	r0, r7
 8009362:	f001 fc38 	bl	800abd6 <strncmp>
 8009366:	4605      	mov	r5, r0
 8009368:	2800      	cmp	r0, #0
 800936a:	d168      	bne.n	800943e <__gethex+0x136>
 800936c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009370:	eb07 060a 	add.w	r6, r7, sl
 8009374:	f7ff ffb3 	bl	80092de <__hexdig_fun>
 8009378:	2800      	cmp	r0, #0
 800937a:	d062      	beq.n	8009442 <__gethex+0x13a>
 800937c:	4633      	mov	r3, r6
 800937e:	7818      	ldrb	r0, [r3, #0]
 8009380:	2830      	cmp	r0, #48	; 0x30
 8009382:	461f      	mov	r7, r3
 8009384:	f103 0301 	add.w	r3, r3, #1
 8009388:	d0f9      	beq.n	800937e <__gethex+0x76>
 800938a:	f7ff ffa8 	bl	80092de <__hexdig_fun>
 800938e:	2301      	movs	r3, #1
 8009390:	fab0 f480 	clz	r4, r0
 8009394:	0964      	lsrs	r4, r4, #5
 8009396:	4635      	mov	r5, r6
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	463a      	mov	r2, r7
 800939c:	4616      	mov	r6, r2
 800939e:	3201      	adds	r2, #1
 80093a0:	7830      	ldrb	r0, [r6, #0]
 80093a2:	f7ff ff9c 	bl	80092de <__hexdig_fun>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d1f8      	bne.n	800939c <__gethex+0x94>
 80093aa:	9901      	ldr	r1, [sp, #4]
 80093ac:	4652      	mov	r2, sl
 80093ae:	4630      	mov	r0, r6
 80093b0:	f001 fc11 	bl	800abd6 <strncmp>
 80093b4:	b980      	cbnz	r0, 80093d8 <__gethex+0xd0>
 80093b6:	b94d      	cbnz	r5, 80093cc <__gethex+0xc4>
 80093b8:	eb06 050a 	add.w	r5, r6, sl
 80093bc:	462a      	mov	r2, r5
 80093be:	4616      	mov	r6, r2
 80093c0:	3201      	adds	r2, #1
 80093c2:	7830      	ldrb	r0, [r6, #0]
 80093c4:	f7ff ff8b 	bl	80092de <__hexdig_fun>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d1f8      	bne.n	80093be <__gethex+0xb6>
 80093cc:	1bad      	subs	r5, r5, r6
 80093ce:	00ad      	lsls	r5, r5, #2
 80093d0:	e004      	b.n	80093dc <__gethex+0xd4>
 80093d2:	2400      	movs	r4, #0
 80093d4:	4625      	mov	r5, r4
 80093d6:	e7e0      	b.n	800939a <__gethex+0x92>
 80093d8:	2d00      	cmp	r5, #0
 80093da:	d1f7      	bne.n	80093cc <__gethex+0xc4>
 80093dc:	7833      	ldrb	r3, [r6, #0]
 80093de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093e2:	2b50      	cmp	r3, #80	; 0x50
 80093e4:	d13b      	bne.n	800945e <__gethex+0x156>
 80093e6:	7873      	ldrb	r3, [r6, #1]
 80093e8:	2b2b      	cmp	r3, #43	; 0x2b
 80093ea:	d02c      	beq.n	8009446 <__gethex+0x13e>
 80093ec:	2b2d      	cmp	r3, #45	; 0x2d
 80093ee:	d02e      	beq.n	800944e <__gethex+0x146>
 80093f0:	1c71      	adds	r1, r6, #1
 80093f2:	f04f 0900 	mov.w	r9, #0
 80093f6:	7808      	ldrb	r0, [r1, #0]
 80093f8:	f7ff ff71 	bl	80092de <__hexdig_fun>
 80093fc:	1e43      	subs	r3, r0, #1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b18      	cmp	r3, #24
 8009402:	d82c      	bhi.n	800945e <__gethex+0x156>
 8009404:	f1a0 0210 	sub.w	r2, r0, #16
 8009408:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800940c:	f7ff ff67 	bl	80092de <__hexdig_fun>
 8009410:	1e43      	subs	r3, r0, #1
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b18      	cmp	r3, #24
 8009416:	d91d      	bls.n	8009454 <__gethex+0x14c>
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	d000      	beq.n	8009420 <__gethex+0x118>
 800941e:	4252      	negs	r2, r2
 8009420:	4415      	add	r5, r2
 8009422:	f8cb 1000 	str.w	r1, [fp]
 8009426:	b1e4      	cbz	r4, 8009462 <__gethex+0x15a>
 8009428:	9b00      	ldr	r3, [sp, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	bf14      	ite	ne
 800942e:	2700      	movne	r7, #0
 8009430:	2706      	moveq	r7, #6
 8009432:	4638      	mov	r0, r7
 8009434:	b009      	add	sp, #36	; 0x24
 8009436:	ecbd 8b02 	vpop	{d8}
 800943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943e:	463e      	mov	r6, r7
 8009440:	4625      	mov	r5, r4
 8009442:	2401      	movs	r4, #1
 8009444:	e7ca      	b.n	80093dc <__gethex+0xd4>
 8009446:	f04f 0900 	mov.w	r9, #0
 800944a:	1cb1      	adds	r1, r6, #2
 800944c:	e7d3      	b.n	80093f6 <__gethex+0xee>
 800944e:	f04f 0901 	mov.w	r9, #1
 8009452:	e7fa      	b.n	800944a <__gethex+0x142>
 8009454:	230a      	movs	r3, #10
 8009456:	fb03 0202 	mla	r2, r3, r2, r0
 800945a:	3a10      	subs	r2, #16
 800945c:	e7d4      	b.n	8009408 <__gethex+0x100>
 800945e:	4631      	mov	r1, r6
 8009460:	e7df      	b.n	8009422 <__gethex+0x11a>
 8009462:	1bf3      	subs	r3, r6, r7
 8009464:	3b01      	subs	r3, #1
 8009466:	4621      	mov	r1, r4
 8009468:	2b07      	cmp	r3, #7
 800946a:	dc0b      	bgt.n	8009484 <__gethex+0x17c>
 800946c:	ee18 0a10 	vmov	r0, s16
 8009470:	f000 fae6 	bl	8009a40 <_Balloc>
 8009474:	4604      	mov	r4, r0
 8009476:	b940      	cbnz	r0, 800948a <__gethex+0x182>
 8009478:	4b5d      	ldr	r3, [pc, #372]	; (80095f0 <__gethex+0x2e8>)
 800947a:	4602      	mov	r2, r0
 800947c:	21de      	movs	r1, #222	; 0xde
 800947e:	485d      	ldr	r0, [pc, #372]	; (80095f4 <__gethex+0x2ec>)
 8009480:	f001 fbdc 	bl	800ac3c <__assert_func>
 8009484:	3101      	adds	r1, #1
 8009486:	105b      	asrs	r3, r3, #1
 8009488:	e7ee      	b.n	8009468 <__gethex+0x160>
 800948a:	f100 0914 	add.w	r9, r0, #20
 800948e:	f04f 0b00 	mov.w	fp, #0
 8009492:	f1ca 0301 	rsb	r3, sl, #1
 8009496:	f8cd 9008 	str.w	r9, [sp, #8]
 800949a:	f8cd b000 	str.w	fp, [sp]
 800949e:	9306      	str	r3, [sp, #24]
 80094a0:	42b7      	cmp	r7, r6
 80094a2:	d340      	bcc.n	8009526 <__gethex+0x21e>
 80094a4:	9802      	ldr	r0, [sp, #8]
 80094a6:	9b00      	ldr	r3, [sp, #0]
 80094a8:	f840 3b04 	str.w	r3, [r0], #4
 80094ac:	eba0 0009 	sub.w	r0, r0, r9
 80094b0:	1080      	asrs	r0, r0, #2
 80094b2:	0146      	lsls	r6, r0, #5
 80094b4:	6120      	str	r0, [r4, #16]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fbb4 	bl	8009c24 <__hi0bits>
 80094bc:	1a30      	subs	r0, r6, r0
 80094be:	f8d8 6000 	ldr.w	r6, [r8]
 80094c2:	42b0      	cmp	r0, r6
 80094c4:	dd63      	ble.n	800958e <__gethex+0x286>
 80094c6:	1b87      	subs	r7, r0, r6
 80094c8:	4639      	mov	r1, r7
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 ff58 	bl	800a380 <__any_on>
 80094d0:	4682      	mov	sl, r0
 80094d2:	b1a8      	cbz	r0, 8009500 <__gethex+0x1f8>
 80094d4:	1e7b      	subs	r3, r7, #1
 80094d6:	1159      	asrs	r1, r3, #5
 80094d8:	f003 021f 	and.w	r2, r3, #31
 80094dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094e0:	f04f 0a01 	mov.w	sl, #1
 80094e4:	fa0a f202 	lsl.w	r2, sl, r2
 80094e8:	420a      	tst	r2, r1
 80094ea:	d009      	beq.n	8009500 <__gethex+0x1f8>
 80094ec:	4553      	cmp	r3, sl
 80094ee:	dd05      	ble.n	80094fc <__gethex+0x1f4>
 80094f0:	1eb9      	subs	r1, r7, #2
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 ff44 	bl	800a380 <__any_on>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d145      	bne.n	8009588 <__gethex+0x280>
 80094fc:	f04f 0a02 	mov.w	sl, #2
 8009500:	4639      	mov	r1, r7
 8009502:	4620      	mov	r0, r4
 8009504:	f7ff fe99 	bl	800923a <rshift>
 8009508:	443d      	add	r5, r7
 800950a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800950e:	42ab      	cmp	r3, r5
 8009510:	da4c      	bge.n	80095ac <__gethex+0x2a4>
 8009512:	ee18 0a10 	vmov	r0, s16
 8009516:	4621      	mov	r1, r4
 8009518:	f000 fad2 	bl	8009ac0 <_Bfree>
 800951c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800951e:	2300      	movs	r3, #0
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	27a3      	movs	r7, #163	; 0xa3
 8009524:	e785      	b.n	8009432 <__gethex+0x12a>
 8009526:	1e73      	subs	r3, r6, #1
 8009528:	9a05      	ldr	r2, [sp, #20]
 800952a:	9303      	str	r3, [sp, #12]
 800952c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009530:	4293      	cmp	r3, r2
 8009532:	d019      	beq.n	8009568 <__gethex+0x260>
 8009534:	f1bb 0f20 	cmp.w	fp, #32
 8009538:	d107      	bne.n	800954a <__gethex+0x242>
 800953a:	9b02      	ldr	r3, [sp, #8]
 800953c:	9a00      	ldr	r2, [sp, #0]
 800953e:	f843 2b04 	str.w	r2, [r3], #4
 8009542:	9302      	str	r3, [sp, #8]
 8009544:	2300      	movs	r3, #0
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	469b      	mov	fp, r3
 800954a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800954e:	f7ff fec6 	bl	80092de <__hexdig_fun>
 8009552:	9b00      	ldr	r3, [sp, #0]
 8009554:	f000 000f 	and.w	r0, r0, #15
 8009558:	fa00 f00b 	lsl.w	r0, r0, fp
 800955c:	4303      	orrs	r3, r0
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	f10b 0b04 	add.w	fp, fp, #4
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	e00d      	b.n	8009584 <__gethex+0x27c>
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	9a06      	ldr	r2, [sp, #24]
 800956c:	4413      	add	r3, r2
 800956e:	42bb      	cmp	r3, r7
 8009570:	d3e0      	bcc.n	8009534 <__gethex+0x22c>
 8009572:	4618      	mov	r0, r3
 8009574:	9901      	ldr	r1, [sp, #4]
 8009576:	9307      	str	r3, [sp, #28]
 8009578:	4652      	mov	r2, sl
 800957a:	f001 fb2c 	bl	800abd6 <strncmp>
 800957e:	9b07      	ldr	r3, [sp, #28]
 8009580:	2800      	cmp	r0, #0
 8009582:	d1d7      	bne.n	8009534 <__gethex+0x22c>
 8009584:	461e      	mov	r6, r3
 8009586:	e78b      	b.n	80094a0 <__gethex+0x198>
 8009588:	f04f 0a03 	mov.w	sl, #3
 800958c:	e7b8      	b.n	8009500 <__gethex+0x1f8>
 800958e:	da0a      	bge.n	80095a6 <__gethex+0x29e>
 8009590:	1a37      	subs	r7, r6, r0
 8009592:	4621      	mov	r1, r4
 8009594:	ee18 0a10 	vmov	r0, s16
 8009598:	463a      	mov	r2, r7
 800959a:	f000 fcad 	bl	8009ef8 <__lshift>
 800959e:	1bed      	subs	r5, r5, r7
 80095a0:	4604      	mov	r4, r0
 80095a2:	f100 0914 	add.w	r9, r0, #20
 80095a6:	f04f 0a00 	mov.w	sl, #0
 80095aa:	e7ae      	b.n	800950a <__gethex+0x202>
 80095ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80095b0:	42a8      	cmp	r0, r5
 80095b2:	dd72      	ble.n	800969a <__gethex+0x392>
 80095b4:	1b45      	subs	r5, r0, r5
 80095b6:	42ae      	cmp	r6, r5
 80095b8:	dc36      	bgt.n	8009628 <__gethex+0x320>
 80095ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d02a      	beq.n	8009618 <__gethex+0x310>
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d02c      	beq.n	8009620 <__gethex+0x318>
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d11c      	bne.n	8009604 <__gethex+0x2fc>
 80095ca:	42ae      	cmp	r6, r5
 80095cc:	d11a      	bne.n	8009604 <__gethex+0x2fc>
 80095ce:	2e01      	cmp	r6, #1
 80095d0:	d112      	bne.n	80095f8 <__gethex+0x2f0>
 80095d2:	9a04      	ldr	r2, [sp, #16]
 80095d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	2301      	movs	r3, #1
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	f8c9 3000 	str.w	r3, [r9]
 80095e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095e4:	2762      	movs	r7, #98	; 0x62
 80095e6:	601c      	str	r4, [r3, #0]
 80095e8:	e723      	b.n	8009432 <__gethex+0x12a>
 80095ea:	bf00      	nop
 80095ec:	0800c17c 	.word	0x0800c17c
 80095f0:	0800c0a0 	.word	0x0800c0a0
 80095f4:	0800c114 	.word	0x0800c114
 80095f8:	1e71      	subs	r1, r6, #1
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fec0 	bl	800a380 <__any_on>
 8009600:	2800      	cmp	r0, #0
 8009602:	d1e6      	bne.n	80095d2 <__gethex+0x2ca>
 8009604:	ee18 0a10 	vmov	r0, s16
 8009608:	4621      	mov	r1, r4
 800960a:	f000 fa59 	bl	8009ac0 <_Bfree>
 800960e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009610:	2300      	movs	r3, #0
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	2750      	movs	r7, #80	; 0x50
 8009616:	e70c      	b.n	8009432 <__gethex+0x12a>
 8009618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1f2      	bne.n	8009604 <__gethex+0x2fc>
 800961e:	e7d8      	b.n	80095d2 <__gethex+0x2ca>
 8009620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1d5      	bne.n	80095d2 <__gethex+0x2ca>
 8009626:	e7ed      	b.n	8009604 <__gethex+0x2fc>
 8009628:	1e6f      	subs	r7, r5, #1
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	d131      	bne.n	8009694 <__gethex+0x38c>
 8009630:	b127      	cbz	r7, 800963c <__gethex+0x334>
 8009632:	4639      	mov	r1, r7
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fea3 	bl	800a380 <__any_on>
 800963a:	4682      	mov	sl, r0
 800963c:	117b      	asrs	r3, r7, #5
 800963e:	2101      	movs	r1, #1
 8009640:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009644:	f007 071f 	and.w	r7, r7, #31
 8009648:	fa01 f707 	lsl.w	r7, r1, r7
 800964c:	421f      	tst	r7, r3
 800964e:	4629      	mov	r1, r5
 8009650:	4620      	mov	r0, r4
 8009652:	bf18      	it	ne
 8009654:	f04a 0a02 	orrne.w	sl, sl, #2
 8009658:	1b76      	subs	r6, r6, r5
 800965a:	f7ff fdee 	bl	800923a <rshift>
 800965e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009662:	2702      	movs	r7, #2
 8009664:	f1ba 0f00 	cmp.w	sl, #0
 8009668:	d048      	beq.n	80096fc <__gethex+0x3f4>
 800966a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d015      	beq.n	800969e <__gethex+0x396>
 8009672:	2b03      	cmp	r3, #3
 8009674:	d017      	beq.n	80096a6 <__gethex+0x39e>
 8009676:	2b01      	cmp	r3, #1
 8009678:	d109      	bne.n	800968e <__gethex+0x386>
 800967a:	f01a 0f02 	tst.w	sl, #2
 800967e:	d006      	beq.n	800968e <__gethex+0x386>
 8009680:	f8d9 0000 	ldr.w	r0, [r9]
 8009684:	ea4a 0a00 	orr.w	sl, sl, r0
 8009688:	f01a 0f01 	tst.w	sl, #1
 800968c:	d10e      	bne.n	80096ac <__gethex+0x3a4>
 800968e:	f047 0710 	orr.w	r7, r7, #16
 8009692:	e033      	b.n	80096fc <__gethex+0x3f4>
 8009694:	f04f 0a01 	mov.w	sl, #1
 8009698:	e7d0      	b.n	800963c <__gethex+0x334>
 800969a:	2701      	movs	r7, #1
 800969c:	e7e2      	b.n	8009664 <__gethex+0x35c>
 800969e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096a0:	f1c3 0301 	rsb	r3, r3, #1
 80096a4:	9315      	str	r3, [sp, #84]	; 0x54
 80096a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0f0      	beq.n	800968e <__gethex+0x386>
 80096ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096b0:	f104 0314 	add.w	r3, r4, #20
 80096b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096bc:	f04f 0c00 	mov.w	ip, #0
 80096c0:	4618      	mov	r0, r3
 80096c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80096ca:	d01c      	beq.n	8009706 <__gethex+0x3fe>
 80096cc:	3201      	adds	r2, #1
 80096ce:	6002      	str	r2, [r0, #0]
 80096d0:	2f02      	cmp	r7, #2
 80096d2:	f104 0314 	add.w	r3, r4, #20
 80096d6:	d13f      	bne.n	8009758 <__gethex+0x450>
 80096d8:	f8d8 2000 	ldr.w	r2, [r8]
 80096dc:	3a01      	subs	r2, #1
 80096de:	42b2      	cmp	r2, r6
 80096e0:	d10a      	bne.n	80096f8 <__gethex+0x3f0>
 80096e2:	1171      	asrs	r1, r6, #5
 80096e4:	2201      	movs	r2, #1
 80096e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096ea:	f006 061f 	and.w	r6, r6, #31
 80096ee:	fa02 f606 	lsl.w	r6, r2, r6
 80096f2:	421e      	tst	r6, r3
 80096f4:	bf18      	it	ne
 80096f6:	4617      	movne	r7, r2
 80096f8:	f047 0720 	orr.w	r7, r7, #32
 80096fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096fe:	601c      	str	r4, [r3, #0]
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	601d      	str	r5, [r3, #0]
 8009704:	e695      	b.n	8009432 <__gethex+0x12a>
 8009706:	4299      	cmp	r1, r3
 8009708:	f843 cc04 	str.w	ip, [r3, #-4]
 800970c:	d8d8      	bhi.n	80096c0 <__gethex+0x3b8>
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	459b      	cmp	fp, r3
 8009712:	db19      	blt.n	8009748 <__gethex+0x440>
 8009714:	6861      	ldr	r1, [r4, #4]
 8009716:	ee18 0a10 	vmov	r0, s16
 800971a:	3101      	adds	r1, #1
 800971c:	f000 f990 	bl	8009a40 <_Balloc>
 8009720:	4681      	mov	r9, r0
 8009722:	b918      	cbnz	r0, 800972c <__gethex+0x424>
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <__gethex+0x488>)
 8009726:	4602      	mov	r2, r0
 8009728:	2184      	movs	r1, #132	; 0x84
 800972a:	e6a8      	b.n	800947e <__gethex+0x176>
 800972c:	6922      	ldr	r2, [r4, #16]
 800972e:	3202      	adds	r2, #2
 8009730:	f104 010c 	add.w	r1, r4, #12
 8009734:	0092      	lsls	r2, r2, #2
 8009736:	300c      	adds	r0, #12
 8009738:	f000 f974 	bl	8009a24 <memcpy>
 800973c:	4621      	mov	r1, r4
 800973e:	ee18 0a10 	vmov	r0, s16
 8009742:	f000 f9bd 	bl	8009ac0 <_Bfree>
 8009746:	464c      	mov	r4, r9
 8009748:	6923      	ldr	r3, [r4, #16]
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009750:	6122      	str	r2, [r4, #16]
 8009752:	2201      	movs	r2, #1
 8009754:	615a      	str	r2, [r3, #20]
 8009756:	e7bb      	b.n	80096d0 <__gethex+0x3c8>
 8009758:	6922      	ldr	r2, [r4, #16]
 800975a:	455a      	cmp	r2, fp
 800975c:	dd0b      	ble.n	8009776 <__gethex+0x46e>
 800975e:	2101      	movs	r1, #1
 8009760:	4620      	mov	r0, r4
 8009762:	f7ff fd6a 	bl	800923a <rshift>
 8009766:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800976a:	3501      	adds	r5, #1
 800976c:	42ab      	cmp	r3, r5
 800976e:	f6ff aed0 	blt.w	8009512 <__gethex+0x20a>
 8009772:	2701      	movs	r7, #1
 8009774:	e7c0      	b.n	80096f8 <__gethex+0x3f0>
 8009776:	f016 061f 	ands.w	r6, r6, #31
 800977a:	d0fa      	beq.n	8009772 <__gethex+0x46a>
 800977c:	4453      	add	r3, sl
 800977e:	f1c6 0620 	rsb	r6, r6, #32
 8009782:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009786:	f000 fa4d 	bl	8009c24 <__hi0bits>
 800978a:	42b0      	cmp	r0, r6
 800978c:	dbe7      	blt.n	800975e <__gethex+0x456>
 800978e:	e7f0      	b.n	8009772 <__gethex+0x46a>
 8009790:	0800c0a0 	.word	0x0800c0a0

08009794 <L_shift>:
 8009794:	f1c2 0208 	rsb	r2, r2, #8
 8009798:	0092      	lsls	r2, r2, #2
 800979a:	b570      	push	{r4, r5, r6, lr}
 800979c:	f1c2 0620 	rsb	r6, r2, #32
 80097a0:	6843      	ldr	r3, [r0, #4]
 80097a2:	6804      	ldr	r4, [r0, #0]
 80097a4:	fa03 f506 	lsl.w	r5, r3, r6
 80097a8:	432c      	orrs	r4, r5
 80097aa:	40d3      	lsrs	r3, r2
 80097ac:	6004      	str	r4, [r0, #0]
 80097ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80097b2:	4288      	cmp	r0, r1
 80097b4:	d3f4      	bcc.n	80097a0 <L_shift+0xc>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}

080097b8 <__match>:
 80097b8:	b530      	push	{r4, r5, lr}
 80097ba:	6803      	ldr	r3, [r0, #0]
 80097bc:	3301      	adds	r3, #1
 80097be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097c2:	b914      	cbnz	r4, 80097ca <__match+0x12>
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	2001      	movs	r0, #1
 80097c8:	bd30      	pop	{r4, r5, pc}
 80097ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097d2:	2d19      	cmp	r5, #25
 80097d4:	bf98      	it	ls
 80097d6:	3220      	addls	r2, #32
 80097d8:	42a2      	cmp	r2, r4
 80097da:	d0f0      	beq.n	80097be <__match+0x6>
 80097dc:	2000      	movs	r0, #0
 80097de:	e7f3      	b.n	80097c8 <__match+0x10>

080097e0 <__hexnan>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	680b      	ldr	r3, [r1, #0]
 80097e6:	115e      	asrs	r6, r3, #5
 80097e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097ec:	f013 031f 	ands.w	r3, r3, #31
 80097f0:	b087      	sub	sp, #28
 80097f2:	bf18      	it	ne
 80097f4:	3604      	addne	r6, #4
 80097f6:	2500      	movs	r5, #0
 80097f8:	1f37      	subs	r7, r6, #4
 80097fa:	4690      	mov	r8, r2
 80097fc:	6802      	ldr	r2, [r0, #0]
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	4682      	mov	sl, r0
 8009802:	f846 5c04 	str.w	r5, [r6, #-4]
 8009806:	46b9      	mov	r9, r7
 8009808:	463c      	mov	r4, r7
 800980a:	9502      	str	r5, [sp, #8]
 800980c:	46ab      	mov	fp, r5
 800980e:	7851      	ldrb	r1, [r2, #1]
 8009810:	1c53      	adds	r3, r2, #1
 8009812:	9303      	str	r3, [sp, #12]
 8009814:	b341      	cbz	r1, 8009868 <__hexnan+0x88>
 8009816:	4608      	mov	r0, r1
 8009818:	9205      	str	r2, [sp, #20]
 800981a:	9104      	str	r1, [sp, #16]
 800981c:	f7ff fd5f 	bl	80092de <__hexdig_fun>
 8009820:	2800      	cmp	r0, #0
 8009822:	d14f      	bne.n	80098c4 <__hexnan+0xe4>
 8009824:	9904      	ldr	r1, [sp, #16]
 8009826:	9a05      	ldr	r2, [sp, #20]
 8009828:	2920      	cmp	r1, #32
 800982a:	d818      	bhi.n	800985e <__hexnan+0x7e>
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	459b      	cmp	fp, r3
 8009830:	dd13      	ble.n	800985a <__hexnan+0x7a>
 8009832:	454c      	cmp	r4, r9
 8009834:	d206      	bcs.n	8009844 <__hexnan+0x64>
 8009836:	2d07      	cmp	r5, #7
 8009838:	dc04      	bgt.n	8009844 <__hexnan+0x64>
 800983a:	462a      	mov	r2, r5
 800983c:	4649      	mov	r1, r9
 800983e:	4620      	mov	r0, r4
 8009840:	f7ff ffa8 	bl	8009794 <L_shift>
 8009844:	4544      	cmp	r4, r8
 8009846:	d950      	bls.n	80098ea <__hexnan+0x10a>
 8009848:	2300      	movs	r3, #0
 800984a:	f1a4 0904 	sub.w	r9, r4, #4
 800984e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009852:	f8cd b008 	str.w	fp, [sp, #8]
 8009856:	464c      	mov	r4, r9
 8009858:	461d      	mov	r5, r3
 800985a:	9a03      	ldr	r2, [sp, #12]
 800985c:	e7d7      	b.n	800980e <__hexnan+0x2e>
 800985e:	2929      	cmp	r1, #41	; 0x29
 8009860:	d156      	bne.n	8009910 <__hexnan+0x130>
 8009862:	3202      	adds	r2, #2
 8009864:	f8ca 2000 	str.w	r2, [sl]
 8009868:	f1bb 0f00 	cmp.w	fp, #0
 800986c:	d050      	beq.n	8009910 <__hexnan+0x130>
 800986e:	454c      	cmp	r4, r9
 8009870:	d206      	bcs.n	8009880 <__hexnan+0xa0>
 8009872:	2d07      	cmp	r5, #7
 8009874:	dc04      	bgt.n	8009880 <__hexnan+0xa0>
 8009876:	462a      	mov	r2, r5
 8009878:	4649      	mov	r1, r9
 800987a:	4620      	mov	r0, r4
 800987c:	f7ff ff8a 	bl	8009794 <L_shift>
 8009880:	4544      	cmp	r4, r8
 8009882:	d934      	bls.n	80098ee <__hexnan+0x10e>
 8009884:	f1a8 0204 	sub.w	r2, r8, #4
 8009888:	4623      	mov	r3, r4
 800988a:	f853 1b04 	ldr.w	r1, [r3], #4
 800988e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009892:	429f      	cmp	r7, r3
 8009894:	d2f9      	bcs.n	800988a <__hexnan+0xaa>
 8009896:	1b3b      	subs	r3, r7, r4
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	3304      	adds	r3, #4
 800989e:	3401      	adds	r4, #1
 80098a0:	3e03      	subs	r6, #3
 80098a2:	42b4      	cmp	r4, r6
 80098a4:	bf88      	it	hi
 80098a6:	2304      	movhi	r3, #4
 80098a8:	4443      	add	r3, r8
 80098aa:	2200      	movs	r2, #0
 80098ac:	f843 2b04 	str.w	r2, [r3], #4
 80098b0:	429f      	cmp	r7, r3
 80098b2:	d2fb      	bcs.n	80098ac <__hexnan+0xcc>
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	b91b      	cbnz	r3, 80098c0 <__hexnan+0xe0>
 80098b8:	4547      	cmp	r7, r8
 80098ba:	d127      	bne.n	800990c <__hexnan+0x12c>
 80098bc:	2301      	movs	r3, #1
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	2005      	movs	r0, #5
 80098c2:	e026      	b.n	8009912 <__hexnan+0x132>
 80098c4:	3501      	adds	r5, #1
 80098c6:	2d08      	cmp	r5, #8
 80098c8:	f10b 0b01 	add.w	fp, fp, #1
 80098cc:	dd06      	ble.n	80098dc <__hexnan+0xfc>
 80098ce:	4544      	cmp	r4, r8
 80098d0:	d9c3      	bls.n	800985a <__hexnan+0x7a>
 80098d2:	2300      	movs	r3, #0
 80098d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80098d8:	2501      	movs	r5, #1
 80098da:	3c04      	subs	r4, #4
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	f000 000f 	and.w	r0, r0, #15
 80098e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098e6:	6022      	str	r2, [r4, #0]
 80098e8:	e7b7      	b.n	800985a <__hexnan+0x7a>
 80098ea:	2508      	movs	r5, #8
 80098ec:	e7b5      	b.n	800985a <__hexnan+0x7a>
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0df      	beq.n	80098b4 <__hexnan+0xd4>
 80098f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098f8:	f1c3 0320 	rsb	r3, r3, #32
 80098fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009900:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009904:	401a      	ands	r2, r3
 8009906:	f846 2c04 	str.w	r2, [r6, #-4]
 800990a:	e7d3      	b.n	80098b4 <__hexnan+0xd4>
 800990c:	3f04      	subs	r7, #4
 800990e:	e7d1      	b.n	80098b4 <__hexnan+0xd4>
 8009910:	2004      	movs	r0, #4
 8009912:	b007      	add	sp, #28
 8009914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009918 <_localeconv_r>:
 8009918:	4800      	ldr	r0, [pc, #0]	; (800991c <_localeconv_r+0x4>)
 800991a:	4770      	bx	lr
 800991c:	20000164 	.word	0x20000164

08009920 <__retarget_lock_init_recursive>:
 8009920:	4770      	bx	lr

08009922 <__retarget_lock_acquire_recursive>:
 8009922:	4770      	bx	lr

08009924 <__retarget_lock_release_recursive>:
 8009924:	4770      	bx	lr

08009926 <__swhatbuf_r>:
 8009926:	b570      	push	{r4, r5, r6, lr}
 8009928:	460e      	mov	r6, r1
 800992a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992e:	2900      	cmp	r1, #0
 8009930:	b096      	sub	sp, #88	; 0x58
 8009932:	4614      	mov	r4, r2
 8009934:	461d      	mov	r5, r3
 8009936:	da08      	bge.n	800994a <__swhatbuf_r+0x24>
 8009938:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	602a      	str	r2, [r5, #0]
 8009940:	061a      	lsls	r2, r3, #24
 8009942:	d410      	bmi.n	8009966 <__swhatbuf_r+0x40>
 8009944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009948:	e00e      	b.n	8009968 <__swhatbuf_r+0x42>
 800994a:	466a      	mov	r2, sp
 800994c:	f001 f9b6 	bl	800acbc <_fstat_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	dbf1      	blt.n	8009938 <__swhatbuf_r+0x12>
 8009954:	9a01      	ldr	r2, [sp, #4]
 8009956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800995a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800995e:	425a      	negs	r2, r3
 8009960:	415a      	adcs	r2, r3
 8009962:	602a      	str	r2, [r5, #0]
 8009964:	e7ee      	b.n	8009944 <__swhatbuf_r+0x1e>
 8009966:	2340      	movs	r3, #64	; 0x40
 8009968:	2000      	movs	r0, #0
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	b016      	add	sp, #88	; 0x58
 800996e:	bd70      	pop	{r4, r5, r6, pc}

08009970 <__smakebuf_r>:
 8009970:	898b      	ldrh	r3, [r1, #12]
 8009972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009974:	079d      	lsls	r5, r3, #30
 8009976:	4606      	mov	r6, r0
 8009978:	460c      	mov	r4, r1
 800997a:	d507      	bpl.n	800998c <__smakebuf_r+0x1c>
 800997c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	6123      	str	r3, [r4, #16]
 8009984:	2301      	movs	r3, #1
 8009986:	6163      	str	r3, [r4, #20]
 8009988:	b002      	add	sp, #8
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	ab01      	add	r3, sp, #4
 800998e:	466a      	mov	r2, sp
 8009990:	f7ff ffc9 	bl	8009926 <__swhatbuf_r>
 8009994:	9900      	ldr	r1, [sp, #0]
 8009996:	4605      	mov	r5, r0
 8009998:	4630      	mov	r0, r6
 800999a:	f000 fd95 	bl	800a4c8 <_malloc_r>
 800999e:	b948      	cbnz	r0, 80099b4 <__smakebuf_r+0x44>
 80099a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a4:	059a      	lsls	r2, r3, #22
 80099a6:	d4ef      	bmi.n	8009988 <__smakebuf_r+0x18>
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	f043 0302 	orr.w	r3, r3, #2
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	e7e3      	b.n	800997c <__smakebuf_r+0xc>
 80099b4:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <__smakebuf_r+0x7c>)
 80099b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	6020      	str	r0, [r4, #0]
 80099bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	6163      	str	r3, [r4, #20]
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	6120      	str	r0, [r4, #16]
 80099ca:	b15b      	cbz	r3, 80099e4 <__smakebuf_r+0x74>
 80099cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d0:	4630      	mov	r0, r6
 80099d2:	f001 f985 	bl	800ace0 <_isatty_r>
 80099d6:	b128      	cbz	r0, 80099e4 <__smakebuf_r+0x74>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	89a0      	ldrh	r0, [r4, #12]
 80099e6:	4305      	orrs	r5, r0
 80099e8:	81a5      	strh	r5, [r4, #12]
 80099ea:	e7cd      	b.n	8009988 <__smakebuf_r+0x18>
 80099ec:	08009099 	.word	0x08009099

080099f0 <malloc>:
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <malloc+0xc>)
 80099f2:	4601      	mov	r1, r0
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	f000 bd67 	b.w	800a4c8 <_malloc_r>
 80099fa:	bf00      	nop
 80099fc:	2000000c 	.word	0x2000000c

08009a00 <__ascii_mbtowc>:
 8009a00:	b082      	sub	sp, #8
 8009a02:	b901      	cbnz	r1, 8009a06 <__ascii_mbtowc+0x6>
 8009a04:	a901      	add	r1, sp, #4
 8009a06:	b142      	cbz	r2, 8009a1a <__ascii_mbtowc+0x1a>
 8009a08:	b14b      	cbz	r3, 8009a1e <__ascii_mbtowc+0x1e>
 8009a0a:	7813      	ldrb	r3, [r2, #0]
 8009a0c:	600b      	str	r3, [r1, #0]
 8009a0e:	7812      	ldrb	r2, [r2, #0]
 8009a10:	1e10      	subs	r0, r2, #0
 8009a12:	bf18      	it	ne
 8009a14:	2001      	movne	r0, #1
 8009a16:	b002      	add	sp, #8
 8009a18:	4770      	bx	lr
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	e7fb      	b.n	8009a16 <__ascii_mbtowc+0x16>
 8009a1e:	f06f 0001 	mvn.w	r0, #1
 8009a22:	e7f8      	b.n	8009a16 <__ascii_mbtowc+0x16>

08009a24 <memcpy>:
 8009a24:	440a      	add	r2, r1
 8009a26:	4291      	cmp	r1, r2
 8009a28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009a2c:	d100      	bne.n	8009a30 <memcpy+0xc>
 8009a2e:	4770      	bx	lr
 8009a30:	b510      	push	{r4, lr}
 8009a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a3a:	4291      	cmp	r1, r2
 8009a3c:	d1f9      	bne.n	8009a32 <memcpy+0xe>
 8009a3e:	bd10      	pop	{r4, pc}

08009a40 <_Balloc>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a44:	4604      	mov	r4, r0
 8009a46:	460d      	mov	r5, r1
 8009a48:	b976      	cbnz	r6, 8009a68 <_Balloc+0x28>
 8009a4a:	2010      	movs	r0, #16
 8009a4c:	f7ff ffd0 	bl	80099f0 <malloc>
 8009a50:	4602      	mov	r2, r0
 8009a52:	6260      	str	r0, [r4, #36]	; 0x24
 8009a54:	b920      	cbnz	r0, 8009a60 <_Balloc+0x20>
 8009a56:	4b18      	ldr	r3, [pc, #96]	; (8009ab8 <_Balloc+0x78>)
 8009a58:	4818      	ldr	r0, [pc, #96]	; (8009abc <_Balloc+0x7c>)
 8009a5a:	2166      	movs	r1, #102	; 0x66
 8009a5c:	f001 f8ee 	bl	800ac3c <__assert_func>
 8009a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a64:	6006      	str	r6, [r0, #0]
 8009a66:	60c6      	str	r6, [r0, #12]
 8009a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a6a:	68f3      	ldr	r3, [r6, #12]
 8009a6c:	b183      	cbz	r3, 8009a90 <_Balloc+0x50>
 8009a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a76:	b9b8      	cbnz	r0, 8009aa8 <_Balloc+0x68>
 8009a78:	2101      	movs	r1, #1
 8009a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a7e:	1d72      	adds	r2, r6, #5
 8009a80:	0092      	lsls	r2, r2, #2
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fc9d 	bl	800a3c2 <_calloc_r>
 8009a88:	b160      	cbz	r0, 8009aa4 <_Balloc+0x64>
 8009a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a8e:	e00e      	b.n	8009aae <_Balloc+0x6e>
 8009a90:	2221      	movs	r2, #33	; 0x21
 8009a92:	2104      	movs	r1, #4
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fc94 	bl	800a3c2 <_calloc_r>
 8009a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a9c:	60f0      	str	r0, [r6, #12]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e4      	bne.n	8009a6e <_Balloc+0x2e>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	6802      	ldr	r2, [r0, #0]
 8009aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ab4:	e7f7      	b.n	8009aa6 <_Balloc+0x66>
 8009ab6:	bf00      	nop
 8009ab8:	0800c02e 	.word	0x0800c02e
 8009abc:	0800c190 	.word	0x0800c190

08009ac0 <_Bfree>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	b976      	cbnz	r6, 8009ae8 <_Bfree+0x28>
 8009aca:	2010      	movs	r0, #16
 8009acc:	f7ff ff90 	bl	80099f0 <malloc>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8009ad4:	b920      	cbnz	r0, 8009ae0 <_Bfree+0x20>
 8009ad6:	4b09      	ldr	r3, [pc, #36]	; (8009afc <_Bfree+0x3c>)
 8009ad8:	4809      	ldr	r0, [pc, #36]	; (8009b00 <_Bfree+0x40>)
 8009ada:	218a      	movs	r1, #138	; 0x8a
 8009adc:	f001 f8ae 	bl	800ac3c <__assert_func>
 8009ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ae4:	6006      	str	r6, [r0, #0]
 8009ae6:	60c6      	str	r6, [r0, #12]
 8009ae8:	b13c      	cbz	r4, 8009afa <_Bfree+0x3a>
 8009aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009aec:	6862      	ldr	r2, [r4, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009af4:	6021      	str	r1, [r4, #0]
 8009af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	0800c02e 	.word	0x0800c02e
 8009b00:	0800c190 	.word	0x0800c190

08009b04 <__multadd>:
 8009b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b08:	690d      	ldr	r5, [r1, #16]
 8009b0a:	4607      	mov	r7, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	461e      	mov	r6, r3
 8009b10:	f101 0c14 	add.w	ip, r1, #20
 8009b14:	2000      	movs	r0, #0
 8009b16:	f8dc 3000 	ldr.w	r3, [ip]
 8009b1a:	b299      	uxth	r1, r3
 8009b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b20:	0c1e      	lsrs	r6, r3, #16
 8009b22:	0c0b      	lsrs	r3, r1, #16
 8009b24:	fb02 3306 	mla	r3, r2, r6, r3
 8009b28:	b289      	uxth	r1, r1
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b30:	4285      	cmp	r5, r0
 8009b32:	f84c 1b04 	str.w	r1, [ip], #4
 8009b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b3a:	dcec      	bgt.n	8009b16 <__multadd+0x12>
 8009b3c:	b30e      	cbz	r6, 8009b82 <__multadd+0x7e>
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	dc19      	bgt.n	8009b78 <__multadd+0x74>
 8009b44:	6861      	ldr	r1, [r4, #4]
 8009b46:	4638      	mov	r0, r7
 8009b48:	3101      	adds	r1, #1
 8009b4a:	f7ff ff79 	bl	8009a40 <_Balloc>
 8009b4e:	4680      	mov	r8, r0
 8009b50:	b928      	cbnz	r0, 8009b5e <__multadd+0x5a>
 8009b52:	4602      	mov	r2, r0
 8009b54:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <__multadd+0x84>)
 8009b56:	480d      	ldr	r0, [pc, #52]	; (8009b8c <__multadd+0x88>)
 8009b58:	21b5      	movs	r1, #181	; 0xb5
 8009b5a:	f001 f86f 	bl	800ac3c <__assert_func>
 8009b5e:	6922      	ldr	r2, [r4, #16]
 8009b60:	3202      	adds	r2, #2
 8009b62:	f104 010c 	add.w	r1, r4, #12
 8009b66:	0092      	lsls	r2, r2, #2
 8009b68:	300c      	adds	r0, #12
 8009b6a:	f7ff ff5b 	bl	8009a24 <memcpy>
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7ff ffa5 	bl	8009ac0 <_Bfree>
 8009b76:	4644      	mov	r4, r8
 8009b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	615e      	str	r6, [r3, #20]
 8009b80:	6125      	str	r5, [r4, #16]
 8009b82:	4620      	mov	r0, r4
 8009b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b88:	0800c0a0 	.word	0x0800c0a0
 8009b8c:	0800c190 	.word	0x0800c190

08009b90 <__s2b>:
 8009b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b94:	460c      	mov	r4, r1
 8009b96:	4615      	mov	r5, r2
 8009b98:	461f      	mov	r7, r3
 8009b9a:	2209      	movs	r2, #9
 8009b9c:	3308      	adds	r3, #8
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	db09      	blt.n	8009bc0 <__s2b+0x30>
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff ff47 	bl	8009a40 <_Balloc>
 8009bb2:	b940      	cbnz	r0, 8009bc6 <__s2b+0x36>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <__s2b+0x8c>)
 8009bb8:	4819      	ldr	r0, [pc, #100]	; (8009c20 <__s2b+0x90>)
 8009bba:	21ce      	movs	r1, #206	; 0xce
 8009bbc:	f001 f83e 	bl	800ac3c <__assert_func>
 8009bc0:	0052      	lsls	r2, r2, #1
 8009bc2:	3101      	adds	r1, #1
 8009bc4:	e7f0      	b.n	8009ba8 <__s2b+0x18>
 8009bc6:	9b08      	ldr	r3, [sp, #32]
 8009bc8:	6143      	str	r3, [r0, #20]
 8009bca:	2d09      	cmp	r5, #9
 8009bcc:	f04f 0301 	mov.w	r3, #1
 8009bd0:	6103      	str	r3, [r0, #16]
 8009bd2:	dd16      	ble.n	8009c02 <__s2b+0x72>
 8009bd4:	f104 0909 	add.w	r9, r4, #9
 8009bd8:	46c8      	mov	r8, r9
 8009bda:	442c      	add	r4, r5
 8009bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009be0:	4601      	mov	r1, r0
 8009be2:	3b30      	subs	r3, #48	; 0x30
 8009be4:	220a      	movs	r2, #10
 8009be6:	4630      	mov	r0, r6
 8009be8:	f7ff ff8c 	bl	8009b04 <__multadd>
 8009bec:	45a0      	cmp	r8, r4
 8009bee:	d1f5      	bne.n	8009bdc <__s2b+0x4c>
 8009bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8009bf4:	444c      	add	r4, r9
 8009bf6:	1b2d      	subs	r5, r5, r4
 8009bf8:	1963      	adds	r3, r4, r5
 8009bfa:	42bb      	cmp	r3, r7
 8009bfc:	db04      	blt.n	8009c08 <__s2b+0x78>
 8009bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c02:	340a      	adds	r4, #10
 8009c04:	2509      	movs	r5, #9
 8009c06:	e7f6      	b.n	8009bf6 <__s2b+0x66>
 8009c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c0c:	4601      	mov	r1, r0
 8009c0e:	3b30      	subs	r3, #48	; 0x30
 8009c10:	220a      	movs	r2, #10
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff ff76 	bl	8009b04 <__multadd>
 8009c18:	e7ee      	b.n	8009bf8 <__s2b+0x68>
 8009c1a:	bf00      	nop
 8009c1c:	0800c0a0 	.word	0x0800c0a0
 8009c20:	0800c190 	.word	0x0800c190

08009c24 <__hi0bits>:
 8009c24:	0c03      	lsrs	r3, r0, #16
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	b9d3      	cbnz	r3, 8009c60 <__hi0bits+0x3c>
 8009c2a:	0400      	lsls	r0, r0, #16
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c32:	bf04      	itt	eq
 8009c34:	0200      	lsleq	r0, r0, #8
 8009c36:	3308      	addeq	r3, #8
 8009c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c3c:	bf04      	itt	eq
 8009c3e:	0100      	lsleq	r0, r0, #4
 8009c40:	3304      	addeq	r3, #4
 8009c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c46:	bf04      	itt	eq
 8009c48:	0080      	lsleq	r0, r0, #2
 8009c4a:	3302      	addeq	r3, #2
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	db05      	blt.n	8009c5c <__hi0bits+0x38>
 8009c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c54:	f103 0301 	add.w	r3, r3, #1
 8009c58:	bf08      	it	eq
 8009c5a:	2320      	moveq	r3, #32
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	4770      	bx	lr
 8009c60:	2300      	movs	r3, #0
 8009c62:	e7e4      	b.n	8009c2e <__hi0bits+0xa>

08009c64 <__lo0bits>:
 8009c64:	6803      	ldr	r3, [r0, #0]
 8009c66:	f013 0207 	ands.w	r2, r3, #7
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	d00b      	beq.n	8009c86 <__lo0bits+0x22>
 8009c6e:	07da      	lsls	r2, r3, #31
 8009c70:	d423      	bmi.n	8009cba <__lo0bits+0x56>
 8009c72:	0798      	lsls	r0, r3, #30
 8009c74:	bf49      	itett	mi
 8009c76:	085b      	lsrmi	r3, r3, #1
 8009c78:	089b      	lsrpl	r3, r3, #2
 8009c7a:	2001      	movmi	r0, #1
 8009c7c:	600b      	strmi	r3, [r1, #0]
 8009c7e:	bf5c      	itt	pl
 8009c80:	600b      	strpl	r3, [r1, #0]
 8009c82:	2002      	movpl	r0, #2
 8009c84:	4770      	bx	lr
 8009c86:	b298      	uxth	r0, r3
 8009c88:	b9a8      	cbnz	r0, 8009cb6 <__lo0bits+0x52>
 8009c8a:	0c1b      	lsrs	r3, r3, #16
 8009c8c:	2010      	movs	r0, #16
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	b90a      	cbnz	r2, 8009c96 <__lo0bits+0x32>
 8009c92:	3008      	adds	r0, #8
 8009c94:	0a1b      	lsrs	r3, r3, #8
 8009c96:	071a      	lsls	r2, r3, #28
 8009c98:	bf04      	itt	eq
 8009c9a:	091b      	lsreq	r3, r3, #4
 8009c9c:	3004      	addeq	r0, #4
 8009c9e:	079a      	lsls	r2, r3, #30
 8009ca0:	bf04      	itt	eq
 8009ca2:	089b      	lsreq	r3, r3, #2
 8009ca4:	3002      	addeq	r0, #2
 8009ca6:	07da      	lsls	r2, r3, #31
 8009ca8:	d403      	bmi.n	8009cb2 <__lo0bits+0x4e>
 8009caa:	085b      	lsrs	r3, r3, #1
 8009cac:	f100 0001 	add.w	r0, r0, #1
 8009cb0:	d005      	beq.n	8009cbe <__lo0bits+0x5a>
 8009cb2:	600b      	str	r3, [r1, #0]
 8009cb4:	4770      	bx	lr
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	e7e9      	b.n	8009c8e <__lo0bits+0x2a>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	4770      	bx	lr
 8009cbe:	2020      	movs	r0, #32
 8009cc0:	4770      	bx	lr
	...

08009cc4 <__i2b>:
 8009cc4:	b510      	push	{r4, lr}
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	2101      	movs	r1, #1
 8009cca:	f7ff feb9 	bl	8009a40 <_Balloc>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	b928      	cbnz	r0, 8009cde <__i2b+0x1a>
 8009cd2:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <__i2b+0x24>)
 8009cd4:	4805      	ldr	r0, [pc, #20]	; (8009cec <__i2b+0x28>)
 8009cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009cda:	f000 ffaf 	bl	800ac3c <__assert_func>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	6144      	str	r4, [r0, #20]
 8009ce2:	6103      	str	r3, [r0, #16]
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	bf00      	nop
 8009ce8:	0800c0a0 	.word	0x0800c0a0
 8009cec:	0800c190 	.word	0x0800c190

08009cf0 <__multiply>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	4691      	mov	r9, r2
 8009cf6:	690a      	ldr	r2, [r1, #16]
 8009cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	bfb8      	it	lt
 8009d00:	460b      	movlt	r3, r1
 8009d02:	460c      	mov	r4, r1
 8009d04:	bfbc      	itt	lt
 8009d06:	464c      	movlt	r4, r9
 8009d08:	4699      	movlt	r9, r3
 8009d0a:	6927      	ldr	r7, [r4, #16]
 8009d0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d10:	68a3      	ldr	r3, [r4, #8]
 8009d12:	6861      	ldr	r1, [r4, #4]
 8009d14:	eb07 060a 	add.w	r6, r7, sl
 8009d18:	42b3      	cmp	r3, r6
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	bfb8      	it	lt
 8009d1e:	3101      	addlt	r1, #1
 8009d20:	f7ff fe8e 	bl	8009a40 <_Balloc>
 8009d24:	b930      	cbnz	r0, 8009d34 <__multiply+0x44>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4b44      	ldr	r3, [pc, #272]	; (8009e3c <__multiply+0x14c>)
 8009d2a:	4845      	ldr	r0, [pc, #276]	; (8009e40 <__multiply+0x150>)
 8009d2c:	f240 115d 	movw	r1, #349	; 0x15d
 8009d30:	f000 ff84 	bl	800ac3c <__assert_func>
 8009d34:	f100 0514 	add.w	r5, r0, #20
 8009d38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d3c:	462b      	mov	r3, r5
 8009d3e:	2200      	movs	r2, #0
 8009d40:	4543      	cmp	r3, r8
 8009d42:	d321      	bcc.n	8009d88 <__multiply+0x98>
 8009d44:	f104 0314 	add.w	r3, r4, #20
 8009d48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d4c:	f109 0314 	add.w	r3, r9, #20
 8009d50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d54:	9202      	str	r2, [sp, #8]
 8009d56:	1b3a      	subs	r2, r7, r4
 8009d58:	3a15      	subs	r2, #21
 8009d5a:	f022 0203 	bic.w	r2, r2, #3
 8009d5e:	3204      	adds	r2, #4
 8009d60:	f104 0115 	add.w	r1, r4, #21
 8009d64:	428f      	cmp	r7, r1
 8009d66:	bf38      	it	cc
 8009d68:	2204      	movcc	r2, #4
 8009d6a:	9201      	str	r2, [sp, #4]
 8009d6c:	9a02      	ldr	r2, [sp, #8]
 8009d6e:	9303      	str	r3, [sp, #12]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d80c      	bhi.n	8009d8e <__multiply+0x9e>
 8009d74:	2e00      	cmp	r6, #0
 8009d76:	dd03      	ble.n	8009d80 <__multiply+0x90>
 8009d78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d05a      	beq.n	8009e36 <__multiply+0x146>
 8009d80:	6106      	str	r6, [r0, #16]
 8009d82:	b005      	add	sp, #20
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	f843 2b04 	str.w	r2, [r3], #4
 8009d8c:	e7d8      	b.n	8009d40 <__multiply+0x50>
 8009d8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d92:	f1ba 0f00 	cmp.w	sl, #0
 8009d96:	d024      	beq.n	8009de2 <__multiply+0xf2>
 8009d98:	f104 0e14 	add.w	lr, r4, #20
 8009d9c:	46a9      	mov	r9, r5
 8009d9e:	f04f 0c00 	mov.w	ip, #0
 8009da2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009da6:	f8d9 1000 	ldr.w	r1, [r9]
 8009daa:	fa1f fb82 	uxth.w	fp, r2
 8009dae:	b289      	uxth	r1, r1
 8009db0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009db4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009db8:	f8d9 2000 	ldr.w	r2, [r9]
 8009dbc:	4461      	add	r1, ip
 8009dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009dc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dca:	b289      	uxth	r1, r1
 8009dcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009dd0:	4577      	cmp	r7, lr
 8009dd2:	f849 1b04 	str.w	r1, [r9], #4
 8009dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dda:	d8e2      	bhi.n	8009da2 <__multiply+0xb2>
 8009ddc:	9a01      	ldr	r2, [sp, #4]
 8009dde:	f845 c002 	str.w	ip, [r5, r2]
 8009de2:	9a03      	ldr	r2, [sp, #12]
 8009de4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009de8:	3304      	adds	r3, #4
 8009dea:	f1b9 0f00 	cmp.w	r9, #0
 8009dee:	d020      	beq.n	8009e32 <__multiply+0x142>
 8009df0:	6829      	ldr	r1, [r5, #0]
 8009df2:	f104 0c14 	add.w	ip, r4, #20
 8009df6:	46ae      	mov	lr, r5
 8009df8:	f04f 0a00 	mov.w	sl, #0
 8009dfc:	f8bc b000 	ldrh.w	fp, [ip]
 8009e00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e04:	fb09 220b 	mla	r2, r9, fp, r2
 8009e08:	4492      	add	sl, r2
 8009e0a:	b289      	uxth	r1, r1
 8009e0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e10:	f84e 1b04 	str.w	r1, [lr], #4
 8009e14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e18:	f8be 1000 	ldrh.w	r1, [lr]
 8009e1c:	0c12      	lsrs	r2, r2, #16
 8009e1e:	fb09 1102 	mla	r1, r9, r2, r1
 8009e22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e26:	4567      	cmp	r7, ip
 8009e28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e2c:	d8e6      	bhi.n	8009dfc <__multiply+0x10c>
 8009e2e:	9a01      	ldr	r2, [sp, #4]
 8009e30:	50a9      	str	r1, [r5, r2]
 8009e32:	3504      	adds	r5, #4
 8009e34:	e79a      	b.n	8009d6c <__multiply+0x7c>
 8009e36:	3e01      	subs	r6, #1
 8009e38:	e79c      	b.n	8009d74 <__multiply+0x84>
 8009e3a:	bf00      	nop
 8009e3c:	0800c0a0 	.word	0x0800c0a0
 8009e40:	0800c190 	.word	0x0800c190

08009e44 <__pow5mult>:
 8009e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e48:	4615      	mov	r5, r2
 8009e4a:	f012 0203 	ands.w	r2, r2, #3
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	d007      	beq.n	8009e64 <__pow5mult+0x20>
 8009e54:	4c25      	ldr	r4, [pc, #148]	; (8009eec <__pow5mult+0xa8>)
 8009e56:	3a01      	subs	r2, #1
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e5e:	f7ff fe51 	bl	8009b04 <__multadd>
 8009e62:	4607      	mov	r7, r0
 8009e64:	10ad      	asrs	r5, r5, #2
 8009e66:	d03d      	beq.n	8009ee4 <__pow5mult+0xa0>
 8009e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e6a:	b97c      	cbnz	r4, 8009e8c <__pow5mult+0x48>
 8009e6c:	2010      	movs	r0, #16
 8009e6e:	f7ff fdbf 	bl	80099f0 <malloc>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6270      	str	r0, [r6, #36]	; 0x24
 8009e76:	b928      	cbnz	r0, 8009e84 <__pow5mult+0x40>
 8009e78:	4b1d      	ldr	r3, [pc, #116]	; (8009ef0 <__pow5mult+0xac>)
 8009e7a:	481e      	ldr	r0, [pc, #120]	; (8009ef4 <__pow5mult+0xb0>)
 8009e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e80:	f000 fedc 	bl	800ac3c <__assert_func>
 8009e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e88:	6004      	str	r4, [r0, #0]
 8009e8a:	60c4      	str	r4, [r0, #12]
 8009e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e94:	b94c      	cbnz	r4, 8009eaa <__pow5mult+0x66>
 8009e96:	f240 2171 	movw	r1, #625	; 0x271
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f7ff ff12 	bl	8009cc4 <__i2b>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	6003      	str	r3, [r0, #0]
 8009eaa:	f04f 0900 	mov.w	r9, #0
 8009eae:	07eb      	lsls	r3, r5, #31
 8009eb0:	d50a      	bpl.n	8009ec8 <__pow5mult+0x84>
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ff1a 	bl	8009cf0 <__multiply>
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff fdfd 	bl	8009ac0 <_Bfree>
 8009ec6:	4647      	mov	r7, r8
 8009ec8:	106d      	asrs	r5, r5, #1
 8009eca:	d00b      	beq.n	8009ee4 <__pow5mult+0xa0>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	b938      	cbnz	r0, 8009ee0 <__pow5mult+0x9c>
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7ff ff0b 	bl	8009cf0 <__multiply>
 8009eda:	6020      	str	r0, [r4, #0]
 8009edc:	f8c0 9000 	str.w	r9, [r0]
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	e7e4      	b.n	8009eae <__pow5mult+0x6a>
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eea:	bf00      	nop
 8009eec:	0800c2e0 	.word	0x0800c2e0
 8009ef0:	0800c02e 	.word	0x0800c02e
 8009ef4:	0800c190 	.word	0x0800c190

08009ef8 <__lshift>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	460c      	mov	r4, r1
 8009efe:	6849      	ldr	r1, [r1, #4]
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f06:	68a3      	ldr	r3, [r4, #8]
 8009f08:	4607      	mov	r7, r0
 8009f0a:	4691      	mov	r9, r2
 8009f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f10:	f108 0601 	add.w	r6, r8, #1
 8009f14:	42b3      	cmp	r3, r6
 8009f16:	db0b      	blt.n	8009f30 <__lshift+0x38>
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff fd91 	bl	8009a40 <_Balloc>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b948      	cbnz	r0, 8009f36 <__lshift+0x3e>
 8009f22:	4602      	mov	r2, r0
 8009f24:	4b2a      	ldr	r3, [pc, #168]	; (8009fd0 <__lshift+0xd8>)
 8009f26:	482b      	ldr	r0, [pc, #172]	; (8009fd4 <__lshift+0xdc>)
 8009f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f2c:	f000 fe86 	bl	800ac3c <__assert_func>
 8009f30:	3101      	adds	r1, #1
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	e7ee      	b.n	8009f14 <__lshift+0x1c>
 8009f36:	2300      	movs	r3, #0
 8009f38:	f100 0114 	add.w	r1, r0, #20
 8009f3c:	f100 0210 	add.w	r2, r0, #16
 8009f40:	4618      	mov	r0, r3
 8009f42:	4553      	cmp	r3, sl
 8009f44:	db37      	blt.n	8009fb6 <__lshift+0xbe>
 8009f46:	6920      	ldr	r0, [r4, #16]
 8009f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f4c:	f104 0314 	add.w	r3, r4, #20
 8009f50:	f019 091f 	ands.w	r9, r9, #31
 8009f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f5c:	d02f      	beq.n	8009fbe <__lshift+0xc6>
 8009f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8009f62:	468a      	mov	sl, r1
 8009f64:	f04f 0c00 	mov.w	ip, #0
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	fa02 f209 	lsl.w	r2, r2, r9
 8009f6e:	ea42 020c 	orr.w	r2, r2, ip
 8009f72:	f84a 2b04 	str.w	r2, [sl], #4
 8009f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7a:	4298      	cmp	r0, r3
 8009f7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f80:	d8f2      	bhi.n	8009f68 <__lshift+0x70>
 8009f82:	1b03      	subs	r3, r0, r4
 8009f84:	3b15      	subs	r3, #21
 8009f86:	f023 0303 	bic.w	r3, r3, #3
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	f104 0215 	add.w	r2, r4, #21
 8009f90:	4290      	cmp	r0, r2
 8009f92:	bf38      	it	cc
 8009f94:	2304      	movcc	r3, #4
 8009f96:	f841 c003 	str.w	ip, [r1, r3]
 8009f9a:	f1bc 0f00 	cmp.w	ip, #0
 8009f9e:	d001      	beq.n	8009fa4 <__lshift+0xac>
 8009fa0:	f108 0602 	add.w	r6, r8, #2
 8009fa4:	3e01      	subs	r6, #1
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	612e      	str	r6, [r5, #16]
 8009faa:	4621      	mov	r1, r4
 8009fac:	f7ff fd88 	bl	8009ac0 <_Bfree>
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fba:	3301      	adds	r3, #1
 8009fbc:	e7c1      	b.n	8009f42 <__lshift+0x4a>
 8009fbe:	3904      	subs	r1, #4
 8009fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fc8:	4298      	cmp	r0, r3
 8009fca:	d8f9      	bhi.n	8009fc0 <__lshift+0xc8>
 8009fcc:	e7ea      	b.n	8009fa4 <__lshift+0xac>
 8009fce:	bf00      	nop
 8009fd0:	0800c0a0 	.word	0x0800c0a0
 8009fd4:	0800c190 	.word	0x0800c190

08009fd8 <__mcmp>:
 8009fd8:	b530      	push	{r4, r5, lr}
 8009fda:	6902      	ldr	r2, [r0, #16]
 8009fdc:	690c      	ldr	r4, [r1, #16]
 8009fde:	1b12      	subs	r2, r2, r4
 8009fe0:	d10e      	bne.n	800a000 <__mcmp+0x28>
 8009fe2:	f100 0314 	add.w	r3, r0, #20
 8009fe6:	3114      	adds	r1, #20
 8009fe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ff0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ff4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ff8:	42a5      	cmp	r5, r4
 8009ffa:	d003      	beq.n	800a004 <__mcmp+0x2c>
 8009ffc:	d305      	bcc.n	800a00a <__mcmp+0x32>
 8009ffe:	2201      	movs	r2, #1
 800a000:	4610      	mov	r0, r2
 800a002:	bd30      	pop	{r4, r5, pc}
 800a004:	4283      	cmp	r3, r0
 800a006:	d3f3      	bcc.n	8009ff0 <__mcmp+0x18>
 800a008:	e7fa      	b.n	800a000 <__mcmp+0x28>
 800a00a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a00e:	e7f7      	b.n	800a000 <__mcmp+0x28>

0800a010 <__mdiff>:
 800a010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	460c      	mov	r4, r1
 800a016:	4606      	mov	r6, r0
 800a018:	4611      	mov	r1, r2
 800a01a:	4620      	mov	r0, r4
 800a01c:	4690      	mov	r8, r2
 800a01e:	f7ff ffdb 	bl	8009fd8 <__mcmp>
 800a022:	1e05      	subs	r5, r0, #0
 800a024:	d110      	bne.n	800a048 <__mdiff+0x38>
 800a026:	4629      	mov	r1, r5
 800a028:	4630      	mov	r0, r6
 800a02a:	f7ff fd09 	bl	8009a40 <_Balloc>
 800a02e:	b930      	cbnz	r0, 800a03e <__mdiff+0x2e>
 800a030:	4b3a      	ldr	r3, [pc, #232]	; (800a11c <__mdiff+0x10c>)
 800a032:	4602      	mov	r2, r0
 800a034:	f240 2132 	movw	r1, #562	; 0x232
 800a038:	4839      	ldr	r0, [pc, #228]	; (800a120 <__mdiff+0x110>)
 800a03a:	f000 fdff 	bl	800ac3c <__assert_func>
 800a03e:	2301      	movs	r3, #1
 800a040:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	bfa4      	itt	ge
 800a04a:	4643      	movge	r3, r8
 800a04c:	46a0      	movge	r8, r4
 800a04e:	4630      	mov	r0, r6
 800a050:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a054:	bfa6      	itte	ge
 800a056:	461c      	movge	r4, r3
 800a058:	2500      	movge	r5, #0
 800a05a:	2501      	movlt	r5, #1
 800a05c:	f7ff fcf0 	bl	8009a40 <_Balloc>
 800a060:	b920      	cbnz	r0, 800a06c <__mdiff+0x5c>
 800a062:	4b2e      	ldr	r3, [pc, #184]	; (800a11c <__mdiff+0x10c>)
 800a064:	4602      	mov	r2, r0
 800a066:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a06a:	e7e5      	b.n	800a038 <__mdiff+0x28>
 800a06c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a070:	6926      	ldr	r6, [r4, #16]
 800a072:	60c5      	str	r5, [r0, #12]
 800a074:	f104 0914 	add.w	r9, r4, #20
 800a078:	f108 0514 	add.w	r5, r8, #20
 800a07c:	f100 0e14 	add.w	lr, r0, #20
 800a080:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a084:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a088:	f108 0210 	add.w	r2, r8, #16
 800a08c:	46f2      	mov	sl, lr
 800a08e:	2100      	movs	r1, #0
 800a090:	f859 3b04 	ldr.w	r3, [r9], #4
 800a094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a098:	fa1f f883 	uxth.w	r8, r3
 800a09c:	fa11 f18b 	uxtah	r1, r1, fp
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	eba1 0808 	sub.w	r8, r1, r8
 800a0a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0ae:	fa1f f888 	uxth.w	r8, r8
 800a0b2:	1419      	asrs	r1, r3, #16
 800a0b4:	454e      	cmp	r6, r9
 800a0b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0ba:	f84a 3b04 	str.w	r3, [sl], #4
 800a0be:	d8e7      	bhi.n	800a090 <__mdiff+0x80>
 800a0c0:	1b33      	subs	r3, r6, r4
 800a0c2:	3b15      	subs	r3, #21
 800a0c4:	f023 0303 	bic.w	r3, r3, #3
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	3415      	adds	r4, #21
 800a0cc:	42a6      	cmp	r6, r4
 800a0ce:	bf38      	it	cc
 800a0d0:	2304      	movcc	r3, #4
 800a0d2:	441d      	add	r5, r3
 800a0d4:	4473      	add	r3, lr
 800a0d6:	469e      	mov	lr, r3
 800a0d8:	462e      	mov	r6, r5
 800a0da:	4566      	cmp	r6, ip
 800a0dc:	d30e      	bcc.n	800a0fc <__mdiff+0xec>
 800a0de:	f10c 0203 	add.w	r2, ip, #3
 800a0e2:	1b52      	subs	r2, r2, r5
 800a0e4:	f022 0203 	bic.w	r2, r2, #3
 800a0e8:	3d03      	subs	r5, #3
 800a0ea:	45ac      	cmp	ip, r5
 800a0ec:	bf38      	it	cc
 800a0ee:	2200      	movcc	r2, #0
 800a0f0:	441a      	add	r2, r3
 800a0f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0f6:	b17b      	cbz	r3, 800a118 <__mdiff+0x108>
 800a0f8:	6107      	str	r7, [r0, #16]
 800a0fa:	e7a3      	b.n	800a044 <__mdiff+0x34>
 800a0fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a100:	fa11 f288 	uxtah	r2, r1, r8
 800a104:	1414      	asrs	r4, r2, #16
 800a106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a10a:	b292      	uxth	r2, r2
 800a10c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a110:	f84e 2b04 	str.w	r2, [lr], #4
 800a114:	1421      	asrs	r1, r4, #16
 800a116:	e7e0      	b.n	800a0da <__mdiff+0xca>
 800a118:	3f01      	subs	r7, #1
 800a11a:	e7ea      	b.n	800a0f2 <__mdiff+0xe2>
 800a11c:	0800c0a0 	.word	0x0800c0a0
 800a120:	0800c190 	.word	0x0800c190

0800a124 <__ulp>:
 800a124:	b082      	sub	sp, #8
 800a126:	ed8d 0b00 	vstr	d0, [sp]
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	4912      	ldr	r1, [pc, #72]	; (800a178 <__ulp+0x54>)
 800a12e:	4019      	ands	r1, r3
 800a130:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a134:	2900      	cmp	r1, #0
 800a136:	dd05      	ble.n	800a144 <__ulp+0x20>
 800a138:	2200      	movs	r2, #0
 800a13a:	460b      	mov	r3, r1
 800a13c:	ec43 2b10 	vmov	d0, r2, r3
 800a140:	b002      	add	sp, #8
 800a142:	4770      	bx	lr
 800a144:	4249      	negs	r1, r1
 800a146:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a14a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	da04      	bge.n	800a162 <__ulp+0x3e>
 800a158:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a15c:	fa41 f300 	asr.w	r3, r1, r0
 800a160:	e7ec      	b.n	800a13c <__ulp+0x18>
 800a162:	f1a0 0114 	sub.w	r1, r0, #20
 800a166:	291e      	cmp	r1, #30
 800a168:	bfda      	itte	le
 800a16a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a16e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a172:	2101      	movgt	r1, #1
 800a174:	460a      	mov	r2, r1
 800a176:	e7e1      	b.n	800a13c <__ulp+0x18>
 800a178:	7ff00000 	.word	0x7ff00000

0800a17c <__b2d>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	6905      	ldr	r5, [r0, #16]
 800a180:	f100 0714 	add.w	r7, r0, #20
 800a184:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a188:	1f2e      	subs	r6, r5, #4
 800a18a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff fd48 	bl	8009c24 <__hi0bits>
 800a194:	f1c0 0320 	rsb	r3, r0, #32
 800a198:	280a      	cmp	r0, #10
 800a19a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a218 <__b2d+0x9c>
 800a19e:	600b      	str	r3, [r1, #0]
 800a1a0:	dc14      	bgt.n	800a1cc <__b2d+0x50>
 800a1a2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a1a6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a1aa:	42b7      	cmp	r7, r6
 800a1ac:	ea41 030c 	orr.w	r3, r1, ip
 800a1b0:	bf34      	ite	cc
 800a1b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1b6:	2100      	movcs	r1, #0
 800a1b8:	3015      	adds	r0, #21
 800a1ba:	fa04 f000 	lsl.w	r0, r4, r0
 800a1be:	fa21 f10e 	lsr.w	r1, r1, lr
 800a1c2:	ea40 0201 	orr.w	r2, r0, r1
 800a1c6:	ec43 2b10 	vmov	d0, r2, r3
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1cc:	42b7      	cmp	r7, r6
 800a1ce:	bf3a      	itte	cc
 800a1d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1d4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a1d8:	2100      	movcs	r1, #0
 800a1da:	380b      	subs	r0, #11
 800a1dc:	d017      	beq.n	800a20e <__b2d+0x92>
 800a1de:	f1c0 0c20 	rsb	ip, r0, #32
 800a1e2:	fa04 f500 	lsl.w	r5, r4, r0
 800a1e6:	42be      	cmp	r6, r7
 800a1e8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a1ec:	ea45 0504 	orr.w	r5, r5, r4
 800a1f0:	bf8c      	ite	hi
 800a1f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a1f6:	2400      	movls	r4, #0
 800a1f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a1fc:	fa01 f000 	lsl.w	r0, r1, r0
 800a200:	fa24 f40c 	lsr.w	r4, r4, ip
 800a204:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a208:	ea40 0204 	orr.w	r2, r0, r4
 800a20c:	e7db      	b.n	800a1c6 <__b2d+0x4a>
 800a20e:	ea44 030c 	orr.w	r3, r4, ip
 800a212:	460a      	mov	r2, r1
 800a214:	e7d7      	b.n	800a1c6 <__b2d+0x4a>
 800a216:	bf00      	nop
 800a218:	3ff00000 	.word	0x3ff00000

0800a21c <__d2b>:
 800a21c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a220:	4689      	mov	r9, r1
 800a222:	2101      	movs	r1, #1
 800a224:	ec57 6b10 	vmov	r6, r7, d0
 800a228:	4690      	mov	r8, r2
 800a22a:	f7ff fc09 	bl	8009a40 <_Balloc>
 800a22e:	4604      	mov	r4, r0
 800a230:	b930      	cbnz	r0, 800a240 <__d2b+0x24>
 800a232:	4602      	mov	r2, r0
 800a234:	4b25      	ldr	r3, [pc, #148]	; (800a2cc <__d2b+0xb0>)
 800a236:	4826      	ldr	r0, [pc, #152]	; (800a2d0 <__d2b+0xb4>)
 800a238:	f240 310a 	movw	r1, #778	; 0x30a
 800a23c:	f000 fcfe 	bl	800ac3c <__assert_func>
 800a240:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a244:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a248:	bb35      	cbnz	r5, 800a298 <__d2b+0x7c>
 800a24a:	2e00      	cmp	r6, #0
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	d028      	beq.n	800a2a2 <__d2b+0x86>
 800a250:	4668      	mov	r0, sp
 800a252:	9600      	str	r6, [sp, #0]
 800a254:	f7ff fd06 	bl	8009c64 <__lo0bits>
 800a258:	9900      	ldr	r1, [sp, #0]
 800a25a:	b300      	cbz	r0, 800a29e <__d2b+0x82>
 800a25c:	9a01      	ldr	r2, [sp, #4]
 800a25e:	f1c0 0320 	rsb	r3, r0, #32
 800a262:	fa02 f303 	lsl.w	r3, r2, r3
 800a266:	430b      	orrs	r3, r1
 800a268:	40c2      	lsrs	r2, r0
 800a26a:	6163      	str	r3, [r4, #20]
 800a26c:	9201      	str	r2, [sp, #4]
 800a26e:	9b01      	ldr	r3, [sp, #4]
 800a270:	61a3      	str	r3, [r4, #24]
 800a272:	2b00      	cmp	r3, #0
 800a274:	bf14      	ite	ne
 800a276:	2202      	movne	r2, #2
 800a278:	2201      	moveq	r2, #1
 800a27a:	6122      	str	r2, [r4, #16]
 800a27c:	b1d5      	cbz	r5, 800a2b4 <__d2b+0x98>
 800a27e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a282:	4405      	add	r5, r0
 800a284:	f8c9 5000 	str.w	r5, [r9]
 800a288:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a28c:	f8c8 0000 	str.w	r0, [r8]
 800a290:	4620      	mov	r0, r4
 800a292:	b003      	add	sp, #12
 800a294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a29c:	e7d5      	b.n	800a24a <__d2b+0x2e>
 800a29e:	6161      	str	r1, [r4, #20]
 800a2a0:	e7e5      	b.n	800a26e <__d2b+0x52>
 800a2a2:	a801      	add	r0, sp, #4
 800a2a4:	f7ff fcde 	bl	8009c64 <__lo0bits>
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	6163      	str	r3, [r4, #20]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	6122      	str	r2, [r4, #16]
 800a2b0:	3020      	adds	r0, #32
 800a2b2:	e7e3      	b.n	800a27c <__d2b+0x60>
 800a2b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2bc:	f8c9 0000 	str.w	r0, [r9]
 800a2c0:	6918      	ldr	r0, [r3, #16]
 800a2c2:	f7ff fcaf 	bl	8009c24 <__hi0bits>
 800a2c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2ca:	e7df      	b.n	800a28c <__d2b+0x70>
 800a2cc:	0800c0a0 	.word	0x0800c0a0
 800a2d0:	0800c190 	.word	0x0800c190

0800a2d4 <__ratio>:
 800a2d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d8:	4688      	mov	r8, r1
 800a2da:	4669      	mov	r1, sp
 800a2dc:	4681      	mov	r9, r0
 800a2de:	f7ff ff4d 	bl	800a17c <__b2d>
 800a2e2:	a901      	add	r1, sp, #4
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	ec55 4b10 	vmov	r4, r5, d0
 800a2ea:	f7ff ff47 	bl	800a17c <__b2d>
 800a2ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2f6:	eba3 0c02 	sub.w	ip, r3, r2
 800a2fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2fe:	1a9b      	subs	r3, r3, r2
 800a300:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a304:	ec51 0b10 	vmov	r0, r1, d0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	bfd6      	itet	le
 800a30c:	460a      	movle	r2, r1
 800a30e:	462a      	movgt	r2, r5
 800a310:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a314:	468b      	mov	fp, r1
 800a316:	462f      	mov	r7, r5
 800a318:	bfd4      	ite	le
 800a31a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a31e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a322:	4620      	mov	r0, r4
 800a324:	ee10 2a10 	vmov	r2, s0
 800a328:	465b      	mov	r3, fp
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f6 fabe 	bl	80008ac <__aeabi_ddiv>
 800a330:	ec41 0b10 	vmov	d0, r0, r1
 800a334:	b003      	add	sp, #12
 800a336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a33a <__copybits>:
 800a33a:	3901      	subs	r1, #1
 800a33c:	b570      	push	{r4, r5, r6, lr}
 800a33e:	1149      	asrs	r1, r1, #5
 800a340:	6914      	ldr	r4, [r2, #16]
 800a342:	3101      	adds	r1, #1
 800a344:	f102 0314 	add.w	r3, r2, #20
 800a348:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a34c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a350:	1f05      	subs	r5, r0, #4
 800a352:	42a3      	cmp	r3, r4
 800a354:	d30c      	bcc.n	800a370 <__copybits+0x36>
 800a356:	1aa3      	subs	r3, r4, r2
 800a358:	3b11      	subs	r3, #17
 800a35a:	f023 0303 	bic.w	r3, r3, #3
 800a35e:	3211      	adds	r2, #17
 800a360:	42a2      	cmp	r2, r4
 800a362:	bf88      	it	hi
 800a364:	2300      	movhi	r3, #0
 800a366:	4418      	add	r0, r3
 800a368:	2300      	movs	r3, #0
 800a36a:	4288      	cmp	r0, r1
 800a36c:	d305      	bcc.n	800a37a <__copybits+0x40>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	f853 6b04 	ldr.w	r6, [r3], #4
 800a374:	f845 6f04 	str.w	r6, [r5, #4]!
 800a378:	e7eb      	b.n	800a352 <__copybits+0x18>
 800a37a:	f840 3b04 	str.w	r3, [r0], #4
 800a37e:	e7f4      	b.n	800a36a <__copybits+0x30>

0800a380 <__any_on>:
 800a380:	f100 0214 	add.w	r2, r0, #20
 800a384:	6900      	ldr	r0, [r0, #16]
 800a386:	114b      	asrs	r3, r1, #5
 800a388:	4298      	cmp	r0, r3
 800a38a:	b510      	push	{r4, lr}
 800a38c:	db11      	blt.n	800a3b2 <__any_on+0x32>
 800a38e:	dd0a      	ble.n	800a3a6 <__any_on+0x26>
 800a390:	f011 011f 	ands.w	r1, r1, #31
 800a394:	d007      	beq.n	800a3a6 <__any_on+0x26>
 800a396:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a39a:	fa24 f001 	lsr.w	r0, r4, r1
 800a39e:	fa00 f101 	lsl.w	r1, r0, r1
 800a3a2:	428c      	cmp	r4, r1
 800a3a4:	d10b      	bne.n	800a3be <__any_on+0x3e>
 800a3a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d803      	bhi.n	800a3b6 <__any_on+0x36>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	e7f7      	b.n	800a3a6 <__any_on+0x26>
 800a3b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	d0f5      	beq.n	800a3aa <__any_on+0x2a>
 800a3be:	2001      	movs	r0, #1
 800a3c0:	e7f6      	b.n	800a3b0 <__any_on+0x30>

0800a3c2 <_calloc_r>:
 800a3c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3c4:	fba1 2402 	umull	r2, r4, r1, r2
 800a3c8:	b94c      	cbnz	r4, 800a3de <_calloc_r+0x1c>
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	9201      	str	r2, [sp, #4]
 800a3ce:	f000 f87b 	bl	800a4c8 <_malloc_r>
 800a3d2:	9a01      	ldr	r2, [sp, #4]
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	b930      	cbnz	r0, 800a3e6 <_calloc_r+0x24>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	b003      	add	sp, #12
 800a3dc:	bd30      	pop	{r4, r5, pc}
 800a3de:	220c      	movs	r2, #12
 800a3e0:	6002      	str	r2, [r0, #0]
 800a3e2:	2500      	movs	r5, #0
 800a3e4:	e7f8      	b.n	800a3d8 <_calloc_r+0x16>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	f7fc f854 	bl	8006494 <memset>
 800a3ec:	e7f4      	b.n	800a3d8 <_calloc_r+0x16>
	...

0800a3f0 <_free_r>:
 800a3f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3f2:	2900      	cmp	r1, #0
 800a3f4:	d044      	beq.n	800a480 <_free_r+0x90>
 800a3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3fa:	9001      	str	r0, [sp, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a402:	bfb8      	it	lt
 800a404:	18e4      	addlt	r4, r4, r3
 800a406:	f000 fca7 	bl	800ad58 <__malloc_lock>
 800a40a:	4a1e      	ldr	r2, [pc, #120]	; (800a484 <_free_r+0x94>)
 800a40c:	9801      	ldr	r0, [sp, #4]
 800a40e:	6813      	ldr	r3, [r2, #0]
 800a410:	b933      	cbnz	r3, 800a420 <_free_r+0x30>
 800a412:	6063      	str	r3, [r4, #4]
 800a414:	6014      	str	r4, [r2, #0]
 800a416:	b003      	add	sp, #12
 800a418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a41c:	f000 bca2 	b.w	800ad64 <__malloc_unlock>
 800a420:	42a3      	cmp	r3, r4
 800a422:	d908      	bls.n	800a436 <_free_r+0x46>
 800a424:	6825      	ldr	r5, [r4, #0]
 800a426:	1961      	adds	r1, r4, r5
 800a428:	428b      	cmp	r3, r1
 800a42a:	bf01      	itttt	eq
 800a42c:	6819      	ldreq	r1, [r3, #0]
 800a42e:	685b      	ldreq	r3, [r3, #4]
 800a430:	1949      	addeq	r1, r1, r5
 800a432:	6021      	streq	r1, [r4, #0]
 800a434:	e7ed      	b.n	800a412 <_free_r+0x22>
 800a436:	461a      	mov	r2, r3
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	b10b      	cbz	r3, 800a440 <_free_r+0x50>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d9fa      	bls.n	800a436 <_free_r+0x46>
 800a440:	6811      	ldr	r1, [r2, #0]
 800a442:	1855      	adds	r5, r2, r1
 800a444:	42a5      	cmp	r5, r4
 800a446:	d10b      	bne.n	800a460 <_free_r+0x70>
 800a448:	6824      	ldr	r4, [r4, #0]
 800a44a:	4421      	add	r1, r4
 800a44c:	1854      	adds	r4, r2, r1
 800a44e:	42a3      	cmp	r3, r4
 800a450:	6011      	str	r1, [r2, #0]
 800a452:	d1e0      	bne.n	800a416 <_free_r+0x26>
 800a454:	681c      	ldr	r4, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	6053      	str	r3, [r2, #4]
 800a45a:	4421      	add	r1, r4
 800a45c:	6011      	str	r1, [r2, #0]
 800a45e:	e7da      	b.n	800a416 <_free_r+0x26>
 800a460:	d902      	bls.n	800a468 <_free_r+0x78>
 800a462:	230c      	movs	r3, #12
 800a464:	6003      	str	r3, [r0, #0]
 800a466:	e7d6      	b.n	800a416 <_free_r+0x26>
 800a468:	6825      	ldr	r5, [r4, #0]
 800a46a:	1961      	adds	r1, r4, r5
 800a46c:	428b      	cmp	r3, r1
 800a46e:	bf04      	itt	eq
 800a470:	6819      	ldreq	r1, [r3, #0]
 800a472:	685b      	ldreq	r3, [r3, #4]
 800a474:	6063      	str	r3, [r4, #4]
 800a476:	bf04      	itt	eq
 800a478:	1949      	addeq	r1, r1, r5
 800a47a:	6021      	streq	r1, [r4, #0]
 800a47c:	6054      	str	r4, [r2, #4]
 800a47e:	e7ca      	b.n	800a416 <_free_r+0x26>
 800a480:	b003      	add	sp, #12
 800a482:	bd30      	pop	{r4, r5, pc}
 800a484:	20000374 	.word	0x20000374

0800a488 <sbrk_aligned>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	4e0e      	ldr	r6, [pc, #56]	; (800a4c4 <sbrk_aligned+0x3c>)
 800a48c:	460c      	mov	r4, r1
 800a48e:	6831      	ldr	r1, [r6, #0]
 800a490:	4605      	mov	r5, r0
 800a492:	b911      	cbnz	r1, 800a49a <sbrk_aligned+0x12>
 800a494:	f000 fb4c 	bl	800ab30 <_sbrk_r>
 800a498:	6030      	str	r0, [r6, #0]
 800a49a:	4621      	mov	r1, r4
 800a49c:	4628      	mov	r0, r5
 800a49e:	f000 fb47 	bl	800ab30 <_sbrk_r>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d00a      	beq.n	800a4bc <sbrk_aligned+0x34>
 800a4a6:	1cc4      	adds	r4, r0, #3
 800a4a8:	f024 0403 	bic.w	r4, r4, #3
 800a4ac:	42a0      	cmp	r0, r4
 800a4ae:	d007      	beq.n	800a4c0 <sbrk_aligned+0x38>
 800a4b0:	1a21      	subs	r1, r4, r0
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f000 fb3c 	bl	800ab30 <_sbrk_r>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d101      	bne.n	800a4c0 <sbrk_aligned+0x38>
 800a4bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	20000378 	.word	0x20000378

0800a4c8 <_malloc_r>:
 800a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4cc:	1ccd      	adds	r5, r1, #3
 800a4ce:	f025 0503 	bic.w	r5, r5, #3
 800a4d2:	3508      	adds	r5, #8
 800a4d4:	2d0c      	cmp	r5, #12
 800a4d6:	bf38      	it	cc
 800a4d8:	250c      	movcc	r5, #12
 800a4da:	2d00      	cmp	r5, #0
 800a4dc:	4607      	mov	r7, r0
 800a4de:	db01      	blt.n	800a4e4 <_malloc_r+0x1c>
 800a4e0:	42a9      	cmp	r1, r5
 800a4e2:	d905      	bls.n	800a4f0 <_malloc_r+0x28>
 800a4e4:	230c      	movs	r3, #12
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f0:	4e2e      	ldr	r6, [pc, #184]	; (800a5ac <_malloc_r+0xe4>)
 800a4f2:	f000 fc31 	bl	800ad58 <__malloc_lock>
 800a4f6:	6833      	ldr	r3, [r6, #0]
 800a4f8:	461c      	mov	r4, r3
 800a4fa:	bb34      	cbnz	r4, 800a54a <_malloc_r+0x82>
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	4638      	mov	r0, r7
 800a500:	f7ff ffc2 	bl	800a488 <sbrk_aligned>
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	4604      	mov	r4, r0
 800a508:	d14d      	bne.n	800a5a6 <_malloc_r+0xde>
 800a50a:	6834      	ldr	r4, [r6, #0]
 800a50c:	4626      	mov	r6, r4
 800a50e:	2e00      	cmp	r6, #0
 800a510:	d140      	bne.n	800a594 <_malloc_r+0xcc>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	4631      	mov	r1, r6
 800a516:	4638      	mov	r0, r7
 800a518:	eb04 0803 	add.w	r8, r4, r3
 800a51c:	f000 fb08 	bl	800ab30 <_sbrk_r>
 800a520:	4580      	cmp	r8, r0
 800a522:	d13a      	bne.n	800a59a <_malloc_r+0xd2>
 800a524:	6821      	ldr	r1, [r4, #0]
 800a526:	3503      	adds	r5, #3
 800a528:	1a6d      	subs	r5, r5, r1
 800a52a:	f025 0503 	bic.w	r5, r5, #3
 800a52e:	3508      	adds	r5, #8
 800a530:	2d0c      	cmp	r5, #12
 800a532:	bf38      	it	cc
 800a534:	250c      	movcc	r5, #12
 800a536:	4629      	mov	r1, r5
 800a538:	4638      	mov	r0, r7
 800a53a:	f7ff ffa5 	bl	800a488 <sbrk_aligned>
 800a53e:	3001      	adds	r0, #1
 800a540:	d02b      	beq.n	800a59a <_malloc_r+0xd2>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	442b      	add	r3, r5
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	e00e      	b.n	800a568 <_malloc_r+0xa0>
 800a54a:	6822      	ldr	r2, [r4, #0]
 800a54c:	1b52      	subs	r2, r2, r5
 800a54e:	d41e      	bmi.n	800a58e <_malloc_r+0xc6>
 800a550:	2a0b      	cmp	r2, #11
 800a552:	d916      	bls.n	800a582 <_malloc_r+0xba>
 800a554:	1961      	adds	r1, r4, r5
 800a556:	42a3      	cmp	r3, r4
 800a558:	6025      	str	r5, [r4, #0]
 800a55a:	bf18      	it	ne
 800a55c:	6059      	strne	r1, [r3, #4]
 800a55e:	6863      	ldr	r3, [r4, #4]
 800a560:	bf08      	it	eq
 800a562:	6031      	streq	r1, [r6, #0]
 800a564:	5162      	str	r2, [r4, r5]
 800a566:	604b      	str	r3, [r1, #4]
 800a568:	4638      	mov	r0, r7
 800a56a:	f104 060b 	add.w	r6, r4, #11
 800a56e:	f000 fbf9 	bl	800ad64 <__malloc_unlock>
 800a572:	f026 0607 	bic.w	r6, r6, #7
 800a576:	1d23      	adds	r3, r4, #4
 800a578:	1af2      	subs	r2, r6, r3
 800a57a:	d0b6      	beq.n	800a4ea <_malloc_r+0x22>
 800a57c:	1b9b      	subs	r3, r3, r6
 800a57e:	50a3      	str	r3, [r4, r2]
 800a580:	e7b3      	b.n	800a4ea <_malloc_r+0x22>
 800a582:	6862      	ldr	r2, [r4, #4]
 800a584:	42a3      	cmp	r3, r4
 800a586:	bf0c      	ite	eq
 800a588:	6032      	streq	r2, [r6, #0]
 800a58a:	605a      	strne	r2, [r3, #4]
 800a58c:	e7ec      	b.n	800a568 <_malloc_r+0xa0>
 800a58e:	4623      	mov	r3, r4
 800a590:	6864      	ldr	r4, [r4, #4]
 800a592:	e7b2      	b.n	800a4fa <_malloc_r+0x32>
 800a594:	4634      	mov	r4, r6
 800a596:	6876      	ldr	r6, [r6, #4]
 800a598:	e7b9      	b.n	800a50e <_malloc_r+0x46>
 800a59a:	230c      	movs	r3, #12
 800a59c:	603b      	str	r3, [r7, #0]
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f000 fbe0 	bl	800ad64 <__malloc_unlock>
 800a5a4:	e7a1      	b.n	800a4ea <_malloc_r+0x22>
 800a5a6:	6025      	str	r5, [r4, #0]
 800a5a8:	e7de      	b.n	800a568 <_malloc_r+0xa0>
 800a5aa:	bf00      	nop
 800a5ac:	20000374 	.word	0x20000374

0800a5b0 <__ssputs_r>:
 800a5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b4:	688e      	ldr	r6, [r1, #8]
 800a5b6:	429e      	cmp	r6, r3
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	4690      	mov	r8, r2
 800a5be:	461f      	mov	r7, r3
 800a5c0:	d838      	bhi.n	800a634 <__ssputs_r+0x84>
 800a5c2:	898a      	ldrh	r2, [r1, #12]
 800a5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5c8:	d032      	beq.n	800a630 <__ssputs_r+0x80>
 800a5ca:	6825      	ldr	r5, [r4, #0]
 800a5cc:	6909      	ldr	r1, [r1, #16]
 800a5ce:	eba5 0901 	sub.w	r9, r5, r1
 800a5d2:	6965      	ldr	r5, [r4, #20]
 800a5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5dc:	3301      	adds	r3, #1
 800a5de:	444b      	add	r3, r9
 800a5e0:	106d      	asrs	r5, r5, #1
 800a5e2:	429d      	cmp	r5, r3
 800a5e4:	bf38      	it	cc
 800a5e6:	461d      	movcc	r5, r3
 800a5e8:	0553      	lsls	r3, r2, #21
 800a5ea:	d531      	bpl.n	800a650 <__ssputs_r+0xa0>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	f7ff ff6b 	bl	800a4c8 <_malloc_r>
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	b950      	cbnz	r0, 800a60c <__ssputs_r+0x5c>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	f8ca 3000 	str.w	r3, [sl]
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60c:	6921      	ldr	r1, [r4, #16]
 800a60e:	464a      	mov	r2, r9
 800a610:	f7ff fa08 	bl	8009a24 <memcpy>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	6126      	str	r6, [r4, #16]
 800a622:	6165      	str	r5, [r4, #20]
 800a624:	444e      	add	r6, r9
 800a626:	eba5 0509 	sub.w	r5, r5, r9
 800a62a:	6026      	str	r6, [r4, #0]
 800a62c:	60a5      	str	r5, [r4, #8]
 800a62e:	463e      	mov	r6, r7
 800a630:	42be      	cmp	r6, r7
 800a632:	d900      	bls.n	800a636 <__ssputs_r+0x86>
 800a634:	463e      	mov	r6, r7
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	4632      	mov	r2, r6
 800a63a:	4641      	mov	r1, r8
 800a63c:	f000 fb72 	bl	800ad24 <memmove>
 800a640:	68a3      	ldr	r3, [r4, #8]
 800a642:	1b9b      	subs	r3, r3, r6
 800a644:	60a3      	str	r3, [r4, #8]
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	4433      	add	r3, r6
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	e7db      	b.n	800a608 <__ssputs_r+0x58>
 800a650:	462a      	mov	r2, r5
 800a652:	f000 fb8d 	bl	800ad70 <_realloc_r>
 800a656:	4606      	mov	r6, r0
 800a658:	2800      	cmp	r0, #0
 800a65a:	d1e1      	bne.n	800a620 <__ssputs_r+0x70>
 800a65c:	6921      	ldr	r1, [r4, #16]
 800a65e:	4650      	mov	r0, sl
 800a660:	f7ff fec6 	bl	800a3f0 <_free_r>
 800a664:	e7c7      	b.n	800a5f6 <__ssputs_r+0x46>
	...

0800a668 <_svfiprintf_r>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	4698      	mov	r8, r3
 800a66e:	898b      	ldrh	r3, [r1, #12]
 800a670:	061b      	lsls	r3, r3, #24
 800a672:	b09d      	sub	sp, #116	; 0x74
 800a674:	4607      	mov	r7, r0
 800a676:	460d      	mov	r5, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	d50e      	bpl.n	800a69a <_svfiprintf_r+0x32>
 800a67c:	690b      	ldr	r3, [r1, #16]
 800a67e:	b963      	cbnz	r3, 800a69a <_svfiprintf_r+0x32>
 800a680:	2140      	movs	r1, #64	; 0x40
 800a682:	f7ff ff21 	bl	800a4c8 <_malloc_r>
 800a686:	6028      	str	r0, [r5, #0]
 800a688:	6128      	str	r0, [r5, #16]
 800a68a:	b920      	cbnz	r0, 800a696 <_svfiprintf_r+0x2e>
 800a68c:	230c      	movs	r3, #12
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a694:	e0d1      	b.n	800a83a <_svfiprintf_r+0x1d2>
 800a696:	2340      	movs	r3, #64	; 0x40
 800a698:	616b      	str	r3, [r5, #20]
 800a69a:	2300      	movs	r3, #0
 800a69c:	9309      	str	r3, [sp, #36]	; 0x24
 800a69e:	2320      	movs	r3, #32
 800a6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6a8:	2330      	movs	r3, #48	; 0x30
 800a6aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a854 <_svfiprintf_r+0x1ec>
 800a6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6b2:	f04f 0901 	mov.w	r9, #1
 800a6b6:	4623      	mov	r3, r4
 800a6b8:	469a      	mov	sl, r3
 800a6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6be:	b10a      	cbz	r2, 800a6c4 <_svfiprintf_r+0x5c>
 800a6c0:	2a25      	cmp	r2, #37	; 0x25
 800a6c2:	d1f9      	bne.n	800a6b8 <_svfiprintf_r+0x50>
 800a6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6c8:	d00b      	beq.n	800a6e2 <_svfiprintf_r+0x7a>
 800a6ca:	465b      	mov	r3, fp
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f7ff ff6d 	bl	800a5b0 <__ssputs_r>
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	f000 80aa 	beq.w	800a830 <_svfiprintf_r+0x1c8>
 800a6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6de:	445a      	add	r2, fp
 800a6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 80a2 	beq.w	800a830 <_svfiprintf_r+0x1c8>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6f6:	f10a 0a01 	add.w	sl, sl, #1
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	9307      	str	r3, [sp, #28]
 800a6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a702:	931a      	str	r3, [sp, #104]	; 0x68
 800a704:	4654      	mov	r4, sl
 800a706:	2205      	movs	r2, #5
 800a708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70c:	4851      	ldr	r0, [pc, #324]	; (800a854 <_svfiprintf_r+0x1ec>)
 800a70e:	f7f5 fd97 	bl	8000240 <memchr>
 800a712:	9a04      	ldr	r2, [sp, #16]
 800a714:	b9d8      	cbnz	r0, 800a74e <_svfiprintf_r+0xe6>
 800a716:	06d0      	lsls	r0, r2, #27
 800a718:	bf44      	itt	mi
 800a71a:	2320      	movmi	r3, #32
 800a71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a720:	0711      	lsls	r1, r2, #28
 800a722:	bf44      	itt	mi
 800a724:	232b      	movmi	r3, #43	; 0x2b
 800a726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72a:	f89a 3000 	ldrb.w	r3, [sl]
 800a72e:	2b2a      	cmp	r3, #42	; 0x2a
 800a730:	d015      	beq.n	800a75e <_svfiprintf_r+0xf6>
 800a732:	9a07      	ldr	r2, [sp, #28]
 800a734:	4654      	mov	r4, sl
 800a736:	2000      	movs	r0, #0
 800a738:	f04f 0c0a 	mov.w	ip, #10
 800a73c:	4621      	mov	r1, r4
 800a73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a742:	3b30      	subs	r3, #48	; 0x30
 800a744:	2b09      	cmp	r3, #9
 800a746:	d94e      	bls.n	800a7e6 <_svfiprintf_r+0x17e>
 800a748:	b1b0      	cbz	r0, 800a778 <_svfiprintf_r+0x110>
 800a74a:	9207      	str	r2, [sp, #28]
 800a74c:	e014      	b.n	800a778 <_svfiprintf_r+0x110>
 800a74e:	eba0 0308 	sub.w	r3, r0, r8
 800a752:	fa09 f303 	lsl.w	r3, r9, r3
 800a756:	4313      	orrs	r3, r2
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	46a2      	mov	sl, r4
 800a75c:	e7d2      	b.n	800a704 <_svfiprintf_r+0x9c>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	1d19      	adds	r1, r3, #4
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	9103      	str	r1, [sp, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	bfbb      	ittet	lt
 800a76a:	425b      	neglt	r3, r3
 800a76c:	f042 0202 	orrlt.w	r2, r2, #2
 800a770:	9307      	strge	r3, [sp, #28]
 800a772:	9307      	strlt	r3, [sp, #28]
 800a774:	bfb8      	it	lt
 800a776:	9204      	strlt	r2, [sp, #16]
 800a778:	7823      	ldrb	r3, [r4, #0]
 800a77a:	2b2e      	cmp	r3, #46	; 0x2e
 800a77c:	d10c      	bne.n	800a798 <_svfiprintf_r+0x130>
 800a77e:	7863      	ldrb	r3, [r4, #1]
 800a780:	2b2a      	cmp	r3, #42	; 0x2a
 800a782:	d135      	bne.n	800a7f0 <_svfiprintf_r+0x188>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	9203      	str	r2, [sp, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfb8      	it	lt
 800a790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a794:	3402      	adds	r4, #2
 800a796:	9305      	str	r3, [sp, #20]
 800a798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a864 <_svfiprintf_r+0x1fc>
 800a79c:	7821      	ldrb	r1, [r4, #0]
 800a79e:	2203      	movs	r2, #3
 800a7a0:	4650      	mov	r0, sl
 800a7a2:	f7f5 fd4d 	bl	8000240 <memchr>
 800a7a6:	b140      	cbz	r0, 800a7ba <_svfiprintf_r+0x152>
 800a7a8:	2340      	movs	r3, #64	; 0x40
 800a7aa:	eba0 000a 	sub.w	r0, r0, sl
 800a7ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	4303      	orrs	r3, r0
 800a7b6:	3401      	adds	r4, #1
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7be:	4826      	ldr	r0, [pc, #152]	; (800a858 <_svfiprintf_r+0x1f0>)
 800a7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7c4:	2206      	movs	r2, #6
 800a7c6:	f7f5 fd3b 	bl	8000240 <memchr>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d038      	beq.n	800a840 <_svfiprintf_r+0x1d8>
 800a7ce:	4b23      	ldr	r3, [pc, #140]	; (800a85c <_svfiprintf_r+0x1f4>)
 800a7d0:	bb1b      	cbnz	r3, 800a81a <_svfiprintf_r+0x1b2>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	3307      	adds	r3, #7
 800a7d6:	f023 0307 	bic.w	r3, r3, #7
 800a7da:	3308      	adds	r3, #8
 800a7dc:	9303      	str	r3, [sp, #12]
 800a7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e0:	4433      	add	r3, r6
 800a7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e4:	e767      	b.n	800a6b6 <_svfiprintf_r+0x4e>
 800a7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	e7a5      	b.n	800a73c <_svfiprintf_r+0xd4>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	3401      	adds	r4, #1
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	f04f 0c0a 	mov.w	ip, #10
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a802:	3a30      	subs	r2, #48	; 0x30
 800a804:	2a09      	cmp	r2, #9
 800a806:	d903      	bls.n	800a810 <_svfiprintf_r+0x1a8>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0c5      	beq.n	800a798 <_svfiprintf_r+0x130>
 800a80c:	9105      	str	r1, [sp, #20]
 800a80e:	e7c3      	b.n	800a798 <_svfiprintf_r+0x130>
 800a810:	fb0c 2101 	mla	r1, ip, r1, r2
 800a814:	4604      	mov	r4, r0
 800a816:	2301      	movs	r3, #1
 800a818:	e7f0      	b.n	800a7fc <_svfiprintf_r+0x194>
 800a81a:	ab03      	add	r3, sp, #12
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	462a      	mov	r2, r5
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <_svfiprintf_r+0x1f8>)
 800a822:	a904      	add	r1, sp, #16
 800a824:	4638      	mov	r0, r7
 800a826:	f7fb fedd 	bl	80065e4 <_printf_float>
 800a82a:	1c42      	adds	r2, r0, #1
 800a82c:	4606      	mov	r6, r0
 800a82e:	d1d6      	bne.n	800a7de <_svfiprintf_r+0x176>
 800a830:	89ab      	ldrh	r3, [r5, #12]
 800a832:	065b      	lsls	r3, r3, #25
 800a834:	f53f af2c 	bmi.w	800a690 <_svfiprintf_r+0x28>
 800a838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83a:	b01d      	add	sp, #116	; 0x74
 800a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a840:	ab03      	add	r3, sp, #12
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	462a      	mov	r2, r5
 800a846:	4b06      	ldr	r3, [pc, #24]	; (800a860 <_svfiprintf_r+0x1f8>)
 800a848:	a904      	add	r1, sp, #16
 800a84a:	4638      	mov	r0, r7
 800a84c:	f7fc f96e 	bl	8006b2c <_printf_i>
 800a850:	e7eb      	b.n	800a82a <_svfiprintf_r+0x1c2>
 800a852:	bf00      	nop
 800a854:	0800c2ec 	.word	0x0800c2ec
 800a858:	0800c2f6 	.word	0x0800c2f6
 800a85c:	080065e5 	.word	0x080065e5
 800a860:	0800a5b1 	.word	0x0800a5b1
 800a864:	0800c2f2 	.word	0x0800c2f2

0800a868 <__sfputc_r>:
 800a868:	6893      	ldr	r3, [r2, #8]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	b410      	push	{r4}
 800a870:	6093      	str	r3, [r2, #8]
 800a872:	da08      	bge.n	800a886 <__sfputc_r+0x1e>
 800a874:	6994      	ldr	r4, [r2, #24]
 800a876:	42a3      	cmp	r3, r4
 800a878:	db01      	blt.n	800a87e <__sfputc_r+0x16>
 800a87a:	290a      	cmp	r1, #10
 800a87c:	d103      	bne.n	800a886 <__sfputc_r+0x1e>
 800a87e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a882:	f7fd bbe9 	b.w	8008058 <__swbuf_r>
 800a886:	6813      	ldr	r3, [r2, #0]
 800a888:	1c58      	adds	r0, r3, #1
 800a88a:	6010      	str	r0, [r2, #0]
 800a88c:	7019      	strb	r1, [r3, #0]
 800a88e:	4608      	mov	r0, r1
 800a890:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <__sfputs_r>:
 800a896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a898:	4606      	mov	r6, r0
 800a89a:	460f      	mov	r7, r1
 800a89c:	4614      	mov	r4, r2
 800a89e:	18d5      	adds	r5, r2, r3
 800a8a0:	42ac      	cmp	r4, r5
 800a8a2:	d101      	bne.n	800a8a8 <__sfputs_r+0x12>
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	e007      	b.n	800a8b8 <__sfputs_r+0x22>
 800a8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ac:	463a      	mov	r2, r7
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7ff ffda 	bl	800a868 <__sfputc_r>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d1f3      	bne.n	800a8a0 <__sfputs_r+0xa>
 800a8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8bc <_vfiprintf_r>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	b09d      	sub	sp, #116	; 0x74
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	4698      	mov	r8, r3
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	b118      	cbz	r0, 800a8d4 <_vfiprintf_r+0x18>
 800a8cc:	6983      	ldr	r3, [r0, #24]
 800a8ce:	b90b      	cbnz	r3, 800a8d4 <_vfiprintf_r+0x18>
 800a8d0:	f7fe fc16 	bl	8009100 <__sinit>
 800a8d4:	4b89      	ldr	r3, [pc, #548]	; (800aafc <_vfiprintf_r+0x240>)
 800a8d6:	429d      	cmp	r5, r3
 800a8d8:	d11b      	bne.n	800a912 <_vfiprintf_r+0x56>
 800a8da:	6875      	ldr	r5, [r6, #4]
 800a8dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8de:	07d9      	lsls	r1, r3, #31
 800a8e0:	d405      	bmi.n	800a8ee <_vfiprintf_r+0x32>
 800a8e2:	89ab      	ldrh	r3, [r5, #12]
 800a8e4:	059a      	lsls	r2, r3, #22
 800a8e6:	d402      	bmi.n	800a8ee <_vfiprintf_r+0x32>
 800a8e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ea:	f7ff f81a 	bl	8009922 <__retarget_lock_acquire_recursive>
 800a8ee:	89ab      	ldrh	r3, [r5, #12]
 800a8f0:	071b      	lsls	r3, r3, #28
 800a8f2:	d501      	bpl.n	800a8f8 <_vfiprintf_r+0x3c>
 800a8f4:	692b      	ldr	r3, [r5, #16]
 800a8f6:	b9eb      	cbnz	r3, 800a934 <_vfiprintf_r+0x78>
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f7fd fbfe 	bl	80080fc <__swsetup_r>
 800a900:	b1c0      	cbz	r0, 800a934 <_vfiprintf_r+0x78>
 800a902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a904:	07dc      	lsls	r4, r3, #31
 800a906:	d50e      	bpl.n	800a926 <_vfiprintf_r+0x6a>
 800a908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a90c:	b01d      	add	sp, #116	; 0x74
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	4b7b      	ldr	r3, [pc, #492]	; (800ab00 <_vfiprintf_r+0x244>)
 800a914:	429d      	cmp	r5, r3
 800a916:	d101      	bne.n	800a91c <_vfiprintf_r+0x60>
 800a918:	68b5      	ldr	r5, [r6, #8]
 800a91a:	e7df      	b.n	800a8dc <_vfiprintf_r+0x20>
 800a91c:	4b79      	ldr	r3, [pc, #484]	; (800ab04 <_vfiprintf_r+0x248>)
 800a91e:	429d      	cmp	r5, r3
 800a920:	bf08      	it	eq
 800a922:	68f5      	ldreq	r5, [r6, #12]
 800a924:	e7da      	b.n	800a8dc <_vfiprintf_r+0x20>
 800a926:	89ab      	ldrh	r3, [r5, #12]
 800a928:	0598      	lsls	r0, r3, #22
 800a92a:	d4ed      	bmi.n	800a908 <_vfiprintf_r+0x4c>
 800a92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a92e:	f7fe fff9 	bl	8009924 <__retarget_lock_release_recursive>
 800a932:	e7e9      	b.n	800a908 <_vfiprintf_r+0x4c>
 800a934:	2300      	movs	r3, #0
 800a936:	9309      	str	r3, [sp, #36]	; 0x24
 800a938:	2320      	movs	r3, #32
 800a93a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a93e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a942:	2330      	movs	r3, #48	; 0x30
 800a944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab08 <_vfiprintf_r+0x24c>
 800a948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a94c:	f04f 0901 	mov.w	r9, #1
 800a950:	4623      	mov	r3, r4
 800a952:	469a      	mov	sl, r3
 800a954:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a958:	b10a      	cbz	r2, 800a95e <_vfiprintf_r+0xa2>
 800a95a:	2a25      	cmp	r2, #37	; 0x25
 800a95c:	d1f9      	bne.n	800a952 <_vfiprintf_r+0x96>
 800a95e:	ebba 0b04 	subs.w	fp, sl, r4
 800a962:	d00b      	beq.n	800a97c <_vfiprintf_r+0xc0>
 800a964:	465b      	mov	r3, fp
 800a966:	4622      	mov	r2, r4
 800a968:	4629      	mov	r1, r5
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff ff93 	bl	800a896 <__sfputs_r>
 800a970:	3001      	adds	r0, #1
 800a972:	f000 80aa 	beq.w	800aaca <_vfiprintf_r+0x20e>
 800a976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a978:	445a      	add	r2, fp
 800a97a:	9209      	str	r2, [sp, #36]	; 0x24
 800a97c:	f89a 3000 	ldrb.w	r3, [sl]
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 80a2 	beq.w	800aaca <_vfiprintf_r+0x20e>
 800a986:	2300      	movs	r3, #0
 800a988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a990:	f10a 0a01 	add.w	sl, sl, #1
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	9307      	str	r3, [sp, #28]
 800a998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a99c:	931a      	str	r3, [sp, #104]	; 0x68
 800a99e:	4654      	mov	r4, sl
 800a9a0:	2205      	movs	r2, #5
 800a9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a6:	4858      	ldr	r0, [pc, #352]	; (800ab08 <_vfiprintf_r+0x24c>)
 800a9a8:	f7f5 fc4a 	bl	8000240 <memchr>
 800a9ac:	9a04      	ldr	r2, [sp, #16]
 800a9ae:	b9d8      	cbnz	r0, 800a9e8 <_vfiprintf_r+0x12c>
 800a9b0:	06d1      	lsls	r1, r2, #27
 800a9b2:	bf44      	itt	mi
 800a9b4:	2320      	movmi	r3, #32
 800a9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ba:	0713      	lsls	r3, r2, #28
 800a9bc:	bf44      	itt	mi
 800a9be:	232b      	movmi	r3, #43	; 0x2b
 800a9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ca:	d015      	beq.n	800a9f8 <_vfiprintf_r+0x13c>
 800a9cc:	9a07      	ldr	r2, [sp, #28]
 800a9ce:	4654      	mov	r4, sl
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f04f 0c0a 	mov.w	ip, #10
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9dc:	3b30      	subs	r3, #48	; 0x30
 800a9de:	2b09      	cmp	r3, #9
 800a9e0:	d94e      	bls.n	800aa80 <_vfiprintf_r+0x1c4>
 800a9e2:	b1b0      	cbz	r0, 800aa12 <_vfiprintf_r+0x156>
 800a9e4:	9207      	str	r2, [sp, #28]
 800a9e6:	e014      	b.n	800aa12 <_vfiprintf_r+0x156>
 800a9e8:	eba0 0308 	sub.w	r3, r0, r8
 800a9ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	46a2      	mov	sl, r4
 800a9f6:	e7d2      	b.n	800a99e <_vfiprintf_r+0xe2>
 800a9f8:	9b03      	ldr	r3, [sp, #12]
 800a9fa:	1d19      	adds	r1, r3, #4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	9103      	str	r1, [sp, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bfbb      	ittet	lt
 800aa04:	425b      	neglt	r3, r3
 800aa06:	f042 0202 	orrlt.w	r2, r2, #2
 800aa0a:	9307      	strge	r3, [sp, #28]
 800aa0c:	9307      	strlt	r3, [sp, #28]
 800aa0e:	bfb8      	it	lt
 800aa10:	9204      	strlt	r2, [sp, #16]
 800aa12:	7823      	ldrb	r3, [r4, #0]
 800aa14:	2b2e      	cmp	r3, #46	; 0x2e
 800aa16:	d10c      	bne.n	800aa32 <_vfiprintf_r+0x176>
 800aa18:	7863      	ldrb	r3, [r4, #1]
 800aa1a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa1c:	d135      	bne.n	800aa8a <_vfiprintf_r+0x1ce>
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	1d1a      	adds	r2, r3, #4
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	9203      	str	r2, [sp, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bfb8      	it	lt
 800aa2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa2e:	3402      	adds	r4, #2
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab18 <_vfiprintf_r+0x25c>
 800aa36:	7821      	ldrb	r1, [r4, #0]
 800aa38:	2203      	movs	r2, #3
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	f7f5 fc00 	bl	8000240 <memchr>
 800aa40:	b140      	cbz	r0, 800aa54 <_vfiprintf_r+0x198>
 800aa42:	2340      	movs	r3, #64	; 0x40
 800aa44:	eba0 000a 	sub.w	r0, r0, sl
 800aa48:	fa03 f000 	lsl.w	r0, r3, r0
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	4303      	orrs	r3, r0
 800aa50:	3401      	adds	r4, #1
 800aa52:	9304      	str	r3, [sp, #16]
 800aa54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa58:	482c      	ldr	r0, [pc, #176]	; (800ab0c <_vfiprintf_r+0x250>)
 800aa5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa5e:	2206      	movs	r2, #6
 800aa60:	f7f5 fbee 	bl	8000240 <memchr>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d03f      	beq.n	800aae8 <_vfiprintf_r+0x22c>
 800aa68:	4b29      	ldr	r3, [pc, #164]	; (800ab10 <_vfiprintf_r+0x254>)
 800aa6a:	bb1b      	cbnz	r3, 800aab4 <_vfiprintf_r+0x1f8>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	3307      	adds	r3, #7
 800aa70:	f023 0307 	bic.w	r3, r3, #7
 800aa74:	3308      	adds	r3, #8
 800aa76:	9303      	str	r3, [sp, #12]
 800aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7a:	443b      	add	r3, r7
 800aa7c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7e:	e767      	b.n	800a950 <_vfiprintf_r+0x94>
 800aa80:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa84:	460c      	mov	r4, r1
 800aa86:	2001      	movs	r0, #1
 800aa88:	e7a5      	b.n	800a9d6 <_vfiprintf_r+0x11a>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	3401      	adds	r4, #1
 800aa8e:	9305      	str	r3, [sp, #20]
 800aa90:	4619      	mov	r1, r3
 800aa92:	f04f 0c0a 	mov.w	ip, #10
 800aa96:	4620      	mov	r0, r4
 800aa98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa9c:	3a30      	subs	r2, #48	; 0x30
 800aa9e:	2a09      	cmp	r2, #9
 800aaa0:	d903      	bls.n	800aaaa <_vfiprintf_r+0x1ee>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0c5      	beq.n	800aa32 <_vfiprintf_r+0x176>
 800aaa6:	9105      	str	r1, [sp, #20]
 800aaa8:	e7c3      	b.n	800aa32 <_vfiprintf_r+0x176>
 800aaaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaae:	4604      	mov	r4, r0
 800aab0:	2301      	movs	r3, #1
 800aab2:	e7f0      	b.n	800aa96 <_vfiprintf_r+0x1da>
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4b16      	ldr	r3, [pc, #88]	; (800ab14 <_vfiprintf_r+0x258>)
 800aabc:	a904      	add	r1, sp, #16
 800aabe:	4630      	mov	r0, r6
 800aac0:	f7fb fd90 	bl	80065e4 <_printf_float>
 800aac4:	4607      	mov	r7, r0
 800aac6:	1c78      	adds	r0, r7, #1
 800aac8:	d1d6      	bne.n	800aa78 <_vfiprintf_r+0x1bc>
 800aaca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aacc:	07d9      	lsls	r1, r3, #31
 800aace:	d405      	bmi.n	800aadc <_vfiprintf_r+0x220>
 800aad0:	89ab      	ldrh	r3, [r5, #12]
 800aad2:	059a      	lsls	r2, r3, #22
 800aad4:	d402      	bmi.n	800aadc <_vfiprintf_r+0x220>
 800aad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aad8:	f7fe ff24 	bl	8009924 <__retarget_lock_release_recursive>
 800aadc:	89ab      	ldrh	r3, [r5, #12]
 800aade:	065b      	lsls	r3, r3, #25
 800aae0:	f53f af12 	bmi.w	800a908 <_vfiprintf_r+0x4c>
 800aae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aae6:	e711      	b.n	800a90c <_vfiprintf_r+0x50>
 800aae8:	ab03      	add	r3, sp, #12
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	462a      	mov	r2, r5
 800aaee:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <_vfiprintf_r+0x258>)
 800aaf0:	a904      	add	r1, sp, #16
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7fc f81a 	bl	8006b2c <_printf_i>
 800aaf8:	e7e4      	b.n	800aac4 <_vfiprintf_r+0x208>
 800aafa:	bf00      	nop
 800aafc:	0800c0d4 	.word	0x0800c0d4
 800ab00:	0800c0f4 	.word	0x0800c0f4
 800ab04:	0800c0b4 	.word	0x0800c0b4
 800ab08:	0800c2ec 	.word	0x0800c2ec
 800ab0c:	0800c2f6 	.word	0x0800c2f6
 800ab10:	080065e5 	.word	0x080065e5
 800ab14:	0800a897 	.word	0x0800a897
 800ab18:	0800c2f2 	.word	0x0800c2f2
 800ab1c:	00000000 	.word	0x00000000

0800ab20 <nan>:
 800ab20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab28 <nan+0x8>
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	00000000 	.word	0x00000000
 800ab2c:	7ff80000 	.word	0x7ff80000

0800ab30 <_sbrk_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d06      	ldr	r5, [pc, #24]	; (800ab4c <_sbrk_r+0x1c>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f7 fd12 	bl	8002564 <_sbrk>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_sbrk_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_sbrk_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	2000037c 	.word	0x2000037c

0800ab50 <__sread>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab58:	f000 f93a 	bl	800add0 <_read_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	bfab      	itete	ge
 800ab60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab62:	89a3      	ldrhlt	r3, [r4, #12]
 800ab64:	181b      	addge	r3, r3, r0
 800ab66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab6a:	bfac      	ite	ge
 800ab6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab6e:	81a3      	strhlt	r3, [r4, #12]
 800ab70:	bd10      	pop	{r4, pc}

0800ab72 <__swrite>:
 800ab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	461f      	mov	r7, r3
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	05db      	lsls	r3, r3, #23
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	4616      	mov	r6, r2
 800ab82:	d505      	bpl.n	800ab90 <__swrite+0x1e>
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	2302      	movs	r3, #2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f000 f8b8 	bl	800ad00 <_lseek_r>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	463b      	mov	r3, r7
 800aba0:	4628      	mov	r0, r5
 800aba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	f000 b837 	b.w	800ac18 <_write_r>

0800abaa <__sseek>:
 800abaa:	b510      	push	{r4, lr}
 800abac:	460c      	mov	r4, r1
 800abae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb2:	f000 f8a5 	bl	800ad00 <_lseek_r>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	bf15      	itete	ne
 800abbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800abbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abc6:	81a3      	strheq	r3, [r4, #12]
 800abc8:	bf18      	it	ne
 800abca:	81a3      	strhne	r3, [r4, #12]
 800abcc:	bd10      	pop	{r4, pc}

0800abce <__sclose>:
 800abce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd2:	f000 b851 	b.w	800ac78 <_close_r>

0800abd6 <strncmp>:
 800abd6:	b510      	push	{r4, lr}
 800abd8:	b17a      	cbz	r2, 800abfa <strncmp+0x24>
 800abda:	4603      	mov	r3, r0
 800abdc:	3901      	subs	r1, #1
 800abde:	1884      	adds	r4, r0, r2
 800abe0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abe8:	4290      	cmp	r0, r2
 800abea:	d101      	bne.n	800abf0 <strncmp+0x1a>
 800abec:	42a3      	cmp	r3, r4
 800abee:	d101      	bne.n	800abf4 <strncmp+0x1e>
 800abf0:	1a80      	subs	r0, r0, r2
 800abf2:	bd10      	pop	{r4, pc}
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1f3      	bne.n	800abe0 <strncmp+0xa>
 800abf8:	e7fa      	b.n	800abf0 <strncmp+0x1a>
 800abfa:	4610      	mov	r0, r2
 800abfc:	e7f9      	b.n	800abf2 <strncmp+0x1c>

0800abfe <__ascii_wctomb>:
 800abfe:	b149      	cbz	r1, 800ac14 <__ascii_wctomb+0x16>
 800ac00:	2aff      	cmp	r2, #255	; 0xff
 800ac02:	bf85      	ittet	hi
 800ac04:	238a      	movhi	r3, #138	; 0x8a
 800ac06:	6003      	strhi	r3, [r0, #0]
 800ac08:	700a      	strbls	r2, [r1, #0]
 800ac0a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ac0e:	bf98      	it	ls
 800ac10:	2001      	movls	r0, #1
 800ac12:	4770      	bx	lr
 800ac14:	4608      	mov	r0, r1
 800ac16:	4770      	bx	lr

0800ac18 <_write_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d07      	ldr	r5, [pc, #28]	; (800ac38 <_write_r+0x20>)
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4611      	mov	r1, r2
 800ac22:	2200      	movs	r2, #0
 800ac24:	602a      	str	r2, [r5, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f7f7 fc4b 	bl	80024c2 <_write>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_write_r+0x1e>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_write_r+0x1e>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	2000037c 	.word	0x2000037c

0800ac3c <__assert_func>:
 800ac3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac3e:	4614      	mov	r4, r2
 800ac40:	461a      	mov	r2, r3
 800ac42:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <__assert_func+0x2c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4605      	mov	r5, r0
 800ac48:	68d8      	ldr	r0, [r3, #12]
 800ac4a:	b14c      	cbz	r4, 800ac60 <__assert_func+0x24>
 800ac4c:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <__assert_func+0x30>)
 800ac4e:	9100      	str	r1, [sp, #0]
 800ac50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac54:	4906      	ldr	r1, [pc, #24]	; (800ac70 <__assert_func+0x34>)
 800ac56:	462b      	mov	r3, r5
 800ac58:	f000 f81e 	bl	800ac98 <fiprintf>
 800ac5c:	f000 f8ca 	bl	800adf4 <abort>
 800ac60:	4b04      	ldr	r3, [pc, #16]	; (800ac74 <__assert_func+0x38>)
 800ac62:	461c      	mov	r4, r3
 800ac64:	e7f3      	b.n	800ac4e <__assert_func+0x12>
 800ac66:	bf00      	nop
 800ac68:	2000000c 	.word	0x2000000c
 800ac6c:	0800c2fd 	.word	0x0800c2fd
 800ac70:	0800c30a 	.word	0x0800c30a
 800ac74:	0800c338 	.word	0x0800c338

0800ac78 <_close_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4d06      	ldr	r5, [pc, #24]	; (800ac94 <_close_r+0x1c>)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	602b      	str	r3, [r5, #0]
 800ac84:	f7f7 fc39 	bl	80024fa <_close>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d102      	bne.n	800ac92 <_close_r+0x1a>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	b103      	cbz	r3, 800ac92 <_close_r+0x1a>
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	2000037c 	.word	0x2000037c

0800ac98 <fiprintf>:
 800ac98:	b40e      	push	{r1, r2, r3}
 800ac9a:	b503      	push	{r0, r1, lr}
 800ac9c:	4601      	mov	r1, r0
 800ac9e:	ab03      	add	r3, sp, #12
 800aca0:	4805      	ldr	r0, [pc, #20]	; (800acb8 <fiprintf+0x20>)
 800aca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca6:	6800      	ldr	r0, [r0, #0]
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	f7ff fe07 	bl	800a8bc <_vfiprintf_r>
 800acae:	b002      	add	sp, #8
 800acb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acb4:	b003      	add	sp, #12
 800acb6:	4770      	bx	lr
 800acb8:	2000000c 	.word	0x2000000c

0800acbc <_fstat_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d07      	ldr	r5, [pc, #28]	; (800acdc <_fstat_r+0x20>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	f7f7 fc22 	bl	8002512 <_fstat>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	d102      	bne.n	800acd8 <_fstat_r+0x1c>
 800acd2:	682b      	ldr	r3, [r5, #0]
 800acd4:	b103      	cbz	r3, 800acd8 <_fstat_r+0x1c>
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	bd38      	pop	{r3, r4, r5, pc}
 800acda:	bf00      	nop
 800acdc:	2000037c 	.word	0x2000037c

0800ace0 <_isatty_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d06      	ldr	r5, [pc, #24]	; (800acfc <_isatty_r+0x1c>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	f7f7 fc21 	bl	8002532 <_isatty>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_isatty_r+0x1a>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_isatty_r+0x1a>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	2000037c 	.word	0x2000037c

0800ad00 <_lseek_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d07      	ldr	r5, [pc, #28]	; (800ad20 <_lseek_r+0x20>)
 800ad04:	4604      	mov	r4, r0
 800ad06:	4608      	mov	r0, r1
 800ad08:	4611      	mov	r1, r2
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	602a      	str	r2, [r5, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f7f7 fc1a 	bl	8002548 <_lseek>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_lseek_r+0x1e>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_lseek_r+0x1e>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	2000037c 	.word	0x2000037c

0800ad24 <memmove>:
 800ad24:	4288      	cmp	r0, r1
 800ad26:	b510      	push	{r4, lr}
 800ad28:	eb01 0402 	add.w	r4, r1, r2
 800ad2c:	d902      	bls.n	800ad34 <memmove+0x10>
 800ad2e:	4284      	cmp	r4, r0
 800ad30:	4623      	mov	r3, r4
 800ad32:	d807      	bhi.n	800ad44 <memmove+0x20>
 800ad34:	1e43      	subs	r3, r0, #1
 800ad36:	42a1      	cmp	r1, r4
 800ad38:	d008      	beq.n	800ad4c <memmove+0x28>
 800ad3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad42:	e7f8      	b.n	800ad36 <memmove+0x12>
 800ad44:	4402      	add	r2, r0
 800ad46:	4601      	mov	r1, r0
 800ad48:	428a      	cmp	r2, r1
 800ad4a:	d100      	bne.n	800ad4e <memmove+0x2a>
 800ad4c:	bd10      	pop	{r4, pc}
 800ad4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad56:	e7f7      	b.n	800ad48 <memmove+0x24>

0800ad58 <__malloc_lock>:
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__malloc_lock+0x8>)
 800ad5a:	f7fe bde2 	b.w	8009922 <__retarget_lock_acquire_recursive>
 800ad5e:	bf00      	nop
 800ad60:	20000370 	.word	0x20000370

0800ad64 <__malloc_unlock>:
 800ad64:	4801      	ldr	r0, [pc, #4]	; (800ad6c <__malloc_unlock+0x8>)
 800ad66:	f7fe bddd 	b.w	8009924 <__retarget_lock_release_recursive>
 800ad6a:	bf00      	nop
 800ad6c:	20000370 	.word	0x20000370

0800ad70 <_realloc_r>:
 800ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	4680      	mov	r8, r0
 800ad76:	4614      	mov	r4, r2
 800ad78:	460e      	mov	r6, r1
 800ad7a:	b921      	cbnz	r1, 800ad86 <_realloc_r+0x16>
 800ad7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad80:	4611      	mov	r1, r2
 800ad82:	f7ff bba1 	b.w	800a4c8 <_malloc_r>
 800ad86:	b92a      	cbnz	r2, 800ad94 <_realloc_r+0x24>
 800ad88:	f7ff fb32 	bl	800a3f0 <_free_r>
 800ad8c:	4625      	mov	r5, r4
 800ad8e:	4628      	mov	r0, r5
 800ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad94:	f000 f835 	bl	800ae02 <_malloc_usable_size_r>
 800ad98:	4284      	cmp	r4, r0
 800ad9a:	4607      	mov	r7, r0
 800ad9c:	d802      	bhi.n	800ada4 <_realloc_r+0x34>
 800ad9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ada2:	d812      	bhi.n	800adca <_realloc_r+0x5a>
 800ada4:	4621      	mov	r1, r4
 800ada6:	4640      	mov	r0, r8
 800ada8:	f7ff fb8e 	bl	800a4c8 <_malloc_r>
 800adac:	4605      	mov	r5, r0
 800adae:	2800      	cmp	r0, #0
 800adb0:	d0ed      	beq.n	800ad8e <_realloc_r+0x1e>
 800adb2:	42bc      	cmp	r4, r7
 800adb4:	4622      	mov	r2, r4
 800adb6:	4631      	mov	r1, r6
 800adb8:	bf28      	it	cs
 800adba:	463a      	movcs	r2, r7
 800adbc:	f7fe fe32 	bl	8009a24 <memcpy>
 800adc0:	4631      	mov	r1, r6
 800adc2:	4640      	mov	r0, r8
 800adc4:	f7ff fb14 	bl	800a3f0 <_free_r>
 800adc8:	e7e1      	b.n	800ad8e <_realloc_r+0x1e>
 800adca:	4635      	mov	r5, r6
 800adcc:	e7df      	b.n	800ad8e <_realloc_r+0x1e>
	...

0800add0 <_read_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d07      	ldr	r5, [pc, #28]	; (800adf0 <_read_r+0x20>)
 800add4:	4604      	mov	r4, r0
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	2200      	movs	r2, #0
 800addc:	602a      	str	r2, [r5, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f7f7 fb52 	bl	8002488 <_read>
 800ade4:	1c43      	adds	r3, r0, #1
 800ade6:	d102      	bne.n	800adee <_read_r+0x1e>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	b103      	cbz	r3, 800adee <_read_r+0x1e>
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	2000037c 	.word	0x2000037c

0800adf4 <abort>:
 800adf4:	b508      	push	{r3, lr}
 800adf6:	2006      	movs	r0, #6
 800adf8:	f000 f834 	bl	800ae64 <raise>
 800adfc:	2001      	movs	r0, #1
 800adfe:	f7f7 fb39 	bl	8002474 <_exit>

0800ae02 <_malloc_usable_size_r>:
 800ae02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae06:	1f18      	subs	r0, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfbc      	itt	lt
 800ae0c:	580b      	ldrlt	r3, [r1, r0]
 800ae0e:	18c0      	addlt	r0, r0, r3
 800ae10:	4770      	bx	lr

0800ae12 <_raise_r>:
 800ae12:	291f      	cmp	r1, #31
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4604      	mov	r4, r0
 800ae18:	460d      	mov	r5, r1
 800ae1a:	d904      	bls.n	800ae26 <_raise_r+0x14>
 800ae1c:	2316      	movs	r3, #22
 800ae1e:	6003      	str	r3, [r0, #0]
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae24:	bd38      	pop	{r3, r4, r5, pc}
 800ae26:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae28:	b112      	cbz	r2, 800ae30 <_raise_r+0x1e>
 800ae2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae2e:	b94b      	cbnz	r3, 800ae44 <_raise_r+0x32>
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 f831 	bl	800ae98 <_getpid_r>
 800ae36:	462a      	mov	r2, r5
 800ae38:	4601      	mov	r1, r0
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae40:	f000 b818 	b.w	800ae74 <_kill_r>
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d00a      	beq.n	800ae5e <_raise_r+0x4c>
 800ae48:	1c59      	adds	r1, r3, #1
 800ae4a:	d103      	bne.n	800ae54 <_raise_r+0x42>
 800ae4c:	2316      	movs	r3, #22
 800ae4e:	6003      	str	r3, [r0, #0]
 800ae50:	2001      	movs	r0, #1
 800ae52:	e7e7      	b.n	800ae24 <_raise_r+0x12>
 800ae54:	2400      	movs	r4, #0
 800ae56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	4798      	blx	r3
 800ae5e:	2000      	movs	r0, #0
 800ae60:	e7e0      	b.n	800ae24 <_raise_r+0x12>
	...

0800ae64 <raise>:
 800ae64:	4b02      	ldr	r3, [pc, #8]	; (800ae70 <raise+0xc>)
 800ae66:	4601      	mov	r1, r0
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	f7ff bfd2 	b.w	800ae12 <_raise_r>
 800ae6e:	bf00      	nop
 800ae70:	2000000c 	.word	0x2000000c

0800ae74 <_kill_r>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	4d07      	ldr	r5, [pc, #28]	; (800ae94 <_kill_r+0x20>)
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	4611      	mov	r1, r2
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	f7f7 fae7 	bl	8002454 <_kill>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	d102      	bne.n	800ae90 <_kill_r+0x1c>
 800ae8a:	682b      	ldr	r3, [r5, #0]
 800ae8c:	b103      	cbz	r3, 800ae90 <_kill_r+0x1c>
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
 800ae92:	bf00      	nop
 800ae94:	2000037c 	.word	0x2000037c

0800ae98 <_getpid_r>:
 800ae98:	f7f7 bad4 	b.w	8002444 <_getpid>

0800ae9c <pow>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	ed2d 8b02 	vpush	{d8}
 800aea2:	eeb0 8a40 	vmov.f32	s16, s0
 800aea6:	eef0 8a60 	vmov.f32	s17, s1
 800aeaa:	ec55 4b11 	vmov	r4, r5, d1
 800aeae:	f000 f867 	bl	800af80 <__ieee754_pow>
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	ec57 6b10 	vmov	r6, r7, d0
 800aebe:	f7f5 fe65 	bl	8000b8c <__aeabi_dcmpun>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d13b      	bne.n	800af3e <pow+0xa2>
 800aec6:	ec51 0b18 	vmov	r0, r1, d8
 800aeca:	2200      	movs	r2, #0
 800aecc:	2300      	movs	r3, #0
 800aece:	f7f5 fe2b 	bl	8000b28 <__aeabi_dcmpeq>
 800aed2:	b1b8      	cbz	r0, 800af04 <pow+0x68>
 800aed4:	2200      	movs	r2, #0
 800aed6:	2300      	movs	r3, #0
 800aed8:	4620      	mov	r0, r4
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7f5 fe24 	bl	8000b28 <__aeabi_dcmpeq>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d146      	bne.n	800af72 <pow+0xd6>
 800aee4:	ec45 4b10 	vmov	d0, r4, r5
 800aee8:	f000 fe63 	bl	800bbb2 <finite>
 800aeec:	b338      	cbz	r0, 800af3e <pow+0xa2>
 800aeee:	2200      	movs	r2, #0
 800aef0:	2300      	movs	r3, #0
 800aef2:	4620      	mov	r0, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	f7f5 fe21 	bl	8000b3c <__aeabi_dcmplt>
 800aefa:	b300      	cbz	r0, 800af3e <pow+0xa2>
 800aefc:	f7fb fa90 	bl	8006420 <__errno>
 800af00:	2322      	movs	r3, #34	; 0x22
 800af02:	e01b      	b.n	800af3c <pow+0xa0>
 800af04:	ec47 6b10 	vmov	d0, r6, r7
 800af08:	f000 fe53 	bl	800bbb2 <finite>
 800af0c:	b9e0      	cbnz	r0, 800af48 <pow+0xac>
 800af0e:	eeb0 0a48 	vmov.f32	s0, s16
 800af12:	eef0 0a68 	vmov.f32	s1, s17
 800af16:	f000 fe4c 	bl	800bbb2 <finite>
 800af1a:	b1a8      	cbz	r0, 800af48 <pow+0xac>
 800af1c:	ec45 4b10 	vmov	d0, r4, r5
 800af20:	f000 fe47 	bl	800bbb2 <finite>
 800af24:	b180      	cbz	r0, 800af48 <pow+0xac>
 800af26:	4632      	mov	r2, r6
 800af28:	463b      	mov	r3, r7
 800af2a:	4630      	mov	r0, r6
 800af2c:	4639      	mov	r1, r7
 800af2e:	f7f5 fe2d 	bl	8000b8c <__aeabi_dcmpun>
 800af32:	2800      	cmp	r0, #0
 800af34:	d0e2      	beq.n	800aefc <pow+0x60>
 800af36:	f7fb fa73 	bl	8006420 <__errno>
 800af3a:	2321      	movs	r3, #33	; 0x21
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	ecbd 8b02 	vpop	{d8}
 800af42:	ec47 6b10 	vmov	d0, r6, r7
 800af46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af48:	2200      	movs	r2, #0
 800af4a:	2300      	movs	r3, #0
 800af4c:	4630      	mov	r0, r6
 800af4e:	4639      	mov	r1, r7
 800af50:	f7f5 fdea 	bl	8000b28 <__aeabi_dcmpeq>
 800af54:	2800      	cmp	r0, #0
 800af56:	d0f2      	beq.n	800af3e <pow+0xa2>
 800af58:	eeb0 0a48 	vmov.f32	s0, s16
 800af5c:	eef0 0a68 	vmov.f32	s1, s17
 800af60:	f000 fe27 	bl	800bbb2 <finite>
 800af64:	2800      	cmp	r0, #0
 800af66:	d0ea      	beq.n	800af3e <pow+0xa2>
 800af68:	ec45 4b10 	vmov	d0, r4, r5
 800af6c:	f000 fe21 	bl	800bbb2 <finite>
 800af70:	e7c3      	b.n	800aefa <pow+0x5e>
 800af72:	4f01      	ldr	r7, [pc, #4]	; (800af78 <pow+0xdc>)
 800af74:	2600      	movs	r6, #0
 800af76:	e7e2      	b.n	800af3e <pow+0xa2>
 800af78:	3ff00000 	.word	0x3ff00000
 800af7c:	00000000 	.word	0x00000000

0800af80 <__ieee754_pow>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	ed2d 8b06 	vpush	{d8-d10}
 800af88:	b089      	sub	sp, #36	; 0x24
 800af8a:	ed8d 1b00 	vstr	d1, [sp]
 800af8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800af92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800af96:	ea58 0102 	orrs.w	r1, r8, r2
 800af9a:	ec57 6b10 	vmov	r6, r7, d0
 800af9e:	d115      	bne.n	800afcc <__ieee754_pow+0x4c>
 800afa0:	19b3      	adds	r3, r6, r6
 800afa2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800afa6:	4152      	adcs	r2, r2
 800afa8:	4299      	cmp	r1, r3
 800afaa:	4b89      	ldr	r3, [pc, #548]	; (800b1d0 <__ieee754_pow+0x250>)
 800afac:	4193      	sbcs	r3, r2
 800afae:	f080 84d2 	bcs.w	800b956 <__ieee754_pow+0x9d6>
 800afb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afb6:	4630      	mov	r0, r6
 800afb8:	4639      	mov	r1, r7
 800afba:	f7f5 f997 	bl	80002ec <__adddf3>
 800afbe:	ec41 0b10 	vmov	d0, r0, r1
 800afc2:	b009      	add	sp, #36	; 0x24
 800afc4:	ecbd 8b06 	vpop	{d8-d10}
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	4b81      	ldr	r3, [pc, #516]	; (800b1d4 <__ieee754_pow+0x254>)
 800afce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800afd2:	429c      	cmp	r4, r3
 800afd4:	ee10 aa10 	vmov	sl, s0
 800afd8:	463d      	mov	r5, r7
 800afda:	dc06      	bgt.n	800afea <__ieee754_pow+0x6a>
 800afdc:	d101      	bne.n	800afe2 <__ieee754_pow+0x62>
 800afde:	2e00      	cmp	r6, #0
 800afe0:	d1e7      	bne.n	800afb2 <__ieee754_pow+0x32>
 800afe2:	4598      	cmp	r8, r3
 800afe4:	dc01      	bgt.n	800afea <__ieee754_pow+0x6a>
 800afe6:	d10f      	bne.n	800b008 <__ieee754_pow+0x88>
 800afe8:	b172      	cbz	r2, 800b008 <__ieee754_pow+0x88>
 800afea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800afee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aff2:	ea55 050a 	orrs.w	r5, r5, sl
 800aff6:	d1dc      	bne.n	800afb2 <__ieee754_pow+0x32>
 800aff8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800affc:	18db      	adds	r3, r3, r3
 800affe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b002:	4152      	adcs	r2, r2
 800b004:	429d      	cmp	r5, r3
 800b006:	e7d0      	b.n	800afaa <__ieee754_pow+0x2a>
 800b008:	2d00      	cmp	r5, #0
 800b00a:	da3b      	bge.n	800b084 <__ieee754_pow+0x104>
 800b00c:	4b72      	ldr	r3, [pc, #456]	; (800b1d8 <__ieee754_pow+0x258>)
 800b00e:	4598      	cmp	r8, r3
 800b010:	dc51      	bgt.n	800b0b6 <__ieee754_pow+0x136>
 800b012:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b016:	4598      	cmp	r8, r3
 800b018:	f340 84ac 	ble.w	800b974 <__ieee754_pow+0x9f4>
 800b01c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b024:	2b14      	cmp	r3, #20
 800b026:	dd0f      	ble.n	800b048 <__ieee754_pow+0xc8>
 800b028:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b02c:	fa22 f103 	lsr.w	r1, r2, r3
 800b030:	fa01 f303 	lsl.w	r3, r1, r3
 800b034:	4293      	cmp	r3, r2
 800b036:	f040 849d 	bne.w	800b974 <__ieee754_pow+0x9f4>
 800b03a:	f001 0101 	and.w	r1, r1, #1
 800b03e:	f1c1 0302 	rsb	r3, r1, #2
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	b182      	cbz	r2, 800b068 <__ieee754_pow+0xe8>
 800b046:	e05f      	b.n	800b108 <__ieee754_pow+0x188>
 800b048:	2a00      	cmp	r2, #0
 800b04a:	d15b      	bne.n	800b104 <__ieee754_pow+0x184>
 800b04c:	f1c3 0314 	rsb	r3, r3, #20
 800b050:	fa48 f103 	asr.w	r1, r8, r3
 800b054:	fa01 f303 	lsl.w	r3, r1, r3
 800b058:	4543      	cmp	r3, r8
 800b05a:	f040 8488 	bne.w	800b96e <__ieee754_pow+0x9ee>
 800b05e:	f001 0101 	and.w	r1, r1, #1
 800b062:	f1c1 0302 	rsb	r3, r1, #2
 800b066:	9304      	str	r3, [sp, #16]
 800b068:	4b5c      	ldr	r3, [pc, #368]	; (800b1dc <__ieee754_pow+0x25c>)
 800b06a:	4598      	cmp	r8, r3
 800b06c:	d132      	bne.n	800b0d4 <__ieee754_pow+0x154>
 800b06e:	f1b9 0f00 	cmp.w	r9, #0
 800b072:	f280 8478 	bge.w	800b966 <__ieee754_pow+0x9e6>
 800b076:	4959      	ldr	r1, [pc, #356]	; (800b1dc <__ieee754_pow+0x25c>)
 800b078:	4632      	mov	r2, r6
 800b07a:	463b      	mov	r3, r7
 800b07c:	2000      	movs	r0, #0
 800b07e:	f7f5 fc15 	bl	80008ac <__aeabi_ddiv>
 800b082:	e79c      	b.n	800afbe <__ieee754_pow+0x3e>
 800b084:	2300      	movs	r3, #0
 800b086:	9304      	str	r3, [sp, #16]
 800b088:	2a00      	cmp	r2, #0
 800b08a:	d13d      	bne.n	800b108 <__ieee754_pow+0x188>
 800b08c:	4b51      	ldr	r3, [pc, #324]	; (800b1d4 <__ieee754_pow+0x254>)
 800b08e:	4598      	cmp	r8, r3
 800b090:	d1ea      	bne.n	800b068 <__ieee754_pow+0xe8>
 800b092:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b096:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b09a:	ea53 030a 	orrs.w	r3, r3, sl
 800b09e:	f000 845a 	beq.w	800b956 <__ieee754_pow+0x9d6>
 800b0a2:	4b4f      	ldr	r3, [pc, #316]	; (800b1e0 <__ieee754_pow+0x260>)
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	dd08      	ble.n	800b0ba <__ieee754_pow+0x13a>
 800b0a8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ac:	f2c0 8457 	blt.w	800b95e <__ieee754_pow+0x9de>
 800b0b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0b4:	e783      	b.n	800afbe <__ieee754_pow+0x3e>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	e7e5      	b.n	800b086 <__ieee754_pow+0x106>
 800b0ba:	f1b9 0f00 	cmp.w	r9, #0
 800b0be:	f04f 0000 	mov.w	r0, #0
 800b0c2:	f04f 0100 	mov.w	r1, #0
 800b0c6:	f6bf af7a 	bge.w	800afbe <__ieee754_pow+0x3e>
 800b0ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b0ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0d2:	e774      	b.n	800afbe <__ieee754_pow+0x3e>
 800b0d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b0d8:	d106      	bne.n	800b0e8 <__ieee754_pow+0x168>
 800b0da:	4632      	mov	r2, r6
 800b0dc:	463b      	mov	r3, r7
 800b0de:	4630      	mov	r0, r6
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	f7f5 fab9 	bl	8000658 <__aeabi_dmul>
 800b0e6:	e76a      	b.n	800afbe <__ieee754_pow+0x3e>
 800b0e8:	4b3e      	ldr	r3, [pc, #248]	; (800b1e4 <__ieee754_pow+0x264>)
 800b0ea:	4599      	cmp	r9, r3
 800b0ec:	d10c      	bne.n	800b108 <__ieee754_pow+0x188>
 800b0ee:	2d00      	cmp	r5, #0
 800b0f0:	db0a      	blt.n	800b108 <__ieee754_pow+0x188>
 800b0f2:	ec47 6b10 	vmov	d0, r6, r7
 800b0f6:	b009      	add	sp, #36	; 0x24
 800b0f8:	ecbd 8b06 	vpop	{d8-d10}
 800b0fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	f000 bc6c 	b.w	800b9dc <__ieee754_sqrt>
 800b104:	2300      	movs	r3, #0
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	ec47 6b10 	vmov	d0, r6, r7
 800b10c:	f000 fd48 	bl	800bba0 <fabs>
 800b110:	ec51 0b10 	vmov	r0, r1, d0
 800b114:	f1ba 0f00 	cmp.w	sl, #0
 800b118:	d129      	bne.n	800b16e <__ieee754_pow+0x1ee>
 800b11a:	b124      	cbz	r4, 800b126 <__ieee754_pow+0x1a6>
 800b11c:	4b2f      	ldr	r3, [pc, #188]	; (800b1dc <__ieee754_pow+0x25c>)
 800b11e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b122:	429a      	cmp	r2, r3
 800b124:	d123      	bne.n	800b16e <__ieee754_pow+0x1ee>
 800b126:	f1b9 0f00 	cmp.w	r9, #0
 800b12a:	da05      	bge.n	800b138 <__ieee754_pow+0x1b8>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	2000      	movs	r0, #0
 800b132:	492a      	ldr	r1, [pc, #168]	; (800b1dc <__ieee754_pow+0x25c>)
 800b134:	f7f5 fbba 	bl	80008ac <__aeabi_ddiv>
 800b138:	2d00      	cmp	r5, #0
 800b13a:	f6bf af40 	bge.w	800afbe <__ieee754_pow+0x3e>
 800b13e:	9b04      	ldr	r3, [sp, #16]
 800b140:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b144:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b148:	4323      	orrs	r3, r4
 800b14a:	d108      	bne.n	800b15e <__ieee754_pow+0x1de>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4610      	mov	r0, r2
 800b152:	4619      	mov	r1, r3
 800b154:	f7f5 f8c8 	bl	80002e8 <__aeabi_dsub>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	e78f      	b.n	800b07e <__ieee754_pow+0xfe>
 800b15e:	9b04      	ldr	r3, [sp, #16]
 800b160:	2b01      	cmp	r3, #1
 800b162:	f47f af2c 	bne.w	800afbe <__ieee754_pow+0x3e>
 800b166:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b16a:	4619      	mov	r1, r3
 800b16c:	e727      	b.n	800afbe <__ieee754_pow+0x3e>
 800b16e:	0feb      	lsrs	r3, r5, #31
 800b170:	3b01      	subs	r3, #1
 800b172:	9306      	str	r3, [sp, #24]
 800b174:	9a06      	ldr	r2, [sp, #24]
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	d102      	bne.n	800b182 <__ieee754_pow+0x202>
 800b17c:	4632      	mov	r2, r6
 800b17e:	463b      	mov	r3, r7
 800b180:	e7e6      	b.n	800b150 <__ieee754_pow+0x1d0>
 800b182:	4b19      	ldr	r3, [pc, #100]	; (800b1e8 <__ieee754_pow+0x268>)
 800b184:	4598      	cmp	r8, r3
 800b186:	f340 80fb 	ble.w	800b380 <__ieee754_pow+0x400>
 800b18a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b18e:	4598      	cmp	r8, r3
 800b190:	4b13      	ldr	r3, [pc, #76]	; (800b1e0 <__ieee754_pow+0x260>)
 800b192:	dd0c      	ble.n	800b1ae <__ieee754_pow+0x22e>
 800b194:	429c      	cmp	r4, r3
 800b196:	dc0f      	bgt.n	800b1b8 <__ieee754_pow+0x238>
 800b198:	f1b9 0f00 	cmp.w	r9, #0
 800b19c:	da0f      	bge.n	800b1be <__ieee754_pow+0x23e>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	b009      	add	sp, #36	; 0x24
 800b1a2:	ecbd 8b06 	vpop	{d8-d10}
 800b1a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1aa:	f000 bcf0 	b.w	800bb8e <__math_oflow>
 800b1ae:	429c      	cmp	r4, r3
 800b1b0:	dbf2      	blt.n	800b198 <__ieee754_pow+0x218>
 800b1b2:	4b0a      	ldr	r3, [pc, #40]	; (800b1dc <__ieee754_pow+0x25c>)
 800b1b4:	429c      	cmp	r4, r3
 800b1b6:	dd19      	ble.n	800b1ec <__ieee754_pow+0x26c>
 800b1b8:	f1b9 0f00 	cmp.w	r9, #0
 800b1bc:	dcef      	bgt.n	800b19e <__ieee754_pow+0x21e>
 800b1be:	2000      	movs	r0, #0
 800b1c0:	b009      	add	sp, #36	; 0x24
 800b1c2:	ecbd 8b06 	vpop	{d8-d10}
 800b1c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	f000 bcd7 	b.w	800bb7c <__math_uflow>
 800b1ce:	bf00      	nop
 800b1d0:	fff00000 	.word	0xfff00000
 800b1d4:	7ff00000 	.word	0x7ff00000
 800b1d8:	433fffff 	.word	0x433fffff
 800b1dc:	3ff00000 	.word	0x3ff00000
 800b1e0:	3fefffff 	.word	0x3fefffff
 800b1e4:	3fe00000 	.word	0x3fe00000
 800b1e8:	41e00000 	.word	0x41e00000
 800b1ec:	4b60      	ldr	r3, [pc, #384]	; (800b370 <__ieee754_pow+0x3f0>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f7f5 f87a 	bl	80002e8 <__aeabi_dsub>
 800b1f4:	a354      	add	r3, pc, #336	; (adr r3, 800b348 <__ieee754_pow+0x3c8>)
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	f7f5 fa2b 	bl	8000658 <__aeabi_dmul>
 800b202:	a353      	add	r3, pc, #332	; (adr r3, 800b350 <__ieee754_pow+0x3d0>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	4606      	mov	r6, r0
 800b20a:	460f      	mov	r7, r1
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 fa22 	bl	8000658 <__aeabi_dmul>
 800b214:	4b57      	ldr	r3, [pc, #348]	; (800b374 <__ieee754_pow+0x3f4>)
 800b216:	4682      	mov	sl, r0
 800b218:	468b      	mov	fp, r1
 800b21a:	2200      	movs	r2, #0
 800b21c:	4620      	mov	r0, r4
 800b21e:	4629      	mov	r1, r5
 800b220:	f7f5 fa1a 	bl	8000658 <__aeabi_dmul>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	a14b      	add	r1, pc, #300	; (adr r1, 800b358 <__ieee754_pow+0x3d8>)
 800b22a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b22e:	f7f5 f85b 	bl	80002e8 <__aeabi_dsub>
 800b232:	4622      	mov	r2, r4
 800b234:	462b      	mov	r3, r5
 800b236:	f7f5 fa0f 	bl	8000658 <__aeabi_dmul>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	2000      	movs	r0, #0
 800b240:	494d      	ldr	r1, [pc, #308]	; (800b378 <__ieee754_pow+0x3f8>)
 800b242:	f7f5 f851 	bl	80002e8 <__aeabi_dsub>
 800b246:	4622      	mov	r2, r4
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	462b      	mov	r3, r5
 800b24e:	4620      	mov	r0, r4
 800b250:	4629      	mov	r1, r5
 800b252:	f7f5 fa01 	bl	8000658 <__aeabi_dmul>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	4640      	mov	r0, r8
 800b25c:	4649      	mov	r1, r9
 800b25e:	f7f5 f9fb 	bl	8000658 <__aeabi_dmul>
 800b262:	a33f      	add	r3, pc, #252	; (adr r3, 800b360 <__ieee754_pow+0x3e0>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f7f5 f9f6 	bl	8000658 <__aeabi_dmul>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4650      	mov	r0, sl
 800b272:	4659      	mov	r1, fp
 800b274:	f7f5 f838 	bl	80002e8 <__aeabi_dsub>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4680      	mov	r8, r0
 800b27e:	4689      	mov	r9, r1
 800b280:	4630      	mov	r0, r6
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 f832 	bl	80002ec <__adddf3>
 800b288:	2000      	movs	r0, #0
 800b28a:	4632      	mov	r2, r6
 800b28c:	463b      	mov	r3, r7
 800b28e:	4604      	mov	r4, r0
 800b290:	460d      	mov	r5, r1
 800b292:	f7f5 f829 	bl	80002e8 <__aeabi_dsub>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4640      	mov	r0, r8
 800b29c:	4649      	mov	r1, r9
 800b29e:	f7f5 f823 	bl	80002e8 <__aeabi_dsub>
 800b2a2:	9b04      	ldr	r3, [sp, #16]
 800b2a4:	9a06      	ldr	r2, [sp, #24]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	4682      	mov	sl, r0
 800b2ac:	468b      	mov	fp, r1
 800b2ae:	f040 81e7 	bne.w	800b680 <__ieee754_pow+0x700>
 800b2b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b368 <__ieee754_pow+0x3e8>
 800b2b6:	eeb0 8a47 	vmov.f32	s16, s14
 800b2ba:	eef0 8a67 	vmov.f32	s17, s15
 800b2be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2cc:	f7f5 f80c 	bl	80002e8 <__aeabi_dsub>
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	f7f5 f9c0 	bl	8000658 <__aeabi_dmul>
 800b2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2dc:	4680      	mov	r8, r0
 800b2de:	4689      	mov	r9, r1
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	4659      	mov	r1, fp
 800b2e4:	f7f5 f9b8 	bl	8000658 <__aeabi_dmul>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	f7f4 fffc 	bl	80002ec <__adddf3>
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	463b      	mov	r3, r7
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	4689      	mov	r9, r1
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f5 f9aa 	bl	8000658 <__aeabi_dmul>
 800b304:	460b      	mov	r3, r1
 800b306:	4604      	mov	r4, r0
 800b308:	460d      	mov	r5, r1
 800b30a:	4602      	mov	r2, r0
 800b30c:	4649      	mov	r1, r9
 800b30e:	4640      	mov	r0, r8
 800b310:	f7f4 ffec 	bl	80002ec <__adddf3>
 800b314:	4b19      	ldr	r3, [pc, #100]	; (800b37c <__ieee754_pow+0x3fc>)
 800b316:	4299      	cmp	r1, r3
 800b318:	ec45 4b19 	vmov	d9, r4, r5
 800b31c:	4606      	mov	r6, r0
 800b31e:	460f      	mov	r7, r1
 800b320:	468b      	mov	fp, r1
 800b322:	f340 82f1 	ble.w	800b908 <__ieee754_pow+0x988>
 800b326:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b32a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b32e:	4303      	orrs	r3, r0
 800b330:	f000 81e4 	beq.w	800b6fc <__ieee754_pow+0x77c>
 800b334:	ec51 0b18 	vmov	r0, r1, d8
 800b338:	2200      	movs	r2, #0
 800b33a:	2300      	movs	r3, #0
 800b33c:	f7f5 fbfe 	bl	8000b3c <__aeabi_dcmplt>
 800b340:	3800      	subs	r0, #0
 800b342:	bf18      	it	ne
 800b344:	2001      	movne	r0, #1
 800b346:	e72b      	b.n	800b1a0 <__ieee754_pow+0x220>
 800b348:	60000000 	.word	0x60000000
 800b34c:	3ff71547 	.word	0x3ff71547
 800b350:	f85ddf44 	.word	0xf85ddf44
 800b354:	3e54ae0b 	.word	0x3e54ae0b
 800b358:	55555555 	.word	0x55555555
 800b35c:	3fd55555 	.word	0x3fd55555
 800b360:	652b82fe 	.word	0x652b82fe
 800b364:	3ff71547 	.word	0x3ff71547
 800b368:	00000000 	.word	0x00000000
 800b36c:	bff00000 	.word	0xbff00000
 800b370:	3ff00000 	.word	0x3ff00000
 800b374:	3fd00000 	.word	0x3fd00000
 800b378:	3fe00000 	.word	0x3fe00000
 800b37c:	408fffff 	.word	0x408fffff
 800b380:	4bd5      	ldr	r3, [pc, #852]	; (800b6d8 <__ieee754_pow+0x758>)
 800b382:	402b      	ands	r3, r5
 800b384:	2200      	movs	r2, #0
 800b386:	b92b      	cbnz	r3, 800b394 <__ieee754_pow+0x414>
 800b388:	4bd4      	ldr	r3, [pc, #848]	; (800b6dc <__ieee754_pow+0x75c>)
 800b38a:	f7f5 f965 	bl	8000658 <__aeabi_dmul>
 800b38e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b392:	460c      	mov	r4, r1
 800b394:	1523      	asrs	r3, r4, #20
 800b396:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b39a:	4413      	add	r3, r2
 800b39c:	9305      	str	r3, [sp, #20]
 800b39e:	4bd0      	ldr	r3, [pc, #832]	; (800b6e0 <__ieee754_pow+0x760>)
 800b3a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b3a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b3ae:	dd08      	ble.n	800b3c2 <__ieee754_pow+0x442>
 800b3b0:	4bcc      	ldr	r3, [pc, #816]	; (800b6e4 <__ieee754_pow+0x764>)
 800b3b2:	429c      	cmp	r4, r3
 800b3b4:	f340 8162 	ble.w	800b67c <__ieee754_pow+0x6fc>
 800b3b8:	9b05      	ldr	r3, [sp, #20]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	9305      	str	r3, [sp, #20]
 800b3be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b3c2:	2400      	movs	r4, #0
 800b3c4:	00e3      	lsls	r3, r4, #3
 800b3c6:	9307      	str	r3, [sp, #28]
 800b3c8:	4bc7      	ldr	r3, [pc, #796]	; (800b6e8 <__ieee754_pow+0x768>)
 800b3ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3ce:	ed93 7b00 	vldr	d7, [r3]
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	ec53 2b17 	vmov	r2, r3, d7
 800b3d8:	eeb0 9a47 	vmov.f32	s18, s14
 800b3dc:	eef0 9a67 	vmov.f32	s19, s15
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	f7f4 ff81 	bl	80002e8 <__aeabi_dsub>
 800b3e6:	4652      	mov	r2, sl
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	460f      	mov	r7, r1
 800b3ec:	462b      	mov	r3, r5
 800b3ee:	ec51 0b19 	vmov	r0, r1, d9
 800b3f2:	f7f4 ff7b 	bl	80002ec <__adddf3>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	49bb      	ldr	r1, [pc, #748]	; (800b6ec <__ieee754_pow+0x76c>)
 800b3fe:	f7f5 fa55 	bl	80008ac <__aeabi_ddiv>
 800b402:	ec41 0b1a 	vmov	d10, r0, r1
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4630      	mov	r0, r6
 800b40c:	4639      	mov	r1, r7
 800b40e:	f7f5 f923 	bl	8000658 <__aeabi_dmul>
 800b412:	2300      	movs	r3, #0
 800b414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b418:	9302      	str	r3, [sp, #8]
 800b41a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b41e:	46ab      	mov	fp, r5
 800b420:	106d      	asrs	r5, r5, #1
 800b422:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b426:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b42a:	ec41 0b18 	vmov	d8, r0, r1
 800b42e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b432:	2200      	movs	r2, #0
 800b434:	4640      	mov	r0, r8
 800b436:	4649      	mov	r1, r9
 800b438:	4614      	mov	r4, r2
 800b43a:	461d      	mov	r5, r3
 800b43c:	f7f5 f90c 	bl	8000658 <__aeabi_dmul>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4630      	mov	r0, r6
 800b446:	4639      	mov	r1, r7
 800b448:	f7f4 ff4e 	bl	80002e8 <__aeabi_dsub>
 800b44c:	ec53 2b19 	vmov	r2, r3, d9
 800b450:	4606      	mov	r6, r0
 800b452:	460f      	mov	r7, r1
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f7f4 ff46 	bl	80002e8 <__aeabi_dsub>
 800b45c:	4602      	mov	r2, r0
 800b45e:	460b      	mov	r3, r1
 800b460:	4650      	mov	r0, sl
 800b462:	4659      	mov	r1, fp
 800b464:	f7f4 ff40 	bl	80002e8 <__aeabi_dsub>
 800b468:	4642      	mov	r2, r8
 800b46a:	464b      	mov	r3, r9
 800b46c:	f7f5 f8f4 	bl	8000658 <__aeabi_dmul>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4630      	mov	r0, r6
 800b476:	4639      	mov	r1, r7
 800b478:	f7f4 ff36 	bl	80002e8 <__aeabi_dsub>
 800b47c:	ec53 2b1a 	vmov	r2, r3, d10
 800b480:	f7f5 f8ea 	bl	8000658 <__aeabi_dmul>
 800b484:	ec53 2b18 	vmov	r2, r3, d8
 800b488:	ec41 0b19 	vmov	d9, r0, r1
 800b48c:	ec51 0b18 	vmov	r0, r1, d8
 800b490:	f7f5 f8e2 	bl	8000658 <__aeabi_dmul>
 800b494:	a37c      	add	r3, pc, #496	; (adr r3, 800b688 <__ieee754_pow+0x708>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	4604      	mov	r4, r0
 800b49c:	460d      	mov	r5, r1
 800b49e:	f7f5 f8db 	bl	8000658 <__aeabi_dmul>
 800b4a2:	a37b      	add	r3, pc, #492	; (adr r3, 800b690 <__ieee754_pow+0x710>)
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f7f4 ff20 	bl	80002ec <__adddf3>
 800b4ac:	4622      	mov	r2, r4
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	f7f5 f8d2 	bl	8000658 <__aeabi_dmul>
 800b4b4:	a378      	add	r3, pc, #480	; (adr r3, 800b698 <__ieee754_pow+0x718>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f7f4 ff17 	bl	80002ec <__adddf3>
 800b4be:	4622      	mov	r2, r4
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	f7f5 f8c9 	bl	8000658 <__aeabi_dmul>
 800b4c6:	a376      	add	r3, pc, #472	; (adr r3, 800b6a0 <__ieee754_pow+0x720>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f4 ff0e 	bl	80002ec <__adddf3>
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	f7f5 f8c0 	bl	8000658 <__aeabi_dmul>
 800b4d8:	a373      	add	r3, pc, #460	; (adr r3, 800b6a8 <__ieee754_pow+0x728>)
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f7f4 ff05 	bl	80002ec <__adddf3>
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	f7f5 f8b7 	bl	8000658 <__aeabi_dmul>
 800b4ea:	a371      	add	r3, pc, #452	; (adr r3, 800b6b0 <__ieee754_pow+0x730>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f4 fefc 	bl	80002ec <__adddf3>
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f5 f8aa 	bl	8000658 <__aeabi_dmul>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 f8a4 	bl	8000658 <__aeabi_dmul>
 800b510:	4642      	mov	r2, r8
 800b512:	4604      	mov	r4, r0
 800b514:	460d      	mov	r5, r1
 800b516:	464b      	mov	r3, r9
 800b518:	ec51 0b18 	vmov	r0, r1, d8
 800b51c:	f7f4 fee6 	bl	80002ec <__adddf3>
 800b520:	ec53 2b19 	vmov	r2, r3, d9
 800b524:	f7f5 f898 	bl	8000658 <__aeabi_dmul>
 800b528:	4622      	mov	r2, r4
 800b52a:	462b      	mov	r3, r5
 800b52c:	f7f4 fede 	bl	80002ec <__adddf3>
 800b530:	4642      	mov	r2, r8
 800b532:	4682      	mov	sl, r0
 800b534:	468b      	mov	fp, r1
 800b536:	464b      	mov	r3, r9
 800b538:	4640      	mov	r0, r8
 800b53a:	4649      	mov	r1, r9
 800b53c:	f7f5 f88c 	bl	8000658 <__aeabi_dmul>
 800b540:	4b6b      	ldr	r3, [pc, #428]	; (800b6f0 <__ieee754_pow+0x770>)
 800b542:	2200      	movs	r2, #0
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	f7f4 fed0 	bl	80002ec <__adddf3>
 800b54c:	4652      	mov	r2, sl
 800b54e:	465b      	mov	r3, fp
 800b550:	f7f4 fecc 	bl	80002ec <__adddf3>
 800b554:	2000      	movs	r0, #0
 800b556:	4604      	mov	r4, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4640      	mov	r0, r8
 800b560:	4649      	mov	r1, r9
 800b562:	f7f5 f879 	bl	8000658 <__aeabi_dmul>
 800b566:	4b62      	ldr	r3, [pc, #392]	; (800b6f0 <__ieee754_pow+0x770>)
 800b568:	4680      	mov	r8, r0
 800b56a:	4689      	mov	r9, r1
 800b56c:	2200      	movs	r2, #0
 800b56e:	4620      	mov	r0, r4
 800b570:	4629      	mov	r1, r5
 800b572:	f7f4 feb9 	bl	80002e8 <__aeabi_dsub>
 800b576:	4632      	mov	r2, r6
 800b578:	463b      	mov	r3, r7
 800b57a:	f7f4 feb5 	bl	80002e8 <__aeabi_dsub>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4650      	mov	r0, sl
 800b584:	4659      	mov	r1, fp
 800b586:	f7f4 feaf 	bl	80002e8 <__aeabi_dsub>
 800b58a:	ec53 2b18 	vmov	r2, r3, d8
 800b58e:	f7f5 f863 	bl	8000658 <__aeabi_dmul>
 800b592:	4622      	mov	r2, r4
 800b594:	4606      	mov	r6, r0
 800b596:	460f      	mov	r7, r1
 800b598:	462b      	mov	r3, r5
 800b59a:	ec51 0b19 	vmov	r0, r1, d9
 800b59e:	f7f5 f85b 	bl	8000658 <__aeabi_dmul>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f4 fe9f 	bl	80002ec <__adddf3>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	f7f4 fe97 	bl	80002ec <__adddf3>
 800b5be:	a33e      	add	r3, pc, #248	; (adr r3, 800b6b8 <__ieee754_pow+0x738>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	f7f5 f845 	bl	8000658 <__aeabi_dmul>
 800b5ce:	4642      	mov	r2, r8
 800b5d0:	ec41 0b18 	vmov	d8, r0, r1
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f4 fe85 	bl	80002e8 <__aeabi_dsub>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	f7f4 fe7f 	bl	80002e8 <__aeabi_dsub>
 800b5ea:	a335      	add	r3, pc, #212	; (adr r3, 800b6c0 <__ieee754_pow+0x740>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f7f5 f832 	bl	8000658 <__aeabi_dmul>
 800b5f4:	a334      	add	r3, pc, #208	; (adr r3, 800b6c8 <__ieee754_pow+0x748>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f5 f829 	bl	8000658 <__aeabi_dmul>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	4630      	mov	r0, r6
 800b60c:	4639      	mov	r1, r7
 800b60e:	f7f4 fe6d 	bl	80002ec <__adddf3>
 800b612:	9a07      	ldr	r2, [sp, #28]
 800b614:	4b37      	ldr	r3, [pc, #220]	; (800b6f4 <__ieee754_pow+0x774>)
 800b616:	4413      	add	r3, r2
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f4 fe66 	bl	80002ec <__adddf3>
 800b620:	4682      	mov	sl, r0
 800b622:	9805      	ldr	r0, [sp, #20]
 800b624:	468b      	mov	fp, r1
 800b626:	f7f4 ffad 	bl	8000584 <__aeabi_i2d>
 800b62a:	9a07      	ldr	r2, [sp, #28]
 800b62c:	4b32      	ldr	r3, [pc, #200]	; (800b6f8 <__ieee754_pow+0x778>)
 800b62e:	4413      	add	r3, r2
 800b630:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b634:	4606      	mov	r6, r0
 800b636:	460f      	mov	r7, r1
 800b638:	4652      	mov	r2, sl
 800b63a:	465b      	mov	r3, fp
 800b63c:	ec51 0b18 	vmov	r0, r1, d8
 800b640:	f7f4 fe54 	bl	80002ec <__adddf3>
 800b644:	4642      	mov	r2, r8
 800b646:	464b      	mov	r3, r9
 800b648:	f7f4 fe50 	bl	80002ec <__adddf3>
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	f7f4 fe4c 	bl	80002ec <__adddf3>
 800b654:	2000      	movs	r0, #0
 800b656:	4632      	mov	r2, r6
 800b658:	463b      	mov	r3, r7
 800b65a:	4604      	mov	r4, r0
 800b65c:	460d      	mov	r5, r1
 800b65e:	f7f4 fe43 	bl	80002e8 <__aeabi_dsub>
 800b662:	4642      	mov	r2, r8
 800b664:	464b      	mov	r3, r9
 800b666:	f7f4 fe3f 	bl	80002e8 <__aeabi_dsub>
 800b66a:	ec53 2b18 	vmov	r2, r3, d8
 800b66e:	f7f4 fe3b 	bl	80002e8 <__aeabi_dsub>
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	4650      	mov	r0, sl
 800b678:	4659      	mov	r1, fp
 800b67a:	e610      	b.n	800b29e <__ieee754_pow+0x31e>
 800b67c:	2401      	movs	r4, #1
 800b67e:	e6a1      	b.n	800b3c4 <__ieee754_pow+0x444>
 800b680:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b6d0 <__ieee754_pow+0x750>
 800b684:	e617      	b.n	800b2b6 <__ieee754_pow+0x336>
 800b686:	bf00      	nop
 800b688:	4a454eef 	.word	0x4a454eef
 800b68c:	3fca7e28 	.word	0x3fca7e28
 800b690:	93c9db65 	.word	0x93c9db65
 800b694:	3fcd864a 	.word	0x3fcd864a
 800b698:	a91d4101 	.word	0xa91d4101
 800b69c:	3fd17460 	.word	0x3fd17460
 800b6a0:	518f264d 	.word	0x518f264d
 800b6a4:	3fd55555 	.word	0x3fd55555
 800b6a8:	db6fabff 	.word	0xdb6fabff
 800b6ac:	3fdb6db6 	.word	0x3fdb6db6
 800b6b0:	33333303 	.word	0x33333303
 800b6b4:	3fe33333 	.word	0x3fe33333
 800b6b8:	e0000000 	.word	0xe0000000
 800b6bc:	3feec709 	.word	0x3feec709
 800b6c0:	dc3a03fd 	.word	0xdc3a03fd
 800b6c4:	3feec709 	.word	0x3feec709
 800b6c8:	145b01f5 	.word	0x145b01f5
 800b6cc:	be3e2fe0 	.word	0xbe3e2fe0
 800b6d0:	00000000 	.word	0x00000000
 800b6d4:	3ff00000 	.word	0x3ff00000
 800b6d8:	7ff00000 	.word	0x7ff00000
 800b6dc:	43400000 	.word	0x43400000
 800b6e0:	0003988e 	.word	0x0003988e
 800b6e4:	000bb679 	.word	0x000bb679
 800b6e8:	0800c340 	.word	0x0800c340
 800b6ec:	3ff00000 	.word	0x3ff00000
 800b6f0:	40080000 	.word	0x40080000
 800b6f4:	0800c360 	.word	0x0800c360
 800b6f8:	0800c350 	.word	0x0800c350
 800b6fc:	a3b5      	add	r3, pc, #724	; (adr r3, 800b9d4 <__ieee754_pow+0xa54>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	4640      	mov	r0, r8
 800b704:	4649      	mov	r1, r9
 800b706:	f7f4 fdf1 	bl	80002ec <__adddf3>
 800b70a:	4622      	mov	r2, r4
 800b70c:	ec41 0b1a 	vmov	d10, r0, r1
 800b710:	462b      	mov	r3, r5
 800b712:	4630      	mov	r0, r6
 800b714:	4639      	mov	r1, r7
 800b716:	f7f4 fde7 	bl	80002e8 <__aeabi_dsub>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	ec51 0b1a 	vmov	r0, r1, d10
 800b722:	f7f5 fa29 	bl	8000b78 <__aeabi_dcmpgt>
 800b726:	2800      	cmp	r0, #0
 800b728:	f47f ae04 	bne.w	800b334 <__ieee754_pow+0x3b4>
 800b72c:	4aa4      	ldr	r2, [pc, #656]	; (800b9c0 <__ieee754_pow+0xa40>)
 800b72e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b732:	4293      	cmp	r3, r2
 800b734:	f340 8108 	ble.w	800b948 <__ieee754_pow+0x9c8>
 800b738:	151b      	asrs	r3, r3, #20
 800b73a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b73e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b742:	fa4a f303 	asr.w	r3, sl, r3
 800b746:	445b      	add	r3, fp
 800b748:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b74c:	4e9d      	ldr	r6, [pc, #628]	; (800b9c4 <__ieee754_pow+0xa44>)
 800b74e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b752:	4116      	asrs	r6, r2
 800b754:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b758:	2000      	movs	r0, #0
 800b75a:	ea23 0106 	bic.w	r1, r3, r6
 800b75e:	f1c2 0214 	rsb	r2, r2, #20
 800b762:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b766:	fa4a fa02 	asr.w	sl, sl, r2
 800b76a:	f1bb 0f00 	cmp.w	fp, #0
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4620      	mov	r0, r4
 800b774:	4629      	mov	r1, r5
 800b776:	bfb8      	it	lt
 800b778:	f1ca 0a00 	rsblt	sl, sl, #0
 800b77c:	f7f4 fdb4 	bl	80002e8 <__aeabi_dsub>
 800b780:	ec41 0b19 	vmov	d9, r0, r1
 800b784:	4642      	mov	r2, r8
 800b786:	464b      	mov	r3, r9
 800b788:	ec51 0b19 	vmov	r0, r1, d9
 800b78c:	f7f4 fdae 	bl	80002ec <__adddf3>
 800b790:	a37b      	add	r3, pc, #492	; (adr r3, 800b980 <__ieee754_pow+0xa00>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	2000      	movs	r0, #0
 800b798:	4604      	mov	r4, r0
 800b79a:	460d      	mov	r5, r1
 800b79c:	f7f4 ff5c 	bl	8000658 <__aeabi_dmul>
 800b7a0:	ec53 2b19 	vmov	r2, r3, d9
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	460f      	mov	r7, r1
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	f7f4 fd9c 	bl	80002e8 <__aeabi_dsub>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	f7f4 fd96 	bl	80002e8 <__aeabi_dsub>
 800b7bc:	a372      	add	r3, pc, #456	; (adr r3, 800b988 <__ieee754_pow+0xa08>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	f7f4 ff49 	bl	8000658 <__aeabi_dmul>
 800b7c6:	a372      	add	r3, pc, #456	; (adr r3, 800b990 <__ieee754_pow+0xa10>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	4680      	mov	r8, r0
 800b7ce:	4689      	mov	r9, r1
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f4 ff40 	bl	8000658 <__aeabi_dmul>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4649      	mov	r1, r9
 800b7e0:	f7f4 fd84 	bl	80002ec <__adddf3>
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	f7f4 fd7c 	bl	80002ec <__adddf3>
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	463b      	mov	r3, r7
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	4689      	mov	r9, r1
 800b7fc:	f7f4 fd74 	bl	80002e8 <__aeabi_dsub>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fd6e 	bl	80002e8 <__aeabi_dsub>
 800b80c:	4642      	mov	r2, r8
 800b80e:	4606      	mov	r6, r0
 800b810:	460f      	mov	r7, r1
 800b812:	464b      	mov	r3, r9
 800b814:	4640      	mov	r0, r8
 800b816:	4649      	mov	r1, r9
 800b818:	f7f4 ff1e 	bl	8000658 <__aeabi_dmul>
 800b81c:	a35e      	add	r3, pc, #376	; (adr r3, 800b998 <__ieee754_pow+0xa18>)
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	4604      	mov	r4, r0
 800b824:	460d      	mov	r5, r1
 800b826:	f7f4 ff17 	bl	8000658 <__aeabi_dmul>
 800b82a:	a35d      	add	r3, pc, #372	; (adr r3, 800b9a0 <__ieee754_pow+0xa20>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f7f4 fd5a 	bl	80002e8 <__aeabi_dsub>
 800b834:	4622      	mov	r2, r4
 800b836:	462b      	mov	r3, r5
 800b838:	f7f4 ff0e 	bl	8000658 <__aeabi_dmul>
 800b83c:	a35a      	add	r3, pc, #360	; (adr r3, 800b9a8 <__ieee754_pow+0xa28>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f7f4 fd53 	bl	80002ec <__adddf3>
 800b846:	4622      	mov	r2, r4
 800b848:	462b      	mov	r3, r5
 800b84a:	f7f4 ff05 	bl	8000658 <__aeabi_dmul>
 800b84e:	a358      	add	r3, pc, #352	; (adr r3, 800b9b0 <__ieee754_pow+0xa30>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	f7f4 fd48 	bl	80002e8 <__aeabi_dsub>
 800b858:	4622      	mov	r2, r4
 800b85a:	462b      	mov	r3, r5
 800b85c:	f7f4 fefc 	bl	8000658 <__aeabi_dmul>
 800b860:	a355      	add	r3, pc, #340	; (adr r3, 800b9b8 <__ieee754_pow+0xa38>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f7f4 fd41 	bl	80002ec <__adddf3>
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	f7f4 fef3 	bl	8000658 <__aeabi_dmul>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	4640      	mov	r0, r8
 800b878:	4649      	mov	r1, r9
 800b87a:	f7f4 fd35 	bl	80002e8 <__aeabi_dsub>
 800b87e:	4604      	mov	r4, r0
 800b880:	460d      	mov	r5, r1
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	f7f4 fee5 	bl	8000658 <__aeabi_dmul>
 800b88e:	2200      	movs	r2, #0
 800b890:	ec41 0b19 	vmov	d9, r0, r1
 800b894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b898:	4620      	mov	r0, r4
 800b89a:	4629      	mov	r1, r5
 800b89c:	f7f4 fd24 	bl	80002e8 <__aeabi_dsub>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	ec51 0b19 	vmov	r0, r1, d9
 800b8a8:	f7f5 f800 	bl	80008ac <__aeabi_ddiv>
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	463b      	mov	r3, r7
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	4649      	mov	r1, r9
 800b8b8:	f7f4 fece 	bl	8000658 <__aeabi_dmul>
 800b8bc:	4632      	mov	r2, r6
 800b8be:	463b      	mov	r3, r7
 800b8c0:	f7f4 fd14 	bl	80002ec <__adddf3>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f7f4 fd0c 	bl	80002e8 <__aeabi_dsub>
 800b8d0:	4642      	mov	r2, r8
 800b8d2:	464b      	mov	r3, r9
 800b8d4:	f7f4 fd08 	bl	80002e8 <__aeabi_dsub>
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4602      	mov	r2, r0
 800b8dc:	493a      	ldr	r1, [pc, #232]	; (800b9c8 <__ieee754_pow+0xa48>)
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f7f4 fd02 	bl	80002e8 <__aeabi_dsub>
 800b8e4:	ec41 0b10 	vmov	d0, r0, r1
 800b8e8:	ee10 3a90 	vmov	r3, s1
 800b8ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b8f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8f4:	da2b      	bge.n	800b94e <__ieee754_pow+0x9ce>
 800b8f6:	4650      	mov	r0, sl
 800b8f8:	f000 f966 	bl	800bbc8 <scalbn>
 800b8fc:	ec51 0b10 	vmov	r0, r1, d0
 800b900:	ec53 2b18 	vmov	r2, r3, d8
 800b904:	f7ff bbed 	b.w	800b0e2 <__ieee754_pow+0x162>
 800b908:	4b30      	ldr	r3, [pc, #192]	; (800b9cc <__ieee754_pow+0xa4c>)
 800b90a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b90e:	429e      	cmp	r6, r3
 800b910:	f77f af0c 	ble.w	800b72c <__ieee754_pow+0x7ac>
 800b914:	4b2e      	ldr	r3, [pc, #184]	; (800b9d0 <__ieee754_pow+0xa50>)
 800b916:	440b      	add	r3, r1
 800b918:	4303      	orrs	r3, r0
 800b91a:	d009      	beq.n	800b930 <__ieee754_pow+0x9b0>
 800b91c:	ec51 0b18 	vmov	r0, r1, d8
 800b920:	2200      	movs	r2, #0
 800b922:	2300      	movs	r3, #0
 800b924:	f7f5 f90a 	bl	8000b3c <__aeabi_dcmplt>
 800b928:	3800      	subs	r0, #0
 800b92a:	bf18      	it	ne
 800b92c:	2001      	movne	r0, #1
 800b92e:	e447      	b.n	800b1c0 <__ieee754_pow+0x240>
 800b930:	4622      	mov	r2, r4
 800b932:	462b      	mov	r3, r5
 800b934:	f7f4 fcd8 	bl	80002e8 <__aeabi_dsub>
 800b938:	4642      	mov	r2, r8
 800b93a:	464b      	mov	r3, r9
 800b93c:	f7f5 f912 	bl	8000b64 <__aeabi_dcmpge>
 800b940:	2800      	cmp	r0, #0
 800b942:	f43f aef3 	beq.w	800b72c <__ieee754_pow+0x7ac>
 800b946:	e7e9      	b.n	800b91c <__ieee754_pow+0x99c>
 800b948:	f04f 0a00 	mov.w	sl, #0
 800b94c:	e71a      	b.n	800b784 <__ieee754_pow+0x804>
 800b94e:	ec51 0b10 	vmov	r0, r1, d0
 800b952:	4619      	mov	r1, r3
 800b954:	e7d4      	b.n	800b900 <__ieee754_pow+0x980>
 800b956:	491c      	ldr	r1, [pc, #112]	; (800b9c8 <__ieee754_pow+0xa48>)
 800b958:	2000      	movs	r0, #0
 800b95a:	f7ff bb30 	b.w	800afbe <__ieee754_pow+0x3e>
 800b95e:	2000      	movs	r0, #0
 800b960:	2100      	movs	r1, #0
 800b962:	f7ff bb2c 	b.w	800afbe <__ieee754_pow+0x3e>
 800b966:	4630      	mov	r0, r6
 800b968:	4639      	mov	r1, r7
 800b96a:	f7ff bb28 	b.w	800afbe <__ieee754_pow+0x3e>
 800b96e:	9204      	str	r2, [sp, #16]
 800b970:	f7ff bb7a 	b.w	800b068 <__ieee754_pow+0xe8>
 800b974:	2300      	movs	r3, #0
 800b976:	f7ff bb64 	b.w	800b042 <__ieee754_pow+0xc2>
 800b97a:	bf00      	nop
 800b97c:	f3af 8000 	nop.w
 800b980:	00000000 	.word	0x00000000
 800b984:	3fe62e43 	.word	0x3fe62e43
 800b988:	fefa39ef 	.word	0xfefa39ef
 800b98c:	3fe62e42 	.word	0x3fe62e42
 800b990:	0ca86c39 	.word	0x0ca86c39
 800b994:	be205c61 	.word	0xbe205c61
 800b998:	72bea4d0 	.word	0x72bea4d0
 800b99c:	3e663769 	.word	0x3e663769
 800b9a0:	c5d26bf1 	.word	0xc5d26bf1
 800b9a4:	3ebbbd41 	.word	0x3ebbbd41
 800b9a8:	af25de2c 	.word	0xaf25de2c
 800b9ac:	3f11566a 	.word	0x3f11566a
 800b9b0:	16bebd93 	.word	0x16bebd93
 800b9b4:	3f66c16c 	.word	0x3f66c16c
 800b9b8:	5555553e 	.word	0x5555553e
 800b9bc:	3fc55555 	.word	0x3fc55555
 800b9c0:	3fe00000 	.word	0x3fe00000
 800b9c4:	000fffff 	.word	0x000fffff
 800b9c8:	3ff00000 	.word	0x3ff00000
 800b9cc:	4090cbff 	.word	0x4090cbff
 800b9d0:	3f6f3400 	.word	0x3f6f3400
 800b9d4:	652b82fe 	.word	0x652b82fe
 800b9d8:	3c971547 	.word	0x3c971547

0800b9dc <__ieee754_sqrt>:
 800b9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e0:	ec55 4b10 	vmov	r4, r5, d0
 800b9e4:	4e55      	ldr	r6, [pc, #340]	; (800bb3c <__ieee754_sqrt+0x160>)
 800b9e6:	43ae      	bics	r6, r5
 800b9e8:	ee10 0a10 	vmov	r0, s0
 800b9ec:	ee10 3a10 	vmov	r3, s0
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	d110      	bne.n	800ba18 <__ieee754_sqrt+0x3c>
 800b9f6:	ee10 2a10 	vmov	r2, s0
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	f7f4 fe2c 	bl	8000658 <__aeabi_dmul>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f7f4 fc70 	bl	80002ec <__adddf3>
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	ec45 4b10 	vmov	d0, r4, r5
 800ba14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	dc10      	bgt.n	800ba3e <__ieee754_sqrt+0x62>
 800ba1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba20:	4330      	orrs	r0, r6
 800ba22:	d0f5      	beq.n	800ba10 <__ieee754_sqrt+0x34>
 800ba24:	b15d      	cbz	r5, 800ba3e <__ieee754_sqrt+0x62>
 800ba26:	ee10 2a10 	vmov	r2, s0
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	ee10 0a10 	vmov	r0, s0
 800ba30:	f7f4 fc5a 	bl	80002e8 <__aeabi_dsub>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	f7f4 ff38 	bl	80008ac <__aeabi_ddiv>
 800ba3c:	e7e6      	b.n	800ba0c <__ieee754_sqrt+0x30>
 800ba3e:	1512      	asrs	r2, r2, #20
 800ba40:	d074      	beq.n	800bb2c <__ieee754_sqrt+0x150>
 800ba42:	07d4      	lsls	r4, r2, #31
 800ba44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ba48:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ba4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ba50:	bf5e      	ittt	pl
 800ba52:	0fda      	lsrpl	r2, r3, #31
 800ba54:	005b      	lslpl	r3, r3, #1
 800ba56:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ba5a:	2400      	movs	r4, #0
 800ba5c:	0fda      	lsrs	r2, r3, #31
 800ba5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ba62:	107f      	asrs	r7, r7, #1
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	2516      	movs	r5, #22
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ba6e:	1886      	adds	r6, r0, r2
 800ba70:	428e      	cmp	r6, r1
 800ba72:	bfde      	ittt	le
 800ba74:	1b89      	suble	r1, r1, r6
 800ba76:	18b0      	addle	r0, r6, r2
 800ba78:	18a4      	addle	r4, r4, r2
 800ba7a:	0049      	lsls	r1, r1, #1
 800ba7c:	3d01      	subs	r5, #1
 800ba7e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ba82:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ba86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba8a:	d1f0      	bne.n	800ba6e <__ieee754_sqrt+0x92>
 800ba8c:	462a      	mov	r2, r5
 800ba8e:	f04f 0e20 	mov.w	lr, #32
 800ba92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ba96:	4281      	cmp	r1, r0
 800ba98:	eb06 0c05 	add.w	ip, r6, r5
 800ba9c:	dc02      	bgt.n	800baa4 <__ieee754_sqrt+0xc8>
 800ba9e:	d113      	bne.n	800bac8 <__ieee754_sqrt+0xec>
 800baa0:	459c      	cmp	ip, r3
 800baa2:	d811      	bhi.n	800bac8 <__ieee754_sqrt+0xec>
 800baa4:	f1bc 0f00 	cmp.w	ip, #0
 800baa8:	eb0c 0506 	add.w	r5, ip, r6
 800baac:	da43      	bge.n	800bb36 <__ieee754_sqrt+0x15a>
 800baae:	2d00      	cmp	r5, #0
 800bab0:	db41      	blt.n	800bb36 <__ieee754_sqrt+0x15a>
 800bab2:	f100 0801 	add.w	r8, r0, #1
 800bab6:	1a09      	subs	r1, r1, r0
 800bab8:	459c      	cmp	ip, r3
 800baba:	bf88      	it	hi
 800babc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800bac0:	eba3 030c 	sub.w	r3, r3, ip
 800bac4:	4432      	add	r2, r6
 800bac6:	4640      	mov	r0, r8
 800bac8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bacc:	f1be 0e01 	subs.w	lr, lr, #1
 800bad0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bad8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800badc:	d1db      	bne.n	800ba96 <__ieee754_sqrt+0xba>
 800bade:	430b      	orrs	r3, r1
 800bae0:	d006      	beq.n	800baf0 <__ieee754_sqrt+0x114>
 800bae2:	1c50      	adds	r0, r2, #1
 800bae4:	bf13      	iteet	ne
 800bae6:	3201      	addne	r2, #1
 800bae8:	3401      	addeq	r4, #1
 800baea:	4672      	moveq	r2, lr
 800baec:	f022 0201 	bicne.w	r2, r2, #1
 800baf0:	1063      	asrs	r3, r4, #1
 800baf2:	0852      	lsrs	r2, r2, #1
 800baf4:	07e1      	lsls	r1, r4, #31
 800baf6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bafa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bafe:	bf48      	it	mi
 800bb00:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bb04:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bb08:	4614      	mov	r4, r2
 800bb0a:	e781      	b.n	800ba10 <__ieee754_sqrt+0x34>
 800bb0c:	0ad9      	lsrs	r1, r3, #11
 800bb0e:	3815      	subs	r0, #21
 800bb10:	055b      	lsls	r3, r3, #21
 800bb12:	2900      	cmp	r1, #0
 800bb14:	d0fa      	beq.n	800bb0c <__ieee754_sqrt+0x130>
 800bb16:	02cd      	lsls	r5, r1, #11
 800bb18:	d50a      	bpl.n	800bb30 <__ieee754_sqrt+0x154>
 800bb1a:	f1c2 0420 	rsb	r4, r2, #32
 800bb1e:	fa23 f404 	lsr.w	r4, r3, r4
 800bb22:	1e55      	subs	r5, r2, #1
 800bb24:	4093      	lsls	r3, r2
 800bb26:	4321      	orrs	r1, r4
 800bb28:	1b42      	subs	r2, r0, r5
 800bb2a:	e78a      	b.n	800ba42 <__ieee754_sqrt+0x66>
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	e7f0      	b.n	800bb12 <__ieee754_sqrt+0x136>
 800bb30:	0049      	lsls	r1, r1, #1
 800bb32:	3201      	adds	r2, #1
 800bb34:	e7ef      	b.n	800bb16 <__ieee754_sqrt+0x13a>
 800bb36:	4680      	mov	r8, r0
 800bb38:	e7bd      	b.n	800bab6 <__ieee754_sqrt+0xda>
 800bb3a:	bf00      	nop
 800bb3c:	7ff00000 	.word	0x7ff00000

0800bb40 <with_errno>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	4604      	mov	r4, r0
 800bb44:	460d      	mov	r5, r1
 800bb46:	4616      	mov	r6, r2
 800bb48:	f7fa fc6a 	bl	8006420 <__errno>
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	6006      	str	r6, [r0, #0]
 800bb50:	4620      	mov	r0, r4
 800bb52:	bd70      	pop	{r4, r5, r6, pc}

0800bb54 <xflow>:
 800bb54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb56:	4614      	mov	r4, r2
 800bb58:	461d      	mov	r5, r3
 800bb5a:	b108      	cbz	r0, 800bb60 <xflow+0xc>
 800bb5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb60:	e9cd 2300 	strd	r2, r3, [sp]
 800bb64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb68:	4620      	mov	r0, r4
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f7f4 fd74 	bl	8000658 <__aeabi_dmul>
 800bb70:	2222      	movs	r2, #34	; 0x22
 800bb72:	b003      	add	sp, #12
 800bb74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb78:	f7ff bfe2 	b.w	800bb40 <with_errno>

0800bb7c <__math_uflow>:
 800bb7c:	b508      	push	{r3, lr}
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb84:	f7ff ffe6 	bl	800bb54 <xflow>
 800bb88:	ec41 0b10 	vmov	d0, r0, r1
 800bb8c:	bd08      	pop	{r3, pc}

0800bb8e <__math_oflow>:
 800bb8e:	b508      	push	{r3, lr}
 800bb90:	2200      	movs	r2, #0
 800bb92:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bb96:	f7ff ffdd 	bl	800bb54 <xflow>
 800bb9a:	ec41 0b10 	vmov	d0, r0, r1
 800bb9e:	bd08      	pop	{r3, pc}

0800bba0 <fabs>:
 800bba0:	ec51 0b10 	vmov	r0, r1, d0
 800bba4:	ee10 2a10 	vmov	r2, s0
 800bba8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bbac:	ec43 2b10 	vmov	d0, r2, r3
 800bbb0:	4770      	bx	lr

0800bbb2 <finite>:
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	ed8d 0b00 	vstr	d0, [sp]
 800bbb8:	9801      	ldr	r0, [sp, #4]
 800bbba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bbbe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bbc2:	0fc0      	lsrs	r0, r0, #31
 800bbc4:	b002      	add	sp, #8
 800bbc6:	4770      	bx	lr

0800bbc8 <scalbn>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	ec55 4b10 	vmov	r4, r5, d0
 800bbce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	b99a      	cbnz	r2, 800bc00 <scalbn+0x38>
 800bbd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bbdc:	4323      	orrs	r3, r4
 800bbde:	d036      	beq.n	800bc4e <scalbn+0x86>
 800bbe0:	4b39      	ldr	r3, [pc, #228]	; (800bcc8 <scalbn+0x100>)
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	ee10 0a10 	vmov	r0, s0
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f7f4 fd35 	bl	8000658 <__aeabi_dmul>
 800bbee:	4b37      	ldr	r3, [pc, #220]	; (800bccc <scalbn+0x104>)
 800bbf0:	429e      	cmp	r6, r3
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	460d      	mov	r5, r1
 800bbf6:	da10      	bge.n	800bc1a <scalbn+0x52>
 800bbf8:	a32b      	add	r3, pc, #172	; (adr r3, 800bca8 <scalbn+0xe0>)
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	e03a      	b.n	800bc76 <scalbn+0xae>
 800bc00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bc04:	428a      	cmp	r2, r1
 800bc06:	d10c      	bne.n	800bc22 <scalbn+0x5a>
 800bc08:	ee10 2a10 	vmov	r2, s0
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f4 fb6c 	bl	80002ec <__adddf3>
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	e019      	b.n	800bc4e <scalbn+0x86>
 800bc1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bc1e:	460b      	mov	r3, r1
 800bc20:	3a36      	subs	r2, #54	; 0x36
 800bc22:	4432      	add	r2, r6
 800bc24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bc28:	428a      	cmp	r2, r1
 800bc2a:	dd08      	ble.n	800bc3e <scalbn+0x76>
 800bc2c:	2d00      	cmp	r5, #0
 800bc2e:	a120      	add	r1, pc, #128	; (adr r1, 800bcb0 <scalbn+0xe8>)
 800bc30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc34:	da1c      	bge.n	800bc70 <scalbn+0xa8>
 800bc36:	a120      	add	r1, pc, #128	; (adr r1, 800bcb8 <scalbn+0xf0>)
 800bc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3c:	e018      	b.n	800bc70 <scalbn+0xa8>
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	dd08      	ble.n	800bc54 <scalbn+0x8c>
 800bc42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc4e:	ec45 4b10 	vmov	d0, r4, r5
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
 800bc54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bc58:	da19      	bge.n	800bc8e <scalbn+0xc6>
 800bc5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc5e:	429e      	cmp	r6, r3
 800bc60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bc64:	dd0a      	ble.n	800bc7c <scalbn+0xb4>
 800bc66:	a112      	add	r1, pc, #72	; (adr r1, 800bcb0 <scalbn+0xe8>)
 800bc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e2      	bne.n	800bc36 <scalbn+0x6e>
 800bc70:	a30f      	add	r3, pc, #60	; (adr r3, 800bcb0 <scalbn+0xe8>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f7f4 fcef 	bl	8000658 <__aeabi_dmul>
 800bc7a:	e7cb      	b.n	800bc14 <scalbn+0x4c>
 800bc7c:	a10a      	add	r1, pc, #40	; (adr r1, 800bca8 <scalbn+0xe0>)
 800bc7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0b8      	beq.n	800bbf8 <scalbn+0x30>
 800bc86:	a10e      	add	r1, pc, #56	; (adr r1, 800bcc0 <scalbn+0xf8>)
 800bc88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc8c:	e7b4      	b.n	800bbf8 <scalbn+0x30>
 800bc8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc92:	3236      	adds	r2, #54	; 0x36
 800bc94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4b0c      	ldr	r3, [pc, #48]	; (800bcd0 <scalbn+0x108>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	e7e8      	b.n	800bc76 <scalbn+0xae>
 800bca4:	f3af 8000 	nop.w
 800bca8:	c2f8f359 	.word	0xc2f8f359
 800bcac:	01a56e1f 	.word	0x01a56e1f
 800bcb0:	8800759c 	.word	0x8800759c
 800bcb4:	7e37e43c 	.word	0x7e37e43c
 800bcb8:	8800759c 	.word	0x8800759c
 800bcbc:	fe37e43c 	.word	0xfe37e43c
 800bcc0:	c2f8f359 	.word	0xc2f8f359
 800bcc4:	81a56e1f 	.word	0x81a56e1f
 800bcc8:	43500000 	.word	0x43500000
 800bccc:	ffff3cb0 	.word	0xffff3cb0
 800bcd0:	3c900000 	.word	0x3c900000

0800bcd4 <_init>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	bf00      	nop
 800bcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	469e      	mov	lr, r3
 800bcde:	4770      	bx	lr

0800bce0 <_fini>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	bf00      	nop
 800bce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce6:	bc08      	pop	{r3}
 800bce8:	469e      	mov	lr, r3
 800bcea:	4770      	bx	lr
